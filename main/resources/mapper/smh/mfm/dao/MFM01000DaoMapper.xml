<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.mfm.dao.MFM01000Dao">
	
	<!--
	프 로 그 램 명	: 생산관리 > 생산계획 > Tack Time 등록
	설		명	: 품목, 공정별 Tack Time 조회
	작	성	자	: 정승원 
	작	성	일	: 2019-09-18
	주요 변경 로그	: 2019-11-06 표준 LEAD TIME 추가
				  2020-05-18 쿼리 속도로 인한 쿼리 수정(김기수)	
	-->
	<select id="selectDeliveryList" parameterType="map" resultType="hashmap">
		
	SELECT
			A.*
		,	DC.DICTIONARYNAME 			AS STATUSNAME
	FROM(
	SELECT
				WIP.PLANTID
			,	WIP.LOTTYPE
			,	WIP.CUSTOMERID
			,	WIP.CUSTOMERNAME
			,	WIP.PRODUCTDEFID
			,	WIP.PRODUCTDEFVERSION
			,	WIP.PRODUCTDEFNAME
			,	WIP.LOTID
			,	WIP.USERSEQUENCE
			,	WIP.PROCESSSEGMENTNAME
			,	WIP.AREANAME
			,	WIP.RTRSHT
			,	WIP.ISHOLD
			,	WIP.QTY
			,	WIP.PANELQTY
			,	WIP.MM
			,	WIP.DUEDATE
			,	WIP.EXPECTEDCOMPLETEDATE
			,	WIP.ROOTLOTSTARTDATE		AS INPUTDAY
			,	WIP.LEFTDATE
			,	WIP.STANDARD_CUM_LEADTIME
			,	ROUND(WIP.WORKVACCUMLT,2)	AS WORK_CUM_LEADTIME
			, 	ROUND(WIP.WORKVACCUMLT,2) - WIP.STANDARD_CUM_LEADTIME AS DIFFERENCE_LEADTIME
			,	WIP.MAX_PATHSEQUENCE - WIP.PATHSEQUENCE			AS REMAINSEGMENT_COUNT
			,	WIP.REMAIN_LEADTIME
			,	CASE WHEN (WIP.STANDARD_CUM_LEADTIME - WIP.WORKVACCUMLT ) <![CDATA[ < ]]> 0 THEN 'Urgency'
					ELSE 'Normal'
				END						AS STATUS 
			,	WIP.WIPPROCESSSTATE
			,	DC.DICTIONARYNAME		AS WIPPROCESSSTATENAME
		FROM
		(
			SELECT
					L.PLANTID
				,	COALESCE(SD1.DICTIONARYNAME,L.LOTTYPE)				AS LOTTYPE
				,	PD.CUSTOMERID
				,	CM.CUSTOMERNAME
				,	PD.PRODUCTDEFID
				,	PD.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	L.LOTID
				,	L.USERSEQUENCE
				,	COALESCE(SD2.DICTIONARYNAME, PS.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
				,	COALESCE(SD3.DICTIONARYNAME, L.AREAID)				AS AREANAME
				,	PD.RTRSHT
				,	L.ISHOLD
				,	L.QTY
				,	CEIL(L.QTY / PD.PCSPNL)							AS PANELQTY
				,	TO_NUMBER(TO_CHAR(L.QTY/ CASE WHEN PD.PCSMM = 0 THEN NULL ELSE PD.PCSMM END,'FM999999999.00'))		AS MM
				,	TO_CHAR(L.DUEDATE,'YYYY-MM-DD')						AS DUEDATE
				,	TO_CHAR(L.EXPECTEDCOMPLETEDATE,'YYYY-MM-DD')		AS EXPECTEDCOMPLETEDATE
				,	TO_CHAR(L.ROOTLOTSTARTDATE, 'YYYY-MM-DD')			AS ROOTLOTSTARTDATE
				,	TO_NUMBER(EXTRACT(DAY FROM (CURRENT_TIMESTAMP - L.DUEDATE)))	AS LEFTDATE
				,	((TO_NUMBER(EXTRACT(DAY FROM (CURRENT_TIMESTAMP - L.ROOTLOTSTARTDATE))*1440))
					+ (TO_NUMBER(EXTRACT(HOUR FROM(CURRENT_TIMESTAMP-L.ROOTLOTSTARTDATE)*60))))/1440 	AS WORKVACCUMLT
				,	(
					
						SELECT
								COALESCE(ROUND(SUM(STDLEADTIME)/86400*60,2),0)
						FROM	PCM_TACKTIMEMANAGE
						WHERE	PRODUCTDEFID = L.PRODUCTDEFID
						AND		PRODUCTDEFVERSION = L.PRODUCTDEFVERSION
						AND		TO_NUMBER(USERSEQUENCE) <![CDATA[ <= ]]> TO_NUMBER(L.USERSEQUENCE)
					
					)							AS STANDARD_CUM_LEADTIME
				, 	(
						
						SELECT
								COALESCE(ROUND(SUM(STDLEADTIME)/86400*60,2),0)
						FROM	PCM_TACKTIMEMANAGE
						WHERE	PRODUCTDEFID = L.PRODUCTDEFID
						AND		PRODUCTDEFVERSION = L.PRODUCTDEFVERSION
						AND		TO_NUMBER(USERSEQUENCE) <![CDATA[ > ]]> TO_NUMBER(L.USERSEQUENCE)
					
					)							AS REMAIN_LEADTIME
				,	(
						
						SELECT
							MAX(PATHSEQUENCE)	AS MAX_PATHSEQUENCE
						FROM	BAS_PROCESSPATH
						WHERE PROCESSDEFID = L.PROCESSDEFID
						AND	PROCESSDEFVERSION = L.PROCESSDEFVERSION
						AND VALIDSTATE='Valid'
						
					)							AS MAX_PATHSEQUENCE
				,	PP.PATHSEQUENCE
				,	CASE WHEN L.PROCESSSTATE = 'WaitForReceive'	THEN 'WaitForReceive'
						WHEN L.PROCESSSTATE = 'Wait'			THEN 'Receive'
						WHEN L.PROCESSSTATE = 'Run'				THEN 'WorkStart'
						WHEN L.PROCESSSTATE = 'WaitForSend'     THEN 'WorkEnd'
					END	AS WIPPROCESSSTATE
			FROM	PCM_LOT		L
			LEFT OUTER JOIN		BAS_PRODUCTDEFINITION	PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
															AND	L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN		BAS_CUSTOMER			CM	ON	PD.CUSTOMERID = CM.CUSTOMERID
			LEFT OUTER JOIN		CMD_LOOKUP_VALUES		LV1	ON	L.LOTTYPE = LV1.LOOKUP_CODE
															AND	LV1.LOOKUP_TYPE = 'ProductionType'
			LEFT OUTER JOIN		CMD_DICTIONARY			SD1	ON	LV1.DICTIONARYID = SD1.DICTIONARYID
															AND	SD1.LANGUAGETYPE = #{LANGUAGETYPE}
			LEFT OUTER JOIN		BAS_PROCESSSEGMENT		PS	ON	L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
			LEFT OUTER JOIN		CMD_DICTIONARY			SD2	ON	PS.PROCESSSEGMENTNAME = SD2.DICTIONARYID
															AND	SD2.LANGUAGETYPE = #{LANGUAGETYPE}
			LEFT OUTER JOIN		BAS_AREA				AR	ON	L.AREAID = AR.AREAID
															AND	L.PLANTID = AR.PLANTID
			LEFT OUTER JOIN		CMD_DICTIONARY			SD3 ON	AR.AREANAME = SD3.DICTIONARYID
															AND	SD3.LANGUAGETYPE = #{LANGUAGETYPE}
			LEFT OUTER JOIN		BAS_PROCESSPATH	PP			ON	L.PROCESSDEFID = PP.PROCESSDEFID
															AND L.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
															AND L.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
															AND PP.VALIDSTATE='Valid'
			WHERE 1=1
				/*AND COALESCE(L.ISREPRESENTROLLLOT,'N') != 'Y'*/
				AND L.LOTSTATE IN ('InProduction','InTransit')
				AND COALESCE(L.ISDEFECTED,'N') = 'N'
				AND	PD.PRODUCTDEFTYPE = 'Product'
				
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !='' ">
					AND EXISTS (
						SELECT 1
						FROM ufn_selectStringToSplit(#{PRODUCTDEFID},',')	MAP
						WHERE L.PRODUCTDEFID = MAP.VALUE
					)
				</if>
				
				<if test="LOTID != null and LOTID !='' ">
					AND EXISTS (
						SELECT 1
						FROM ufn_selectStringToSplit(#{LOTID},',')	MPD
						WHERE L.LOTID = MPD.VALUE
					)
				</if>
				
				<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' ">
					AND L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if>
			
				<if test="CUSTOMERID != null and CUSTOMERID !='' ">
					AND PD.CUSTOMERID = #{CUSTOMERID}
				</if>
				
				<if test="PLANTID != null and PLANTID !='' ">
					AND L.PLANTID = #{PLANTID}
				</if>
				
				<if test="ISHOLD != null and ISHOLD !='' ">
					AND L.ISHOLD = #{ISHOLD}
				</if>
				<if test="ISLOCKING != null and ISLOCKING !='' ">
					AND L.ISLOCKING = #{ISLOCKING}
				</if>
				
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !='' ">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}
				</if>
				
				<if test="RTRSHT != null and RTRSHT !='' ">
					AND PD.RTRSHT = #{RTRSHT}
				</if>
				
				<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' ">
					AND L.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
				</if>
		)WIP
		LEFT OUTER JOIN		CMD_LOOKUP_VALUES CD	ON	WIP.WIPPROCESSSTATE = CD.LOOKUP_CODE
												AND	CD.LOOKUP_TYPE = 'WipProcessState'
		LEFT OUTER JOIN		CMD_DICTIONARY	DC	ON	CD.DICTIONARYID = DC.DICTIONARYID
												AND	DC.LANGUAGETYPE = #{LANGUAGETYPE}	
		ORDER BY
				WIP.PRODUCTDEFID
			,	TO_NUMBER(WIP.USERSEQUENCE)
		) A
		LEFT OUTER JOIN		CMD_LOOKUP_VALUES CD	ON	A.STATUS = CD.LOOKUP_CODE
												AND	CD.LOOKUP_TYPE='EmergencyDegree' 
		LEFT OUTER JOIN		CMD_DICTIONARY	DC	ON	CD.DICTIONARYID = DC.DICTIONARYID
												AND	DC.LANGUAGETYPE = #{LANGUAGETYPE}
			
	</select>
	
	    <!-- lotData  DueDate Update  -->
    <update id="updateDueDateLot" parameterType="map">
    	UPDATE PCM_LOT	SET		/* updateDueDateLot */
    			DUEDATE = TO_DATE(#{DUEDATE},'YYYY-MM-DD')
    		,	MODIFIER = #{MODIFIER}
    		,	MODIFIEDTIME = SYSDATE
    		,	LASTTXNHISTKEY = #{LASTTXNHISTKEY}
    		,	LASTTXNID = #{LASTTXNID}
    		,	LASTTXNTIME = SYSDATE	
    	WHERE 1=1
    		AND LOTID = #{LOTID}
    </update>
	
	    <!-- ProductionOrderData  DueDate Update  -->
    <update id="updateDueDateProductionOrder" parameterType="map">
    	UPDATE MFM_PRODUCTIONORDER	SET		/* updateDueDateProductionOrder */
    			PLANENDTIME = TO_DATE(#{DUEDATE},'YYYY-MM-DD')
    		,	MODIFIER = #{MODIFIER}
    		,	MODIFIEDTIME = SYSDATE
    		,	LASTTXNHISTKEY = #{LASTTXNHISTKEY}
    		,	LASTTXNID = #{LASTTXNID}
    		,	LASTTXNTIME = SYSDATE	
    	WHERE 1=1
    		AND PRODUCTIONORDERID = #{PRODUCTIONORDERID}
    		AND	LINENO = #{LINENO}
    </update>
	
	
</mapper>
