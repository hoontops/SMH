<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.qam.dao.QAM01200Dao">
<!-- 품질규격 이상발생 정보-->

    <!-- 품질규격 이상발생 정보 조회 AS-IS : GetQualitySpecificationIssue ver. 10001-->
    <select id="selectQualitySpecificationIssueList" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAM01200Dao.selectQualitySpecificationIssueList  */
    SELECT 
						A.STATE												-- 진행현황코드
					,A.STATENAME											-- 진행현황명
					,TO_CHAR(MAX(A.MEASUREDATETIME), 'YYYY-MM-DD HH24:MI:SS') AS MEASUREDATETIME --측정일시
					,A.PROCESSSEGMENTID 									-- 공정 ID
					,A.PROCESSSEGMENTVERSION 							-- 공정 Version
					,A.PROCESSSEGMENTNAME								-- 공정명
					,A.AREAID 											-- 작업장 ID
					,A.AREANAME											-- 작업장명
					,A.EQUIPMENTID 										-- 설비 ID
					,A.EQUIPMENTNAME										-- 설비명
					,A.MEASURER 											-- 측정자 ID
					,A.MEASUSERNAME										-- 측정자명
					,A.CUSTOMERID 										-- 고객사  ID
					,A.CUSTOMERNAME										-- 고객사명
					,A.PRODUCTDEFID 										-- 품목 ID
					,A.PRODUCTDEFVERSION 								-- 품목 Version
					,A.PRODUCTDEFNAME									-- 품목명
					,A.LOTTYPE											-- 양산구분
					,A.LOTID 											-- Lot No
					,A.INSPITEMID 										-- 검사항목 ID
					,A.INSPITEMNAME										-- 검사항목명
					,A.SPECRANGE 				AS	SPECSCOPE			-- 규격범위
					,A.ISCLOSE											-- 마감여부
					,A.AVERAGEVALUE										-- 평균값
					,A.MAXVALUE 											-- 최대값
					,A.MINVALUE 											-- 최소값
					,A.DEVIATION											-- 편차
					,A.ABNOCRNO 											-- 이상발생번호
					,A.ABNOCRTYPE 										-- 이상발생타입
					,A.RESOURCETYPE 										-- ResourceType
					,SUM(A.MEASUREVALUE_1)		AS	MEASUREVALUE_1
					,SUM(A.MEASUREVALUE_2)		AS	MEASUREVALUE_2
					,SUM(A.MEASUREVALUE_3)		AS	MEASUREVALUE_3
					,SUM(A.MEASUREVALUE_4)		AS	MEASUREVALUE_4
					,SUM(A.MEASUREVALUE_5)		AS	MEASUREVALUE_5
					,SUM(A.MEASUREVALUE_6)		AS	MEASUREVALUE_6
					,SUM(A.MEASUREVALUE_7)		AS	MEASUREVALUE_7
					,SUM(A.MEASUREVALUE_8)		AS	MEASUREVALUE_8
					,SUM(A.MEASUREVALUE_9)		AS	MEASUREVALUE_9
					,SUM(A.MEASUREVALUE_10)		AS	MEASUREVALUE_10
					,SUM(A.MEASUREVALUE_11)		AS	MEASUREVALUE_11
					,SUM(A.MEASUREVALUE_12)		AS	MEASUREVALUE_12
					,SUM(A.MEASUREVALUE_13)		AS	MEASUREVALUE_13
					,SUM(A.MEASUREVALUE_14)		AS	MEASUREVALUE_14
					,SUM(A.MEASUREVALUE_15)		AS	MEASUREVALUE_15
					,SUM(A.MEASUREVALUE_16)		AS	MEASUREVALUE_16
					,SUM(A.MEASUREVALUE_17)		AS	MEASUREVALUE_17
					,SUM(A.MEASUREVALUE_18)		AS	MEASUREVALUE_18
					,SUM(A.MEASUREVALUE_19)		AS	MEASUREVALUE_19
					,SUM(A.MEASUREVALUE_20)		AS	MEASUREVALUE_20
					,SUM(A.MEASUREVALUE_21)		AS	MEASUREVALUE_21
					,SUM(A.MEASUREVALUE_22)		AS	MEASUREVALUE_22
					,SUM(A.MEASUREVALUE_23)		AS	MEASUREVALUE_23
					,SUM(A.MEASUREVALUE_24)		AS	MEASUREVALUE_24
					,SUM(A.MEASUREVALUE_25)		AS	MEASUREVALUE_25
					,SUM(A.MEASUREVALUE_26)		AS	MEASUREVALUE_26
					,SUM(A.MEASUREVALUE_27)		AS	MEASUREVALUE_27
					,SUM(A.MEASUREVALUE_28)		AS	MEASUREVALUE_28
					,SUM(A.MEASUREVALUE_29)		AS	MEASUREVALUE_29
					,SUM(A.MEASUREVALUE_30)		AS	MEASUREVALUE_30
					,SUM(A.MEASUREVALUE_31)		AS	MEASUREVALUE_31
					,SUM(A.MEASUREVALUE_32)		AS	MEASUREVALUE_32
					,SUM(A.MEASUREVALUE_33)		AS	MEASUREVALUE_33
					,SUM(A.MEASUREVALUE_34)		AS	MEASUREVALUE_34
					,SUM(A.MEASUREVALUE_35)		AS	MEASUREVALUE_35
					,SUM(A.MEASUREVALUE_36)		AS	MEASUREVALUE_36
					,SUM(A.MEASUREVALUE_37)		AS	MEASUREVALUE_37
					,SUM(A.MEASUREVALUE_38)		AS	MEASUREVALUE_38
					,SUM(A.MEASUREVALUE_39)		AS	MEASUREVALUE_39
					,SUM(A.MEASUREVALUE_40)		AS	MEASUREVALUE_40
					,SUM(A.MEASUREVALUE_41)		AS	MEASUREVALUE_41
					,SUM(A.MEASUREVALUE_42)		AS	MEASUREVALUE_42
					,SUM(A.MEASUREVALUE_43)		AS	MEASUREVALUE_43
					,SUM(A.MEASUREVALUE_44)		AS	MEASUREVALUE_44
					,SUM(A.MEASUREVALUE_45)		AS	MEASUREVALUE_45
					,SUM(A.MEASUREVALUE_46)		AS	MEASUREVALUE_46
					,SUM(A.MEASUREVALUE_47)		AS	MEASUREVALUE_47
					,SUM(A.MEASUREVALUE_48)		AS	MEASUREVALUE_48
					,SUM(A.MEASUREVALUE_49)		AS	MEASUREVALUE_49
					,SUM(A.MEASUREVALUE_50)		AS	MEASUREVALUE_50
					,SUM(A.MEASUREVALUE_51)		AS	MEASUREVALUE_51
					,SUM(A.MEASUREVALUE_52)		AS	MEASUREVALUE_52
					,SUM(A.MEASUREVALUE_53)		AS	MEASUREVALUE_53
					,SUM(A.MEASUREVALUE_54)		AS	MEASUREVALUE_54
					,SUM(A.MEASUREVALUE_55)		AS	MEASUREVALUE_55
					,SUM(A.MEASUREVALUE_56)		AS	MEASUREVALUE_56
					,SUM(A.MEASUREVALUE_57)		AS	MEASUREVALUE_57
					,SUM(A.MEASUREVALUE_58)		AS	MEASUREVALUE_58
					,SUM(A.MEASUREVALUE_59)		AS	MEASUREVALUE_59
					,SUM(A.MEASUREVALUE_60)		AS	MEASUREVALUE_60
					,A.REASONCONSUMABLEDEFID
					,A.REASONCONSUMABLEDEFNAME
					,A.REASONCONSUMABLEDEFVERSION
					,A.REASONCONSUMABLELOTID
					,A.REASONSEGMENTID
					,A.REASONSEGMENTNAME
					,A.REASONAREAID
					,A.REASONAREANAME
					,A.PLANTID
					,A.RESOURCEID
					,A.WORKSTARTUSER
					,A.EQUIPMENTCLASSID
					,TO_CHAR(A.LOTWORKRESULTDATE, 'YYYY-MM-DD HH24:MI:SS') AS NCRISSUEDATE 	 
					<!-- ,ARRAY_TO_STRING(ARRAY_AGG(CASE WHEN A.RESULT = 'NG' 
													   THEN A.DAPOINTID 
													   ELSE NULL TO_CHAR(END),',')) ARRAYPOINTID		 -->
					,LISTAGG((CASE WHEN A.RESULT = 'NG' 
								   THEN A.DAPOINTID 
								   ELSE NULL END), ',') WITHIN GROUP (ORDER BY A.RESULT) AS ARRAYPOINTID --NG난 측정포인트 배열형식으로 출력	
					,A.ISMODIFY																		-- 작업장 통제권한에 따른 수정여부		
					,A.AFFECTISLOCKING
					,TO_CHAR(A.NCRISSUEDATE, 'YYYY-MM-DD HH24:MI:SS') AS NCRISSUEDATE
					,TO_CHAR(A.CARREQUESTDATE, 'YYYY-MM-DD HH24:MI:SS') AS CARREQUESTDATE
					,TO_CHAR(A.CAREXPECTEDRECEIPTDATE, 'YYYY-MM-DD HH24:MI:SS') AS CAREXPECTEDRECEIPTDATE
					,TO_CHAR(A.RECEIPTDATE, 'YYYY-MM-DD HH24:MI:SS') AS RECEIPTDATE
					,TO_CHAR(A.APPROVALDATE, 'YYYY-MM-DD HH24:MI:SS') AS APPROVALDATE
					,TO_CHAR(A.CLOSEDATE, 'YYYY-MM-DD HH24:MI:SS') AS CLOSEDATE
					,TO_CHAR(A.WORKSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS WORKSTARTTIME
					,TO_CHAR(A.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS WORKENDTIME
				FROM 
				(
					SELECT
							ABN.STATE																	-- 진행현황코드
						,SCD.DICTIONARYNAME								AS	STATENAME				-- 진행현황명
						,DR.MEASUREDATETIME 															-- 측정일시
						,DR.PROCESSSEGMENTID 														-- 공정 ID
						,DR.PROCESSSEGMENTVERSION 													-- 공정 Version
						,PSD.DICTIONARYNAME								AS 	PROCESSSEGMENTNAME		-- 공정명
						,DR.AREAID 																	-- 작업장 ID
						,AD.DICTIONARYNAME 								AS 	AREANAME				-- 작업장명
						,DR.EQUIPMENTID 																-- 설비 ID
						,ED.DICTIONARYNAME 								AS 	EQUIPMENTNAME			-- 설비명
						,DR.MEASURER 																-- 측정자 ID
						,U.USER_NM										AS 	MEASUSERNAME 			-- 측정자명
						,DR.CUSTOMERID 																-- 고객사  ID
						,C.CUSTOMERNAME																-- 고객사명
						,DR.PRODUCTDEFID 															-- 품목 ID
						,DR.PRODUCTDEFVERSION 														-- 품목 Version
						,PD.PRODUCTDEFNAME															-- 품목명
						,LCD.DICTIONARYNAME 								AS	LOTTYPE					-- 양산구분
						,DR.RESOURCEID 							 		AS 	LOTID 					-- Lot No
						,DR.DAITEMID 									AS 	INSPITEMID 				-- 검사항목 ID
						,IID.DICTIONARYNAME								AS 	INSPITEMNAME			-- 검사항목명
						,DR.SPECRANGE 																-- 규격범위
						,CASE WHEN NVL(EV.ISCLOSE, 'N') = 'N'  
								 THEN 'N' ELSE 'Y' END 						AS 	ISCLOSE					-- 마감여부
						,DR.AVERAGEVALUE																-- 평균값
						,DR.MAXVALUE																	-- 최대값
						,DR.MINVALUE																	-- 최소값
						,DR.DEVIATION																-- 편차
						,ABN.ABNOCRNO 																-- 이상발생번호
						,ABN.ABNOCRTYPE 																-- 이상발생타입
						,DR.RESOURCETYPE 															-- ResourceType
						<!-- ,CASE WHEN DR.DAPOINTID = '1' THEN DR.VALUE END AS MEASUREVALUE_1
						,CASE WHEN DR.DAPOINTID = '2' THEN DR.VALUE END AS MEASUREVALUE_2
						,CASE WHEN DR.DAPOINTID = '3' THEN DR.VALUE END AS MEASUREVALUE_3
						,CASE WHEN DR.DAPOINTID = '4' THEN DR.VALUE END AS MEASUREVALUE_4
						,CASE WHEN DR.DAPOINTID = '5' THEN DR.VALUE END AS MEASUREVALUE_5
						,CASE WHEN DR.DAPOINTID = '6' THEN DR.VALUE END AS MEASUREVALUE_6
						,CASE WHEN DR.DAPOINTID = '7' THEN DR.VALUE END AS MEASUREVALUE_7
						,CASE WHEN DR.DAPOINTID = '8' THEN DR.VALUE END AS MEASUREVALUE_8
						,CASE WHEN DR.DAPOINTID = '9' THEN DR.VALUE END AS MEASUREVALUE_9
						,CASE WHEN DR.DAPOINTID = '10' THEN DR.VALUE END AS MEASUREVALUE_10
						,CASE WHEN DR.DAPOINTID = '11' THEN DR.VALUE END AS MEASUREVALUE_11
						,CASE WHEN DR.DAPOINTID = '12' THEN DR.VALUE END AS MEASUREVALUE_12
						,CASE WHEN DR.DAPOINTID = '13' THEN DR.VALUE END AS MEASUREVALUE_13
						,CASE WHEN DR.DAPOINTID = '14' THEN DR.VALUE END AS MEASUREVALUE_14
						,CASE WHEN DR.DAPOINTID = '15' THEN DR.VALUE END AS MEASUREVALUE_15
						,CASE WHEN DR.DAPOINTID = '16' THEN DR.VALUE END AS MEASUREVALUE_16
						,CASE WHEN DR.DAPOINTID = '17' THEN DR.VALUE END AS MEASUREVALUE_17
						,CASE WHEN DR.DAPOINTID = '18' THEN DR.VALUE END AS MEASUREVALUE_18
						,CASE WHEN DR.DAPOINTID = '19' THEN DR.VALUE END AS MEASUREVALUE_19
						,CASE WHEN DR.DAPOINTID = '20' THEN DR.VALUE END AS MEASUREVALUE_20
						,CASE WHEN DR.DAPOINTID = '21' THEN DR.VALUE END AS MEASUREVALUE_21
						,CASE WHEN DR.DAPOINTID = '22' THEN DR.VALUE END AS MEASUREVALUE_22
						,CASE WHEN DR.DAPOINTID = '23' THEN DR.VALUE END AS MEASUREVALUE_23
						,CASE WHEN DR.DAPOINTID = '24' THEN DR.VALUE END AS MEASUREVALUE_24
						,CASE WHEN DR.DAPOINTID = '25' THEN DR.VALUE END AS MEASUREVALUE_25
						,CASE WHEN DR.DAPOINTID = '26' THEN DR.VALUE END AS MEASUREVALUE_26
						,CASE WHEN DR.DAPOINTID = '27' THEN DR.VALUE END AS MEASUREVALUE_27
						,CASE WHEN DR.DAPOINTID = '28' THEN DR.VALUE END AS MEASUREVALUE_28
						,CASE WHEN DR.DAPOINTID = '29' THEN DR.VALUE END AS MEASUREVALUE_29
						,CASE WHEN DR.DAPOINTID = '30' THEN DR.VALUE END AS MEASUREVALUE_30
						,CASE WHEN DR.DAPOINTID = '31' THEN DR.VALUE END AS MEASUREVALUE_31
						,CASE WHEN DR.DAPOINTID = '32' THEN DR.VALUE END AS MEASUREVALUE_32
						,CASE WHEN DR.DAPOINTID = '33' THEN DR.VALUE END AS MEASUREVALUE_33
						,CASE WHEN DR.DAPOINTID = '34' THEN DR.VALUE END AS MEASUREVALUE_34
						,CASE WHEN DR.DAPOINTID = '35' THEN DR.VALUE END AS MEASUREVALUE_35
						,CASE WHEN DR.DAPOINTID = '36' THEN DR.VALUE END AS MEASUREVALUE_36
						,CASE WHEN DR.DAPOINTID = '37' THEN DR.VALUE END AS MEASUREVALUE_37
						,CASE WHEN DR.DAPOINTID = '38' THEN DR.VALUE END AS MEASUREVALUE_38
						,CASE WHEN DR.DAPOINTID = '39' THEN DR.VALUE END AS MEASUREVALUE_39
						,CASE WHEN DR.DAPOINTID = '40' THEN DR.VALUE END AS MEASUREVALUE_40
						,CASE WHEN DR.DAPOINTID = '41' THEN DR.VALUE END AS MEASUREVALUE_41
						,CASE WHEN DR.DAPOINTID = '42' THEN DR.VALUE END AS MEASUREVALUE_42
						,CASE WHEN DR.DAPOINTID = '43' THEN DR.VALUE END AS MEASUREVALUE_43
						,CASE WHEN DR.DAPOINTID = '44' THEN DR.VALUE END AS MEASUREVALUE_44
						,CASE WHEN DR.DAPOINTID = '45' THEN DR.VALUE END AS MEASUREVALUE_45
						,CASE WHEN DR.DAPOINTID = '46' THEN DR.VALUE END AS MEASUREVALUE_46
						,CASE WHEN DR.DAPOINTID = '47' THEN DR.VALUE END AS MEASUREVALUE_47
						,CASE WHEN DR.DAPOINTID = '48' THEN DR.VALUE END AS MEASUREVALUE_48
						,CASE WHEN DR.DAPOINTID = '49' THEN DR.VALUE END AS MEASUREVALUE_49
						,CASE WHEN DR.DAPOINTID = '50' THEN DR.VALUE END AS MEASUREVALUE_50
						,CASE WHEN DR.DAPOINTID = '51' THEN DR.VALUE END AS MEASUREVALUE_51
						,CASE WHEN DR.DAPOINTID = '52' THEN DR.VALUE END AS MEASUREVALUE_52
						,CASE WHEN DR.DAPOINTID = '53' THEN DR.VALUE END AS MEASUREVALUE_53
						,CASE WHEN DR.DAPOINTID = '54' THEN DR.VALUE END AS MEASUREVALUE_54
						,CASE WHEN DR.DAPOINTID = '55' THEN DR.VALUE END AS MEASUREVALUE_55
						,CASE WHEN DR.DAPOINTID = '56' THEN DR.VALUE END AS MEASUREVALUE_56
						,CASE WHEN DR.DAPOINTID = '57' THEN DR.VALUE END AS MEASUREVALUE_57
						,CASE WHEN DR.DAPOINTID = '58' THEN DR.VALUE END AS MEASUREVALUE_58
						,CASE WHEN DR.DAPOINTID = '59' THEN DR.VALUE END AS MEASUREVALUE_59
						,CASE WHEN DR.DAPOINTID = '60' THEN DR.VALUE END AS MEASUREVALUE_60 -->
						,CASE 	WHEN DR.DAPOINTID = '1' AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '1'  THEN DR.VALUE
									END AS MEASUREVALUE_1
						,CASE WHEN DR.DAPOINTID = '2'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '2' THEN DR.VALUE 
									END AS MEASUREVALUE_2
						,CASE WHEN DR.DAPOINTID = '3'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '3' THEN DR.VALUE 
									END AS MEASUREVALUE_3
						,CASE WHEN DR.DAPOINTID = '4'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '4' THEN DR.VALUE 
									END AS MEASUREVALUE_4
						,CASE WHEN DR.DAPOINTID = '5'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '5' THEN DR.VALUE 
									END AS MEASUREVALUE_5
						,CASE WHEN DR.DAPOINTID = '6'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '6' THEN DR.VALUE 
									END AS MEASUREVALUE_6
						,CASE WHEN DR.DAPOINTID = '7'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '7' THEN DR.VALUE 
									END AS MEASUREVALUE_7
						,CASE WHEN DR.DAPOINTID = '8'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '8' THEN DR.VALUE 
									END AS MEASUREVALUE_8
						,CASE WHEN DR.DAPOINTID = '9'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '9' THEN DR.VALUE 
									END AS MEASUREVALUE_9
						,CASE WHEN DR.DAPOINTID = '10'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '10' THEN DR.VALUE 
									END AS MEASUREVALUE_10
						,CASE WHEN DR.DAPOINTID = '11'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '11' THEN DR.VALUE 
									END AS MEASUREVALUE_11
						,CASE WHEN DR.DAPOINTID = '12'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '12' THEN DR.VALUE 
									END AS MEASUREVALUE_12														
						,CASE WHEN DR.DAPOINTID = '13'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '13' THEN DR.VALUE 
									END AS MEASUREVALUE_13
						,CASE WHEN DR.DAPOINTID = '14'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '14' THEN DR.VALUE 
									END AS MEASUREVALUE_14
						,CASE WHEN DR.DAPOINTID = '15'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '15' THEN DR.VALUE 
									END AS MEASUREVALUE_15
						,CASE WHEN DR.DAPOINTID = '16'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '16' THEN DR.VALUE 
									END AS MEASUREVALUE_16
						,CASE WHEN DR.DAPOINTID = '17'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '17' THEN DR.VALUE 
									END AS MEASUREVALUE_17
						,CASE WHEN DR.DAPOINTID = '18'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '18' THEN DR.VALUE 
									END AS MEASUREVALUE_18
						,CASE WHEN DR.DAPOINTID = '19'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '19' THEN DR.VALUE 
									END AS MEASUREVALUE_19
						,CASE WHEN DR.DAPOINTID = '20'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '20' THEN DR.VALUE 
									END AS MEASUREVALUE_20
						,CASE WHEN DR.DAPOINTID = '21'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '21' THEN DR.VALUE 
									END AS MEASUREVALUE_21
						,CASE WHEN DR.DAPOINTID = '22'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '22' THEN DR.VALUE 
									END AS MEASUREVALUE_22
						,CASE WHEN DR.DAPOINTID = '23'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '23' THEN DR.VALUE 
									END AS MEASUREVALUE_23
						,CASE WHEN DR.DAPOINTID = '24'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '24' THEN DR.VALUE 
									END AS MEASUREVALUE_24
						,CASE WHEN DR.DAPOINTID = '25'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '25' THEN DR.VALUE 
									END AS MEASUREVALUE_25
						,CASE WHEN DR.DAPOINTID = '26'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '26' THEN DR.VALUE 
									END AS MEASUREVALUE_26
						,CASE WHEN DR.DAPOINTID = '27'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '27' THEN DR.VALUE 
									END AS MEASUREVALUE_27
						,CASE WHEN DR.DAPOINTID = '28'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '28' THEN DR.VALUE 
									END AS MEASUREVALUE_28
						,CASE WHEN DR.DAPOINTID = '29'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '29' THEN DR.VALUE 
									END AS MEASUREVALUE_29								
						,CASE WHEN DR.DAPOINTID = '30'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '30' THEN DR.VALUE 
									END AS MEASUREVALUE_30
						,CASE WHEN DR.DAPOINTID = '31'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '31' THEN DR.VALUE 
									END AS MEASUREVALUE_31																		
						,CASE WHEN DR.DAPOINTID = '32'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '32' THEN DR.VALUE 
									END AS MEASUREVALUE_32									
						,CASE WHEN DR.DAPOINTID = '33'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '33' THEN DR.VALUE 
									END AS MEASUREVALUE_33
						,CASE WHEN DR.DAPOINTID = '34'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '34' THEN DR.VALUE 
									END AS MEASUREVALUE_34
						,CASE WHEN DR.DAPOINTID = '35'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '35' THEN DR.VALUE 
									END AS MEASUREVALUE_35
						,CASE WHEN DR.DAPOINTID = '36'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '36' THEN DR.VALUE 
									END AS MEASUREVALUE_36
						,CASE WHEN DR.DAPOINTID = '37'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '37' THEN DR.VALUE 
									END AS MEASUREVALUE_37
						,CASE WHEN DR.DAPOINTID = '38'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '38' THEN DR.VALUE 
									END AS MEASUREVALUE_38
						,CASE WHEN DR.DAPOINTID = '39'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '39' THEN DR.VALUE 
									END AS MEASUREVALUE_39
						,CASE WHEN DR.DAPOINTID = '40'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '40' THEN DR.VALUE 
									END AS MEASUREVALUE_40																		
						,CASE WHEN DR.DAPOINTID = '41'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '41' THEN DR.VALUE 
									END AS MEASUREVALUE_41									
						,CASE WHEN DR.DAPOINTID = '42'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '42' THEN DR.VALUE 
									END AS MEASUREVALUE_42									
						,CASE WHEN DR.DAPOINTID = '43'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '43' THEN DR.VALUE 
									END AS MEASUREVALUE_43									
						,CASE WHEN DR.DAPOINTID = '44'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '44' THEN DR.VALUE 
									END AS MEASUREVALUE_44
						,CASE WHEN DR.DAPOINTID = '45'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '45' THEN DR.VALUE 
									END AS MEASUREVALUE_45
						,CASE WHEN DR.DAPOINTID = '46'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '46' THEN DR.VALUE 
									END AS MEASUREVALUE_46
						,CASE WHEN DR.DAPOINTID = '47'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '47' THEN DR.VALUE 
									END AS MEASUREVALUE_47
						,CASE WHEN DR.DAPOINTID = '48'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '48' THEN DR.VALUE 
									END AS MEASUREVALUE_48																																													
						,CASE WHEN DR.DAPOINTID = '49'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '49' THEN DR.VALUE 
									END AS MEASUREVALUE_49
						,CASE WHEN DR.DAPOINTID = '50'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '50' THEN DR.VALUE 
									END AS MEASUREVALUE_50																											
						,CASE WHEN DR.DAPOINTID = '51'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '51' THEN DR.VALUE 
									END AS MEASUREVALUE_51									
						,CASE WHEN DR.DAPOINTID = '52'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '52' THEN DR.VALUE 
									END AS MEASUREVALUE_52									
						,CASE WHEN DR.DAPOINTID = '53'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '53' THEN DR.VALUE 
									END AS MEASUREVALUE_53
						,CASE WHEN DR.DAPOINTID = '54'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '54' THEN DR.VALUE 
									END AS MEASUREVALUE_54
						,CASE WHEN DR.DAPOINTID = '55'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '55' THEN DR.VALUE 
									END AS MEASUREVALUE_55																											
						,CASE WHEN DR.DAPOINTID = '56'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '56' THEN DR.VALUE 
									END AS MEASUREVALUE_56
						,CASE WHEN DR.DAPOINTID = '57'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '57' THEN DR.VALUE 
									END AS MEASUREVALUE_57
						,CASE WHEN DR.DAPOINTID = '58'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '58' THEN DR.VALUE 
									END AS MEASUREVALUE_58
						,CASE WHEN DR.DAPOINTID = '59'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '59' THEN DR.VALUE 
									END AS MEASUREVALUE_59				
						,CASE WHEN DR.DAPOINTID = '60'  AND DR.TOPBOTTOMYN = 'Y' AND DR.CIRCUITSTD = 'Bottom' THEN DR.VALUE2
									WHEN DR.DAPOINTID = '60' THEN DR.VALUE 
									END AS MEASUREVALUE_60
						,CRT.REASONCONSUMABLEDEFID
						,CASE WHEN NVL(RPD.PRODUCTDEFNAME,'') =''
								 THEN  RCD.CONSUMABLEDEFNAME                                         
								 ELSE  RPD.PRODUCTDEFNAME 
							END 	 										AS REASONCONSUMABLEDEFNAME
						,CRT.REASONCONSUMABLEDEFVERSION
						,CRT.REASONCONSUMABLELOTID	
						,CRT.REASONSEGMENTID
						,RD.DICTIONARYNAME 								AS REASONSEGMENTNAME
						,CRT.REASONAREAID
						,RAD.DICTIONARYNAME								AS REASONAREANAME
						,CL.PLANTID
						,CL.RESOURCEID
						,CL.WORKSTARTUSER
						,MR.EQUIPMENTCLASSID
						,CL.WORKENDTIME									AS LOTWORKRESULTDATE
						,DR.RESULT		
						,DR.DAPOINTID 
						,A.ISMODIFY				
						,NVL(AFL.ISLOCKING, 'N')					AS AFFECTISLOCKING
						,ABN.NCRISSUEDATE	
						,CRT.CARREQUESTDATE
						,CASE WHEN CRT.CARREQUESTDATE IS NULL
							THEN NULL
							ELSE CRT.CARREQUESTDATE + INTERVAL '3' DAY 
							END 											AS CAREXPECTEDRECEIPTDATE				
						,CASE WHEN ABN.STATE ='CARRequestCompleted'
							THEN NULL
							ELSE CAV.RECEIPTDATE	
							END 											AS RECEIPTDATE
						,CASE WHEN ABN.STATE ='CARRequestCompleted'
								   OR ABN.STATE ='CARReceivingCompleted'
							THEN NULL
							ELSE CAV.APPROVALDATE	
							END 											AS APPROVALDATE	
						,CASE WHEN ABN.STATE !='ValidityEvaluationCompleted'
							THEN NULL
							ELSE EV.CLOSEDATE
							END 											AS CLOSEDATE	
						,CL.WORKSTARTTIME
						,CL.WORKENDTIME		
					FROM 	BAS_DARESULT										DR 
					INNER JOIN QAM_ABNORMALOCCURRENCE 						ABN ON 	ABN.LOTID = DR.RESOURCEID
																				AND ABN.INSPITEMID = DR.DAITEMID
																				AND ABN.INSPITEMVERSION = DR.DAITEMVERSION
																				AND ABN.ABNOCRTYPE = 'QualityStandardInspection'
					LEFT OUTER JOIN PCM_LOTWORKRESULT 						CL	ON  CL.LOTID = ABN.LOTID
																				AND CL.PROCESSSEGMENTID = ABN.PROCESSSEGMENTID
																				AND CL.PROCESSSEGMENTVERSION = ABN.PROCESSSEGMENTVERSION
																				AND CL.AREAID = ABN.AREAID
																				AND CL.PRODUCTDEFID = ABN.PRODUCTDEFID
																				AND CL.PRODUCTDEFVERSION = ABN.PRODUCTDEFVERSION
					LEFT OUTER JOIN BAS_RESOURCE 							MR  ON  MR.RESOURCEID = CL.RESOURCEID
					LEFT OUTER JOIN PCM_LOTEQUIPMENT 						LE  ON  LE.LOTID = CL.LOTID
													   							AND LE.PROCESSSEGMENTID = CL.PROCESSSEGMENTID
													   							AND LE.PROCESSSEGMENTVERSION = CL.PROCESSSEGMENTVERSION																				
																				AND LE.WORKCOUNT = CL.WORKCOUNT
					LEFT OUTER JOIN QAM_CARREQUEST							CRT ON  ABN.ABNOCRNO = CRT.ABNOCRNO
																				AND ABN.ABNOCRTYPE = CRT.ABNOCRTYPE
																				AND CRT.SEQUENCE = '1'
					LEFT OUTER JOIN QAM_CARAPPROVAL							CAV ON  ABN.ABNOCRNO = CAV.ABNOCRNO
																				AND ABN.ABNOCRTYPE = CAV.ABNOCRTYPE
																				AND CAV.SEQUENCE = '1'																		
					LEFT OUTER JOIN QAM_ESTIMATEVALIDITY						EV 	ON  EV.ABNOCRNO = ABN.ABNOCRNO
																				AND EV.ABNOCRTYPE = ABN.ABNOCRTYPE
																				AND EV.SEQUENCE = '1'
					LEFT OUTER JOIN BAS_PROCESSSEGMENT 						PS 	ON 	PS.PROCESSSEGMENTID = DR.PROCESSSEGMENTID
																				AND PS.PROCESSSEGMENTVERSION = DR.PROCESSSEGMENTVERSION
            		INNER JOIN FN_AREA(#{SESSION_USER_ID})						A	ON	A.AREAID = DR.AREAID
																				--AND A.ISMODIFY = 'Y'
					LEFT OUTER JOIN BAS_EQUIPMENT 							E 	ON 	E.EQUIPMENTID = DR.EQUIPMENTID
					LEFT OUTER JOIN BAS_CUSTOMER 							C 	ON 	C.ENTERPRISEID = DR.ENTERPRISEID
																				AND C.PLANTID = DR.PLANTID
																				AND C.CUSTOMERID = DR.CUSTOMERID
					LEFT OUTER JOIN CMD_USERS 								U 	ON 	U.USER_ID = DR.MEASURER 
					LEFT OUTER JOIN BAS_PRODUCTDEFINITION 					PD 	ON 	PD.PRODUCTDEFID = DR.PRODUCTDEFID
																				AND PD.PRODUCTDEFVERSION = DR.PRODUCTDEFVERSION
					LEFT OUTER JOIN BAS_INSPITEM 							II 	ON 	II.INSPITEMID = DR.DAITEMID 
																				AND II.INSPITEMVERSION = '*'
					LEFT OUTER JOIN CMD_LOOKUP_VALUES 								SC 	ON 	SC.LOOKUP_CODE = ABN.STATE
																				AND SC.LOOKUP_TYPE = 'CARProgressStatus'
					LEFT OUTER JOIN CMD_LOOKUP_VALUES 								LC 	ON 	LC.LOOKUP_CODE = DR.LOTTYPE
																				AND LC.LOOKUP_TYPE = 'ProductionType'
					LEFT OUTER JOIN CMD_DICTIONARY 							SCD ON 	SCD.DICTIONARYID = SC.DICTIONARYID
																				AND SCD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT OUTER JOIN CMD_DICTIONARY 						 	PSD ON 	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
																				AND PSD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT OUTER JOIN CMD_DICTIONARY 							AD 	ON 	AD.DICTIONARYID = A.AREANAME
																				AND AD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT OUTER JOIN CMD_DICTIONARY 							ED 	ON 	ED.DICTIONARYID = E.EQUIPMENTNAME
																				AND ED.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT OUTER JOIN CMD_DICTIONARY 							LCD ON 	LCD.DICTIONARYID = LC.DICTIONARYID
																				AND LCD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT OUTER JOIN CMD_DICTIONARY 							IID	ON	IID.DICTIONARYID = II.INSPITEMNAME
																				AND IID.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION					RCD ON  RCD.CONSUMABLEDEFID = CRT.REASONCONSUMABLEDEFID 
																				AND RCD.CONSUMABLEDEFVERSION = CRT.REASONCONSUMABLEDEFVERSION
					LEFT OUTER JOIN BAS_PRODUCTDEFINITION					RPD ON  RPD.PRODUCTDEFID = CRT.REASONCONSUMABLEDEFID 
																				AND RPD.PRODUCTDEFVERSION = CRT.REASONCONSUMABLEDEFVERSION
					LEFT OUTER JOIN BAS_PROCESSSEGMENT						RPS ON  RPS.PROCESSSEGMENTID = CRT.REASONSEGMENTID
					LEFT OUTER JOIN CMD_DICTIONARY							RD  ON  RPS.PROCESSSEGMENTNAME = RD.DICTIONARYID
																				AND RD.LANGUAGETYPE  =#{SESSION_LANGUAGETYPE}
			 		LEFT OUTER JOIN BAS_AREA									RA  ON  RA.AREAID = CRT.REASONAREAID
			 		LEFT OUTER JOIN CMD_DICTIONARY							RAD ON  RA.AREANAME = RAD.DICTIONARYID
			 																	AND RAD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}	
			 		--affectLot lockingStatus
			 		LEFT OUTER JOIN QAM_AFFECTLOT							AFL ON ABN.ABNOCRNO = AFL.ABNOCRNO
			 																	AND ABN.ABNOCRTYPE = AFL.ABNOCRTYPE
			 																	AND ABN.LOTID = AFL.LOTID															
					WHERE	1 = 1
					AND 	DR.INSPECTIONRESULT = 'NG'
					AND 	DR.PLANTID = #{PLANTID}
					<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
						AND DR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
						<!-- AND 	EXISTS
										(
											SELECT	1
											FROM	ufn_selectstringtosplitdouble(#{PROCESSSEGMENTID}, ',', '|')	MAP
											WHERE	DR.PROCESSSEGMENTID = MAP.VALUE1
											AND		(DR.PROCESSSEGMENTVERSION = MAP.VALUE2 OR MAP.VALUE2 = '')
										) -->
					</if>
					<if test="AREAID != null and AREAID !='' "> 
						AND 	DR.AREAID = #{AREAID}
					</if>
					<if test="EQUIPMENTID != null and EQUIPMENTID !='' "> 
						AND 	DR.EQUIPMENTID = #{EQUIPMENTID}
					</if>
					<if test="INSPITEMID != null and INSPITEMID !='' "> 
						AND 	DR.DAITEMID = #{INSPITEMID}
					</if>
					<if test="CUSTOMERID != null and CUSTOMERID !='' "> 
						AND 	DR.CUSTOMERID = #{CUSTOMERID}
					</if>
					<if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
						AND DR.PRODUCTDEFID = #{PRODUCTDEFID}
						<!-- AND 	EXISTS
										(
											SELECT	1
											FROM	ufn_selectstringtosplitdouble(#{PRODUCTDEFID}, ',', '|')	MAP
											WHERE	DR.PRODUCTDEFID = MAP.VALUE1
											AND		(DR.PRODUCTDEFVERSION = MAP.VALUE2 OR MAP.VALUE2 = '')
										) -->
					</if> 
					<if test="LOTID != null and LOTID !='' "> 
						AND 	DR.RESOURCEID LIKE '%' || #{LOTID} || '%'
					</if>
					<if test="PRODUCTIONDIVISION != null and PRODUCTIONDIVISION !='' and  !'*'.equals(PRODUCTIONDIVISION) "> 
						AND 	DR.LOTTYPE = #{PRODUCTIONDIVISION}
					</if>
					<if test="PROGRESS != null and PROGRESS !='' and !'*'.equals(PROGRESS) "> 
						AND 	ABN.STATE = #{PROGRESS}
					</if> 
					
					<if test="ISCLOSE != null and ISCLOSE !='' and !'*'.equals(ISCLOSE) "> 
						<if test='ISCLOSE == "Y"'> 
							AND 	EV.ISCLOSE = 'Y'
						</if>
						<if test='ISCLOSE != "Y"'> 
							AND 	NVL(EV.ISCLOSE, 'N') = 'N'
						</if>
					</if>
					GROUP BY
							ABN.STATE						
						,SCD.DICTIONARYNAME					
						,DR.MEASUREDATETIME 					
						,DR.PROCESSSEGMENTID 					
						,DR.PROCESSSEGMENTVERSION 				
						,PSD.DICTIONARYNAME					
						,DR.AREAID 						
						,AD.DICTIONARYNAME 					
						,DR.EQUIPMENTID 						
						,ED.DICTIONARYNAME 					
						,DR.MEASURER 
						,U.USER_NM						
						,DR.CUSTOMERID 						
						,C.CUSTOMERNAME						
						,DR.PRODUCTDEFID 					
						,DR.PRODUCTDEFVERSION 					
						,PD.PRODUCTDEFNAME					
						,LCD.DICTIONARYNAME 					
						,DR.RESOURCEID 						
						,DR.DAITEMID 						
						,IID.DICTIONARYNAME					
						,DR.SPECRANGE 						
						,EV.ISCLOSE
						,DR.AVERAGEVALUE						
						,DR.MAXVALUE						
						,DR.MINVALUE						
						,DR.DEVIATION						
						,ABN.ABNOCRNO 						
						,ABN.ABNOCRTYPE 						
						,DR.RESOURCETYPE 					
						,DR.DAPOINTID
						,DR.VALUE
						,CRT.REASONCONSUMABLEDEFID
						,RPD.PRODUCTDEFNAME
						,RCD.CONSUMABLEDEFNAME                    
						,RPD.PRODUCTDEFNAME 
						,CRT.REASONCONSUMABLEDEFVERSION
						,CRT.REASONCONSUMABLELOTID	
						,CRT.REASONSEGMENTID
						,RD.DICTIONARYNAME 					
						,CRT.REASONAREAID
						,RAD.DICTIONARYNAME					
						,CL.PLANTID	
						,CL.RESOURCEID
						,CL.WORKSTARTUSER
						,MR.EQUIPMENTCLASSID
						,CL.WORKENDTIME	
						,DR.RESULT		
						,DR.DAPOINTID	
						,A.ISMODIFY			
						,AFL.ISLOCKING	
						,ABN.NCRISSUEDATE
						,CRT.CARREQUESTDATE
						,CAV.RECEIPTDATE
						,CAV.APPROVALDATE
						,EV.CLOSEDATE
						,CL.WORKSTARTTIME
						,CL.WORKENDTIME
						,DR.TOPBOTTOMYN
						,DR.CIRCUITSTD
						,DR.VALUE2
				) 	A
				WHERE 	1 = 1				
				GROUP BY
						A.STATE												
						,A.STATENAME																							
						,A.PROCESSSEGMENTID 														
						,A.PROCESSSEGMENTVERSION 													
						,A.PROCESSSEGMENTNAME		
						,A.AREAID 																	
						,A.AREANAME				
						,A.EQUIPMENTID 																
						,A.EQUIPMENTNAME			
						,A.MEASURER 	
						,A.MEASUSERNAME															
						,A.CUSTOMERID 																
						,A.CUSTOMERNAME																
						,A.PRODUCTDEFID 															
						,A.PRODUCTDEFVERSION 														
						,A.PRODUCTDEFNAME															
						,A.LOTTYPE					
						,A.LOTID 					
						,A.INSPITEMID 				
						,A.INSPITEMNAME			
						,A.SPECRANGE 		
						,A.ISCLOSE														
						,A.AVERAGEVALUE																
						,A.MAXVALUE 																
						,A.MINVALUE 																
						,A.DEVIATION	
						,A.ABNOCRNO 											
						,A.ABNOCRTYPE 																			
						,A.RESOURCETYPE 	
						,A.REASONCONSUMABLEDEFID
						,A.REASONCONSUMABLEDEFNAME
						,A.REASONCONSUMABLEDEFVERSION
						,A.REASONCONSUMABLELOTID
						,A.REASONSEGMENTID
						,A.REASONSEGMENTNAME
						,A.REASONAREAID
						,A.REASONAREANAME	
						,A.PLANTID
						,A.RESOURCEID
						,A.WORKSTARTUSER
						,A.EQUIPMENTCLASSID
						,A.LOTWORKRESULTDATE	
						,A.ISMODIFY	
						,A.AFFECTISLOCKING		
						,A.NCRISSUEDATE						
						,A.CARREQUESTDATE
						,A.CAREXPECTEDRECEIPTDATE
						,A.RECEIPTDATE
						,A.APPROVALDATE
						,A.CLOSEDATE	
						,A.WORKSTARTTIME
						,A.WORKENDTIME						
			HAVING		MAX(A.MEASUREDATETIME) BETWEEN TO_DATE(SUBSTR(#{PERIODFR}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')	
										 	   AND TO_DATE(SUBSTR(#{PERIODTO}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')	
			ORDER BY  A.NCRISSUEDATE DESC
    </select>
    
    <!-- 품질규격 이상발생 affectLot 조회 AS-IS : QualitySpecIssueAffectLot ver. 10001-->
    <select id="selectQualitySpecIssueAffectLot" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAM01200Dao.selectQualitySpecIssueAffectLot  */
    SELECT LOTID
				,MAX(LOCKINGTXNHISTKEY)						AS LOCKINGTXNHISTKEY
				,PRODUCTDEFID
				,PRODUCTDEFVERSION
				,PRODUCTDEFNAME
				,PANELQTY
				,PCSQTY
				,PROCESSSEGMENTID
				,PROCESSSEGMENTNAME
				,AREAID
				,AREANAME
				,MAX(RESULTCODE) 							AS RESULTCODE
				,MAX(ISLOCKING) 								AS ISLOCKING
				,MAX(ISLOCKING) 								AS PREV_ISLOCKING
				,MAX(ABNOCRNO) 								AS ABNOCRNO
				,MAX(ABNOCRTYPE) 							AS ABNOCRTYPE
				,MAX(SEQUENCE) 								AS SEQUENCE
				,MAX(PLANTID) 								AS PLANTID
				,MAX(ENTERPRISEID) 							AS ENTERPRISEID
				,MAX(LASTTXNID) 								AS LASTTXNID
				,MAX(ISLOTLOCKING) 							AS ISLOTLOCKING	
				,LOTSTATE	
				,0 AS CHK
		FROM
		(					
            SELECT L.LOTID                          AS LOTID
                 , LL.LOCKINGTXNHISTKEY
                 , L.PRODUCTDEFID
                 , L.PRODUCTDEFVERSION
                 , PD.PRODUCTDEFNAME
                 , L.PANELQTY
                 , L.PCSQTY
                 , L.PROCESSSEGMENTID
                 , PSD.DICTIONARYNAME               AS PROCESSSEGMENTNAME
                 , L.AREAID
                 , AD.DICTIONARYNAME                AS AREANAME
                 , NULL                             AS RESULTCODE 
                 , 'N'                              AS ISLOCKING
                 , NULL                             AS ABNOCRNO
                 <!--2021.07.29 TOBE Add LOCKING초기화시 체크값
                 , NULL                             AS ABNOCRTYPE
                 -->
                 , #{ABNOCRTYPE}                    AS ABNOCRTYPE
                 , NULL                             AS SEQUENCE
                 , L.PLANTID                        AS PLANTID
                 , L.ENTERPRISEID                   AS ENTERPRISEID
                 , NULL                             AS LASTTXNID
                 , L.ISLOCKING                      AS ISLOTLOCKING
                 , L.LOTSTATE				
			FROM 	PCM_LOT										L 									
			LEFT OUTER JOIN BAS_PROCESSSEGMENT  				PS  ON  L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
																	AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
			LEFT OUTER JOIN CMD_DICTIONARY 						PSD ON  PS.PROCESSSEGMENTNAME = PSD.DICTIONARYID
																	AND PSD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
			LEFT OUTER JOIN BAS_PRODUCTDEFINITION 				PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
																	AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN BAS_AREA 							A   ON  L.AREAID = A.AREAID
			LEFT OUTER JOIN CMD_DICTIONARY 						AD  ON  A.AREANAME = AD.DICTIONARYID
																	AND AD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}	
			<!--2021.07.29 TOBE Add LOCKING초기화시 TXNHISTKEY가 Key값임 -->
			LEFT OUTER JOIN (SELECT PLL.LOTID
			                      , PLL.PROCESSSEGMENTID
			                      , PLL.PROCESSSEGMENTVERSION
			                      , PLL.PRODUCTDEFID
			                      , PLL.PRODUCTDEFVERSION                            
			                      , MAX(PLL.TXNHISTKEY) AS LOCKINGTXNHISTKEY
			                   FROM PCM_LOTLOCKING PLL   
			                 GROUP BY PLL.LOTID
			                      , PLL.PROCESSSEGMENTID
			                      , PLL.PROCESSSEGMENTVERSION
			                      , PLL.PRODUCTDEFID
			                      , PLL.PRODUCTDEFVERSION                 
			                                               )  LL     ON L.LOTID                  = LL.LOTID                                  
			                                                         AND L.PROCESSSEGMENTID      = LL.PROCESSSEGMENTID
			                                                         AND L.PROCESSSEGMENTVERSION = LL.PROCESSSEGMENTVERSION
			                                                         AND L.PRODUCTDEFID          = LL.PRODUCTDEFID
			                                                         AND L.PRODUCTDEFVERSION     = LL.PRODUCTDEFVERSION
			WHERE 	1 = 1					
			AND 	L.LOTID = #{LOTID}		
			<!-- 2021.07.14 TOBE Modify 이상발생정보에서 보여지는 정보는 재작업의 우려가 있으므로 제외 -->
			<!--
			UNION ALL						
			SELECT  AL.LOTID
						,AL.LOCKINGTXNHISTKEY
						,AL.PRODUCTDEFID
						,AL.PRODUCTDEFVERSION
						,PD.PRODUCTDEFNAME
						,L.PANELQTY
						,L.PCSQTY
						,L.PROCESSSEGMENTID
						,PSD.DICTIONARYNAME 							AS PROCESSSEGMENTNAME
						,AL.AREAID
						,AD.DICTIONARYNAME 							AS AREANAME
						,AL.RESULTCODE 
						,NVL(AL.ISLOCKING, 'N') AS ISLOCKING					
						,AL.ABNOCRNO
						,AL.ABNOCRTYPE
						,AL."sequence" AS SEQUENCE
						,AL.PLANTID
						,AL.ENTERPRISEID
						,AL.LASTTXNID
						,NVL(AL.ISLOCKING, 'N') AS ISLOTLOCKING	
						,L.LOTSTATE	
			FROM 	QAM_AFFECTLOT 								AL
			INNER JOIN PCM_LOT 									L ON AL.LOTID = L.LOTID
			LEFT OUTER JOIN BAS_PROCESSSEGMENT  				    PS  ON  AL.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
																	AND AL.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
			LEFT OUTER JOIN CMD_DICTIONARY 						PSD ON  PS.PROCESSSEGMENTNAME = PSD.DICTIONARYID
																	AND PSD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
			LEFT OUTER JOIN BAS_PRODUCTDEFINITION 				PD  ON  AL.PRODUCTDEFID = PD.PRODUCTDEFID
																	AND AL.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN BAS_AREA 							A   ON  AL.AREAID = A.AREAID
			LEFT OUTER JOIN CMD_DICTIONARY 						AD  ON  A.AREANAME = AD.DICTIONARYID
																	AND AD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}																
			WHERE 	1 = 1
			AND   	AL.ABNOCRNO =#{ABNOCRNO}
			AND   	AL.ABNOCRTYPE = #{ABNOCRTYPE}
			AND   	AL.ENTERPRISEID = #{ENTERPRISEID}
			AND   	AL.PLANTID = #{PLANTID}       -->	
		) A			
		GROUP BY  LOTID
						,PRODUCTDEFID
						,PRODUCTDEFVERSION
						,PRODUCTDEFNAME
						,PANELQTY
						,PCSQTY
						,PROCESSSEGMENTID
						,PROCESSSEGMENTNAME
						,AREAID
						,AREANAME	
						,LOTSTATE

    </select>
    
    <!-- CAR 접수 순번에 따른 마지막차수를 조회한다. AS-IS : GetSequenceDegree ver. 10001-->
    <select id="selectSequenceDegree" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectSequenceDegree  */
    	SELECT MAX(DEGREE) AS DEGREE
		FROM 	QAM_CARAPPROVAL
		WHERE 	1 = 1 
		AND 	ABNOCRNO = #{ABNOCRNO}
		AND 	ABNOCRTYPE = #{ABNOCRTYPE}
		AND 	SEQUENCE = #{SEQUENCE}
	</select>
	
	 <!-- CAR 요청 순번에 따른 상태를 조회한다. AS-IS : GetSequenceState ver. 10001-->
    <select id="selectSequenceState" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectSequenceState  */
    	SELECT STATE
		FROM 	QAM_CARREQUEST
		WHERE 	1 = 1 
		AND 	ABNOCRNO = #{ABNOCRNO}
		AND 	ABNOCRTYPE = #{ABNOCRTYPE}
		AND 	SEQUENCE = #{SEQUENCE}
	</select>
	
	<!-- CAR 요청정보를 조회한다. AS-IS : GetCarRequest ver. 10001-->
    <select id="selectCarRequest" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectCarRequest  */
    	SELECT 	CR.ABNOCRNO 
					,CR.ABNOCRTYPE
					,CR.SEQUENCE
					,CR.STATE
					,CR.CARREQUESTDATE
					,CR.ISREQUESTMEASURES
					,CR.CHARGERID
					,US.USER_NM														AS CHARGERNAME
					,CR.COMMENTS
					,CR.REASONCONSUMABLEDEFID || '|' || CR.REASONCONSUMABLEDEFVERSION   AS SPLITCONSUMABLEDEFIDVERSION
					,CR.REASONCONSUMABLEDEFID
					,CR.REASONCONSUMABLEDEFVERSION
					,CR.REASONCONSUMABLELOTID
					,CR.REASONSEGMENTID
					,CR.REASONAREAID
					,AD.DICTIONARYNAME												AS REASONAREANAME
					
		FROM 	QAM_CARREQUEST													CR	
		LEFT OUTER JOIN CMD_USERS 												US	ON	US.USER_ID = CR.CHARGERID
		LEFT OUTER JOIN BAS_AREA 												A 	ON 	A.AREAID = CR.REASONAREAID
		LEFT OUTER JOIN CMD_DICTIONARY 											AD 	ON 	AD.DICTIONARYID = A.AREANAME
																					AND AD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE	1 = 1
		AND		CR.ABNOCRNO = #{ABNOCRNO}
		AND		CR.ABNOCRTYPE = #{ABNOCRTYPE}
		AND		CR.SEQUENCE = #{SEQUENCE}
	</select>
	
	<!-- CAR 요청정보를 조회한다. AS-IS : GetCarRequestAbnormal ver. 10001-->
    <select id="selectCarRequestAbnormal" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectCarRequestAbnormal  */
    	SELECT 	 CR.ABNOCRNO 
					,CR.ABNOCRTYPE
					,CR.SEQUENCE
					,CR.STATE
					,CR.CARREQUESTDATE
					,CR.ISREQUESTMEASURES
					,CR.CHARGERID
					,US.USER_NM														AS CHARGERNAME
					,CR.COMMENTS
					,CASE 
							WHEN NVL(CR.REASONCONSUMABLEDEFID , '') = ''
							THEN AO.REASONCONSUMABLEDEFID
							ELSE CR.REASONCONSUMABLEDEFID
						END																AS REASONCONSUMABLEDEFID
					,CASE 
							WHEN NVL(CR.REASONCONSUMABLEDEFID , '') = ''
							THEN AO.REASONCONSUMABLEDEFVERSION
							ELSE CR.REASONCONSUMABLEDEFVERSION
						END																AS REASONCONSUMABLEDEFVERSION
					,CASE 
							WHEN NVL(CR.REASONCONSUMABLEDEFID , '') = ''
							THEN AO.REASONCONSUMABLELOTID
							ELSE CR.REASONCONSUMABLELOTID
						END																AS REASONCONSUMABLELOTID
					,CASE 
							WHEN NVL(CR.REASONCONSUMABLEDEFID , '') = ''
							THEN AO.REASONSEGMENTID
							ELSE CR.REASONSEGMENTID
						END																AS REASONSEGMENTID
					,CASE 
							WHEN NVL(CR.REASONCONSUMABLEDEFID , '') = ''
							THEN AO.REASONAREAID
							ELSE CR.REASONAREAID
						END																AS REASONAREAID
					,CASE 
							WHEN NVL(CR.REASONCONSUMABLEDEFID , '') = ''
							THEN AD.DICTIONARYNAME
							ELSE RD.DICTIONARYNAME
						END																AS REASONAREANAME
			FROM 	QAM_CARREQUEST													CR	
			INNER JOIN QAM_ABNORMALOCCURRENCE										AO  ON  CR.ABNOCRNO = AO.ABNOCRNO
																						AND CR.ABNOCRTYPE = AO.ABNOCRTYPE																							
			LEFT OUTER JOIN CMD_USERS 												US	ON	US.USER_ID = CR.CHARGERID
			LEFT OUTER JOIN BAS_AREA 												AA	ON  AO.REASONAREAID = AA.AREAID
			LEFT OUTER JOIN CMD_DICTIONARY											AD  ON  AA.AREANAME = AD.DICTIONARYID
																						AND AD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
			LEFT OUTER JOIN BAS_AREA													RA  ON  CR.REASONAREAID = RA.AREAID 				
			LEFT OUTER JOIN CMD_DICTIONARY											RD  ON  RA.AREANAME = RD.DICTIONARYID
																						AND RD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
			WHERE	1 = 1
			AND		CR.ABNOCRNO = #{ABNOCRNO}
			AND		CR.ABNOCRTYPE = #{ABNOCRTYPE}
			AND		CR.SEQUENCE = #{SEQUENCE}
	</select>
	
	<!-- CAR 접수정보를 조회한다. AS-IS : GetCarReceipt ver. 10001-->
    <select id="selectCarReceipt" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectCarReceipt  */
    	SELECT 	 CA.ABNOCRNO
					,CA.ABNOCRTYPE
					,CA.SEQUENCE
					,CA.DEGREE
					,CA.RECEIPTDATE
					,CA.ISRECEIVEMEASURES
					,CA.RECEIPTUSER
					,US.USER_NM AS RECEIPTUSERNAME
					,CA.DESCRIPTION
		FROM 	QAM_CARAPPROVAL 						CA 
		LEFT OUTER JOIN CMD_USERS 					US ON CA.RECEIPTUSER = US.USER_ID
		WHERE 	1 = 1
		AND 	CA.ABNOCRNO = #{ABNOCRNO}
		AND 	CA.ABNOCRTYPE = #{ABNOCRTYPE}
		AND 	CA.SEQUENCE = #{SEQUENCE}
		AND	CA.DEGREE = #{DEGREE}
    </select>
    
    <!-- CAR 승인정보이력을 조회한다. AS-IS : GetCarAcceptHistory ver. 10001-->
    <select id="selectCarAcceptHistory" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectCarAcceptHistory  */
    	SELECT
				CAH.ABNOCRNO
			,CAH.ABNOCRTYPE
			,CAH.SEQUENCE
			,CAH.DEGREE
			--**,TO_CHAR(CAH.APPROVALDATE, 'yyyy-MM-dd')				AS APPROVALDATE
			,CAH.APPROVALDATE
			,CAH.ACTIONRESULT
			,CASE 
					WHEN D.DICTIONARYNAME IS NULL
					THEN REFUSEREASON
					ELSE D.DICTIONARYNAME 
				END 												AS REFUSEREASON
			,TO_CHAR(EC.CHECKDATE, 'YYYY-MM-DD HH24:MI:SS') AS CHECKDATE
			,EC.CHECKRESULT
		FROM 	QAM_CARAPPROVALHISTORY 								CAH
		INNER JOIN QAM_CARREQUEST 									CR	ON	CR.ABNOCRNO = CAH.ABNOCRNO 
																		AND CR.ABNOCRTYPE = CAH.ABNOCRTYPE 
																		AND CR.SEQUENCE = CAH.SEQUENCE
		LEFT OUTER JOIN QAM_ESTIMATEVALIDITY							EC  ON  EC.ABNOCRNO = CAH.ABNOCRNO 
																		AND EC.ABNOCRTYPE = CAH.ABNOCRTYPE
																		AND EC.SEQUENCE = CAH.SEQUENCE 
		LEFT OUTER JOIN CMD_DICTIONARY 								D 	ON  CAH.REFUSEREASON = D.DICTIONARYID
																		AND D.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
		WHERE 	1 = 1
		AND 	CAH.ABNOCRNO = #{ABNOCRNO}
		AND 	CAH.ABNOCRTYPE = #{ABNOCRTYPE}
		AND 	CAH.SEQUENCE = #{SEQUENCE}
		--AND		CAH.TXNID = 'Modify'
		AND 	CAH.DEGREE != '0'
		AND     CAH.TXNCOMMENT = 'History'

		UNION
		
		SELECT
				CA.ABNOCRNO
			,CA.ABNOCRTYPE
			,CA.SEQUENCE
			,CA.DEGREE
			--**,TO_CHAR(CA.APPROVALDATE, 'yyyy-MM-dd')				AS APPROVALDATE
			,CA.APPROVALDATE
			,CA.ACTIONRESULT
			,CASE 
					WHEN D.DICTIONARYNAME IS NULL
					THEN REFUSEREASON
					ELSE D.DICTIONARYNAME 
				END 												AS REFUSEREASON
			,TO_CHAR(EC.CHECKDATE, 'YYYY-MM-DD HH24:MI:SS') AS CHECKDATE
			,EC.CHECKRESULT
		FROM 	QAM_CARAPPROVAL 										CA
		LEFT OUTER JOIN QAM_ESTIMATEVALIDITY							EC  ON  EC.ABNOCRNO = CA.ABNOCRNO 
																		AND EC.ABNOCRTYPE = CA.ABNOCRTYPE
																		AND EC.SEQUENCE = CA.SEQUENCE 
		LEFT OUTER JOIN CMD_DICTIONARY 								D 	ON  CA.REFUSEREASON = D.DICTIONARYID
																		AND D.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
		WHERE 	1 = 1
		AND 	CA.ABNOCRNO = #{ABNOCRNO}
		AND 	CA.ABNOCRTYPE = #{ABNOCRTYPE}
		AND 	CA.SEQUENCE = #{SEQUENCE}
    </select>
    
    <!-- 이상발생 유효성 평가 이력 조회.  AS-IS : GetCarEstimateHistory ver. 10001-->
    <select id="selectCarEstimateHistory" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectCarEstimateHistory  */
   		SELECT EH.ABNOCRNO
					,EH.ABNOCRTYPE
					,EH.SEQUENCE
					,EH.ISCLOSE
					,TO_NUMBER(EH.DESCRIPTION) 		AS DEGREE
					,TO_CHAR(EH.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
		FROM QAM_ESTIMATEVALIDITYHISTORY EH
		WHERE 1=1
		AND EH.ABNOCRNO =#{ABNOCRNO}
		AND EH.ABNOCRTYPE =#{ABNOCRTYPE}
		AND EH.SEQUENCE =#{SEQUENCE}
    </select>
    
    <!-- 유효성 평가정보를 조회한다.  AS-IS : GetCarValidation ver. 10001-->
    <select id="selectCarValidation" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectCarValidation  */
    	SELECT  EV.ABNOCRNO
					,EV.ABNOCRTYPE
					,EV.SEQUENCE
					,EV.CHECKDATE
					,EV.CHECKUSER
					,US.USER_NM 							AS CHECKUSERNAME
					,EV.CHECKRESULT
					,EV.CHECKDETAILS
					,EV.INQUIRYFROM
					,EV.INQUIRYTO
					,EV.CONCURRENCE
					,EV.ISCLOSE
		FROM 	QAM_ESTIMATEVALIDITY 					EV
		LEFT OUTER JOIN CMD_USERS 						US	ON	EV.CHECKUSER = US.USER_ID
		WHERE 	1 = 1
		AND 	EV.ABNOCRNO = #{ABNOCRNO}
		AND 	EV.ABNOCRTYPE = #{ABNOCRTYPE}
		AND 	EV.SEQUENCE = #{SEQUENCE}
    </select>
    
    <!-- 해당 기간안에 스펙아웃이 발생한 Count를 가져온다.  AS-IS : GetConcurrenceCount ver. 10001-->
    <select id="selectConcurrenceCount" parameterType="map" resultType="hashmap">
    	/* smh.qam.dao.QAM01200Dao.selectConcurrenceCount  */
    	SELECT 	COUNT(*) AS COUNT
		FROM 	QAM_CHEMICALANALYSISDETAIL
		WHERE 	1 = 1
		AND 	ISSPECOUT = 'Y'
		AND 	ANALYSISDATE BETWEEN #{FROMDATE} AND #{TODATE}
    </select>
    
    <!--
	************************************************************
	* CAR 요청 정보
	************************************************************
	-->
    <!-- CAR 요청 정보 등록 -->
    <insert id="insertQamCarrequest" parameterType="map">
    INSERT INTO QAM_CARREQUEST( 
        ABNOCRNO  
        ,ABNOCRTYPE  
        ,SEQUENCE  
        ,ENTERPRISEID  
        ,PLANTID  
        ,COMMENTS  
        ,CARREQUESTDATE  
        ,ISREQUESTMEASURES  
        ,CHARGERID  
        ,STATE  
        ,REASONCONSUMABLEDEFID  
        ,REASONCONSUMABLEDEFVERSION  
        ,REASONCONSUMABLELOTID  
        ,REASONSEGMENTID  
        ,REASONAREAID  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{ABNOCRNO}  
        ,#{ABNOCRTYPE}  
        ,#{SEQUENCE}  
        ,#{ENTERPRISEID}  
        ,#{PLANTID}  
        ,#{COMMENTS}  
        ,TO_DATE(SUBSTR(#{CARREQUESTDATE}, 1, 12) , 'YYYYMMDDHH24MISS')
        ,#{ISREQUESTMEASURES}  
        ,#{CHARGERID}  
        ,#{STATE}  
        ,#{REASONCONSUMABLEDEFID}  
        ,#{REASONCONSUMABLEDEFVERSION}  
        ,#{REASONCONSUMABLELOTID}  
        ,#{REASONSEGMENTID}  
        ,#{REASONAREAID}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>

    <!-- CAR 요청 정보 변경 -->
    <update id="updateQamCarrequest" parameterType="map" >
    UPDATE QAM_CARREQUEST 
    SET 
       <!--  ENTERPRISEID = #{ENTERPRISEID}     
        ,PLANTID = #{PLANTID}  -->    
        COMMENTS = #{COMMENTS}     
        ,CARREQUESTDATE = #{CARREQUESTDATE}     
        ,ISREQUESTMEASURES = #{ISREQUESTMEASURES}     
        ,CHARGERID = #{CHARGERID}     
        <!-- ,STATE = #{STATE}      -->
        ,REASONCONSUMABLEDEFID = #{REASONCONSUMABLEDEFID}     
        ,REASONCONSUMABLEDEFVERSION = #{REASONCONSUMABLEDEFVERSION}     
        ,REASONCONSUMABLELOTID = #{REASONCONSUMABLELOTID}     
        ,REASONSEGMENTID = #{REASONSEGMENTID}     
        ,REASONAREAID = #{REASONAREAID}     
        ,DESCRIPTION = #{DESCRIPTION}             
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    AND SEQUENCE = #{SEQUENCE}
    </update>
    
    <!-- CAR 요청 정보 상태값 변경 -->
    <update id="updateQamCarrequestState" parameterType="map" >
   	UPDATE QAM_CARREQUEST 
    SET 
       STATE = #{STATE}     
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT} 
    WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    AND SEQUENCE = #{SEQUENCE}
    </update>
    
    <!-- CAR 승인정보 상세조회-->
    <select id="selectQamCarapproval" parameterType="map" resultType="hashmap">
    SELECT 
        A.ABNOCRNO	 
        ,A.ABNOCRTYPE	 
        ,A.DEGREE	 
        ,A.SEQUENCE	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.RECEIPTDATE	 
        ,A.ISRECEIVEMEASURES	 
        ,A.RECEIPTUSER	 
        ,A.APPROVALDATE	 
        ,A.APPROVALUSER	 
        ,A.STATE	 
        ,A.ACTIONRESULT	 
        ,A.REFUSEREASON	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
    FROM	QAM_CARAPPROVAL A 
    WHERE A.ABNOCRNO = #{ABNOCRNO}
    AND	A.ABNOCRTYPE = #{ABNOCRTYPE}
    AND	A.DEGREE = #{DEGREE}
    AND	A.SEQUENCE = #{SEQUENCE}
    </select>
    
    <!-- CAR 승인정보 등록 -->
    <insert id="insertQamCarapproval" parameterType="map">
    INSERT INTO QAM_CARAPPROVAL( 
        ABNOCRNO  
        ,ABNOCRTYPE  
        ,DEGREE  
        ,SEQUENCE  
        ,ENTERPRISEID  
        ,PLANTID  
        ,RECEIPTDATE  
        ,ISRECEIVEMEASURES  
        ,RECEIPTUSER  
        ,APPROVALDATE  
        ,APPROVALUSER  
        ,STATE  
        ,ACTIONRESULT  
        ,REFUSEREASON  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{ABNOCRNO}  
        ,#{ABNOCRTYPE}  
        ,#{DEGREE}  
        ,#{SEQUENCE}  
        ,#{ENTERPRISEID}  
        ,#{PLANTID}  
        ,TO_DATE(SUBSTR(#{RECEIPTDATE}, 1, 12) , 'YYYYMMDDHH24MISS')  
        ,#{ISRECEIVEMEASURES}  
        ,#{RECEIPTUSER}  
        ,#{APPROVALDATE}  
        ,#{APPROVALUSER}  
        ,#{STATE}  
        ,#{ACTIONRESULT}  
        ,#{REFUSEREASON}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>
    
    <!-- CAR 승인정보 변경 -->
    <update id="updateQamCarapproval" parameterType="map" >
    UPDATE QAM_CARAPPROVAL 
    SET 
        APPROVALDATE = TO_DATE(SUBSTR(#{APPROVALDATE}, 1, 12) , 'YYYYMMDDHH24MISS') 
        ,ACTIONRESULT = #{ACTIONRESULT}     
        ,REFUSEREASON = #{REFUSEREASON}     
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT} 
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    AND DEGREE = #{DEGREE}
    AND SEQUENCE = #{SEQUENCE}
    </update>
    
    <!-- CAR 승인정보 삭제 -->
    <update id="deleteQamCarapproval" parameterType="map" > 
    DELETE FROM QAM_CARAPPROVAL 
    WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    AND DEGREE = #{DEGREE}
    AND SEQUENCE = #{SEQUENCE}
    </update>
    
    <!-- 이상발생번호와 타입을 받아와 이상발생 테이블의 사유코드를 조회.  AS-IS : GetAbnormalReasonCode ver. 10001-->
    <select id="selectAbnormalReasonCode" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAM01200Dao.selectAbnormalReasonCode  */
    SELECT 	
			REASONCODEID
	FROM 	QAM_ABNORMALOCCURRENCE
	WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    </select>
    
    
    <!--
	************************************************************
	* 유효성 평가정보
	************************************************************
	-->
	<!-- 유효성 평가정보 등록 -->
    <insert id="insertQamEstimatevalidity" parameterType="map">
    INSERT INTO QAM_ESTIMATEVALIDITY( 
        ABNOCRNO  
        ,ABNOCRTYPE  
        ,SEQUENCE  
        ,CHECKDATE  
        ,CHECKUSER  
        ,CHECKRESULT  
        ,CHECKDETAILS  
        ,INQUIRYFROM  
        ,INQUIRYTO  
        ,CONCURRENCE  
        ,CLOSEDATE  
        ,ISCLOSE  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{ABNOCRNO}  
        ,#{ABNOCRTYPE}  
        ,#{SEQUENCE}  
        ,TO_DATE(SUBSTR(#{CHECKDATE}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')
        ,#{CHECKUSER}  
        ,#{CHECKRESULT}  
        ,#{CHECKDETAILS}  
        ,#{INQUIRYFROM}  
        ,#{INQUIRYTO}  
        ,#{CONCURRENCE}  
        ,TO_DATE(SUBSTR(#{CLOSEDATE}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')
        ,#{ISCLOSE}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>

    <!-- 유효성 평가정보 변경 -->
    <update id="updateQamEstimatevalidity" parameterType="map" >
    UPDATE QAM_ESTIMATEVALIDITY 
    SET 
        CHECKDATE = TO_DATE(SUBSTR(#{CHECKDATE}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')
        ,CHECKUSER = #{CHECKUSER}     
        ,CHECKRESULT = #{CHECKRESULT}     
        ,CHECKDETAILS = #{CHECKDETAILS}     
        ,INQUIRYFROM = #{INQUIRYFROM}     
        ,INQUIRYTO = #{INQUIRYTO}     
        ,CONCURRENCE = #{CONCURRENCE}     
        ,CLOSEDATE = TO_DATE(SUBSTR(#{CLOSEDATE}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')
        ,ISCLOSE = #{ISCLOSE}     
        ,DESCRIPTION = #{DESCRIPTION}             
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    AND SEQUENCE = #{SEQUENCE}
    </update>
    
    <!-- 유효성 평가정보 조회-->
    <select id="selectQamEstimatevalidityList" parameterType="map" resultType="hashmap">
     /* smh.qam.dao.QAM01200Dao.selectQamEstimatevalidityList  */
    SELECT 
        A.ABNOCRNO	
        ,A.ABNOCRTYPE	
        ,A.SEQUENCE	
        ,A.CHECKDATE	
        ,A.CHECKUSER	
        ,A.CHECKRESULT	
        ,A.CHECKDETAILS	
        ,A.INQUIRYFROM	
        ,A.INQUIRYTO	
        ,A.CONCURRENCE	
        ,A.CLOSEDATE	
        ,A.ISCLOSE	
        ,A.DESCRIPTION	
        ,A.CREATOR	
        ,A.CREATEDTIME	
        ,A.MODIFIER	
        ,A.MODIFIEDTIME	
        ,A.LASTTXNHISTKEY	
        ,A.LASTTXNID	
        ,A.LASTTXNUSER	
        ,A.LASTTXNTIME	
        ,A.LASTTXNCOMMENT	
        ,A.VALIDSTATE	
    FROM	QAM_ESTIMATEVALIDITY A 
    WHERE 1=1 
    <if test="ABNOCRNO != null and ABNOCRNO !='' "> 
        AND A.ABNOCRNO = #{ABNOCRNO}
    </if>
    <if test="ABNOCRTYPE != null and ABNOCRTYPE !='' "> 
        AND A.ABNOCRTYPE = #{ABNOCRTYPE}
    </if>
    <if test="SEQUENCE != null and SEQUENCE !='' "> 
        AND A.SEQUENCE = #{SEQUENCE}
    </if>
    </select>
    
    <!-- AffectLot을 수동추가하기위한 Lot조회  -AS-IS : SelectLotToAddAffectLot ver. 10001-->
    <select id="selectLotToAddAffectLot" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAM01200Dao.selectLotToAddAffectLot  */
    SELECT DISTINCT
		 L.LOTID
		,L.PRODUCTDEFID
		,PD.PRODUCTDEFNAME
		,L.PRODUCTDEFVERSION					
		,L.PANELQTY
		,L.PCSQTY
		,L.PROCESSSEGMENTID
		,PSD.DICTIONARYNAME 							AS PROCESSSEGMENTNAME
		,L.AREAID
		,AD.DICTIONARYNAME 							AS AREANAME
		,NULL						AS WORKSTARTTIME
		,NULL						AS RESULTCODE 
		,CASE WHEN NVL(L.ISLOCKING,'') =''
			THEN 'N'
			ELSE L.ISLOCKING END 						AS ISLOTLOCKING	
		,'Y'											AS ISADDED
		,NULL						AS ABNOCRNO
		,NULL						AS ABNOCRTYPE 
		,NULL						AS SEQUENCE
		,L.PLANTID
		,L.ENTERPRISEID
		,L.LOTSTATE
		,0 AS CHK
	FROM	PCM_LOT										L
	INNER JOIN BAS_PROCESSSEGMENT  				    	PS	ON  L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
														    AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
	LEFT OUTER JOIN CMD_DICTIONARY 						PSD ON  PS.PROCESSSEGMENTNAME = PSD.DICTIONARYID
															AND PSD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
	INNER JOIN BAS_PRODUCTDEFINITION 					PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
															AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
	INNER JOIN BAS_AREA 									A   ON  L.AREAID = A.AREAID
	LEFT OUTER JOIN CMD_DICTIONARY 						AD  ON  A.AREANAME = AD.DICTIONARYID
															AND AD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}

	WHERE	1 = 1 
	
	<if test="LOTID != null and LOTID !='' "> 
		AND L.LOTID LIKE '%' || #{LOTID} || '%'
	</if>			
	
	<if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
		AND L.PRODUCTDEFID LIKE '%' || #{PRODUCTDEFID}  || '%'
	</if>	
	
	AND		L.ENTERPRISEID = #{ENTERPRISEID}
	AND 	L.PLANTID = #{PLANTID}
	--AND 	L.LOTSTATE IN ('InProduction', 'InTransit','Finished') 	
	AND 	L.LOTSTATE IN ('InProduction', 'InTransit') 
	AND  	NVL(L.ISDEFECTED, 'N') = 'N' 
	AND 	 NOT EXISTS
			(
				SELECT	1 
				FROM 	QAM_AFFECTLOT AL
				WHERE 	1 = 1
				AND   	AL.LOTID = L.LOTID
				AND   	AL.ABNOCRNO =#{ABNOCRNO}
				AND   	AL.ABNOCRTYPE = #{ABNOCRTYPE}
				AND   	AL.ENTERPRISEID = #{ENTERPRISEID}
				AND   	AL.PLANTID = #{PLANTID}					
			)
    </select>
    
    <!-- 품질규격 이상발생 > 품질규격 측정항목의 파일 리스트 조회 AS-IS : GetOperationInspMeasureImage ver. 10001 -->
    <select id="selectOperationInspMeasureImage" parameterType="map" resultType="hashmap">
     /* smh.qam.dao.QAM01200Dao.selectOperationInspMeasureImage  */
    SELECT ATCH_FILE_GUID
    			,DA.DAITEMID
				,DA.DAPOINTID
				,DA.RESULT
				,DA.VALUE
				,B1.ATCH_SRC_KEY
				,B1.ATCH_TY_CD
	FROM BAS_DARESULT 			DA
	LEFT JOIN CMD_ATCH_FILES_MPNGS		B1		ON	B1.ATCH_SRC_KEY = (DA.TXNHISTKEY || '|'  || DA.RESOURCETYPE || '|*' )
																		AND B1.ATCH_TY_CD	 = 'BAS_DARESULT' 
	LEFT JOIN CMD_ATCH_FILES 					B2 	ON B1.ATCH_FILE_ID = B2.ATCH_FILE_ID
																		 AND B2.USE_YN  = 'Y'
	WHERE 	1 = 1
	AND 	B2.ATCH_FILE_ID IS NOT NULL
	AND 	DA.RESOURCEID = #{LOTID}
	AND 	DA.DAITEMID = #{DAITEMID}
	<!-- AND 	DA.RESOURCEID = '210115F002-1-FG00-003-001' -->
	ORDER BY  DA.DAPOINTID
    </select>
    
</mapper>
