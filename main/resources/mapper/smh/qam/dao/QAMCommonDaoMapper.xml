<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.qam.dao.QAMCommonDao">
                
    <!-- 약품이상 발생 화면의 affectLot 추가시 sequence 매기기위한 sequence최대값 조회,AS-IS : GetChemicalAffectLotSequence ver. 10001 -->
    <select id="selectChemicalAffectLotSequence" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectChemicalAffectLotSequence  */
	SELECT MAX("sequence")	AS SEQUENCE
	FROM	QAM_AFFECTLOT
	WHERE ABNOCRNO = #{ABNOCRNO}
	AND	 	ABNOCRTYPE = #{ABNOCRTYPE}
	AND     ENTERPRISEID = #{ENTERPRISEID}
	AND		PLANTID	= #{PLANTID}	
   	</select>
   	
   	<!-- 채번 생성 -->
    <select id="selectSequence" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectSequence  */
    SELECT PREFIX
    			,CREATOR
    			,IDCLASSID
    			,LASTSERIALNO
    			,CREATEDTIME 
	FROM BAS_IDCLASSSERIAL 
	WHERE  PREFIX = #{PREFIX} 
	AND IDCLASSID  = #{IDCLASSID}
    </select>

    <!-- 
         desc : 이상발생정보 조회
         call : insertAbnormalOccurrenceShipmentInspAuto
    -->
    <select id="selectQamAbnormalOccurrenceInfo" parameterType="map" resultType="hashmap">
	    /* smh.qam.dao.QAMCommonDao.selectQamAbnormalOccurrenceInfo  */
	    SELECT ABNOCRNO                      /*이상발생번호*/
	         , ABNOCRTYPE                    /*이상발생유형*/
	         , ENTERPRISEID                  /*회사 ID*/
	         , PLANTID                       /*Site ID*/
	         , PROCESSRELNO                  /*연관번호*/
	         , LOTID                         /*LOT ID*/
	         , DEGREE                        /*차수*/
	         , DEFECTCODE                    /*불량코드*/
	         , QCSEGMENTID                   /*품질관리공정 ID*/
	         , PROCESSDEFID                  /*라우팅 ID*/
	         , PROCESSDEFVERSION             /*라우팅 Version*/
	         , PROCESSSEGMENTID              /*공정 ID*/
	         , PROCESSSEGMENTVERSION         /*공정 Version*/
	         , PROCESSSEGMENTCLASSID         /*공정 그룹 ID*/
	         , USERSEQUENCE                  /*공정수순*/
	         , AREAID                        /*작업장 ID*/
	         , EQUIPMENTID                   /*설비 ID*/
	         , CHILDEQUIPMENTID              /*설비단 ID*/
	         , PRODUCTDEFID                  /*제품 정의 ID*/
	         , PRODUCTDEFVERSION             /*제품 정의 Version*/
	         , CONSUMABLEDEFID               /*자재 정의 ID*/
	         , CONSUMABLEDEFVERSION          /*자재 정의 Version*/
	         , CLOSEDATE                     /*마감일시*/
	         , STATE                         /*상태*/
	         , REASONCODEID                  /*사유코드 ID*/
	         , INSPITEMID                    /*검사 항목 ID*/
	         , INSPITEMVERSION               /*검사 항목 Version*/
	         , ISCLAIMPROCESS                /*Claim처리여부*/
	         , COMPANYAGREE                  /*업체동의*/
	         , COMPANYAGREEDATE              /*업체동의일시*/
	         , NCRISSUEDATE                  /*NCR발행일시*/
	         , ISNCRISSUE                    /*NCR발행여부*/
	         , REASONCONSUMABLEDEFID         /*원인자재 정의 ID*/
	         , REASONCONSUMABLEDEFVERSION    /*원인자재 정의 VERSION*/
	         , REASONCONSUMABLELOTID         /*원인자재LOT*/
	         , REASONSEGMENTID               /*원인공정*/
	         , REASONAREAID                  /*원인 작업장 ID*/
	         , DESCRIPTION                   /*설명*/
	         , VALIDSTATE                    /*유효여부*/
		  FROM QAM_ABNORMALOCCURRENCE 
		 WHERE ABNOCRNO                      = #{ABNOCRNO}                   /*이상발생번호*/
		   AND ABNOCRTYPE                    = #{ABNOCRTYPE}                 /*이상발생유형*/
    </select>

    <!-- 
         desc : CAR 요청 정보
         call : insertCARRequestAuto
    -->
    <select id="selectQamCarRequestInfo" parameterType="map" resultType="hashmap">
	    /* smh.qam.dao.QAMCommonDao.selectQamCarRequestInfo  */
	    SELECT ABNOCRNO                      /*이상발생번호*/
	         , ABNOCRTYPE                    /*이상발생유형*/
	         , SEQUENCE                      /*순서*/
	         , ENTERPRISEID                  /*회사 ID*/
	         , PLANTID                       /*Site ID*/
	         , COMMENTS                      /*요청내용*/
	         , CARREQUESTDATE                /*CAR 요청일자*/
	         , ISREQUESTMEASURES             /*대책요청여부*/
	         , CHARGERID                     /*담당자 ID*/
	         , STATE                         /*상태*/
	         , REASONCONSUMABLEDEFID         /*원인자재 정의 ID*/
	         , REASONCONSUMABLEDEFVERSION    /*원인자재 정의 VERSION*/
	         , REASONCONSUMABLELOTID         /*원인자재LOT*/
	         , REASONSEGMENTID               /*원인공정*/
	         , REASONAREAID                  /*원인 작업장 ID*/
	         , DESCRIPTION                   /*설명*/
	         , CREATOR                       /*생성자*/
	         , CREATEDTIME                   /*생성일*/
	         , MODIFIER                      /*수정자*/
	         , MODIFIEDTIME                  /*수정일*/
	         , LASTTXNHISTKEY                /*마지막TXN HistKey*/
	         , LASTTXNID                     /*마지막TXN ID*/
	         , LASTTXNUSER                   /*마지막TXN 사용자*/
	         , LASTTXNTIME                   /*마지막TXN 시간*/
	         , LASTTXNCOMMENT                /*마지막TXN 코멘트*/
	         , VALIDSTATE                    /*유효여부*/
	      FROM QAM_CARREQUEST
	     WHERE ABNOCRNO                      = #{ABNOCRNO}                       /*이상발생번호*/
	       AND ABNOCRTYPE                    = #{ABNOCRTYPE}                     /*이상발생유형*/
	       AND SEQUENCE                      = #{SEQUENCE}                       /*순서*/
    </select>

    <!-- 
         desc : LOT의 작업자원정보의 외주검사여부
         call : 
    -->
    <select id="selectLotIsOSPInspControl" parameterType="map" resultType="String">
	    /* smh.qam.dao.QAMCommonDao.selectLotIsOSPInspControl  */
	    SELECT NVL(RS.ISOSPINSPCONTROL, 'N')
          FROM PCM_LOT LOT
             , BAS_RESOURCE RS
         WHERE LOT.RESOURCEID = RS.RESOURCEID       /*자원ID*/
           AND LOT.LOTID      = #{LOTID}            /*LOT ID*/
	</select>
	
    <!--
         desc : 불량LOT의 MAX값 가져오기
         call :  
    -->
    <select id="selectDefectLotMaxSequence" parameterType="map" resultType="String">
	    /* smh.qam.dao.QAMCommonDao.selectDefectLotMaxSequence */
        SELECT MAX(MAXSEQUENCE) AS LASTID
          FROM ( SELECT DECODE(LENGTH(L.LOTID)-INSTR(L.LOTID, '-', -1)
                              , 1, 'A00'
                                 , SUBSTR(L.LOTID, INSTR(L.LOTID, '-', -1)+1, LENGTHB(L.LOTID))) MAXSEQUENCE
                   FROM PCM_LOT L   
                  WHERE L.LOTID LIKE #{LOTID}||'%' 
                    AND REGEXP_LIKE(SUBSTR(L.LOTID, INSTR(L.LOTID, '-', -1)+1), '[a-zA-Z]') 
                 GROUP BY L.LOTID
               )
         WHERE 1=1
    </select>
    
    <select id="selectDefectLotMaxSequence_back" parameterType="map" resultType="String">
	    /* smh.qam.dao.QAMCommonDao.selectDefectLotMaxSequence */
        SELECT NVL(MAX(SUBSTR(L.LOTID, -3)), 'A00')  AS LASTID
          FROM PCM_LOT    L
         WHERE L.LOTID LIKE #{LOTID}||'%'
           AND REGEXP_LIKE(SUBSTR(L.LOTID, INSTR(L.LOTID, '-', -1)+1), '[a-zA-Z]')
    </select>

    <!--
         desc    : Max Split Lot 조회
    -->
    <select id="selectMaxSplitLot" parameterType="map" resultType="Integer">
        /* smh.qam.dao.QAMCommonDao.selectMaxSplitLot_10002 */
        <![CDATA[
        SELECT  NVL(MAX(MAXSEQUENCE), 0) AS MAX_VALUE
          FROM ( SELECT DECODE(LENGTH(L.LOTID)-INSTR(L.LOTID, '-', -1)
                              , 1, '0'
                                 , SUBSTR(L.LOTID, INSTR(L.LOTID, '-', -1)+1, LENGTHB(L.LOTID))) MAXSEQUENCE
                   FROM PCM_LOT L   
                  WHERE L.LOTID LIKE #{LOTID}||'%' 
                    AND NVL(L.ISDEFECTED, 'N') = 'N'
                    AND NOT REGEXP_LIKE(SUBSTR(L.LOTID, INSTR(L.LOTID, '-', -1)+1), '[a-zA-Z]')
                 GROUP BY L.LOTID
               )
         WHERE 1=1                    
        ]]>
    </select>

    <select id="selectMaxSplitLot_back" parameterType="map" resultType="Integer">
        /* smh.qam.dao.QAMCommonDao.selectMaxSplitLot_10002 */
        <![CDATA[
        SELECT NVL(MAX(TO_NUMBER(SUBSTR(PL.LOTID, -3))), 0) AS MAX_VALUE
          FROM PCM_LOT PL
         WHERE PL.LOTID LIKE '%' || #{LOTID} || '%'
           AND NVL(PL.ISDEFECTED, 'N') = 'N'
           AND NOT REGEXP_LIKE(SUBSTR(PL.LOTID, INSTR(PL.LOTID, '-', -1)+1), '[a-zA-Z]')
        ]]>
    </select>	
    <!-- 
         desc : 이상발생정보 등록
         call : 
    -->
    <insert id="insertQamAbnormalOccurrence" parameterType="map">
        /* smh.qam.dao.QAMCommonDao.insertQamAbnormalOccurrence */
        INSERT INTO QAM_ABNORMALOCCURRENCE
        (     ABNOCRNO                      /*이상발생번호*/
            , ABNOCRTYPE                    /*이상발생유형*/
            , ENTERPRISEID                  /*회사 ID*/
            , PLANTID                       /*Site ID*/
            , PROCESSRELNO                  /*연관번호*/
            , LOTID                         /*LOT ID*/
            , DEGREE                        /*차수*/
            , DEFECTCODE                    /*불량코드*/
            , QCSEGMENTID                   /*품질관리공정 ID*/
            , PROCESSDEFID                  /*라우팅 ID*/
            , PROCESSDEFVERSION             /*라우팅 Version*/
            , PROCESSSEGMENTID              /*공정 ID*/
            , PROCESSSEGMENTVERSION         /*공정 Version*/
            , PROCESSSEGMENTCLASSID         /*공정 그룹 ID*/
            , USERSEQUENCE                  /*공정수순*/
            , AREAID                        /*작업장 ID*/
            , EQUIPMENTID                   /*설비 ID*/
            , CHILDEQUIPMENTID              /*설비단 ID*/
            , PRODUCTDEFID                  /*제품 정의 ID*/
            , PRODUCTDEFVERSION             /*제품 정의 Version*/
            , CONSUMABLEDEFID               /*자재 정의 ID*/
            , CONSUMABLEDEFVERSION          /*자재 정의 Version*/
            , CLOSEDATE                     /*마감일시*/
            , STATE                         /*상태*/
            , REASONCODEID                  /*사유코드 ID*/
            , INSPITEMID                    /*검사 항목 ID*/
            , INSPITEMVERSION               /*검사 항목 Version*/
            , ISCLAIMPROCESS                /*Claim처리여부*/
            , COMPANYAGREE                  /*업체동의*/
            , COMPANYAGREEDATE              /*업체동의일시*/
            , NCRISSUEDATE                  /*NCR발행일시*/
            , ISNCRISSUE                    /*NCR발행여부*/
            , REASONCONSUMABLEDEFID         /*원인자재 정의 ID*/
            , REASONCONSUMABLEDEFVERSION    /*원인자재 정의 VERSION*/
            , REASONCONSUMABLELOTID         /*원인자재LOT*/
            , REASONSEGMENTID               /*원인공정*/
            , REASONAREAID                  /*원인 작업장 ID*/
            , DESCRIPTION                   /*설명*/
            , CREATOR                       /*생성자*/
            , CREATEDTIME                   /*생성일*/
            , LASTTXNHISTKEY                /*마지막TXN HistKey*/
            , LASTTXNID                     /*마지막TXN ID*/
            , LASTTXNUSER                   /*마지막TXN 사용자*/
            , LASTTXNTIME                   /*마지막TXN 시간*/
            , LASTTXNCOMMENT                /*마지막TXN 코멘트*/
            , VALIDSTATE                    /*유효여부*/
        )VALUES( 
              #{ABNOCRNO}                     /*이상발생번호*/
            , #{ABNOCRTYPE}                   /*이상발생유형*/
            , #{ENTERPRISEID}                 /*회사 ID*/
            , #{PLANTID}                      /*Site ID*/
            , #{PROCESSRELNO}                 /*연관번호*/
            , #{LOTID}                        /*LOT ID*/
            , #{DEGREE}                       /*차수*/
            , #{DEFECTCODE}                   /*불량코드*/
            , #{QCSEGMENTID}                  /*품질관리공정 ID*/
            , #{PROCESSDEFID}                 /*라우팅 ID*/
            , #{PROCESSDEFVERSION}            /*라우팅 Version*/
            , #{PROCESSSEGMENTID}             /*공정 ID*/
            , #{PROCESSSEGMENTVERSION}        /*공정 Version*/
            , #{PROCESSSEGMENTCLASSID}        /*공정 그룹 ID*/
            , #{USERSEQUENCE}                 /*공정수순*/
            , #{AREAID}                       /*작업장 ID*/
            , #{EQUIPMENTID}                  /*설비 ID*/
            , #{CHILDEQUIPMENTID}             /*설비단 ID*/
            , #{PRODUCTDEFID}                 /*제품 정의 ID*/
            , #{PRODUCTDEFVERSION}            /*제품 정의 Version*/
            , #{CONSUMABLEDEFID}              /*자재 정의 ID*/
            , #{CONSUMABLEDEFVERSION}         /*자재 정의 Version*/
            , #{CLOSEDATE}                    /*마감일시*/
            , #{STATE}                        /*상태*/
            , #{REASONCODEID}                 /*사유코드 ID*/
            , #{INSPITEMID}                   /*검사 항목 ID*/
            , #{INSPITEMVERSION}              /*검사 항목 Version*/
            , #{ISCLAIMPROCESS}               /*Claim처리여부*/
            , #{COMPANYAGREE}                 /*업체동의*/
            , #{COMPANYAGREEDATE}             /*업체동의일시*/
            , #{NCRISSUEDATE}                 /*NCR발행일시*/
            , #{ISNCRISSUE}                   /*NCR발행여부*/
            , #{REASONCONSUMABLEDEFID}        /*원인자재 정의 ID*/
            , #{REASONCONSUMABLEDEFVERSION}   /*원인자재 정의 VERSION*/
            , #{REASONCONSUMABLELOTID}        /*원인자재LOT*/
            , #{REASONSEGMENTID}              /*원인공정*/
            , #{REASONAREAID}                 /*원인 작업장 ID*/
            , #{DESCRIPTION}                  /*설명*/
            , #{CREATOR}                      /*생성자*/
            , SYSDATE                         /*생성일*/
            , #{LASTTXNHISTKEY}               /*마지막TXN HistKey*/
            , #{LASTTXNID}                    /*마지막TXN ID*/
            , #{CREATOR}                      /*마지막TXN 사용자*/
            , SYSDATE                         /*마지막TXN 시간*/
            , #{LASTTXNCOMMENT}               /*마지막TXN 코멘트*/
            , #{VALIDSTATE}                   /*유효여부*/
        )
    </insert>
    
    <!-- 
         desc : CAR 요청 정보 등록
         call : insertCarRequest
    -->
    <insert id="insertQamCarRequest" parameterType="map">
        /* smh.qam.dao.QAMCommonDao.insertQamCarRequest */
        INSERT INTO QAM_CARREQUEST
        (     ABNOCRNO                      /*이상발생번호*/
            , ABNOCRTYPE                    /*이상발생유형*/
            , SEQUENCE                      /*순서*/
            , ENTERPRISEID                  /*회사 ID*/
            , PLANTID                       /*Site ID*/
            , COMMENTS                      /*요청내용*/
            , CARREQUESTDATE                /*CAR 요청일자*/
            , ISREQUESTMEASURES             /*대책요청여부*/
            , CHARGERID                     /*담당자 ID*/
            , STATE                         /*상태*/
            , REASONCONSUMABLEDEFID         /*원인자재 정의 ID*/
            , REASONCONSUMABLEDEFVERSION    /*원인자재 정의 VERSION*/
            , REASONCONSUMABLELOTID         /*원인자재LOT*/
            , REASONSEGMENTID               /*원인공정*/
            , REASONAREAID                  /*원인 작업장 ID*/
            , DESCRIPTION                   /*설명*/
            , CREATOR                       /*생성자*/
            , CREATEDTIME                   /*생성일*/
            , LASTTXNHISTKEY                /*마지막TXN HistKey*/
            , LASTTXNID                     /*마지막TXN ID*/
            , LASTTXNUSER                   /*마지막TXN 사용자*/
            , LASTTXNTIME                   /*마지막TXN 시간*/
            , LASTTXNCOMMENT                /*마지막TXN 코멘트*/
            , VALIDSTATE                    /*유효여부*/
        )VALUES( 
              #{ABNOCRNO}                     /*이상발생번호*/
            , #{ABNOCRTYPE}                   /*이상발생유형*/
            , #{SEQUENCE}                     /*순서*/
            , #{ENTERPRISEID}                 /*회사 ID*/
            , #{PLANTID}                      /*Site ID*/
            , #{COMMENTS}                     /*요청내용*/
            ,TO_DATE(SUBSTR(#{CARREQUESTDATE}, 1, 12) , 'YYYYMMDDHH24MISS')
            , #{ISREQUESTMEASURES}            /*대책요청여부*/
            , #{CHARGERID}                    /*담당자 ID*/
            , #{STATE}                        /*상태*/
            , #{REASONCONSUMABLEDEFID}        /*원인자재 정의 ID*/
            , #{REASONCONSUMABLEDEFVERSION}   /*원인자재 정의 VERSION*/
            , #{REASONCONSUMABLELOTID}        /*원인자재LOT*/
            , #{REASONSEGMENTID}              /*원인공정*/
            , #{REASONAREAID}                 /*원인 작업장 ID*/
            , #{DESCRIPTION}                  /*설명*/
            , #{CREATOR}                      /*생성자*/
            , SYSDATE                         /*생성일*/
            , #{LASTTXNHISTKEY}               /*마지막TXN HistKey*/
            , #{LASTTXNID}                    /*마지막TXN ID*/
            , #{CREATOR}                      /*마지막TXN 사용자*/
            , SYSDATE                         /*마지막TXN 시간*/
            , #{LASTTXNCOMMENT}               /*마지막TXN 코멘트*/
            , #{VALIDSTATE}                   /*유효여부*/
        )
    </insert>
    
    <!-- 
         desc : 이상발생정보
         call : updateAbnormalReqCompAuto, getAbnormalUpdateReqComp
    -->
    <update id="updateQamAbnormalOccurrence" parameterType="map">
        /* smh.qam.dao.QAMCommonDao.updateQamAbnormalOccurrence */
        UPDATE QAM_ABNORMALOCCURRENCE SET
             <!--   MODIFIER                      = #{MODIFIER}                   /*수정자*/
             , MODIFIEDTIME                  = SYSDATE                       /*수정일*/
             , TXNGROUPHISTKEY               = #{TXNGROUPHISTKEY}            /*TXN GroupHistKey*/
             , TXNID                         = #{TXNID}                      /*TXN ID*/
             , TXNUSER                       = #{MODIFIER}                   /*TXN 사용자*/
             , TXNTIME                       = SYSDATE                       /*TXN 시간*/            -->
             MODIFIER = #{MODIFIER}     
	        ,MODIFIEDTIME = SYSDATE     
	        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
	        ,LASTTXNID = #{LASTTXNID}     
	        ,LASTTXNUSER = #{LASTTXNUSER}     
	        ,LASTTXNTIME = SYSDATE     
	        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT} 
             <if test="STATE != null and STATE !='' "> 
	        	,STATE = #{STATE}    /*상태*/
	        </if>
	        <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
	        	,DESCRIPTION = #{DESCRIPTION}	/*설명*/
	        </if>
	        <if test="COMPANYAGREE != null and COMPANYAGREE !='' "> 
	        	,COMPANYAGREE   = #{COMPANYAGREE}               /*업체동의*/
	        </if>
	        <if test="COMPANYAGREEDATE != null and COMPANYAGREEDATE !='' "> 
	        	,COMPANYAGREEDATE    = #{COMPANYAGREEDATE}              /*업체동의일시*/
	        </if>
	        <if test="ISCLAIMPROCESS != null and ISCLAIMPROCESS !='' "> 
	        	 ,ISCLAIMPROCESS    = #{ISCLAIMPROCESS}              /*Claim처리여부*/
	        </if>
	        <if test="CLAIMSCRAPAMT != null and CLAIMSCRAPAMT !='' "> 
	        	,CLAIMSCRAPAMT = #{CLAIMSCRAPAMT}    /*발생금액(폐기비용)*/
	        </if>
	        <if test="CLAIMETCAMT != null and CLAIMETCAMT !='' "> 
	        	,CLAIMETCAMT = #{CLAIMETCAMT}    /*발생금액(기타비용)*/
	        </if>
         WHERE ABNOCRNO                      = #{ABNOCRNO}                   /*이상발생번호*/
           AND ABNOCRTYPE                    = #{ABNOCRTYPE}                 /*이상발생유형*/
    </update>
    
    
    
    
    
    <!--
	************************************************************
	* 권혜영 추가 쿼리
	************************************************************
	-->
    <!-- NCR 기준(구분자,LOT 쑤량,뿔량쑤량,불량율 ,DEFID,SPC LEVEL,DEF LEVEL),AS-IS : SelectNCRCheckBasis ver. 10001 -->
    <select id="selectNCRCheckBasis" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectNCRCheckBasis  */
    SELECT INSPECTIONCLASSID
				,DECISIONDEGREE
				,SEQUENCE
				,QCGRADE
				,PRIORITY
				,FROMNGRATE
				,TONGRATE
				,NGQUANTITY
				,NGCONDITION
				,QTYORRATE
	FROM 	BAS_QCINTERLOCK
	WHERE 1=1
	AND	INSPECTIONCLASSID = #{INSPECTIONCLASSID}
	AND 	DECISIONDEGREE = #{NCRDECISIONDEGREE} --판정등급
	AND 	ENTERPRISEID = #{ENTERPRISEID}
	AND 	PLANTID = #{PLANTID}
	AND 	DECISIONTYPE = 'NCR'
	AND 	VALIDSTATE ='Valid'
	ORDER BY 
			DECISIONDEGREE
		,	PRIORITY
    </select>
    
    <!-- 약품이상발생화면에서 이상 발생 회차 전 시작시간~ 이상발생 회차 시작시간 전 까지의 시간을 구하는 쿼리,AS-IS : SelectNGCycleTime ver. 10001 -->
    <select id="selectNGCycleTime" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectNGCycleTime  */
    SELECT 
			CY.CYCLESEQUENCE	
		,LAG(CY.TIMECYCLE) OVER W 			AS BEFORETIMECYCLE
		,CY.TIMECYCLE  

	FROM 	BAS_QCCHEMICALCYCLE 					CY
	INNER JOIN BAS_QCCHEMICALITEMCYCLE 			CI ON  CY.INSPECTIONCLASSID = CI.INSPECTIONCLASSID
												   AND CY.CYCLESEQUENCE = CI.CYCLESEQUENCE
												   AND CY.ENTERPRISEID = CI.ENTERPRISEID
												   AND CY.PLANTID = CI.PLANTID
	 WHERE 	1 = 1
	 AND 	CI.INSPECTIONCLASSID = #{INSPECTIONCLASSID}
     AND 	CI.EQUIPMENTID =#{INSPITEMCLASSID}
     AND	CI.INSPITEMID =#{INSPITEMID}
     AND	CI.INSPITEMVERSION ='*'
     AND 	CY.PLANTID =#{PLANTID}
     AND 	CY.ENTERPRISEID =#{ENTERPRISEID}
     AND 	CI.VALIDSTATE = 'Valid' 
	   
	WINDOW W AS (PARTITION BY CY.INSPECTIONCLASSID)	
    </select>
    
     <!-- 약품이상발생화면에서 이상 발생 회차 전 시작시간~ 이상발생 회차 시작시간 전 까지의 시간사이에 작업시작된 LOT,AS-IS : SelecToAffectLotCycleTime ver. 10001 -->
    <select id="selecToAffectLotCycleTime" parameterType="map" resultType="hashmap">
    WITH WORKLOT AS 
				(
					SELECT
							LR.LOTID
					FROM	PCM_LOTWORKRESULT 							LR
					INNER JOIN PCM_LOTEQUIPMENT          				LE ON  LR.LOTID = LE.LOTID
				                                           				   AND LR.PROCESSSEGMENTID = LE.PROCESSSEGMENTID
				                                           				   AND LR.PROCESSSEGMENTVERSION = LE.PROCESSSEGMENTVERSION
				                                           				   AND LR.WORKCOUNT = LE.WORKCOUNT
					WHERE 	1 = 1
					<![CDATA[
					AND		(LR.WORKSTARTTIME >= #{FROMWORKTIME}
					AND 	LR.WORKSTARTTIME < #{TOWORKTIME}) 
					]]>
					AND 	LE.EQUIPMENTID = #{EQUIPMENTID}
					
					GROUP BY LR.LOTID
				
				)
				
				SELECT 
						L.LOTID
					,NULL						AS LOCKINGTXNHISTKEY
					,L.PRODUCTDEFID
					,  L.PRODUCTDEFVERSION					
					,PD.PRODUCTDEFNAME
					,L.PANELQTY
					,L.PCSQTY
					,L.PROCESSSEGMENTID
					,PSD.DICTIONARYNAME 							AS PROCESSSEGMENTNAME
					,L.AREAID
					,AD.DICTIONARYNAME 							AS AREANAME
					,NULL				AS RESULTCODE 
					,'N'						AS ISLOCKING					
					,NULL				AS ISADDED
					,NULL					AS ABNOCRNO
					,NULL							AS ABNOCRTYPE
					,NULL AS  SEQUENCE
					,L.PLANTID
					,L.ENTERPRISEID
					,NULL							AS LASTTXNID
					,L.ISLOCKING									AS ISLOTLOCKING					
				FROM	PCM_LOT										L
				INNER JOIN WORKLOT 									LR   ON  L.LOTID = LR.LOTID
																		   
				LEFT OUTER JOIN BAS_PROCESSSEGMENT  				    PS  ON  L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
																	    AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY 						PSD ON  PS.PROCESSSEGMENTNAME = PSD.DICTIONARYID
																		AND PSD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
				LEFT OUTER JOIN BAS_PRODUCTDEFINITION 				PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
																		AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT OUTER JOIN BAS_AREA 							A   ON  L.AREAID = A.AREAID
				LEFT OUTER JOIN CMD_DICTIONARY 						AD  ON  A.AREANAME = AD.DICTIONARYID
																		AND AD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
																		
				
				WHERE	1 = 1 
				
				--AND 	L.LOTSTATE IN ('InProduction','InTransit','Finished') 							
				AND 	L.LOTSTATE IN ('InProduction','InTransit') 							
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND 	L.PLANTID = #{PLANTID}
				AND 	 NOT EXISTS
						(
							SELECT	1 
							FROM 	QAM_AFFECTLOT AL
							WHERE 	1 = 1
							AND   	AL.LOTID = L.LOTID
							AND   	AL.ABNOCRNO =#{ABNOCRNO}
							AND   	AL.ABNOCRTYPE = #{ABNOCRTYPE}
							AND   	AL.ENTERPRISEID = #{ENTERPRISEID}
							AND   	AL.PLANTID = #{PLANTID}					
						)
						
				UNION ALL
				SELECT 
						AL.LOTID
					,AL.LOCKINGTXNHISTKEY
					,L.PRODUCTDEFID
					,  L.PRODUCTDEFVERSION					
					,PD.PRODUCTDEFNAME
					,L.PANELQTY
					,L.PCSQTY
					,L.PROCESSSEGMENTID
					,PSD.DICTIONARYNAME 							AS PROCESSSEGMENTNAME
					,L.AREAID
					,AD.DICTIONARYNAME 							AS AREANAME
					,AL.RESULTCODE 
					,AL.ISLOCKING					
					,NULL				AS ISADDED
					,AL.ABNOCRNO
					,AL.ABNOCRTYPE
					,AL.SEQUENCE
					,AL.PLANTID
					,AL.ENTERPRISEID
					,AL.LASTTXNID
					,L.ISLOCKING									AS ISLOTLOCKING						
				FROM 	QAM_AFFECTLOT 								AL
				INNER JOIN PCM_LOT 									L ON AL.LOTID = L.LOTID

				LEFT OUTER JOIN BAS_PROCESSSEGMENT  				    PS  ON  L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
																		AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY 						PSD ON  PS.PROCESSSEGMENTNAME = PSD.DICTIONARYID
																		AND PSD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
				LEFT OUTER JOIN BAS_PRODUCTDEFINITION 				PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
																		AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT OUTER JOIN BAS_AREA 							A   ON  L.AREAID = A.AREAID
				LEFT OUTER JOIN CMD_DICTIONARY 						AD  ON  A.AREANAME = AD.DICTIONARYID
																		AND AD.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
																
				WHERE 	1 = 1
				AND   	AL.ABNOCRNO =#{ABNOCRNO}
				AND   	AL.ABNOCRTYPE = #{ABNOCRTYPE}
				AND   	AL.ENTERPRISEID = #{ENTERPRISEID}
				AND   	AL.PLANTID = #{PLANTID}	
    </select>
    
    <!-- 신뢰성 검사에서 affectLot 대상을 조회한다.,AS-IS : GetAffectLotReliability ver. 10001 -->
    <select id="selectAffectLotReliability" parameterType="map" resultType="hashmap">
	SELECT Z.*
				FROM
				(
				    SELECT  LOTID
				    	,LOTID			AS LOTNAME
				        ,  PARENTLOTID
		
				        ,  LEVEL
				    FROM FN_LOTGENEAL_TOPDOWN(#{LOTID})  LT
				) Z
								LEFT JOIN PCM_LOT	L	ON 	Z.LOTID = L.LOTID
								WHERE NVL(L.ISDEFECTED,'N') = 'N'
				UNION ALL
				
				SELECT  	
							LOTID
				    	,LOTID			AS LOTNAME
				        ,  PARENTLOTID
				        ,  1				AS LEVEL
				FROM  PCM_LOT 
				WHERE LOTID =#{LOTID}
    
    </select>
    
    <!-- 사용자 상세조회-->
    <select id="selectCmdUsers" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectCmdUsers  */
    SELECT 
        A.ID	 
        ,A.USER_ID	 
        ,A.USER_PWD	 
        ,A.USER_NM	 
        ,A.EMP_NO	 
        ,A.EMAIL_ADDR	 
        ,A.CLPS_CD	 
        ,A.JIKWI_CD	 
        ,A.CMPN_PHN_NO	 
        ,A.MBPH_NO	 
        ,A.USE_YN	 
        ,A.PWD_CHANGE_DATE	 
        ,A.PWD_ERR_CNT	 
        ,A.LAST_LGN_DTM	 
        ,A.LAST_LGN_IP	 
        ,A.CREATED_BY	 
        ,A.CREATION_DATE	 
        ,A.LAST_UPDATED_BY	 
        ,A.LAST_UPDATE_DATE	 
        ,A.PWD_ERR_DTM	 
        ,A.PLANTID	 
        ,A.DEPT_NM	 
        ,A.ENTERPRISEID	 
        ,A.NICKNAME	 
        ,A.HOMEADDRESS	 
        ,A.LANGUAGETYPE	 
        ,A.USERSTATE	 
        ,A.ISEESLINK	 
        ,A.DESCRIPTION	 
        ,A.AREARESPONSIBILITY	 
        ,A.DEPT_CD	 
        ,A.USE_REQ_YN	 
   		,B.DEPT_NM 
    FROM	CMD_USERS A ,CMD_DEPTS B 
    WHERE 1=1 
    AND A.DEPT_CD = B.DEPT_CD(+)
    AND NVL(A.USE_YN,'N') = 'Y'
    AND A.USER_ID = #{USER_ID}
    </select>
    
    <!-- 신뢰성의뢰 등록 -->
    <insert id="insertQamQcreliabilityrequest" parameterType="map">
    /* smh.qam.dao.QAMCommonDao.insertQamQcreliabilityrequest  */
    INSERT INTO QAM_QCRELIABILITYREQUEST( 
        REQUESTNO  
        ,ENTERPRISEID  
        ,PLANTID  
        ,RELIABILITYTYPE  
        ,REQUESTTYPE  
        ,REQUESTDATE  
        ,SAMPLERECEIVEDATE  
        ,ISSAMPLERECEIVE  
        ,REQUESTOR  
        ,REQUESTDEPT  
        ,REQUESTORJOBPOSITION  
        ,REQUESTEXTENSIONNO  
        ,REQUESTMOBILENO  
        ,COMMENTS  
        ,MEASURECOMPLETIONDATE  
        ,PARENTREQUESTNO  
        ,ISRECEIPT  
        ,ANALYSISTOOL  
        ,AREAPOINT  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{REQUESTNO}  
        ,#{ENTERPRISEID}  
        ,#{PLANTID}  
        ,#{RELIABILITYTYPE}  
        ,#{REQUESTTYPE}  
        ,#{REQUESTDATE}  
        ,#{SAMPLERECEIVEDATE}  
        ,#{ISSAMPLERECEIVE}  
        ,#{REQUESTOR}  
        ,#{REQUESTDEPT}  
        ,#{REQUESTORJOBPOSITION}  
        ,#{REQUESTEXTENSIONNO}  
        ,#{REQUESTMOBILENO}  
        ,#{COMMENTS}  
        ,#{MEASURECOMPLETIONDATE}  
        ,#{PARENTREQUESTNO}  
        ,#{ISRECEIPT}  
        ,#{ANALYSISTOOL}  
        ,#{AREAPOINT}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>
    
    <!-- 신뢰성의뢰(정기) lot locking 공정 체크,AS-IS : GetReleaseReliaVerifiRequestLockingSegmentCheck ver. 10001 -->
    <select id="selectReleaseReliaVerifiRequestLockingSegmentCheck" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectReleaseReliaVerifiRequestLockingSegmentCheck  */
	SELECT 
					PS.PROCESSSEGMENTID 
				FROM  BAS_PROCESSSEGMENT PS
				INNER JOIN BAS_PROCESSSEGMENTCLASS 	PC ON  PC.PROCESSSEGMENTCLASSID 	= PS.PROCESSSEGMENTCLASSID
				INNER JOIN CMD_LOOKUP_VALUES					CD ON  CD.LOOKUP_CODE 					= PC.PARENTPROCESSSEGMENTCLASSID	
							  						   AND CD.LOOKUP_TYPE 				= 'ReliaVerifiLockingSegment'
							  						   AND CD.ENABLED_FLAG = 'Y'
				WHERE
					PS.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
					AND PS.PROCESSSEGMENTVERSION = '*'
				UNION
				SELECT 
					PS.PROCESSSEGMENTID 
				FROM  BAS_PROCESSSEGMENT PS
				INNER JOIN BAS_PROCESSSEGMENTCLASS 	PC ON  PC.PROCESSSEGMENTCLASSID 	= PS.PROCESSSEGMENTCLASSID
				INNER JOIN CMD_LOOKUP_VALUES					CD ON  CD.LOOKUP_CODE 					= PC.PROCESSSEGMENTCLASSID	
							  						   AND CD.LOOKUP_TYPE 				= 'ReliaVerifiLockingSegment'
							  						   AND CD.ENABLED_FLAG = 'Y'
				WHERE
					PS.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
					AND PS.PROCESSSEGMENTVERSION = '*'
				UNION
				SELECT 
					PS.PROCESSSEGMENTID 
				FROM  BAS_PROCESSSEGMENT PS
				INNER JOIN CMD_LOOKUP_VALUES					CD ON  CD.LOOKUP_CODE 					= PS.PROCESSSEGMENTID	
							  						   AND CD.LOOKUP_TYPE 				= 'ReliaVerifiLockingSegment'
							  						   AND CD.ENABLED_FLAG = 'Y'
				WHERE
					PS.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
					AND PS.PROCESSSEGMENTVERSION = '*'		
    
    </select>
    
    <!--  AQL/NCR에 따른 action을 조회한다,AS-IS : GetInspResultActionType ver. 10001 -->
    <select id="selectGetInspResultActionType" parameterType="map" resultType="hashmap">
	/* smh.qam.dao.QAMCommonDao.selectGetInspResultActionType  */
	SELECT LISTAGG(ACTIONTYPE,'/') WITHIN GROUP(ORDER BY ACTIONTYPE) AS ACTIONTYPE
		FROM (
			SELECT AC.ACTIONTYPE
							FROM 	BAS_QCINTERLOCKACTION 								QLA 
							INNER JOIN BAS_ACTION 										AC ON QLA.ACTIONID = AC.ACTIONID
							WHERE 1=1	
						AND 	QLA.QCGRADE = #{QCGRADE}
						AND 	QLA.ENTERPRISEID =#{ENTERPRISEID}
						AND 	QLA.PLANTID =#{PLANTID}
							AND 	QLA.VALIDSTATE ='Valid'
							AND 	AC.VALIDSTATE ='Valid'
			GROUP BY AC.ACTIONTYPE
		)
	</select>
	
	<!-- 신뢰성 LOT정보 등록 -->
	<insert id="insertQamQcreliabilitylot" parameterType="map">
	 /* smh.qam.dao.QAMCommonDao.insertQamQcreliabilitylot  */
	INSERT INTO QAM_QCRELIABILITYLOT (
		REQUESTNO
		,ENTERPRISEID
		,PLANTID
		,PRODUCTDEFID
		,PRODUCTDEFVERSION
		,LOTID
		,PROCESSSEGMENTID
		,PROCESSSEGMENTVERSION
		,AREAID
		,OUTPUTDATE
		,REQUESTQTY
		,PURPOSE
		,DETAILS
		,ISPOSTPROCESS
		,DESCRIPTION
		,CREATOR
		,CREATEDTIME
		,LASTTXNHISTKEY
		,LASTTXNID
		,LASTTXNUSER
		,LASTTXNTIME
		,LASTTXNCOMMENT
		,VALIDSTATE
		,INSPITEMID
		,INSPITEMVERSION
		,PROCESSDEFID
		,PROCESSDEFVERSION
		,USERSEQUENCE
		,ISNCRPUBLISH
		,ISCOMPLETION
		,INSPECTIONRESULT
		,DEFECTCODE
		,QCSEGMENTID
		,VERIFICOMPLETEDATE
		,LOCKINGTXNHISTKEY
		,WORKCOUNT
		,VERIFICOUNT
		,DEFECTQTY
		,DEFECTRATE
		,INSPECTIONCLASSID
		,INSPECTIONMETHODID
	) VALUES ( 
		#{REQUESTNO}
		,#{ENTERPRISEID}
		,#{PLANTID}
		,#{PRODUCTDEFID}
		,#{PRODUCTDEFVERSION}
		,#{LOTID}
		,#{PROCESSSEGMENTID}
		,#{PROCESSSEGMENTVERSION}
		,#{AREAID}
		,#{OUTPUTDATE}
		,#{REQUESTQTY}
		,#{PURPOSE}
		,#{DETAILS}
		,#{ISPOSTPROCESS}
		,#{DESCRIPTION}
		,#{CREATOR}
		,SYSDATE
		,#{LASTTXNHISTKEY}
		,#{LASTTXNID}
		,#{LASTTXNUSER}
		,#{LASTTXNTIME}
		,#{LASTTXNCOMMENT}
		,#{VALIDSTATE}
		,#{INSPITEMID}
		,#{INSPITEMVERSION}
		,#{PROCESSDEFID}
		,#{PROCESSDEFVERSION}
		,#{USERSEQUENCE}
		,#{ISNCRPUBLISH}
		,#{ISCOMPLETION}
		,#{INSPECTIONRESULT}
		,#{DEFECTCODE}
		,#{QCSEGMENTID}
		,#{VERIFICOMPLETEDATE}
		,#{LOCKINGTXNHISTKEY}
		,#{WORKCOUNT}
		,#{VERIFICOUNT}
		,#{DEFECTQTY}
		,#{DEFECTRATE}
		,#{INSPECTIONCLASSID}
		,#{INSPECTIONMETHODID}
	)
	</insert>
	
	<!--
	************************************************************
	* AffectLot 정보
	************************************************************
	-->
    <!-- AffectLot 정보 등록 -->
    <insert id="insertQamAffectlot" parameterType="map">
    /* smh.qam.dao.QAMCommonDao.insertQamAffectlot  */
    INSERT INTO QAM_AFFECTLOT( 
        ABNOCRNO  
        ,ABNOCRTYPE  
        ,LOTID  
        ,"sequence"  
        ,ENTERPRISEID  
        ,PLANTID  
        ,REASONCODEID  
        ,RESULTCODE  
        ,ISLOCKING  
        ,CHARGERID  
        ,AFFECTEDDATE  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE  
        ,LOCKINGTXNHISTKEY  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,PROCESSSEGMENTID  
        ,PROCESSSEGMENTVERSION  
        ,USERSEQUENCE  
        ,PRODUCTDEFID  
        ,PRODUCTDEFVERSION  
        ,AREAID        ) 
    VALUES( 
        #{ABNOCRNO}  
        ,#{ABNOCRTYPE}  
        ,#{LOTID}  
        ,#{SEQUENCE}  
        ,#{ENTERPRISEID}  
        ,#{PLANTID}  
        ,#{REASONCODEID}  
        ,#{RESULTCODE}  
        ,#{ISLOCKING}  
        ,#{CHARGERID}  
        ,TO_DATE(SUBSTR(#{AFFECTEDDATE}, 1, 12), 'YYYY-MM-DD HH24:MI:SS')
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}  
        ,#{LOCKINGTXNHISTKEY}  
        ,#{PROCESSDEFID}  
        ,#{PROCESSDEFVERSION}  
        ,#{PROCESSSEGMENTID}  
        ,#{PROCESSSEGMENTVERSION}  
        ,#{USERSEQUENCE}  
        ,#{PRODUCTDEFID}  
        ,#{PRODUCTDEFVERSION}  
        ,#{AREAID}    )
    </insert>

    <!-- AffectLot 정보 변경 -->
    <update id="updateQamAffectlot" parameterType="map" >
    /* smh.qam.dao.QAMCommonDao.updateQamAffectlot  */
    UPDATE QAM_AFFECTLOT 
    SET 
         REASONCODEID = #{REASONCODEID}     
        ,RESULTCODE = #{RESULTCODE}
        ,ISLOCKING = #{ISLOCKING}     
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,LOCKINGTXNHISTKEY = #{LOCKINGTXNHISTKEY}     
    WHERE ABNOCRNO = #{ABNOCRNO}
    AND ABNOCRTYPE = #{ABNOCRTYPE}
    AND LOTID = #{LOTID}
    AND "sequence" = #{SEQUENCE}
    </update>
    
    <!-- AffectLot 정보 조회-->
    <select id="selectQamAffectlotList" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectQamAffectlotList  */
    SELECT 
        A.ABNOCRNO	
        ,A.ABNOCRTYPE	
        ,A.LOTID	
        ,A."sequence" AS SEQUENCE	
        ,A.ENTERPRISEID	
        ,A.PLANTID	
        ,A.REASONCODEID	
        ,A.RESULTCODE	
        ,A.ISLOCKING	
        ,A.CHARGERID	
        ,A.AFFECTEDDATE	
        ,A.DESCRIPTION	
        ,A.CREATOR	
        ,A.CREATEDTIME	
        ,A.MODIFIER	
        ,A.MODIFIEDTIME	
        ,A.LASTTXNHISTKEY	
        ,A.LASTTXNID	
        ,A.LASTTXNUSER	
        ,A.LASTTXNTIME	
        ,A.LASTTXNCOMMENT	
        ,A.VALIDSTATE	
        ,A.LOCKINGTXNHISTKEY	
        ,A.PROCESSDEFID	
        ,A.PROCESSDEFVERSION	
        ,A.PROCESSSEGMENTID	
        ,A.PROCESSSEGMENTVERSION	
        ,A.USERSEQUENCE	
        ,A.PRODUCTDEFID	
        ,A.PRODUCTDEFVERSION	
        ,A.AREAID	
    FROM	QAM_AFFECTLOT A 
    WHERE 1=1 
    <if test="ABNOCRNO != null and ABNOCRNO !='' "> 
        AND A.ABNOCRNO = #{ABNOCRNO}
    </if>
    <if test="ABNOCRTYPE != null and ABNOCRTYPE !='' "> 
        AND A.ABNOCRTYPE = #{ABNOCRTYPE}
    </if>
    <if test="LOTID != null and LOTID !='' "> 
        AND A.LOTID = #{LOTID}
    </if>
    <if test="SEQUENCE != null and SEQUENCE !='' "> 
        AND A."sequence" = #{SEQUENCE}
    </if>
    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
        AND A.ENTERPRISEID = #{ENTERPRISEID}
    </if>
    <if test="PLANTID != null and PLANTID !='' "> 
        AND A.PLANTID = #{PLANTID}
    </if>
    <if test="REASONCODEID != null and REASONCODEID !='' "> 
        AND A.REASONCODEID = #{REASONCODEID}
    </if>
    <if test="RESULTCODE != null and RESULTCODE !='' "> 
        AND A.RESULTCODE = #{RESULTCODE}
    </if>
    <if test="ISLOCKING != null and ISLOCKING !='' "> 
        AND A.ISLOCKING = #{ISLOCKING}
    </if>
    <if test="CHARGERID != null and CHARGERID !='' "> 
        AND A.CHARGERID = #{CHARGERID}
    </if>
    <if test="AFFECTEDDATE != null and AFFECTEDDATE !='' "> 
        AND A.AFFECTEDDATE = #{AFFECTEDDATE}
    </if>
    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
        AND A.DESCRIPTION = #{DESCRIPTION}
    </if>
    <if test="LASTTXNID != null and LASTTXNID !='' "> 
        AND A.LASTTXNID = #{LASTTXNID}
    </if>
    <if test="VALIDSTATE != null and VALIDSTATE !='' "> 
        AND A.VALIDSTATE = #{VALIDSTATE}
    </if>
    <if test="LOCKINGTXNHISTKEY != null and LOCKINGTXNHISTKEY !='' "> 
        AND A.LOCKINGTXNHISTKEY = #{LOCKINGTXNHISTKEY}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    </if>
    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </if>
    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
        AND A.USERSEQUENCE = #{USERSEQUENCE}
    </if>
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="AREAID != null and AREAID !='' "> 
        AND A.AREAID = #{AREAID}
    </if>
    </select>
    
    <!-- AffectLot 정보 상세조회-->
    <select id="selectQamAffectlot" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectQamAffectlot  */
    SELECT 
        A.ABNOCRNO	 
        ,A.ABNOCRTYPE	 
        ,A.LOTID	 
        ,A."sequence" AS SEQUENCE	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.REASONCODEID	 
        ,A.RESULTCODE	 
        ,A.ISLOCKING	 
        ,A.CHARGERID	 
        ,A.AFFECTEDDATE	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
        ,A.LOCKINGTXNHISTKEY	 
        ,A.PROCESSDEFID	 
        ,A.PROCESSDEFVERSION	 
        ,A.PROCESSSEGMENTID	 
        ,A.PROCESSSEGMENTVERSION	 
        ,A.USERSEQUENCE	 
        ,A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.AREAID	 
    FROM	QAM_AFFECTLOT A 
    WHERE A.ABNOCRNO = #{ABNOCRNO}
    AND	A.ABNOCRTYPE = #{ABNOCRTYPE}
    AND	A.LOTID = #{LOTID}
    AND	A."sequence" = #{SEQUENCE}
    </select>
    
    <!-- 표준공정 ID, Version을 받아와 중공정과 대공정을 조회, AS-IS : GetTopAndMiddleProcesssegment ver. 10001 -->
    <select id="selectTopAndMiddleProcesssegment" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.QAMCommonDao.selectTopAndMiddleProcesssegment  */
    SELECT 	P.PROCESSSEGMENTID 
					,P.PROCESSSEGMENTVERSION
					,MP.PROCESSSEGMENTCLASSID					AS 	MIDDLEPROCESSSEGMENTCLASSID
					,LP.PROCESSSEGMENTCLASSID					AS 	TOPPROCESSSEGMENTCLASSID
	FROM  	BAS_PROCESSSEGMENT 							P 
	INNER JOIN BAS_PROCESSSEGMENTCLASS 					MP	ON 	MP.PROCESSSEGMENTCLASSID = P.PROCESSSEGMENTCLASSID
															AND MP.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass'
	INNER JOIN BAS_PROCESSSEGMENTCLASS 					LP 	ON 	LP.PROCESSSEGMENTCLASSID = MP.PARENTPROCESSSEGMENTCLASSID
															AND LP.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
	WHERE 	P.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	AND 	P.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}  
    </select>
    
</mapper>