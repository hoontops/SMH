<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM03700Dao">
	
	<!-- LOT Locking 정보 -->
	<select id="selectLockList" parameterType="map" resultType="hashmap">
		WITH WIPLIST AS
		(
			SELECT 
				 L.LOTID
				,L.LOTTYPE
				,L.PRODUCTDEFID
				,L.PRODUCTDEFVERSION
				,PD.PRODUCTDEFNAME
				,L.PROCESSDEFID
				,L.PROCESSSEGMENTID
				,DECODE(DS1.DICTIONARYNAME, NULL, SG.PROCESSSEGMENTNAME, DS1.DICTIONARYNAME)	AS PROCESSSEGMENTNAME
				,L.USERSEQUENCE
				,L.PLANTID
				,L.AREAID
				,DECODE(DS2.DICTIONARYNAME, NULL, AL.AREANAME, DS2.DICTIONARYNAME)				AS AREANAME
				,DECODE(PD.RTRSHT,          NULL,     'Sheet',          PD.RTRSHT)				AS RTRSHT
				,L.UNIT
				,L.QTY
				,L.PCSQTY
				,L.PANELQTY
				,(L.QTY / PD.PCSMM)																AS M2QTY
				,PO.PLANENDTIME																	AS DELIVERYDATE
				,L.ROOTLOTSTARTDATE
				,L.ISLOCKING
				,L.PROCESSSTATE
				,(DECODE(WR.RECEIVELEADTIME, NULL, 0, WR.RECEIVELEADTIME) + DECODE(WR.WORKSTARTLEADTIME, NULL, 0, WR.WORKSTARTLEADTIME) + DECODE(WR.WORKENDLEADTIME, NULL, 0, WR.WORKENDLEADTIME) + DECODE(WR.SENDLEADTIME, NULL, 0, WR.SENDLEADTIME)) AS LEADTIME 	-- 공정 LeadTime
			FROM    
						   PCM_LOT			         L
				LEFT  JOIN PCM_LOTWORKRESULT        WR ON L.LOTID                         = WR.LOTID                  AND L.PROCESSSEGMENTID      = WR.PROCESSSEGMENTID     AND L.USERSEQUENCE = WR.USERSEQUENCE
				INNER JOIN FN_AREA('admin')         AL ON L.AREAID                        = AL.AREAID                 AND AL.ISMODIFY             = 'Y'		-- 등록화면
				INNER JOIN BAS_PRODUCTDEFINITION    PD ON L.PRODUCTDEFID                  = PD.PRODUCTDEFID	          AND L.PRODUCTDEFVERSION     = PD.PRODUCTDEFVERSION
				INNER JOIN MFM_PRODUCTIONORDER      PO ON L.PRODUCTIONORDERID             = PO.PRODUCTIONORDERID      AND L.LINENO                = PO.LINENO
				INNER JOIN BAS_PROCESSSEGMENT	    SG ON L.PROCESSSEGMENTID              = SG.PROCESSSEGMENTID       AND L.PROCESSSEGMENTVERSION = SG.PROCESSSEGMENTVERSION AND SG.VALIDSTATE = 'Valid'
				LEFT  JOIN BAS_PROCESSSEGMENTCLASS MSC ON SG.PROCESSSEGMENTCLASSID        = MSC.PROCESSSEGMENTCLASSID /*중공정*/ AND MSC.VALIDSTATE = 'Valid' 
				LEFT  JOIN BAS_PROCESSSEGMENTCLASS TSC ON MSC.PARENTPROCESSSEGMENTCLASSID = TSC.PROCESSSEGMENTCLASSID /*대공정*/ AND TSC.VALIDSTATE = 'Valid'
				LEFT  JOIN CMD_DICTIONARY		   DS1 ON SG.PROCESSSEGMENTNAME           = DS1.DICTIONARYID          AND DS1.LANGUAGETYPE = #{P_LANGUAGETYPE}
				LEFT  JOIN CMD_DICTIONARY          DS2 ON AL.AREANAME                     = DS2.DICTIONARYID	      AND DS2.LANGUAGETYPE = #{P_LANGUAGETYPE}
			WHERE   
					L.ISHOLD     = 'N'
				AND L.ISDEFECTED = 'N'
				AND L.LOTSTATE IN ('InProduction', 'InTransit')
			<if test="P_PLANTID != null and P_PLANTID != ''">
				-- SITE 조건 
		        AND L.PLANTID = #{P_PLANTID}
		    </if>
		    <if test="P_LOCKING != null and P_LOCKING != ''">
		        -- Locking 여부
		        AND L.ISLOCKING = #{P_LOCKING}
		   	</if>
		   	<if test="P_LOTID != null and P_LOTID != ''">     
		        -- LOTID 조회
				AND	EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID}, ',') LMP WHERE L.LOTID = LMP.VALUE)
			</if>
			<if test="PRODUCTDEFID != null and PRODUCTDEFID != ''"> 
				-- 품목코드
				AND	EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',') PMP WHERE L.PRODUCTDEFID = PMP.VALUE)
			</if>
			<if test="PRODUCTNAME != null and PRODUCTNAME != ''"> 
				AND	PD.PRODUCTDEFNAME LIKE #{PRODUCTNAME} || '%'
			</if>
			<if test="P_PROCESSSEGMENTCLASSID_TOP != null and P_PROCESSSEGMENTCLASSID_TOP != ''"> 	
				-- 대공정
				AND	EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PROCESSSEGMENTCLASSID_TOP}, ',') SMP WHERE TSC.PROCESSSEGMENTCLASSID = SMP.VALUE)
			</if>
			<if test="P_MAINSEGMENTID != null and P_MAINSEGMENTID != ''"> 	
				-- 주요공정
				AND	SG.ISMAINSEGMENT = 'Y'
				AND	EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_MAINSEGMENTID}, ',') MMP WHERE SG.PROCESSSEGMENTID = MMP.VALUE)
				#end
			</if>
			<if test="P_LOTTYPE != null and P_LOTTYPE != ''">
				-- 구분
		        AND L.LOTTYPE = #{P_LOTTYPE}
		    </if>
			<if test="P_PRODUCTDEFTYPE != null and P_PRODUCTDEFTYPE != ''">
		        -- 제품구분
				AND	EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFTYPE}, ',') PMP WHERE PD.PRODUCTDEFTYPE = PMP.VALUE)
		    </if>
			<if test="P_OWNTYPE != null and P_OWNTYPE != ''">    
		        -- 자사/외주구분
		        AND AL.OWNTYPE = #{P_OWNTYPE}
		    </if>
			<if test="P_AREAID != null and P_AREAID != ''">      
		        -- 작업장
		        AND AL.AREAID = #{P_AREAID}
		    </if>
		)
		SELECT 	
			 L.LOTID
			,DC1.DICTIONARYNAME    AS LOTTYPE
			,L.PRODUCTDEFID
			,L.PRODUCTDEFVERSION
			,L.PRODUCTDEFNAME
			,L.PROCESSDEFID
			,L.PROCESSSEGMENTID
			,L.PROCESSSEGMENTNAME
			,L.USERSEQUENCE
			,L.PLANTID
			,L.AREAID
			,L.AREANAME
			,L.RTRSHT
			,L.UNIT
			,L.QTY
			,L.PCSQTY
			,L.PANELQTY
			,L.DELIVERYDATE
			,L.ROOTLOTSTARTDATE									     AS LOTINPUTDATE
			,EXTRACT(DAY FROM (CURRENT_TIMESTAMP - DELIVERYDATE))    AS LEFTDATE
			,DECODE(L.PROCESSSTATE, 'WaitForReceive',      L.QTY, 0) AS SENDPCSQTY 			-- 인수대기수량(전공정인계)  
			,DECODE(L.PROCESSSTATE, 'WaitForReceive', L.PANELQTY, 0) AS SENDPANELQTY  
			,DECODE(L.PROCESSSTATE,           'Wait',      L.QTY, 0) AS RECEIVEPCSQTY     	-- 작업시작(인수 완료 수량) 
			,DECODE(L.PROCESSSTATE,           'Wait', L.PANELQTY, 0) AS RECEIVEPANELQTY   	
			,DECODE(L.PROCESSSTATE,            'Run',      L.QTY, 0) AS WORKSTARTPCSQTY		-- 작업완료(작업 시작 수량)    
			,DECODE(L.PROCESSSTATE,            'Run', L.PANELQTY, 0) AS WORKSTARTPANELQTY   
			,DECODE(L.PROCESSSTATE,    'WaitForSend',      L.QTY, 0) AS WORKENDPCSQTY     	-- 인계 대기(작업완료 수량)   
			,DECODE(L.PROCESSSTATE,    'WaitForSend', L.PANELQTY, 0) AS WORKENDPANELQTY      
			,L.LEADTIME																		-- 공정 LeadTime
			,L.ISLOCKING
			,DC2.DICTIONARYNAME	AS LOCKINGTYPE
			,DC3.DICTIONARYNAME	AS LOCKINGREASON 
			,US.USER_NM		    AS LOCKINGUSER
			,TO_CHAR(LL.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS LOCKINGDATE
		FROM 	
			                WIPLIST				  L
			INNER      JOIN CMD_LOOKUP_VALUES   CD1 ON L.LOTTYPE        = CD1.LOOKUP_CODE  AND CD1.LOOKUP_TYPE    = 'ProductionType' /*   AND CD1.VALIDSTATE = 'Valid'   -- 구분 */
			LEFT OUTER JOIN CMD_DICTIONARY	    DC1 ON DC1.DICTIONARYID = CD1.DICTIONARYID AND DC1.LANGUAGETYPE   = #{P_LANGUAGETYPE}
			LEFT       JOIN PCM_LOTLOCKING		 LL ON L.LOTID	        = LL.LOTID         AND L.PROCESSSEGMENTID = LL.PROCESSSEGMENTID AND L.USERSEQUENCE = LL.USERSEQUENCE AND L.PROCESSDEFID = LL.PROCESSDEFID AND LL.LOCKINGSTATUS = 'Y'
			LEFT       JOIN CMD_USERS			 US ON LL.CREATOR       = US.USER_ID
			LEFT       JOIN BAS_REASONCODECLASS CD2 ON LL.LOCKINGTYPE   = CD2.REASONCODECLASSID
			LEFT       JOIN CMD_DICTIONARY	    DC2 ON DC2.DICTIONARYID = CD2.REASONCODECLASSNAME AND DC2.LANGUAGETYPE = #{P_LANGUAGETYPE}
			LEFT       JOIN BAS_REASONCODE	    CD3 ON LL.LOCKINGCODE   = CD3.REASONCODEID
			LEFT       JOIN CMD_DICTIONARY	    DC3 ON DC3.DICTIONARYID = CD3.REASONCODENAME      AND DC3.LANGUAGETYPE = #{P_LANGUAGETYPE}
	</select>
	
	<!-- LOT Locking 체크-->
	<select id="selectLotLocking" parameterType="map" resultType="hashmap">
		SELECT	
		 	 T1.*
		 	,COUNT(*) OVER() AS LOTLOCKING_COUNT
		FROM 	
			PCM_LOTLOCKING T1
		WHERE
			    LOCKINGSTATUS = 'Y'
			AND EXISTS (SELECT 'X' FROM UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',') LI WHERE T1.LOTID = LI.VALUE)
			AND EXISTS (SELECT 'X' FROM UFN_SELECTSTRINGTOSPLIT(#{LOCKINGTYPE}, ',') LI WHERE T1.LOCKINGTYPE = LI.VALUE)
			AND EXISTS (SELECT 'X' FROM UFN_SELECTSTRINGTOSPLIT(#{LOCKINGCODE}, ',') LI WHERE T1.LOCKINGCODE = LI.VALUE)
			AND EXISTS (SELECT 'X' FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTID}, ',') LI WHERE T1.PROCESSSEGMENTID = LI.VALUE)
	</select>
	
	<!-- LotLocking 저장  -->
	<insert id="insertLotLocking" parameterType="map">
		INSERT INTO PCM_LOTLOCKING 
			( 
			 TXNHISTKEY
			,LOTID
			,ENTERPRISEID
			,PLANTID
			,AREAID
			,PRODUCTDEFID
			,PRODUCTDEFVERSION
			,PROCESSDEFID
			,PROCESSDEFVERSION
			,USERSEQUENCE
			,PROCESSSEGMENTID
			,PROCESSSEGMENTVERSION
			,WORKCOUNT
			,LOCKINGSTATUS
			,LOCKINGTYPE
			,LOCKINGCODE
			,COMMENTS
			,UNLOCKINGCODE
			,RELEASECOMMENTS
			,DESCRIPTION
			,CREATOR
			,CREATEDTIME
			,TXNGROUPHISTKEY
			,TXNUSER
			,TXNTIME
			,TXNREASONCODECLASS
			,TXNREASONCODE
			,TXNCOMMENT
		)
		SELECT
			 #{TXNHISTKEY}
			,T1.LOTID
			,T1.ENTERPRISEID
			,T1.PLANTID
			,T1.AREAID
			,T1.PRODUCTDEFID
			,T1.PRODUCTDEFVERSION
			,T1.PROCESSDEFID
			,T1.PROCESSDEFVERSION
			,T1.USERSEQUENCE
			,T1.PROCESSSEGMENTID
			,T1.PROCESSSEGMENTVERSION
			,T1.WORKCOUNT
			,#{LOCKINGSTATUS}
			,#{LOCKINGTYPE}
			,#{LOCKINGCODE}
			,#{COMMENTS}
			,#{UNLOCKINGCODE}
			,#{RELEASECOMMENTS}
			,T1.DESCRIPTION
			,#{CREATOR}
			,SYSDATE
			,#{TXNGROUPHISTKEY}
			,#{TXNUSER}
			,SYSDATE
			,#{TXNREASONCODECLASS}
			,#{TXNREASONCODE}
			,#{TXNCOMMENT}
		FROM
			PCM_LOT T1
		WHERE
			T1.LOTID = #{LOTID}
	</insert>
	
	<!--  LOT 업데이터 -->
	<update id="updateLot"  parameterType="map">
		UPDATE PCM_LOT SET 
			 MODIFIEDTIME        = SYSDATE
			,LASTTXNTIME         = SYSDATE
			,ISLOCKING           = #{ISLOCKING}
			,MODIFIER            = #{MODIFIER}
			,LASTTXNGROUPHISTKEY = #{LASTTXNGROUPHISTKEY}
			,LASTTXNHISTKEY      = #{LASTTXNHISTKEY}
			,LASTTXNID           = #{LASTTXNID}
			,LASTTXNUSER         = #{LASTTXNUSER}
		WHERE 
			LOTID = #{LOTID}
	</update>
	
</mapper>