<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM01100Dao">
	<select id="selectInputLotRecordPerPlanChartPlan" parameterType="map" resultType="hashmap">
	/* "GetInputLotRecordPerPlanChartPlan" 10001 */
	--id : selectInputLotRecordPerPlanChartPlan
		WITH NOTINPUT AS
	(
		SELECT
				NIN.ACTIONDATE
			,	SUM(NIN.NOTINPUTPCSQTY) AS NOTINPUTPCSQTY
		FROM		PCM_NOTINPUTQTYPERSALESORDER	NIN
		INNER JOIN 	BAS_PRODUCTDEFINITION		PD	ON	PD.PRODUCTDEFID = NIN.PRODUCTDEFID
													AND	PD.PRODUCTDEFVERSION = NIN.PRODUCTDEFVERSION
	    <if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
			INNER JOIN	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',')		MAP ON	NIN.PRODUCTDEFID = MAP.VALUE
		</if>
		<if test="CUSTOMERNAME != null and CUSTOMERNAME !=''">
			INNER JOIN	UFN_SELECTSTRINGTOSPLIT(#{CUSTOMERID}, ',')			MAP ON	PD.CUSTOMERID = MAP.VALUE
		</if>
		LEFT OUTER JOIN BAS_CUSTOMER				CST	ON	CST.CUSTOMERID = PD.CUSTOMERID
													AND	CST.ENTERPRISEID = PD.ENTERPRISEID
													AND	CST.PLANTID = PD.PLANTID
		WHERE 	1 = 1
		AND		PD.PRODUCTDEFTYPE = 'Product'
		AND		NIN.ACTIONDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
	    <if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
			AND		PD.PRODUCTIONTYPE = #{PRODUCTIONTYPE}		
		</if>
		GROUP BY NIN.ACTIONDATE
	)
	, FORCAST AS
	(
		SELECT
				SOF.FCSTDATE
			,	SUM(SOF.QTY) AS QTY
		FROM			PCM_SALESPOFORCAST		SOF
	    <if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">			
			INNER JOIN	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',')		MAP ON	SOF.PRODUCTDEFID = MAP.VALUE
		</if>	
		INNER JOIN BAS_PRODUCTDEFINITION		PD		ON 	PD.PRODUCTDEFID = SOF.PRODUCTDEFID
														AND PD.PRODUCTDEFVERSION = 
														(
															SELECT * FROM 
															(
															SELECT PRODUCTDEFVERSION
															FROM BAS_PRODUCTDEFINITION PD2
															WHERE PD2.PRODUCTDEFID = PD.PRODUCTDEFID
															ORDER BY PD2.PRODUCTDEFVERSION
															)
															WHERE ROWNUM = 1
														)
		<if test="CUSTOMERNAME != null and CUSTOMERNAME !=''">			
			INNER JOIN	UFN_SELECTSTRINGTOSPLIT(#{CUSTOMERID}, ',')			MAP ON	PD.CUSTOMERID = MAP.VALUE
		</if>
		WHERE	1 = 1
		AND		PD.PRODUCTDEFTYPE = 'Product'
		<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
			AND		PD.PRODUCTIONTYPE = #{PRODUCTIONTYPE}		
		</if>
		GROUP BY SOF.FCSTDATE
	)
	SELECT				
			TO_CHAR(TO_DATE(DATES.FCSTDATE, 'YYYY-MM-DD'), 'MM.DD') AS INPUTDATE
		,	COALESCE(SUM(SOF.QTY), 0) + COALESCE(SUM(NIN.NOTINPUTPCSQTY), 0) AS QTY
	FROM
		(
			--SELECT	TO_CHAR(I::DATE, 'YYYY-MM-DD') AS FCSTDATE
			--FROM 	GENERATE_SERIES(TO_DATE('{P_PERIOD_PERIODFR}', 'YYYY-MM-DD'), TO_DATE('{P_PERIOD_PERIODTO}', 'YYYY-MM-DD'), '1 DAY'::INTERVAL) I
			SELECT TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')	AS FCSTDATE
			FROM DUAL 
			CONNECT BY LEVEL  <![CDATA[<]]>  (TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD')-TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+1)
		) DATES
	LEFT OUTER JOIN FORCAST					SOF		ON SOF.FCSTDATE = DATES.FCSTDATE
	LEFT OUTER JOIN NOTINPUT				NIN		ON NIN.ACTIONDATE = DATES.FCSTDATE
	WHERE	1 = 1
	AND		DATES.FCSTDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
	GROUP BY DATES.FCSTDATE
	ORDER BY DATES.FCSTDATE
	</select>
	
	<select id="selectInputLotRecordPerPlanChartResult" parameterType="map" resultType="hashmap">
	/* "GetInputLotRecordPerPlanChartResult" 10001 */
	--id : selectInputLotRecordPerPlanChartResult
		WITH RSLT AS
	(
		SELECT 
				LOT.PRODUCTDEFID
			,	TO_CHAR(CASE WHEN TO_CHAR(LOT.LOTSTARTDATE, 'HH24:MI:SS') <![CDATA[<]]> PLT.WORKTIME THEN LOT.LOTSTARTDATE - (INTERVAL '1' DAY) ELSE LOT.LOTSTARTDATE END, 'YYYY-MM-DD') AS INPUTDATE
			, 	SUM(LOT.CREATEDQTY) AS INPUTQTY
		FROM		PCM_LOT					LOT
		<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
			INNER JOIN	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',')		MAP ON	LOT.PRODUCTDEFID = MAP.VALUE
		</if>	    
		INNER JOIN	BAS_PRODUCTDEFINITION	PD	ON	PD.PRODUCTDEFID = LOT.PRODUCTDEFID
												AND	PD.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION
		INNER JOIN	BAS_PLANT				PLT	ON	PLT.PLANTID = LOT.PLANTID
		<if test="CUSTOMERNAME != null and CUSTOMERNAME !=''">
			INNER JOIN	UFN_SELECTSTRINGTOSPLIT(#{CUSTOMERID}, ',')			MAP ON	PD.CUSTOMERID = MAP.VALUE
		</if>	  
		WHERE	1 = 1
		AND		PD.PRODUCTDEFTYPE = 'Product'
		AND 	LOT.LOTID = ROOTLOTID																	-- Split 되지 않은 Lot만
		AND 	LOT.LOTSTATE <![CDATA[<>]]> 'Created'																-- 미투입 LOT 제외
		AND 	LOT.LOTCREATEDTYPE <![CDATA[<>]]> 'Return'															-- 반품 LOT 제외
		AND 	(LOT.ISREPRESENTROLLLOT IS NULL OR LOT.ISREPRESENTROLLLOT <![CDATA[<>]]> 'Y') 						-- 대표 Roll LOT 제외
		AND 	LOT.LOTSTARTDATE >= TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,8) || ' ' || PLT.WORKTIME, 'YYYYMMDD HH24:MI:SS')	-- 조회 시작일자
		AND 	LOT.LOTSTARTDATE <![CDATA[<]]> TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD') + (INTERVAL '1' DAY), 'YYYY-MM-DD') || ' ' || PLT.WORKTIME, 'YYYY-MM-DD HH24:MI:SS')	-- 조회 종료일자 + 1일
		<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
			AND		PD.PRODUCTIONTYPE = #{PRODUCTIONTYPE}		
		</if>
	    GROUP BY LOT.PRODUCTDEFID, LOT.LOTSTARTDATE, PLT.WORKTIME
	)
	SELECT			
			TO_CHAR(TO_DATE(DATES.INPUTDATE, 'YYYY-MM-DD'), 'MM.DD') AS INPUTDATE
		,	COALESCE(SUM(RST.INPUTQTY), 0) AS INPUTQTY
	FROM
		(
			--SELECT                      
			--	TO_CHAR(I::DATE, 'YYYY-MM-DD') AS INPUTDATE
			--FROM 
			--	GENERATE_SERIES(TO_DATE('{P_PERIOD_PERIODFR}', 'YYYY-MM-DD'), TO_DATE('{P_PERIOD_PERIODTO}', 'YYYY-MM-DD'), '1 DAY'::INTERVAL) I
			SELECT TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')	AS INPUTDATE
			FROM DUAL 
			CONNECT BY LEVEL  <![CDATA[<]]>  (TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD')-TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+1)
		) DATES
	LEFT OUTER JOIN RSLT					RST		ON RST.INPUTDATE = DATES.INPUTDATE
	WHERE	1 = 1
	AND		DATES.INPUTDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
	GROUP BY DATES.INPUTDATE
	ORDER BY DATES.INPUTDATE
	</select>
	<select id="selectinputlotrecordperplangridSearchList" parameterType="map" resultType="hashmap">
	--id : selectinputlotrecordperplangridSearchList
		SELECT 
		'NVL("''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_PLAN", 0) AS PLAN_' || TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYYMMDD')
		||', NVL("''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_RSLT", 0) AS RSLT_' || TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYYMMDD')	AS COLUMNS_SELECT,
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')										AS COLUMNS		
		FROM DUAL 
		CONNECT BY LEVEL <![CDATA[<]]> (TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD')-TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+1)	
	</select>
	<select id="selectinputlotrecordperplangridList" parameterType="map" resultType="hashmap">
	--id : selectinputlotrecordperplangridList
		SELECT 
					P.PRODUCTDEFID
				,	P.PRODUCTDEFVERSION
				,	P.PRODUCTDEFNAME
				,	P.CUSTOMERNAME
				,	P.PRODUCTIONTYPE				
				,	${COLUMNS_SELECT}				
			FROM 
			(
				SELECT * FROM
    			(
					WITH RESULTS_SUM AS
					(
						SELECT 
								LOT.PRODUCTDEFID
							,	LOT.PRODUCTDEFVERSION
							,	MAX(PD.PRODUCTDEFNAME) AS PRODUCTDEFNAME
							,	MAX(CST.CUSTOMERNAME) AS CUSTOMERNAME
							,	MAX(PD.PRODUCTIONTYPE) AS PRODUCTIONTYPE
							,	TO_CHAR(CASE WHEN TO_CHAR(LOT.LOTSTARTDATE, 'HH24:MI:SS') <![CDATA[<]]> PLT.WORKTIME THEN LOT.LOTSTARTDATE - (INTERVAL '1' DAY) ELSE LOT.LOTSTARTDATE END, 'YYYY-MM-DD') AS INPUTDATE
							, 	SUM(LOT.CREATEDQTY) AS INPUTQTY
						FROM		PCM_LOT					LOT
						INNER JOIN	BAS_PRODUCTDEFINITION	PD	ON	PD.PRODUCTDEFID = LOT.PRODUCTDEFID
																AND	PD.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION
						INNER JOIN	BAS_PLANT				PLT	ON	PLT.PLANTID = LOT.PLANTID
						LEFT OUTER JOIN BAS_CUSTOMER			CST	ON	CST.CUSTOMERID = PD.CUSTOMERID
																AND	CST.ENTERPRISEID = PD.ENTERPRISEID
																AND	CST.PLANTID = PD.PLANTID
						WHERE	1 = 1
						AND		PD.PRODUCTDEFTYPE = 'Product'																-- 제품만
						AND 	LOT.LOTID = ROOTLOTID																			-- Split 되지 않은 Lot만
						AND 	LOT.LOTSTATE <![CDATA[<>]]> 'Created'																	-- 미투입 LOT 제외
						AND 	LOT.LOTCREATEDTYPE <![CDATA[<>]]> 'Return'															-- 반품 LOT 제외
						AND 	(LOT.ISREPRESENTROLLLOT IS NULL OR LOT.ISREPRESENTROLLLOT <![CDATA[<>]]> 'Y') 						-- 대표 Roll LOT 제외
						AND 	LOT.LOTSTARTDATE >= TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,8) || ' ' || PLT.WORKTIME, 'YYYYMMDD HH24:MI:SS')	-- 조회 시작일자
						AND 	LOT.LOTSTARTDATE <![CDATA[<]]> TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD') + (INTERVAL '1' DAY), 'YYYY-MM-DD') || ' ' || PLT.WORKTIME, 'YYYY-MM-DD HH24:MI:SS')	-- 조회 종료일자 + 1일 -- TODO : Date로 변환 후 + 1 day
						AND
						(
							#{PRODUCTDEFID} = ''
							OR	#{PRODUCTDEFID} IS NULL		
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',')	MAP
										WHERE	LOT.PRODUCTDEFID = MAP.VALUE
									)
						)
						AND
						(
							#{CUSTOMERID} = ''
							OR	#{CUSTOMERID} IS NULL
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{CUSTOMERID}, ',')	MAP
										WHERE	PD.CUSTOMERID = MAP.VALUE
									)
						)
						AND
						(
							#{PRODUCTIONTYPE} = ''
							OR	#{PRODUCTIONTYPE} IS NULL
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTIONTYPE}, ',')	MAP
										WHERE	PD.PRODUCTIONTYPE = MAP.VALUE
									)
						)
						GROUP BY LOT.PRODUCTDEFID, LOT.LOTSTARTDATE, PLT.WORKTIME, LOT.PRODUCTDEFVERSION
					)
					, PLAN AS
					(
						SELECT
								SOF.PRODUCTDEFID
							,	PD.PRODUCTDEFVERSION 
							,	PD.PRODUCTDEFNAME
							,	CST.CUSTOMERNAME
							,	PD.PRODUCTIONTYPE
							,	SOF.FCSTDATE
							,	SOF.QTY
						FROM	PCM_SALESPOFORCAST		SOF
						INNER JOIN BAS_PRODUCTDEFINITION	PD		ON	PD.PRODUCTDEFID = SOF.PRODUCTDEFID
																		AND PD.PRODUCTDEFVERSION = 
																		(
																			SELECT * FROM 
																			(
																			SELECT	PRODUCTDEFVERSION
																			FROM	BAS_PRODUCTDEFINITION PD2
																			WHERE	PD2.PRODUCTDEFID = PD.PRODUCTDEFID
																			ORDER BY PD2.PRODUCTDEFVERSION																			
																			)
																			WHERE ROWNUM = 1
																		)
						LEFT OUTER JOIN BAS_CUSTOMER				CST		ON	CST.CUSTOMERID = PD.CUSTOMERID
																		AND	CST.ENTERPRISEID = PD.ENTERPRISEID
																		AND	CST.PLANTID = PD.PLANTID
						WHERE 	1 = 1
						AND		PD.PRODUCTDEFTYPE = 'Product'																-- 제품만
						AND		SOF.FCSTDATE 	BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD') 
						AND
						(
							#{PRODUCTDEFID} = ''
							OR	#{PRODUCTDEFID} IS NULL	
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',')	MAP
										WHERE	SOF.PRODUCTDEFID = MAP.VALUE
									)
						)
						AND
						(
							#{CUSTOMERID} = ''
							OR	#{CUSTOMERID} IS NULL
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{CUSTOMERID}, ',')	MAP
										WHERE	PD.CUSTOMERID = MAP.VALUE
									)
						)
						AND
						(
							#{PRODUCTIONTYPE} = ''
							OR	#{PRODUCTIONTYPE} IS NULL	
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTIONTYPE}, ',')	MAP
										WHERE	PD.PRODUCTIONTYPE = MAP.VALUE
									)
						)
					)
					, NOTINPUT AS 
					(
						SELECT
								NIN.PRODUCTDEFID
							,	NIN.PRODUCTDEFVERSION
							,	NIN.ACTIONDATE
							,	MAX(PD.PRODUCTDEFNAME) AS PRODUCTDEFNAME
							,	MAX(PD.CUSTOMERID) AS CUSTOMERID 
							,	MAX(CST.CUSTOMERNAME) AS CUSTOMERNAME 
							,	MAX(PD.PRODUCTIONTYPE) AS PRODUCTIONTYPE 
							,	SUM(NIN.NOTINPUTPCSQTY) AS NOTINPUTPCSQTY
						FROM		PCM_NOTINPUTQTYPERSALESORDER	NIN
						INNER JOIN 	BAS_PRODUCTDEFINITION		PD	ON	PD.PRODUCTDEFID = NIN.PRODUCTDEFID
																	AND	PD.PRODUCTDEFVERSION = NIN.PRODUCTDEFVERSION
						LEFT OUTER JOIN BAS_CUSTOMER			CST	ON	CST.CUSTOMERID = PD.CUSTOMERID
																	AND	CST.ENTERPRISEID = PD.ENTERPRISEID
																	AND	CST.PLANTID = PD.PLANTID
						WHERE 	1 = 1
						AND		PD.PRODUCTDEFTYPE = 'Product'																-- 제품만
						AND		NIN.ACTIONDATE	BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
						AND
						(
							#{PRODUCTDEFID} = ''
							OR	#{PRODUCTDEFID} IS NULL	
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID}, ',')	MAP
										WHERE	NIN.PRODUCTDEFID = MAP.VALUE
									)
						)
						AND
						(
							#{CUSTOMERID} = ''
							OR	#{CUSTOMERID} IS NULL
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{CUSTOMERID}, ',')	MAP
										WHERE	PD.CUSTOMERID = MAP.VALUE
									)
						)
						AND
						(
							#{PRODUCTIONTYPE} = ''
							OR	#{PRODUCTIONTYPE} IS NULL			
							OR		EXISTS
									(
										SELECT	1
										FROM	UFN_SELECTSTRINGTOSPLIT(#{PRODUCTIONTYPE}, ',')	MAP
										WHERE	PD.PRODUCTIONTYPE = MAP.VALUE
									)
						)
						GROUP BY NIN.PRODUCTDEFID, NIN.ACTIONDATE, NIN.PRODUCTDEFVERSION
					)
					SELECT
							COALESCE(PL.PRODUCTDEFID, RS.PRODUCTDEFID, NI.PRODUCTDEFID)									AS PRODUCTDEFID
						,	COALESCE(PL.PRODUCTDEFVERSION, RS.PRODUCTDEFVERSION, NI.PRODUCTDEFVERSION)					AS PRODUCTDEFVERSION
						,	COALESCE(PL.PRODUCTDEFNAME, RS.PRODUCTDEFNAME, NI.PRODUCTDEFNAME)							AS PRODUCTDEFNAME
						,	COALESCE(PL.CUSTOMERNAME, RS.CUSTOMERNAME, NI.CUSTOMERNAME)									AS CUSTOMERNAME
						,	COALESCE(CDD.DICTIONARYNAME, PL.PRODUCTIONTYPE, RS.PRODUCTIONTYPE, NI.PRODUCTIONTYPE)		AS PRODUCTIONTYPE
						, 	COALESCE(PL.FCSTDATE, RS.INPUTDATE, NI.ACTIONDATE) 											AS WORKDATE
						,	COALESCE(PL.QTY, 0) + COALESCE(NI.NOTINPUTPCSQTY, 0)										AS PLAN
						,	RS.INPUTQTY																					AS RSLT
						--,	(COALESCE(PL.QTY, 0) + COALESCE(NI.NOTINPUTPCSQTY, 0), RS.INPUTQTY)::I3						AS QTY
					FROM 			PLAN			PL
					FULL OUTER JOIN NOTINPUT			NI	ON	NI.PRODUCTDEFID = PL.PRODUCTDEFID
															AND NI.ACTIONDATE = PL.FCSTDATE
					FULL OUTER JOIN RESULTS_SUM			RS	ON	RS.PRODUCTDEFID = NI.PRODUCTDEFID
															AND	RS.INPUTDATE = NI.ACTIONDATE
					LEFT OUTER JOIN CMD_LOOKUP_VALUES	CD	ON	CD.LOOKUP_CODE = COALESCE(PL.PRODUCTIONTYPE, RS.PRODUCTIONTYPE, NI.PRODUCTIONTYPE)
															AND	CD.LOOKUP_TYPE = 'ProductionType'
					LEFT OUTER JOIN CMD_DICTIONARY		CDD	ON	CDD.DICTIONARYID = CD.DICTIONARYID
															AND CDD.LANGUAGETYPE = 'ko-KR' 
					ORDER BY PRODUCTDEFID, WORKDATE , ${ORDERBY_COLUMNS}
					--, '' SELECT TO_CHAR(I::DATE, ''''yyyy-MM-dd'''') FROM GENERATE_SERIES(''''' || p_period_periodfr || ''''', ''''' || p_period_periodto || ''''', ''''1 DAY''''::INTERVAL) I''
				)
		        PIVOT
		    	(	
		    		SUM(PLAN) AS PLAN, 
		    		SUM(RSLT)  AS RSLT
		    		FOR WORKDATE in(${COLUMNS})
		    	)
			) P --AS P (PRODUCTDEFID TEXT, PRODUCTDEFNAME TEXT, CUSTOMERNAME TEXT, PRODUCTIONTYPE TEXT, ' || v_columns || ')
			LEFT OUTER JOIN CMD_LOOKUP_VALUES	C		ON		C.LOOKUP_CODE = P.PRODUCTIONTYPE
														AND		C.LOOKUP_TYPE = 'ProductionType'
			LEFT OUTER JOIN CMD_DICTIONARY		CD		ON 		CD.DICTIONARYID = C.DICTIONARYID
														AND		CD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
			ORDER BY P.PRODUCTDEFID
	</select>
	<select id="selectinputlotrecordperplangridDetail" parameterType="map" resultType="hashmap">
	--id : selectinputlotrecordperplangridDetail
		SELECT 
				'계획'	AS	CREATOR
			,	${PCSPLAN}	AS 	PCS
			,	CEIL(${PCSPLAN} / P.PCSPNL) AS PNL
			,	ROUND(${PCSPLAN} / P.PCSMM, 2) AS MM
			,	P.AMOUNT	
		FROM
		(
			SELECT 
				PCSPNL 
				,PCSMM 
				,NVL(PCM_EXCHANGE_FN(UP.PLANTID , SYSDATE , UP.CURRENCY_CODE, ${PCSPLAN} * UP.UNITPRICE),0) AS AMOUNT --계획금액
			FROM BAS_PRODUCTDEFINITION			BP
			LEFT JOIN BAS_UNITPRICEFORMES    	UP 	ON UP.PRODUCTDEFID = BP.PRODUCTDEFID 
													AND UP.PRODUCTDEFVERSION = BP.PRODUCTDEFVERSION 
													AND SYSDATE  BETWEEN UP.APPLY_START_DATE 
													AND NVL(UP.APPLY_END_DATE,TO_TIMESTAMP('9999-12-31 23:59:59','yyyy-MM-dd HH24:MI:SS'))
			WHERE 	BP.PRODUCTDEFID = #{PRODUCTDEFID}
			AND		BP.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
		) P
		UNION ALL
		SELECT 
				'실적'	AS	CREATOR
			,	${PCSRSLT}	AS 	PCS
			,	CEIL(${PCSRSLT} / P.PCSPNL) AS PNL
			,	ROUND(${PCSRSLT} / P.PCSMM, 2) AS MM
			,	P.AMOUNT
		FROM
		(
			SELECT 
				PCSPNL 
				,PCSMM 
				,NVL(PCM_EXCHANGE_FN(UP.PLANTID , SYSDATE , UP.CURRENCY_CODE, ${PCSRSLT} * UP.UNITPRICE),0) AS AMOUNT --실적금액
			FROM BAS_PRODUCTDEFINITION			BP
			LEFT JOIN BAS_UNITPRICEFORMES    	UP 	ON UP.PRODUCTDEFID = BP.PRODUCTDEFID 
													AND UP.PRODUCTDEFVERSION = BP.PRODUCTDEFVERSION 
													AND SYSDATE  BETWEEN UP.APPLY_START_DATE 
													AND NVL(UP.APPLY_END_DATE,TO_TIMESTAMP('9999-12-31 23:59:59','yyyy-MM-dd HH24:MI:SS'))
			WHERE 	BP.PRODUCTDEFID = #{PRODUCTDEFID}
			AND		BP.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
		) P
		UNION ALL
		SELECT 
				'차이'	AS	CREATOR
			,	${PCSPLAN} - ${PCSRSLT}	AS 	PCS
			,	CEIL(${PCSPLAN} / P.PCSPNL) - CEIL(${PCSRSLT} / P.PCSPNL) AS PNL
			,	ROUND(${PCSPLAN} / P.PCSMM, 2) - ROUND(${PCSRSLT} / P.PCSMM, 2) AS MM
			,	P.PLAN_AMOUNT - P.RSLT_AMOUNT AS AMOUNT
		FROM
		(
			SELECT 
				PCSPNL 
				,PCSMM 
				,NVL(PCM_EXCHANGE_FN(UP.PLANTID , SYSDATE , UP.CURRENCY_CODE, ${PCSPLAN} * UP.UNITPRICE),0) AS PLAN_AMOUNT --계획금액
				,NVL(PCM_EXCHANGE_FN(UP.PLANTID , SYSDATE , UP.CURRENCY_CODE, ${PCSRSLT} * UP.UNITPRICE),0) AS RSLT_AMOUNT --실적금액		
			FROM BAS_PRODUCTDEFINITION			BP
			LEFT JOIN BAS_UNITPRICEFORMES    	UP 	ON UP.PRODUCTDEFID = BP.PRODUCTDEFID 
													AND UP.PRODUCTDEFVERSION = BP.PRODUCTDEFVERSION 
													AND SYSDATE  BETWEEN UP.APPLY_START_DATE 
													AND NVL(UP.APPLY_END_DATE,TO_TIMESTAMP('9999-12-31 23:59:59','yyyy-MM-dd HH24:MI:SS'))
			WHERE 	BP.PRODUCTDEFID = #{PRODUCTDEFID}
			AND		BP.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
		) P
	</select>
</mapper>