<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    파일명       : Lot보류
    설명          : Lot보류
    작성자       : 진성하
    최초작성일 : 2021.04.10
<< 개정이력(Modification Information) >>
      수정일              수정자      수정내용
     2021.04.10      진성하     최초  생성
-->

<mapper namespace="smh.pcm.dao.PCM04500Dao">

    <!-- 조회-->
    <select id="selectWIPList" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.selectWIPList */
		WITH WIPLIST 
		AS
		(
			SELECT 	L.LOTID
			    ,   L.WORKCOUNT
				,	L.PRODUCTDEFID
				,	L.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	L.PROCESSDEFID
				,	L.PROCESSDEFVERSION
				,	L.PROCESSSEGMENTID
				,	COALESCE(DS1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
				,	L.USERSEQUENCE
				,	L.PLANTID
				,	L.AREAID
				,	COALESCE(DS2.DICTIONARYNAME, AL.AREANAME)			AS AREANAME
				,	COALESCE(PD.RTRSHT, 'Sheet')						AS RTRSHT
				,	COALESCE(L.ISLOCKING, 'N')							AS ISLOCKING
				,	COALESCE(L.ISHOLD, 'N')								AS ISHOLD
				,   L.PROCESSSTATE
				,	L.UNIT
				,	L.QTY
				,	L.PCSQTY
				,	L.PANELQTY
				,	L.PANELPERQTY
				,	CASE WHEN PD.PCSMM IS NULL OR PD.PCSMM = 0 THEN NULL 
					ELSE (L.QTY / PD.PCSMM) END			AS M2QTY
				,	PO.PLANENDTIME										AS DELIVERYDATE
				,	L.ROOTLOTSTARTDATE
				,   PH.PATHTYPE
				,   CASE WHEN L.ISREWORK = 'Y' THEN 'Rework'
				         ELSE 'Normal'
				         END  REWORKDIVISION
				,	L.PROCESSPATHSTACK						
				,   PPH.PROCESSPATHID                                   AS PREVPATHID
				,   CASE WHEN L.PROCESSSTATE = 'WaitForReceive'  THEN 'WaitForReceive'
				         WHEN L.PROCESSSTATE = 'Wait'            THEN 'Receive'
				         WHEN L.PROCESSSTATE = 'Run'             THEN 'WorkStart'
				         WHEN L.PROCESSSTATE = 'WaitForSend'     THEN 'WorkEnd'
				         END 											AS WIPPROCESSSTATE
				,	CASE WHEN L.PROCESSDEFID = L.LOTID	THEN 'Y' ELSE 'N' END AS ISLOTROUTING
				,   DC1.DICTIONARYNAME          AS LOTTYPE
                      -- 공정 LeadTime
                ,   (COALESCE(WR.RECEIVELEADTIME, 0) + COALESCE(WR.WORKSTARTLEADTIME, 0) + 
                           COALESCE(WR.WORKENDLEADTIME, 0) + COALESCE(WR.SENDLEADTIME, 0))            AS LEADTIME
	        FROM    PCM_LOT              		L
	        LEFT JOIN PCM_LOTWORKRESULT          WR  ON  L.LOTID = WR.LOTID
                                                          AND L.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                          AND L.USERSEQUENCE = WR.USERSEQUENCE
                                                          AND WR.RESULTTYPE = 'NORMAL'
                                                          AND L.WORKCOUNT = WR.WORKCOUNT
	        INNER JOIN BAS_PRODUCTDEFINITION		PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
		    										AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT JOIN MFM_PRODUCTIONORDER		PO	ON	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
													AND L.LINENO = PO.LINENO
													--AND PO.VALIDSTATE = 'Valid'
			INNER JOIN BAS_PROCESSSEGMENT		SG	ON	L.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
													AND L.PROCESSSEGMENTVERSION = SG.PROCESSSEGMENTVERSION
													AND SG.VALIDSTATE = 'Valid'
			INNER JOIN BAS_PROCESSPATH           PH  ON  SPLIT_PART(L.PROCESSPATHSTACK, '.', 1) = PH.PROCESSPATHID
			INNER JOIN fn_area(#{SESSION_USER_ID}) AL	ON	L.AREAID = AL.AREAID
																AND	AL.ISMODIFY = 'Y'	-- 등록화면					                                        
			LEFT JOIN BAS_PROCESSPATH            PPH ON  PH.PROCESSDEFID = PPH.PROCESSDEFID   
                                                          AND PH.PROCESSDEFVERSION = PPH.PROCESSDEFVERSION
                                                          AND PPH.PATHSEQUENCE = PH.PATHSEQUENCE -1
			LEFT JOIN BAS_PROCESSSEGMENTCLASS	MSC	ON	SG.PROCESSSEGMENTCLASSID = MSC.PROCESSSEGMENTCLASSID			-- 중공정
													AND MSC.VALIDSTATE = 'Valid'
			LEFT JOIN BAS_PROCESSSEGMENTCLASS	TSC ON	MSC.PARENTPROCESSSEGMENTCLASSID = TSC.PROCESSSEGMENTCLASSID		-- 대공정
													AND TSC.VALIDSTATE = 'Valid'
			LEFT JOIN CMD_DICTIONARY				DS1	ON	SG.PROCESSSEGMENTNAME = DS1.DICTIONARYID
													AND DS1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
			LEFT OUTER JOIN CMD_DICTIONARY		DS2 ON	AL.AREANAME = DS2.DICTIONARYID
													AND DS2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
                  INNER JOIN CMD_LOOKUP_VALUES                  CD1 ON  L.LOTTYPE = CD1.LOOKUP_CODE
                                                          AND CD1.LOOKUP_TYPE = 'ProductionType'
                                                          AND CD1.Enabled_Flag = 'Y'
                  LEFT OUTER JOIN CMD_DICTIONARY       DC1 ON  DC1.DICTIONARYID = CD1.DICTIONARYID
                                                          AND DC1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
	        WHERE   L.LOTSTATE IN ('InProduction', 'InTransit')
			AND 	L.ISDEFECTED = 'N'
			AND		NVL(L.ISREPRESENTROLLLOT,'N') <![CDATA[<>]]> 'Y'
			AND		(L.ISREWORK <![CDATA[=]]> 'N' or L.ISREWORK is null)
			-- LOTSTATE
    <if test="LOTSTATE != null and LOTSTATE !='' "> 
	        AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{LOTSTATE}, ',')		PMP
						WHERE	L.LOTSTATE = PMP.VALUE
					)
    </if>
    <if test="PLANTID != null and PLANTID !='' "> 
	        AND     L.PLANTID = #{PLANTID}
    </if>
    <if test="ISLOCKING != null and ISLOCKING !='' "> 
	        AND     L.ISLOCKING = #{ISLOCKING}
    </if>
    <if test="ISHOLD != null and ISHOLD !='' "> 
	        AND     L.ISLOCKING = #{ISHOLD}
    </if>
    <if test="LOTID != null and LOTID !='' "> 
			AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{LOTID}, ',')		LMP
						WHERE	L.LOTID = LMP.VALUE
					)
	</if>			
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
			AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{PRODUCTDEFID}, ',')		PMP
						WHERE	L.PRODUCTDEFID = PMP.VALUE
					)
	</if>			
    <if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !='' "> 
			AND		PD.PRODUCTDEFNAME LIKE #{PRODUCTDEFNAME} || '%'
	</if>			
    <if test="AREAID != null and AREAID !='' "> 
	        AND     EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{AREAID}, ',')		PMP
						WHERE	L.AREAID = PMP.VALUE
					)
	</if>			
    <if test="PROCESSSEGMENTCLASSID_TOP != null and PROCESSSEGMENTCLASSID_TOP !='' "> 
			AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{PROCESSSEGMENTCLASSID_TOP}, ',')		SMP
						WHERE	TSC.PROCESSSEGMENTCLASSID = SMP.VALUE
					)
	</if>			
    <if test="MAINSEGMENTID != null and MAINSEGMENTID !='' "> 
			AND		SG.ISMAINSEGMENT = 'Y'
			AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{MAINSEGMENTID}, ',')		MMP
						WHERE	SG.PROCESSSEGMENTID = MMP.VALUE
					)
	</if>			
    <if test="LOTPRODUCTTYPESTATUS != null  and LOTPRODUCTTYPESTATUS !='' and !'*'.equals(LOTPRODUCTTYPESTATUS) "> 
	        AND     L.LOTTYPE = #{LOTPRODUCTTYPESTATUS}
	</if>	        
    <if test="PRODUCTDEFTYPE != null and PRODUCTDEFTYPE !='' and !'*'.equals(PRODUCTDEFTYPE) "> 
			AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{PRODUCTDEFTYPE}, ',')		PMP
						WHERE	PD.PRODUCTDEFTYPE = PMP.VALUE
					)
	</if>	        
    <if test="OWNTYPE != null  and OWNTYPE !='' and !'*'.equals(OWNTYPE) "> 
			AND     AL.OWNTYPE = #{OWNTYPE}
	</if>	        
    <if test="PROCESSSTATE != null and PROCESSSTATE !='' "> 
	        AND		EXISTS
					(
						SELECT	1
						FROM	ufn_selectStringToSplit(#{PROCESSSTATE}, ',')		PMP
						WHERE	L.PROCESSSTATE = PMP.VALUE
					)
	</if>					
	    )
		SELECT 	L.LOTID
			,	L.LOTTYPE
			,	L.PRODUCTDEFID
			,	L.PRODUCTDEFVERSION
			,	L.PRODUCTDEFNAME
			,	L.PROCESSDEFID
			,	L.PROCESSDEFVERSION
			,	L.PROCESSSEGMENTID
			,	L.PROCESSSEGMENTNAME
			,	L.USERSEQUENCE
			,	L.PLANTID
			,	L.AREAID
			,	L.AREANAME
			,	L.RTRSHT
			,	L.ISLOCKING
			,	L.ISHOLD
			,   L.PROCESSSTATE 
			,   COALESCE(DC3.DICTIONARYNAME, L.WIPPROCESSSTATE)                             AS STATE
			,	L.UNIT
			,	L.QTY
			,	L.PCSQTY      
			,	L.PANELQTY
			,	L.PANELPERQTY
			,	to_char(L.DELIVERYDATE,'yyyymmdd')	as DELIVERYDATE
			,	to_char(L.ROOTLOTSTARTDATE,'yyyymmdd')															AS LOTINPUTDATE
			,   L.REWORKDIVISION
			,   COALESCE(DC2.DICTIONARYNAME, L.REWORKDIVISION)                               AS PROCESSCLASSID_R					
			,	EXTRACT(DAY FROM (CURRENT_TIMESTAMP - DELIVERYDATE)) 					AS LEFTDATE
			-- 인수대기수량(전공정인계)
			,	CASE WHEN L.PROCESSSTATE = 'WaitForReceive' THEN  L.PCSQTY ELSE 0 END          AS  RECEIVEPCSQTY
			,   CASE WHEN L.PROCESSSTATE = 'WaitForReceive' THEN  L.PANELQTY ELSE 0 END     AS  RECEIVEPANELQTY
			-- 작업시작(인수 완료 수량)
			,	CASE WHEN L.PROCESSSTATE = 'Wait' THEN  L.PCSQTY ELSE 0 END                    AS SENDPCSQTY
			,   CASE WHEN L.PROCESSSTATE = 'Wait' THEN  L.PANELQTY ELSE 0 END               AS SENDPANELQTY					
			-- 작업완료(작업 시작 수량)
			,	CASE WHEN L.PROCESSSTATE = 'Run' THEN  L.PCSQTY ELSE 0 END                     AS WORKSTARTPCSQTY
			,   CASE WHEN L.PROCESSSTATE = 'Run' THEN  L.PANELQTY ELSE 0 END                AS WORKSTARTPANELQTY					
			-- 인계 대기(작업완료 수량)
			,	CASE WHEN L.PROCESSSTATE = 'WaitForSend' THEN  L.PCSQTY ELSE 0 END             AS WORKENDPCSQTY
			,   CASE WHEN L.PROCESSSTATE = 'WaitForSend' THEN  L.PANELQTY ELSE 0 END        AS WORKENDPANELQTY
			-- 공정 LeadTime
			,	L.LEADTIME
			,	L.ISLOTROUTING
			,   L.PROCESSPATHSTACK
	    FROM 	WIPLIST						L
		LEFT  JOIN CMD_LOOKUP_VALUES                  CD2 ON  L.REWORKDIVISION = CD2.LOOKUP_CODE
		                                        AND CD2.LOOKUP_TYPE = 'ReworkDivision'     
		LEFT  JOIN CMD_DICTIONARY            DC2 ON  CD2.DICTIONARYID = DC2.DICTIONARYID
		                                        AND DC2.LANGUAGETYPE =  #{SESSION_LANGUAGETYPE}														
		LEFT  JOIN CMD_LOOKUP_VALUES              	CD3 ON  L.WIPPROCESSSTATE = CD3.LOOKUP_CODE
		                                    	AND CD3.LOOKUP_TYPE = 'WipProcessState'     
		LEFT  JOIN CMD_DICTIONARY        	DC3 ON  CD3.DICTIONARYID = DC3.DICTIONARYID
		                                    	AND DC3.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
    </select>


	<select id="GetUomDefinitionList" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.GetUomDefinitionList */
		-- Id : GetUomDefinitionList
		-- Version : 10001
		SELECT
				UD.UOMDEFID
			,	UI.UOMDEFNAME
			
		FROM	BAS_UOMDEFMAP		UD
	    INNER JOIN BAS_UOMDEFINITION	UI	ON	UD.UOMDEFID = UI.UOMDEFID
		WHERE	1 = 1
		AND		UD.UOMCATEGORY = #{UOMCLASSID}
		AND     UD.VALIDSTATE = 'Valid'
	</select>

	<select id="selectLotInfoBylotID" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.selectLotInfoBylotID */
		-- Id : SelectLotInfoBylotID
		-- Version : 10001
		WITH PROCESSSEGMENT AS
		(
			SELECT
					L.LOTID
				,	L.ENTERPRISEID
				,	L.PLANTID
				,	PP.PROCESSPATHID
				,	LAG(PP.PROCESSSEGMENTID) OVER (ORDER BY PP.PATHSEQUENCE ASC)		AS PREVPROCESSSEGMENTID
				,	LAG(PP.PROCESSSEGMENTVERSION) OVER (ORDER BY PP.PATHSEQUENCE ASC)	AS PREVPROCESSSEGMENTVERSION
				,	PP.PROCESSSEGMENTID
				,	PP.PROCESSSEGMENTVERSION
				,	LEAD(PP.PROCESSSEGMENTID) OVER (ORDER BY PP.PATHSEQUENCE ASC)		AS NEXTPROCESSSEGMENTID
				,	LEAD(PP.PROCESSSEGMENTVERSION) OVER (ORDER BY PP.PATHSEQUENCE ASC)	AS NEXTPROCESSSEGMENTVERSION
			FROM	PCM_LOT						L
			LEFT OUTER JOIN BAS_PROCESSPATH		PP	ON	L.ENTERPRISEID = PP.ENTERPRISEID
													AND	L.PLANTID = PP.PLANTID
													AND	L.PROCESSDEFID = PP.PROCESSDEFID
													AND L.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
			WHERE	1=1
			AND     L.ENTERPRISEID = #{SESSION_ENTERPRISEID}
			AND		L.PLANTID = #{SESSION_SITETYPE}
			AND		L.LOTID = #{LOTID}
		)
		SELECT	L.LOTID
			,	PP.PROCESSPATHID
			,	COALESCE(DC1.DICTIONARYNAME, PSP.PROCESSSEGMENTNAME)	AS PREVPROCESSSEGMENTNAME
			,	PS.PROCESSSEGMENTID
			,	COALESCE(DC2.DICTIONARYNAME, PS.PROCESSSEGMENTNAME)		AS PROCESSSEGMENTNAME
			,	PS.PROCESSSEGMENTVERSION
			,	COALESCE(DC3.DICTIONARYNAME, PSN.PROCESSSEGMENTNAME)	AS NEXTPROCESSSEGMENTNAME
			,	L.USERSEQUENCE
			,	L.PRODUCTDEFID
			,	L.PRODUCTDEFVERSION
			,	PD.PRODUCTDEFNAME
			,	'Main'													AS PRODUCTTYPE
			,	TO_CHAR(L.STARTEDDATE, 'YYYY-MM-DD')					AS INPUTDATE
			,	L.PRODUCTIONORDERID
			,	TO_CHAR(L.DUEDATE, 'YYYY-MM-DD')						AS DUEDATE
			,	DTD.DICTIONARYNAME										AS PRODUCTDEFTYPE
			,	OTD.DICTIONARYNAME										AS PRODUCTIONTYPE
			,	COALESCE(L.ISLOCKING, 'N')								AS ISLOCKING
			,	COALESCE(DC4.DICTIONARYNAME, A.AREANAME)				AS AREANAME
			,	C.CUSTOMERNAME
			,	L.UNIT
			,	L.DEFECTUNIT
			,	L.PANELQTY                      						AS PNLQTY
			,	L.PANELPERQTY											AS PANELPERQTY
			,	L.PCSQTY                           						AS PCSQTY
			,	L.QTY                           						AS QTY
			,	ceil(L.QTY / PD.PCSMM * 100)/100   					AS MM
			,	PD.PCSPNL												AS PCSPNL
			,	PS.PROCESSSEGMENTTYPE
                  ,	COALESCE(ST2.STEPTYPE, ST1.STEPTYPE)		            AS STEPTYPE
                  ,   COALESCE(PT.PROCESSUOM, L.UNIT)                         AS UOM	
		FROM	PROCESSSEGMENT					PP
		INNER JOIN PCM_LOT						L	ON	PP.ENTERPRISEID = L.ENTERPRISEID
													AND	PP.PLANTID = L.PLANTID
													AND	PP.LOTID = L.LOTID
													AND	PP.PROCESSSEGMENTID = L.PROCESSSEGMENTID
													AND PP.PROCESSSEGMENTVERSION = L.PROCESSSEGMENTVERSION
              INNER JOIN BAS_PROCESSPATH               PT  ON  SPLIT_PART(L.PROCESSPATHSTACK, '.', 1) = PT.PROCESSPATHID
		LEFT OUTER JOIN BAS_PROCESSSEGMENT		PSP	ON	PP.PREVPROCESSSEGMENTID = PSP.PROCESSSEGMENTID
													AND	PP.PREVPROCESSSEGMENTVERSION = PSP.PROCESSSEGMENTVERSION
		LEFT OUTER JOIN CMD_DICTIONARY			DC1 ON  PSP.PROCESSSEGMENTNAME = DC1.DICTIONARYID
													AND DC1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN BAS_PROCESSSEGMENT		PS	ON	PP.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
													AND	PP.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
              LEFT OUTER JOIN 	FN_GETSTEPTYPE() ST1 ON PS.STEPCLASS=ST1.CODE																	
		LEFT OUTER JOIN BAS_RESOURCE				RC	ON	L.ENTERPRISEID = RC.ENTERPRISEID
													AND	L.PLANTID = RC.PLANTID
													AND	L.RESOURCEID = RC.RESOURCEID
		LEFT OUTER JOIN 	FN_GETSTEPTYPE() ST2 ON RC.STEPCLASS=ST2.CODE																
		LEFT OUTER JOIN CMD_DICTIONARY			DC2 ON  PS.PROCESSSEGMENTNAME = DC2.DICTIONARYID
													AND DC2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN BAS_PROCESSSEGMENT		PSN	ON	PP.NEXTPROCESSSEGMENTID = PSN.PROCESSSEGMENTID
													AND	PP.NEXTPROCESSSEGMENTVERSION = PSN.PROCESSSEGMENTVERSION
		LEFT OUTER JOIN CMD_DICTIONARY           DC3 ON  PSN.PROCESSSEGMENTNAME = DC3.DICTIONARYID
													AND DC3.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN BAS_PRODUCTDEFINITION	PD	ON	L.ENTERPRISEID = PD.ENTERPRISEID
													AND	L.ORIGINALPLANTID = PD.PLANTID
													AND	L.PRODUCTDEFID = PD.PRODUCTDEFID
													AND	L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
		LEFT OUTER JOIN MFM_PRODUCTIONORDER		PO	ON	L.ENTERPRISEID = PO.ENTERPRISEID
													AND	L.ORIGINALPLANTID = PO.PLANTID
													AND	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
													AND	L.LINENO = PO.LINENO
		LEFT OUTER JOIN cmd_code_v					DT	ON	PD.PRODUCTDEFTYPE = DT.CODEID
													AND	DT.CODECLASSID = 'ProductDefType'
		LEFT OUTER JOIN CMD_DICTIONARY			DTD	ON	DT.DICTIONARYID = DTD.DICTIONARYID
													AND	DTD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN cmd_code_v					OT	ON	L.LOTTYPE = OT.CODEID
													AND	OT.CODECLASSID = 'ProductionType'
		LEFT OUTER JOIN CMD_DICTIONARY			OTD	ON	OT.DICTIONARYID = OTD.DICTIONARYID
													AND	OTD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN BAS_AREA					A	ON	L.ENTERPRISEID = A.ENTERPRISEID
													AND	L.PLANTID = A.PLANTID
													AND L.AREAID = A.AREAID
		LEFT OUTER JOIN CMD_DICTIONARY			DC4 ON  A.AREANAME = DC4.DICTIONARYID
													AND DC4.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN BAS_CUSTOMER				C	ON	PO.ENTERPRISEID = C.ENTERPRISEID
													AND	PO.PLANTID = C.PLANTID
													AND	PO.CUSTOMERID = C.CUSTOMERID
	</select>	
	
    <select id="GetReasonCodeList" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.GetReasonCodeList */
		--
		-- Id : GetReasonCodeList
		-- Version : 10001
		
		SELECT 
				CD.REASONCODEID		
			,	COALESCE(DC.DICTIONARYNAME, 'REASONCODENAME')	AS REASONCODENAME
		FROM 	BAS_REASONCODE			CD
		LEFT JOIN CMD_DICTIONARY			DC	ON	CD.REASONCODENAME = DC.dictionaryid
											AND DC.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE 	CD.VALIDSTATE = 'Valid'
		AND 	CD.REASONCODECLASSID = #{REASONCODECLASSID}
		ORDER BY DISPLAYSEQUENCE ASC
	</select>       	    

    <select id="GetCurrentRoutingByLot" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.GetCurrentRoutingByLot */
		-- Id : GetCurrentRoutingByLot
		-- Version : 10001				
		WITH RESULT_LIST AS
		(
					SELECT  
					        WR.PROCESSDEFID
					    ,   WR.PROCESSDEFVERSION
						,   WR.USERSEQUENCE									AS USERSEQUENCE					    
					    ,   WR.PROCESSSEGMENTID
					    ,   WR.PROCESSSEGMENTVERSION
					    ,   COALESCE(DC1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)     AS PROCESSSEGMENTNAME
					    ,   PP.PROCESSPATHID
					    ,   TO_CHAR(WR.RECEIVETIME, 'yyyy-MM-dd HH24:MI:SS')		AS receivetime
					    ,   TO_CHAR(WR.WORKSTARTTIME, 'yyyy-MM-dd HH24:MI:SS')		AS WORKSTARTTIME
					    ,   TO_CHAR(WR.WORKENDTIME, 'yyyy-MM-dd HH24:MI:SS')		AS WORKENDTIME
					    ,   TO_CHAR(WR.SENDTIME, 'yyyy-MM-dd HH24:MI:SS')			AS sendtime
					    ,   1 AS DISPLAYSEQUENCE
					    ,	NULL 											AS AREAID 
					    ,	NULL 											AS RESOURCEID
					    ,	NULL 											AS RESOURCENAME
					FROM    (
							    SELECT GL.*
							        ,   WR.USERSEQUENCE
							        ,   WR.PROCESSSEGMENTID
							        ,   RANK() OVER (PARTITION BY TO_NUMBER(USERSEQUENCE) ORDER BY LLEVEL) AS RNK
							    FROM 	(
										    SELECT  LOTID
										        ,   PARENTLOTID
										        ,   LLEVEL
										    FROM fn_lotgeneal_bottomup_multi(#{LOTID})
										)           GL
							    LEFT JOIN PCM_LOTWORKRESULT  WR  ON  GL.LOTID = WR.LOTID
							    WHERE   COALESCE(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
							    ORDER BY LLEVEL
							)						LV
					INNER JOIN PCM_LOTWORKRESULT             WR	ON	LV.LOTID = WR.LOTID
																AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
																AND LV.USERSEQUENCE = WR.USERSEQUENCE
					INNER JOIN PCM_LOT						 L  ON  WR.LOTID = L.LOTID 
															    AND WR.PROCESSDEFID = L.PROCESSDEFID 
															    AND WR.PROCESSDEFVERSION = L.PROCESSDEFVERSION 
					LEFT JOIN BAS_PROCESSSEGMENT             SG  ON  WR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
					LEFT JOIN CMD_DICTIONARY                 DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
					                                            AND DC1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT JOIN BAS_AREA                       AR  ON  WR.AREAID = AR.AREAID
					LEFT JOIN CMD_DICTIONARY                 DC2 ON  AR.AREANAME = DC2.DICTIONARYID
					                                            AND DC2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					INNER JOIN BAS_PROCESSPATH               PP  ON  WR.PROCESSDEFID = PP.PROCESSDEFID    
					                                            AND WR.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
					                                            AND WR.PROCESSSEGMENTID = PP.PROCESSSEGMENTID 
					CROSS JOIN (
							    SELECT  MAX(WR.USERSEQUENCE)   AS MAX_SEQUENCE
							    FROM (
									    SELECT  LOTID
									        ,   PARENTLOTID
									        ,   LLEVEL
									    FROM fn_lotgeneal_bottomup_multi(#{LOTID})
									)      GL
							    LEFT JOIN PCM_LOTWORKRESULT  WR  ON  GL.LOTID = WR.LOTID
							    WHERE LLEVEL = 1
							)			RM                                            
		          WHERE ((WR.PROCESSSEGMENTID NOT IN (SELECT PROCESSSEGMENTID FROM BAS_PROCESSSEGMENT WHERE PROCESSSEGMENTCLASSID = '1020') 
		                  AND LV.RNK = 1) 
		                OR( WR.PROCESSSEGMENTID IN (SELECT PROCESSSEGMENTID FROM BAS_PROCESSSEGMENT WHERE PROCESSSEGMENTCLASSID = '1020') 
		                  AND LV.RNK >= 1))
					AND     COALESCE(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
					AND     CASE WHEN WR.USERSEQUENCE = '' THEN 9999 ELSE TO_NUMBER(WR.USERSEQUENCE)  END <![CDATA[<=]]> RM.MAX_SEQUENCE
			)
			SELECT Y.PROCESSDEFID
				,  Y.PROCESSDEFVERSION
				,  Y.USERSEQUENCE
				,  Y.PROCESSSEGMENTID
				,  Y.PROCESSSEGMENTVERSION
				,  Y.PROCESSSEGMENTNAME
				,  Y.PROCESSPATHID
				,  PP.PATHSEQUENCE
				,  Y.RECEIVELOTTIME
				,  Y.STARTTIME
				,  Y.ENDLOTTIME
				,  Y.SENDLOTTIME
				,  CASE WHEN TO_NUMBER(L.USERSEQUENCE)  > TO_NUMBER(Y.USERSEQUENCE) THEN 1
				        WHEN TO_NUMBER(L.USERSEQUENCE)  <![CDATA[<]]> TO_NUMBER(Y.USERSEQUENCE) THEN 3
				        ELSE 2
				        END  DISPLAYSEQUENCE
				,  NULL 											AS AREAID 
				,  NULL 											AS RESOURCEID
				,  NULL 											AS RESOURCENAME
			FROM
			(
				SELECT   X.PROCESSDEFID
				      ,  X.PROCESSDEFVERSION
				      ,  X.USERSEQUENCE
				      ,  X.PROCESSSEGMENTID
				      ,  X.PROCESSSEGMENTVERSION
				      ,  X.PROCESSSEGMENTNAME
				      ,  X.PROCESSPATHID
				      ,  MAX(RECEIVETIME)   RECEIVELOTTIME
				      ,  MAX(WORKSTARTTIME) STARTTIME
				      ,  MAX(WORKENDTIME)   ENDLOTTIME
				      ,  MAX(SENDTIME)      SENDLOTTIME
				FROM
				(
					SELECT *
					FROM RESULT_LIST
					UNION
					SELECT  L2.PROCESSDEFID
					     ,  L2.PROCESSDEFVERSION
						 ,  PP.USERSEQUENCE
						 ,  PP.PROCESSSEGMENTID
						 ,  PP.PROCESSSEGMENTVERSION
						 ,  COALESCE(SD1.DICTIONARYNAME, PS.PROCESSSEGMENTNAME)PROCESSSEGMENTNAME
						 ,  PP.PROCESSPATHID
						 ,  TO_CHAR(LW.RECEIVETIME,'YYYY-MM-DD HH24:MI:SS') RECEIVETIME
						 ,  TO_CHAR(LW.WORKSTARTTIME,'YYYY-MM-DD HH24:MI:SS') WORKSTARTTIME
						 ,  TO_CHAR(LW.WORKENDTIME,'YYYY-MM-DD HH24:MI:SS') WORKENDTIME
						 ,  TO_CHAR(LW.SENDTIME,'YYYY-MM-DD HH24:MI:SS') SENDTIME
						 ,  2 AS DISPLAYSEQUENCE
						 ,	NULL 											AS AREAID 
					     ,	NULL 											AS RESOURCEID
					     ,	NULL 											AS RESOURCENAME
					FROM	UFN_SELECTSTRINGTOSPLIT(#{LOTID},',') L1
					INNER JOIN PCM_LOT            L2 ON L1.VALUE = L2.LOTID
					INNER JOIN BAS_PROCESSPATH    PP ON  L2.PROCESSDEFID = PP.PROCESSDEFID
					                                AND L2.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
					                                AND PP.VALIDSTATE = 'Valid'
					                                AND CASE WHEN L2.USERSEQUENCE = '' THEN 9999 ELSE TO_NUMBER(L2.USERSEQUENCE)  END
					                                	<![CDATA[<=]]> CASE WHEN  PP.USERSEQUENCE = '' THEN 9999 ELSE TO_NUMBER(PP.USERSEQUENCE)  END
					INNER JOIN BAS_PROCESSSEGMENT PS ON  PP.PROCESSSEGMENTID = PS.PROCESSSEGMENTID                              
					LEFT  JOIN CMD_DICTIONARY    SD1 ON  PS.PROCESSSEGMENTNAME = SD1.DICTIONARYID
						                            AND SD1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
					LEFT  JOIN PCM_LOTWORKRESULT  LW ON  L2.LOTID = LW.LOTID
					                                AND PP.PROCESSDEFID = LW.PROCESSDEFID
					                                AND PP.PROCESSDEFVERSION = LW.PROCESSDEFVERSION
					                                AND PP.PROCESSSEGMENTID = LW.PROCESSSEGMENTID    
					WHERE 1=1
					AND   LW.SENDTIME IS NULL
				)x
				GROUP BY X.PROCESSDEFID
				      ,  X.PROCESSDEFVERSION
				      ,  X.USERSEQUENCE
				      ,  X.PROCESSSEGMENTID
				      ,  X.PROCESSSEGMENTVERSION
				      ,  X.PROCESSSEGMENTNAME
				      ,  X.PROCESSPATHID
			)Y
			INNER JOIN PCM_LOT L ON L.LOTID = #{LOTID}
			INNER JOIN BAS_PROCESSPATH PP ON PP.PROCESSPATHID = Y.PROCESSPATHID
			WHERE TO_NUMBER(L.USERSEQUENCE) <![CDATA[<=]]>  TO_NUMBER(Y.USERSEQUENCE)
			ORDER BY TO_NUMBER(Y.USERSEQUENCE) 
	</select>       	    

    <select id="SelectReworkRoutingResource" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.SelectReworkRoutingResource */
		-- Id : SelectReworkRoutingResource
		-- Version : 10001
		SELECT  BOR.RESOURCEID
		     ,  RSC.DESCRIPTION AS RESOURCENAME
			 ,	BOR.ISPRIMARYRESOURCE
			 ,	RSC.AREAID
			 ,	AD.DICTIONARYNAME AS AREANAME
		FROM BAS_PROCESSDEFINITION 		PD
		INNER JOIN BAS_PROCESSPATH		PP	ON  PD.PROCESSDEFID = PP.PROCESSDEFID
		                                	AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION 
		INNER JOIN BAS_BILLOFRESOURCE	BOR	ON  PP.PROCESSDEFID = BOR.PROCESSDEFID
		                                	AND PP.PROCESSDEFVERSION = BOR.PROCESSDEFVERSION
		                                	AND PP.PROCESSSEGMENTID = BOR.PROCESSSEGMENTID
											AND (BOR.PRODUCTDEFID = #{PRODUCTDEFID} OR BOR.PRODUCTDEFID = '*')
											AND (BOR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} OR BOR.PRODUCTDEFVERSION = '*')
											AND BOR.RESOURCETYPE = 'Resource'
		LEFT OUTER JOIN BAS_RESOURCE		RSC	ON	BOR.RESOURCEID = RSC.RESOURCEID
											AND	BOR.ENTERPRISEID = RSC.ENTERPRISEID
											AND	BOR.PLANTID = RSC.PLANTID
		LEFT OUTER JOIN BAS_AREA 		A 	ON 	A.AREAID = RSC.AREAID
		LEFT OUTER JOIN CMD_DICTIONARY 	AD 	ON 	AD.DICTIONARYID = A.AREANAME
											AND AD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE PD.PROCESSDEFID = #{PROCESSDEFID}
		AND   PD.PROCESSDEFVERSION =#{PROCESSDEFVERSION}
    <if test="PROCESSPATHID != null and PROCESSPATHID !='' ">
		AND   PP.PROCESSPATHID = #{PROCESSPATHID}
    </if>
    <if test="PROCESSPATHID == null or PROCESSPATHID =='' ">
		AND   (PP.PATHTYPE = 'Start' OR PP.PATHTYPE = 'StartEnd')
    </if>
	</select> 

    <select id="SelectReworkRoutingResource10002" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.SelectReworkRoutingResource10002 */
		-- Id : SelectReworkRoutingResource
		-- Version : 10002
		SELECT  BOR.RESOURCEID
		     ,  RSC.DESCRIPTION AS RESOURCENAME
			 ,	BOR.ISPRIMARYRESOURCE
			 ,	RSC.AREAID
			 ,	AD.DICTIONARYNAME AS AREANAME
		FROM BAS_PROCESSDEFINITION PD
		INNER JOIN BAS_PROCESSPATH		PP	ON  PD.PROCESSDEFID = PP.PROCESSDEFID
		                                	AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION 
		INNER JOIN BAS_BILLOFRESOURCE	BOR	ON  PP.PROCESSDEFID = BOR.PROCESSDEFID
		                                	AND PP.PROCESSDEFVERSION = BOR.PROCESSDEFVERSION
		                                	AND PP.PROCESSSEGMENTID = BOR.PROCESSSEGMENTID
											AND (BOR.PRODUCTDEFID = #{PRODUCTDEFID} OR BOR.PRODUCTDEFID = '*')
											AND (BOR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} OR BOR.PRODUCTDEFVERSION = '*')
											AND BOR.RESOURCETYPE = 'Resource'
		INNER JOIN BAS_RESOURCE			RSC	ON	BOR.RESOURCEID = RSC.RESOURCEID
											AND	BOR.ENTERPRISEID = RSC.ENTERPRISEID
											AND	BOR.PLANTID = RSC.PLANTID
		INNER JOIN BAS_AREA 				A 	ON 	A.AREAID = RSC.AREAID
		LEFT OUTER JOIN CMD_DICTIONARY 	AD 	ON 	AD.DICTIONARYID = A.AREANAME
											AND AD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE PD.PROCESSDEFID = #{PROCESSDEFID}
		AND   PD.PROCESSDEFVERSION =#{PROCESSDEFVERSION}
    <if test="PROCESSPATHID != null and PROCESSPATHID !='' ">
		AND   PP.PROCESSPATHID = #{PROCESSPATHID}
    </if>
    <if test="PROCESSPATHID == null or PROCESSPATHID =='' ">
		AND   (PP.PATHTYPE = 'Start' OR PP.PATHTYPE = 'StartEnd')
    </if>
	</select>
	 	
    <select id="GetProcessPathList" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.GetProcessPathList */
		-- Id : GetProcessPathList
		-- Version : 10021
		SELECT  TO_NUMBER(PP.USERSEQUENCE)   AS USERSEQUENCE
                  ,   PP.PROCESSSEGMENTID
                  ,   DI.DICTIONARYNAME               AS PROCESSSEGMENTNAME
                  ,   PP.PROCESSSEGMENTVERSION
		 	,	RAR.RESOURCEID 	
		 	,	COALESCE(RS1.DESCRIPTION, RAR.RESOURCEID) AS RESOURCENAME 	
		 	--,	COALESCE(RS1.AREAID, AR.AREANAME) AS AREANAME
		 	,	RS1.AREAID
		 	,	ADI.DICTIONARYNAME AS AREANAME
                  ,	PP.PROCESSDEFID
                  ,	PP.PROCESSDEFVERSION
                  ,	PP.PROCESSPATHID
                  ,	PP.DESCRIPTION
                  ,	PP.PATHSEQUENCE
                  ,	PDF.PROCESSDEFID 
                  ,	PDF.PROCESSDEFNAME
              FROM    BAS_PROCESSPATH              PP 
              INNER JOIN BAS_PROCESSDEFINITION     PDF ON  PDF.PROCESSDEFID = PP.PROCESSDEFID
                                                      AND PDF.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
              LEFT JOIN BAS_PROCESSSEGMENT         PG  ON  PP.ENTERPRISEID = PG.ENTERPRISEID        
                                                      AND PP.PROCESSSEGMENTID = PG.PROCESSSEGMENTID
              LEFT JOIN CMD_DICTIONARY             DI  ON  DI.DICTIONARYID = PG.PROCESSSEGMENTNAME
                                                      AND DI.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT JOIN
			(
				SELECT
						PROCESSDEFID
					,	PROCESSDEFVERSION
					,	PROCESSSEGMENTID
					,	PROCESSSEGMENTVERSION
					,	ENTERPRISEID
					,	PLANTID
					,	RESOURCEID
					, 	RANK() OVER(PARTITION BY ENTERPRISEID, PLANTID, PROCESSDEFID, PROCESSDEFVERSION, PROCESSSEGMENTID, PROCESSSEGMENTVERSION
							ORDER BY CASE WHEN ISPRIMARYRESOURCE = 'Y' THEN 1 ELSE 2 END) AS RN
				FROM	BAS_BILLOFRESOURCE
				WHERE	1 = 1
				AND		RESOURCETYPE = 'Resource'
			) 								RAR	ON  RAR.PROCESSDEFID = PP.PROCESSDEFID
                                                      AND RAR.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
                                                      AND RAR.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
                                                      AND RAR.ENTERPRISEID = PP.ENTERPRISEID
                                                      -- AND RAR.PLANTID = PP.PLANTID
                                                      AND RAR.RN = 1
              LEFT JOIN BAS_RESOURCE               RS1 ON  RAR.ENTERPRISEID = RS1.ENTERPRISEID
                                                      AND RAR.PLANTID = RS1.PLANTID
                                                      AND RAR.RESOURCEID = RS1.RESOURCEID
              LEFT JOIN BAS_AREA                   AR  ON  RS1.ENTERPRISEID = AR.ENTERPRISEID
                                                      AND RS1.AREAID = AR.AREAID
              LEFT JOIN CMD_DICTIONARY             ADI ON  ADI.DICTIONARYID = AR.AREANAME
                                                      AND ADI.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
		WHERE PP.ENTERPRISEID   = #{SESSION_ENTERPRISEID}  
		  AND PP.PROCESSDEFID	= #{PROCESSDEFID}
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
		  AND PP.PROCESSDEFVERSION	= #{PROCESSDEFVERSION}
	</if>
           ORDER BY PP.PATHSEQUENCE
	</select>       	    

    <select id="SelectReworkRouting" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.SelectReworkRouting */
		-- Id : SelectReworkRouting
		-- Version : 10001
		WITH ROUTING_PRODUCT_LIST AS 
		(
			SELECT  PD.PROCESSDEFID
			     ,  PD.PROCESSDEFVERSION
			     , LISTAGG(CONTROLRESOURCEID,',') WITHIN GROUP (ORDER BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION)   PRODUCTLIST 
			     --, ARRAY_TO_STRING(ARRAY_AGG(CONTROLRESOURCEID ORDER BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION),',')  PRODUCTLIST    
			FROM 
			(
				SELECT  PD.PROCESSDEFID
				     ,  PD.PROCESSDEFVERSION
				     ,  MC.CONTROLRESOURCEID || MC.CONTROLRESOURCEVERSION  CONTROLRESOURCEID
				FROM BAS_PROCESSDEFINITION  PD
				LEFT JOIN BAS_REWORKCONTROL MC   ON  PD.PROCESSDEFID = MC.PROCESSDEFID
				                                AND PD.PROCESSDEFVERSION = MC.PROCESSDEFVERSION
				                                AND MC.CONTROLTYPE = 'Product'
			 )PD
			GROUP BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION                  
		),ROUTING_AREA_LIST AS
		(
			SELECT  PD.PROCESSDEFID
			     ,  PD.PROCESSDEFVERSION
			     ,  LISTAGG(CONTROLRESOURCEID,',') WITHIN GROUP (ORDER BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION) AREALIST
			     --, ARRAY_TO_STRING(ARRAY_AGG(CONTROLRESOURCEID ORDER BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION),',') AREALIST     
			FROM 
			(
				SELECT  PD.PROCESSDEFID
				     ,  PD.PROCESSDEFVERSION
				     ,  MC.CONTROLRESOURCEID   CONTROLRESOURCEID
				FROM BAS_PROCESSDEFINITION PD
				LEFT JOIN BAS_REWORKCONTROL MC   ON  PD.PROCESSDEFID = MC.PROCESSDEFID
				                                AND PD.PROCESSDEFVERSION = MC.PROCESSDEFVERSION
				                                AND MC.CONTROLTYPE = 'Area'
			 )PD
			GROUP BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION                  
		)
		SELECT Y.PROCESSCLASSTYPE
		    ,  Y.PROCESSCLASSTYPENAME    APPLICATIONTYPE
		    ,  Y.PROCESSCLASSID
		    ,  Y.PROCESSCLASSNAME        REWORKTYPE
		    ,  Y.PROCESSDEFID            REWORKNUMBER
		    ,  Y.PROCESSDEFVERSION       REWORKVERSION
		    ,  Y.PROCESSDEFNAME          REWORKNAME
		    ,  Y.DESCRIPTION
		    ,  Y.TOPPROCESSSEGMENTID
		    ,  Y.TOPPROCESSSEGMENTNAME
		    ,  Y.CREATOR
		FROM
		(
			SELECT X.PROCESSCLASSTYPE       
			    ,  X.PROCESSCLASSTYPENAME   
				,  X.PROCESSCLASSID
				,  X.PROCESSCLASSNAME       
				,  X.PROCESSDEFID           
				,  X.PROCESSDEFVERSION     	
				,  X.PROCESSDEFNAME         
				,  X.DESCRIPTION
				,  X.PRODUCTLIST
				,  X.AREALIST
				,  X.TOPPROCESSSEGMENTID
				,  X.TOPPROCESSSEGMENTNAME
				,  X.REWORKITEMCONTROL
				,  X.REWORKSEGMENTCONTROL
				,  CASE WHEN REWORKITEMCONTROL = 'Y' AND RP_INDEX > 0 THEN 'Y'
				        WHEN REWORKITEMCONTROL = 'Y' AND RP_INDEX = 0 THEN 'N'
				        ELSE 'Y'
				        END  RP_CHECK
				,  CASE WHEN REWORKSEGMENTCONTROL = 'Y' AND RA_INDEX > 0 THEN 'Y'
				        WHEN REWORKSEGMENTCONTROL = 'Y' AND RA_INDEX = 0 THEN 'N'
				        ELSE 'Y'
				        END  RA_CHECK	        
				,  X.CREATOR
			FROM
			(
				SELECT  PC.PROCESSCLASSTYPE 
				     ,  COALESCE(sd.dictionaryname,PC.PROCESSCLASSTYPE ) PROCESSCLASSTYPENAME
				     ,	PC.PROCESSCLASSID
				     ,  PC.PROCESSCLASSNAME
					 ,	PD.PROCESSDEFID 
					 ,  PD.PROCESSDEFVERSION
					 ,	PD.PROCESSDEFNAME
					 ,  PD.DESCRIPTION
					 ,  RP.PRODUCTLIST
					 ,  RA.AREALIST
					 ,  PD.TOPPROCESSSEGMENTID
					 ,  COALESCE(SD1.DICTIONARYNAME,PS.PROCESSSEGMENTCLASSID)  TOPPROCESSSEGMENTNAME
					 ,  PD.REWORKITEMCONTROL
					 ,  PD.REWORKSEGMENTCONTROL
					 ,	PD.PLANTID	 
				     ,  instr(RP.PRODUCTLIST,L.PRODUCTDEFID || PRODUCTDEFVERSION)	 RP_INDEX
				     ,  instr(RA.AREALIST,L.AREAID)	 RA_INDEX
				     ,  COALESCE(CU.USERNAME, PD.CREATOR)    CREATOR
				FROM BAS_PROCESSDEFINITION PD
				INNER JOIN ROUTING_PRODUCT_LIST    RP ON  PD.PROCESSDEFID = RP.PROCESSDEFID
				                                      AND PD.PROCESSDEFVERSION = RP.PROCESSDEFVERSION
				INNER JOIN ROUTING_AREA_LIST       RA ON  PD.PROCESSDEFID = RA.PROCESSDEFID
				                                      AND PD.PROCESSDEFVERSION = RA.PROCESSDEFVERSION  
				LEFT JOIN BAS_PROCESSCLASS          PC ON  PD.PROCESSCLASSID = PC.PROCESSCLASSID
				INNER JOIN PCM_LOT                   L ON  L.LOTID = #{LOTID}
				LEFT  JOIN CMD_CODE_V                 SC ON  PC.PROCESSCLASSTYPE = SC.CODEID
				                                      AND SC.CODECLASSID = 'ProcessClassType'
				LEFT  JOIN CMD_DICTIONARY           SD ON  SC.DICTIONARYID = SD.DICTIONARYID
				                                      AND SD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
				INNER JOIN BAS_PROCESSSEGMENTCLASS PS ON  PD.TOPPROCESSSEGMENTID = PS.PROCESSSEGMENTCLASSID
				                                     AND PS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
				LEFT  JOIN CMD_DICTIONARY         SD1 ON  PS.processsegmentclassname = SD1.dictionaryid
				                                     AND SD1.languagetype = #{SESSION_LANGUAGETYPE}
				LEFT  JOIN CMD_USER_V                CU ON  PD.CREATOR = CU.USERID
				WHERE 1=1
				AND   PD.VALIDSTATE = 'Valid'
				AND   PD.PROCESSDEFTYPE = 'Rework'
				AND   PD.PROCESSCLASSID <![CDATA[<>]]> 'Process-ReinspectionShipment'
	    <if test="'Y'.equals(FILTERPLANT) "> 
	            AND   EXISTS
	                  (
		                    SELECT  1
		                    FROM    BAS_PROCESSPATH  PP
		                    WHERE   PP.PROCESSDEFID = PD.PROCESSDEFID
		                    AND     PP.PROCESSDEFVERSION = PD.PROCESSDEFVERSION
		                    AND     PP.PLANTID = L.PLANTID
	                  )
		</if>
	    <if test="PROCESSCLASSTYPE != null and PROCESSCLASSTYPE != '' and !'*'.equals(PROCESSCLASSTYPE) ">
	    		AND		PC.PROCESSCLASSTYPE = #{PROCESSCLASSTYPE}
	    </if> 
	    <if test="TOPPROCESSSEGMENTID != null and TOPPROCESSSEGMENTID != ''">
	    		AND		PD.TOPPROCESSSEGMENTID = #{TOPPROCESSSEGMENTID}
	    </if> 
	    <if test="REWORKNUMBER != null and REWORKNUMBER != ''">
	    		AND		PD.PROCESSDEFID LIKE '%'||#{REWORKNUMBER}||'%'
	    </if> 
	    <if test="REWORKNAME != null and REWORKNAME != ''">
	    		AND		PD.PROCESSDEFNAME LIKE '%||#{REWORKNAME}||'%'
	    </if> 
	    <if test="REWORKIDNAME != null and REWORKIDNAME != ''">
	    		AND		(PD.PROCESSDEFID LIKE '%'||#{REWORKIDNAME}||'%' OR PD.PROCESSDEFNAME LIKE '%'||{REWORKIDNAME}||'%') 
	    </if> 
			)X
		)Y
		WHERE Y.RP_CHECK = 'Y'
		AND   Y.RA_CHECK = 'Y'
		ORDER BY PROCESSCLASSID
		      ,  PROCESSCLASSID
		      ,  PROCESSDEFID
		      ,  PROCESSDEFVERSION
	</select>  	
	
    <select id="GetProcessPathList10005" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.GetProcessPathList10005 */
		-- Id : GetProcessPathList10005
		-- Version : 10005
		SELECT 
		        PP.PROCESSPATHID
		    ,   PP.ENTERPRISEID
		    ,   PP.PLANTID
		    ,   PP.PROCESSDEFID
		    ,   PP.PROCESSDEFVERSION
		    ,   PP.PATHSEQUENCE
		    ,   PP.PATHTYPE
			,   TO_NUMBER(PP.USERSEQUENCE) USERSEQUENCE
		    ,	PP.PROCESSSEGMENTID
		    ,   PP.PROCESSSEGMENTVERSION
		    ,   DI.DICTIONARYNAME AS PROCESSSEGMENTNAME
		    ,   PP.DESCRIPTION    AS "COMMENT"
		    ,   PP.VALIDSTATE
		FROM 	BAS_PROCESSPATH 				PP
		INNER JOIN PCM_LOT					L	ON	L.PLANTID = PP.PLANTID	 
		INNER JOIN BAS_PROCESSDEFINITION 	PDF ON 	PDF.PROCESSDEFID = PP.PROCESSDEFID
												AND PDF.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
		LEFT JOIN BAS_PROCESSSEGMENT         PG  ON  PP.ENTERPRISEID = PG.ENTERPRISEID        
											    AND PP.PROCESSSEGMENTID = PG.PROCESSSEGMENTID
		LEFT JOIN CMD_DICTIONARY 	        DI  ON DI.DICTIONARYID = PG.PROCESSSEGMENTNAME
		     								    AND DI.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE PP.ENTERPRISEID   = #{SESSION_ENTERPRISEID}  
		  AND PP.PROCESSDEFID	= #{PROCESSDEFID}
		  AND L.LOTID = #{LOTID}
	    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION != ''">
		  AND PP.PROCESSDEFVERSION	= #{PROCESSDEFVERSION}
		</if>
	    <if test="PLANTID != null and PLANTID != ''">
		  AND PP.PLANTID	= #{PLANTID}
		</if>
		ORDER BY PP.PATHSEQUENCE
	</select>  		
	
    <select id="GetProductRoutingPreviousProcessPaths" parameterType="map" resultType="hashmap">
 		/* smh.pcm.dao.PCM04500Dao.GetProductRoutingPreviousProcessPaths */
		-- Id : GetProductRoutingPreviousProcessPaths
		-- Version : 10001
		
		-- 라우팅(이전 공정)
		SELECT
				PP.PROCESSDEFID
			,	PP.PROCESSDEFVERSION
			,	PP.USERSEQUENCE
			,	PP.PROCESSSEGMENTID
			,	PP.PROCESSSEGMENTVERSION
			,	PP.DESCRIPTION
			,	PP.PATHSEQUENCE
			, 	COALESCE(D.DICTIONARYNAME, PSG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
			,	PP.PROCESSPATHID
			,	NULL AS WORKSTARTTIME
			,	NULL AS WORKENDTIME
			,	RSC.RESOURCEID
			,	RSC.DESCRIPTION as RESOURCENAME
			,	RSC.AREAID
			,	3 AS DISPLAYSEQUENCE
			,	(ROW_NUMBER() OVER(ORDER BY PP.PATHSEQUENCE)) AS RN
		FROM			PCM_LOT 				LOT
		INNER JOIN		BAS_PROCESSPATH 		PP		ON	PP.PROCESSDEFID = LOT.PROCESSDEFID
													AND	PP.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
		LEFT OUTER JOIN BAS_PROCESSSEGMENT   PSG		ON	PSG.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
													AND	PSG.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
		LEFT OUTER JOIN CMD_DICTIONARY	    D		ON	D.DICTIONARYID = PSG.PROCESSSEGMENTNAME
													AND	D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT JOIN
			(
				SELECT
						B.ENTERPRISEID
					,	B.PLANTID
					,	B.PRODUCTDEFID
					,	B.PRODUCTDEFVERSION
					,	B.PROCESSDEFID
					,	B.PROCESSDEFVERSION
					,	B.PROCESSSEGMENTID
					,	B.PROCESSSEGMENTVERSION
					,	B.RESOURCEID
					, 	ROW_NUMBER() OVER(PARTITION BY B.ENTERPRISEID, B.PLANTID, B.PRODUCTDEFID, B.PRODUCTDEFVERSION, B.PROCESSDEFID, B.PROCESSDEFVERSION, B.PROCESSSEGMENTID, B.PROCESSSEGMENTVERSION
							ORDER BY CASE WHEN B.ISPRIMARYRESOURCE = 'Y' THEN 1 ELSE 2 END) AS RN
				FROM		PCM_LOT				L
				INNER JOIN	BAS_BILLOFRESOURCE	B 	ON	B.ENTERPRISEID = L.ENTERPRISEID
													AND	B.PRODUCTDEFID = L.PRODUCTDEFID
													AND	B.PRODUCTDEFVERSION = L.PRODUCTDEFVERSION
													AND B.PROCESSDEFID = L.PROCESSDEFID
													AND B.PROCESSDEFVERSION = L.PROCESSDEFVERSION
													AND	B.RESOURCETYPE = 'Resource'
				WHERE		L.LOTID = #{LOTID}	
			) 								BOR		ON	BOR.ENTERPRISEID = LOT.ENTERPRISEID
													AND	BOR.PRODUCTDEFID = LOT.PRODUCTDEFID
													AND	BOR.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION
													AND BOR.PROCESSDEFID = LOT.PROCESSDEFID
                                                       AND BOR.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
                                                       AND BOR.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
                                                       AND BOR.RN = 1
		LEFT OUTER JOIN BAS_RESOURCE			RSC		ON	RSC.RESOURCEID = BOR.RESOURCEID
													AND RSC.ENTERPRISEID = BOR.ENTERPRISEID
													AND RSC.PLANTID = BOR.PLANTID
		WHERE	LOT.LOTID = #{LOTID}	
		AND		PP.PATHSEQUENCE <![CDATA[<]]> (SELECT PATHSEQUENCE FROM BAS_PROCESSPATH PP2 WHERE PP2.PROCESSPATHID = LOT.PROCESSPATHSTACK)
		ORDER BY DISPLAYSEQUENCE, RN
	</select>  		
	<!-- LOT 등록 -->
    <insert id="insertPcmLothold" parameterType="map">
    /* smh.pcm.dao.PCM04500Dao.insertPcmLothold */
    INSERT INTO PCM_LOTHOLD( 
        TXNHISTKEY  
        ,LOTID  
        ,AREAID  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,PROCESSSEGMENTID  
        ,PROCESSSEGMENTVERSION  
        ,HOLDTOPCLASSID  
        ,HOLDMIDDLECLASSID  
        ,HOLDCODE  
        ,HOLDCOMMENT  
        ,HOLDUSER  
        ,HOLDTIME  
        ,HOLDSTATUS  
        ,RELEASECOMMENTS  
        ,RELEASEUSER  
        ,RELEASEDATE  
        ,TXNGROUPHISTKEY  
        ,CREATOR  
        ,CREATEDTIME        ) 
    VALUES( 
        #{TXNHISTKEY}  
        ,#{LOTID}  
        ,#{AREAID}  
        ,#{PROCESSDEFID}  
        ,#{PROCESSDEFVERSION}  
        ,#{PROCESSSEGMENTID}  
        ,#{PROCESSSEGMENTVERSION}  
        ,#{HOLDTOPCLASSID}  
        ,#{HOLDMIDDLECLASSID}  
        ,#{HOLDMIDDLECLASSID}  --HOLDCODE
        ,#{HOLDCOMMENT}  
        ,#{CREATOR}  
        ,sysdate  
        ,#{HOLDSTATUS}  
        ,#{RELEASECOMMENTS}  
        ,#{RELEASEUSER}  
        ,#{RELEASEDATE}  
        ,#{TXNGROUPHISTKEY}  
        ,#{CREATOR}  
        ,SYSDATE    )
    </insert>

    <!-- LOT 정보 변경 -->
    <update id="updatePcmLot" parameterType="map" >
    /* smh.pcm.dao.PCM04500Dao.updatePcmLot */
    UPDATE PCM_LOT 
    SET 
        PRODUCTIONORDERID = nvl(#{PRODUCTIONORDERID},PRODUCTIONORDERID) 
        ,LINENO = nvl(#{LINENO},LINENO)     
        ,LOTGROUPID = nvl(#{LOTGROUPID},LOTGROUPID)     
        ,LOTNAME = nvl(#{LOTNAME},LOTNAME)     
        ,ENTERPRISEID = nvl(#{ENTERPRISEID},ENTERPRISEID)     
        ,PLANTID = nvl(#{PLANTID},PLANTID)     
        ,FACTORYID = nvl(#{FACTORYID},FACTORYID)     
        ,ORIGINALPLANTID = nvl(#{ORIGINALPLANTID},ORIGINALPLANTID)     
        ,AREAID = nvl(#{AREAID},AREAID)     
        ,EQUIPMENTID = nvl(#{EQUIPMENTID},EQUIPMENTID)     
        ,LOCATIONID = nvl(#{LOCATIONID},LOCATIONID)     
        ,RECIPEDEFID = nvl(#{RECIPEDEFID},RECIPEDEFID)     
        ,RECIPEDEFVERSION = nvl(#{RECIPEDEFVERSION},RECIPEDEFVERSION)     
        ,RAWMATERIALID = nvl(#{RAWMATERIALID},RAWMATERIALID)     
        ,ROOTLOTID = nvl(#{ROOTLOTID},ROOTLOTID)     
        ,PARENTLOTID = nvl(#{PARENTLOTID},PARENTLOTID)     
        ,CHILDLOTID = nvl(#{CHILDLOTID},CHILDLOTID)     
        ,CARRIERID = nvl(#{CARRIERID},CARRIERID)     
        ,LOTTYPE = nvl(#{LOTTYPE},LOTTYPE)     
        ,LOTCREATEDTYPE = nvl(#{LOTCREATEDTYPE},LOTCREATEDTYPE)     
        ,LOTINPUTTYPE = nvl(#{LOTINPUTTYPE},LOTINPUTTYPE)     
        ,ISREPRESENTROLLLOT = nvl(#{ISREPRESENTROLLLOT},ISREPRESENTROLLLOT)     
        ,HASSUBLOT = nvl(#{HASSUBLOT},HASSUBLOT)     
        ,PRODUCTDEFID = nvl(#{PRODUCTDEFID},PRODUCTDEFID)     
        ,PRODUCTDEFVERSION = nvl(#{PRODUCTDEFVERSION},PRODUCTDEFVERSION)     
        ,PREVPRODUCTDEFVERSION = nvl(#{PREVPRODUCTDEFVERSION},PREVPRODUCTDEFVERSION)     
        ,PROCESSDEFID = nvl(#{PROCESSDEFID},PROCESSDEFID)     
        ,PROCESSDEFVERSION = nvl(#{PROCESSDEFVERSION},PROCESSDEFVERSION)     
        ,PROCESSPATHSTACK = nvl(#{PROCESSPATHSTACK},PROCESSPATHSTACK)     
        ,USERSEQUENCE = nvl(#{USERSEQUENCE},USERSEQUENCE)     
        ,PROCESSSEGMENTID = nvl(#{PROCESSSEGMENTID},PROCESSSEGMENTID)     
        ,PROCESSSEGMENTVERSION = nvl(#{PROCESSSEGMENTVERSION},PROCESSSEGMENTVERSION)     
        ,PRIORITY = nvl(#{PRIORITY},PRIORITY)     
        ,DUEDATE = nvl(#{DUEDATE},DUEDATE)     
        ,EXPECTEDCOMPLETEDATE = nvl(#{EXPECTEDCOMPLETEDATE},EXPECTEDCOMPLETEDATE)     
        ,ROOTLOTSTARTDATE = nvl(#{ROOTLOTSTARTDATE},ROOTLOTSTARTDATE)     
        ,LOTSTARTDATE = nvl(#{LOTSTARTDATE},LOTSTARTDATE)     
        ,WEEK = nvl(#{WEEK},WEEK)     
        ,TRACKINUSER = nvl(#{TRACKINUSER},TRACKINUSER)     
        ,TRACKINTIME = nvl(#{TRACKINTIME},TRACKINTIME)     
        ,TRACKOUTUSER = nvl(#{TRACKOUTUSER},TRACKOUTUSER)     
        ,TRACKOUTTIME = nvl(#{TRACKOUTTIME},TRACKOUTTIME)     
        ,LOTSTATE = nvl(#{LOTSTATE},LOTSTATE)     
        ,PROCESSSTATE = nvl(#{PROCESSSTATE},PROCESSSTATE)     
        ,ISHOLD = nvl(#{ISHOLD},ISHOLD)     
        ,ISREWORK = nvl(#{ISREWORK},ISREWORK)     
        ,ISLOCKING = nvl(#{ISLOCKING},ISLOCKING)     
        ,REWORKTYPE = nvl(#{REWORKTYPE},REWORKTYPE)     
        ,REWORKREASONCODE = nvl(#{REWORKREASONCODE},REWORKREASONCODE)     
        ,ISPRINTLOTCARD = nvl(#{ISPRINTLOTCARD},ISPRINTLOTCARD)     
        ,ISPRINTRCLOTCARD = nvl(#{ISPRINTRCLOTCARD},ISPRINTRCLOTCARD)     
        ,LAYER = nvl(#{LAYER},LAYER)     
        ,CREATEDQTY = nvl(#{CREATEDQTY},CREATEDQTY)     
        ,LOTSTDPANELQTY = nvl(#{LOTSTDPANELQTY},LOTSTDPANELQTY)     
        ,UNIT = nvl(#{UNIT},UNIT)     
        ,DEFECTUNIT = nvl(#{DEFECTUNIT},DEFECTUNIT)     
        ,QTY = nvl(#{QTY},QTY)     
        ,DEFECTQTY = nvl(#{DEFECTQTY},DEFECTQTY)     
        ,PSEUDODEFECTQTY = nvl(#{PSEUDODEFECTQTY},PSEUDODEFECTQTY)     
        ,PCSQTY = nvl(#{PCSQTY},PCSQTY)     
        ,ARRAYQTY = nvl(#{ARRAYQTY},ARRAYQTY)     
        ,PANELQTY = nvl(#{PANELQTY},PANELQTY)     
        ,PANELPERQTY = nvl(#{PANELPERQTY},PANELPERQTY)     
        ,REWORKCOUNT = nvl(#{REWORKCOUNT},REWORKCOUNT)     
        ,TOTALREWORKCOUNT = nvl(#{TOTALREWORKCOUNT},TOTALREWORKCOUNT)     
        ,PUREORDER = nvl(#{PUREORDER},PUREORDER)     
        ,PUREINPUT = nvl(#{PUREINPUT},PUREINPUT)     
        ,SUBPROCESSDEFID = nvl(#{SUBPROCESSDEFID},SUBPROCESSDEFID)     
        ,SUBPROCESSDEFVERSION = nvl(#{SUBPROCESSDEFVERSION},SUBPROCESSDEFVERSION)     
        ,RECEIVEUSER = nvl(#{RECEIVEUSER},RECEIVEUSER)     
        ,RECEIVETIME = nvl(#{RECEIVETIME},RECEIVETIME)     
        ,STARTEDUSER = nvl(#{STARTEDUSER},STARTEDUSER)     
        ,STARTEDDATE = nvl(#{STARTEDDATE},STARTEDDATE)     
        ,SENDUSER = nvl(#{SENDUSER},SENDUSER)     
        ,SENDTIME = nvl(#{SENDTIME},SENDTIME)     
        ,HANDLETYPE = nvl(#{HANDLETYPE},HANDLETYPE)     
        ,DESCRIPTION = nvl(#{DESCRIPTION},DESCRIPTION)             
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}  
        ,LASTTXNUSER = #{LASTTXNUSER}   
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}   
        ,ISDEFECTED = nvl(#{ISDEFECTED},ISDEFECTED)     
        ,LASTTXNGROUPHISTKEY = #{LASTTXNGROUPHISTKEY}     
        ,WORKCOUNT = nvl(#{WORKCOUNT},WORKCOUNT)     
        ,RESOURCEID = nvl(#{RESOURCEID},RESOURCEID)     
        ,MKLOTID = nvl(#{MKLOTID},MKLOTID)     
        ,PREVPRODUCTDEFID = nvl(#{PREVPRODUCTDEFID},PREVPRODUCTDEFID)     
        ,PNLROOTLOTID = nvl(#{PNLROOTLOTID},PNLROOTLOTID)     
        ,PNLCREATEDQTY = nvl(#{PNLCREATEDQTY},PNLCREATEDQTY)     
        ,INPUTCONFIRMDATE = nvl(#{INPUTCONFIRMDATE},INPUTCONFIRMDATE)     
        ,INPUTCONFIRMUSER = nvl(#{INPUTCONFIRMUSER},INPUTCONFIRMUSER)     
        ,ISFINALINSPECTPROGESS = nvl(#{ISFINALINSPECTPROGESS},ISFINALINSPECTPROGESS)     
        ,LOTINPUTQTY = nvl(#{LOTINPUTQTY},LOTINPUTQTY)     
        ,ISFIRSTCREATELOT = nvl(#{ISFIRSTCREATELOT},ISFIRSTCREATELOT)     
        ,ISOEM = nvl(#{ISOEM},ISOEM)     
        ,ISSHRINKTEST = nvl(#{ISSHRINKTEST},ISSHRINKTEST)
    WHERE LOTID = #{LOTID}
    </update>


    <select id="selectPcmLot" parameterType="map" resultType="hashmap">
     /* smh.pcm.dao.PCM04500Dao.selectPcmLot */
    SELECT 
        A.LOTID	 
        ,A.PRODUCTIONORDERID	 
        ,A.LINENO	 
        ,A.LOTGROUPID	 
        ,A.LOTNAME	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.FACTORYID	 
        ,A.ORIGINALPLANTID	 
        ,A.AREAID	 
        ,A.EQUIPMENTID	 
        ,A.LOCATIONID	 
        ,A.RECIPEDEFID	 
        ,A.RECIPEDEFVERSION	 
        ,A.RAWMATERIALID	 
        ,A.ROOTLOTID	 
        ,A.PARENTLOTID	 
        ,A.CHILDLOTID	 
        ,A.CARRIERID	 
        ,A.LOTTYPE	 
        ,A.LOTCREATEDTYPE	 
        ,A.LOTINPUTTYPE	 
        ,A.ISREPRESENTROLLLOT	 
        ,A.HASSUBLOT	 
        ,A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.PREVPRODUCTDEFVERSION	 
        ,A.PROCESSDEFID	 
        ,A.PROCESSDEFVERSION	 
        ,A.PROCESSPATHSTACK	 
        ,A.USERSEQUENCE	 
        ,A.PROCESSSEGMENTID	 
        ,A.PROCESSSEGMENTVERSION	 
        ,A.PRIORITY	 
        ,A.DUEDATE	 
        ,A.EXPECTEDCOMPLETEDATE	 
        ,A.ROOTLOTSTARTDATE	 
        ,A.LOTSTARTDATE	 
        ,A.WEEK	 
        ,A.TRACKINUSER	 
        ,A.TRACKINTIME	 
        ,A.TRACKOUTUSER	 
        ,A.TRACKOUTTIME	 
        ,A.LOTSTATE	 
        ,A.PROCESSSTATE	 
        ,A.ISHOLD	 
        ,A.ISREWORK	 
        ,A.ISLOCKING	 
        ,A.REWORKTYPE	 
        ,A.REWORKREASONCODE	 
        ,A.ISPRINTLOTCARD	 
        ,A.ISPRINTRCLOTCARD	 
        ,A.LAYER	 
        ,A.CREATEDQTY	 
        ,A.LOTSTDPANELQTY	 
        ,A.UNIT	 
        ,A.DEFECTUNIT	 
        ,A.QTY	 
        ,A.DEFECTQTY	 
        ,A.PSEUDODEFECTQTY	 
        ,A.PCSQTY	 
        ,A.ARRAYQTY	 
        ,A.PANELQTY	 
        ,A.PANELPERQTY	 
        ,A.REWORKCOUNT	 
        ,A.TOTALREWORKCOUNT	 
        ,A.PUREORDER	 
        ,A.PUREINPUT	 
        ,A.SUBPROCESSDEFID	 
        ,A.SUBPROCESSDEFVERSION	 
        ,A.RECEIVEUSER	 
        ,A.RECEIVETIME	 
        ,A.STARTEDUSER	 
        ,A.STARTEDDATE	 
        ,A.SENDUSER	 
        ,A.SENDTIME	 
        ,A.HANDLETYPE	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.ISDEFECTED	 
        ,A.WORKCOUNT	 
        ,A.RESOURCEID	 
        ,A.MKLOTID	 
        ,A.PREVPRODUCTDEFID	 
        ,A.PNLROOTLOTID	 
        ,A.PNLCREATEDQTY	 
        ,A.INPUTCONFIRMDATE	 
        ,A.INPUTCONFIRMUSER	 
        ,A.ISFINALINSPECTPROGESS	 
        ,A.LOTINPUTQTY	 
        ,A.ISFIRSTCREATELOT	 
        ,A.ISOEM	 
        ,A.ISSHRINKTEST	 
    FROM	PCM_LOT A 
    WHERE A.LOTID = #{LOTID}
    </select>
    
    <!-- 작업장 자원 정보 상세조회-->
    <select id="selectBasResource" parameterType="map" resultType="hashmap">
    /* smh.pcm.dao.PCM04500Dao.selectBasResource */
    SELECT 
        A.RESOURCEID	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.RESOURCECLASSID	 
        ,A.RESOURCETYPE	 
        ,A.AREAID	 
        ,A.EQUIPMENTCLASSID	 
        ,A.VENDORID	 
        ,A.TOTALQTY	 
        ,A.TOTALCAPACITY	 
        ,A.AVAILABLECAPACITY	 
        ,A.STEPCLASS	 
        ,A.STEPTYPE	 
        ,A.ISOSPINSPCONTROL	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.VALIDSTATE	 
    FROM	BAS_RESOURCE A 
    WHERE A.ENTERPRISEID = #{SESSION_ENTERPRISEID}
    AND	A.RESOURCEID = #{RESOURCEID}
    </select>
    
</mapper>
