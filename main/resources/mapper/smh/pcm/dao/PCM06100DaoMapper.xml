<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM06100Dao">
	<select id="getProcessSegmentClass" parameterType="map" resultType="hashmap">
	/* GetProcessSegmentClass 10001 */
	--id : getProcessSegmentClass
		SELECT 
				A.PROCESSSEGMENTCLASSID
			,	D.DICTIONARYNAME   AS PROCESSSEGMENTCLASSNAME 
			, 	A.ENTERPRISEID			 
			, 	A.PLANTID
			, 	B.PROCESSSEGMENTCLASSID     					   AS PARENTPROCESSSEGMENTCLASSID
			,	BD.DICTIONARYNAME								   AS PARENTPROCESSSEGMENTCLASSNAME
		FROM 	BAS_PROCESSSEGMENTCLASS 			A
		LEFT OUTER JOIN CMD_DICTIONARY 			D	ON  A.PROCESSSEGMENTCLASSNAME = D.DICTIONARYID
													AND D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS  B   ON  A.PARENTPROCESSSEGMENTCLASSID = B.PROCESSSEGMENTCLASSID
		LEFT OUTER JOIN CMD_DICTIONARY 			BD	ON  B.PROCESSSEGMENTCLASSNAME = BD.DICTIONARYID
													AND BD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
	    
		WHERE 	1 = 1
		
		<if test="ENTERPRISEID != null and ENTERPRISEID !=''"> 					
			AND		A.ENTERPRISEID = #{ENTERPRISEID}
		</if>		
		<if test="PROCESSSEGMENTCLASSTYPE != null and PROCESSSEGMENTCLASSTYPE !=''"> 					
			AND		A.PROCESSSEGMENTCLASSTYPE = #{PROCESSSEGMENTCLASSTYPE}
		</if>
		<if test="PARENTPROCESSSEGMENTCLASSID != null and PARENTPROCESSSEGMENTCLASSID !=''"> 					
			AND		A.PARENTPROCESSSEGMENTCLASSID = #{PARENTPROCESSSEGMENTCLASSID}
		</if>
		<if test="PROCESSSEGMENTCLASS != null and PROCESSSEGMENTCLASS !=''"> 	
			AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTCLASS}, ',') PMP WHERE	
			(UPPER(A.PROCESSSEGMENTCLASSID) LIKE '%' || PMP.VALUE || '%' OR UPPER(A.PROCESSSEGMENTCLASSNAME) LIKE '%' || PMP.VALUE || '%' OR UPPER(D.DICTIONARYNAME) LIKE '%' || PMP.VALUE || '%'))
		</if>

		AND 	A.VALIDSTATE = 'Valid'
		ORDER BY PROCESSSEGMENTCLASSID ASC
	</select>
	<select id="selectWorkResultByareaList" parameterType="map" resultType="hashmap">
	/* SelectWorkResultList 10001 */
	--id : selectWorkResultByareaList
		SELECT
				WR.PLANTID
			,	WR.PROCESSSEGMENTID
			,	WR.PROCESSSEGMENTVERSION
			,	DC1.DICTIONARYNAME		AS PROCESSSEGMENTNAME
			,	WR.AREAID
			,	DC2.DICTIONARYNAME		AS AREANAME
			,	WR.RTRSHT
			,	SUM(COALESCE(BASEPCSQTY,0))			AS BASEPCSQTY
			,	SUM(COALESCE(BASEPANELQTY,0))		AS BASEPANELQTY
			,	SUM(COALESCE(BASEMMQTY,0))		 	AS BASEMMQTY
			,	SUM(COALESCE(SENDPCSQTY,0))			AS SENDPCSQTY
			,	SUM(COALESCE(SENDPANELQTY,0))		AS SENDPANELQTY
			,	SUM(COALESCE(SENDMMQTY,0))		 	AS SENDMMQTY
			,	SUM(COALESCE(WIPPCSQTY,0))			AS WIPQTY
			,	SUM(COALESCE(WIPPANELQTY,0))		AS WIPPANELQTY
			,	SUM(COALESCE(WIPMMQTY,0))		 	AS WIPMMQTY
			,	SUM(COALESCE(INPUTPCSQTY,0)) 		AS INPUTPCSQTY
			,	SUM(COALESCE(INPUTPANELQTY,0))		AS INPUTPANELQTY
			,	SUM(COALESCE(INPUTMMQTY,0))		 	AS INPUTMMQTY
			,   MPS.PROCESSSEGMENTCLASSID				AS MIDDLEPROCESSSEGMENTID	
			,	DC3.DICTIONARYNAME					AS MIDDLEPROCESSSEGMENT
			,  	TPS.PROCESSSEGMENTCLASSID				AS TOPPROCESSSEGMENTID		
			,	DC4.DICTIONARYNAME					AS LARGEPROCESSSEGMENT	
			,	NVL(WR.WORKTYPE, 'Normal')			AS WORKTYPE
			FROM(
			-- 기초
			SELECT
					WS.PLANTID
				,	WS.PROCESSSEGMENTID
				,	WS.PROCESSSEGMENTVERSION
				,	WS.AREAID
				,	WS.RTRSHT
				,	SUM(WS.QTY)		AS BASEPCSQTY
				,	SUM(PANELQTY)	AS BASEPANELQTY
				, 	SUM(NVL(ROUND((WS.QTY / WS.PCSMM), 2),0))	AS BASEMMQTY
				,	0				AS SENDPCSQTY
				,	0				AS SENDPANELQTY
				, 	0				AS SENDMMQTY
				,	0				AS SENDLOTCNT
				,	0				AS WIPPCSQTY
				,	0				AS WIPPANELQTY
				, 	0				AS WIPMMQTY
				,	0				AS INPUTPCSQTY
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,	''				AS WORKTYPE
			FROM(
				SELECT 
						WS.TXNTIME
					,	WS.PLANTID
					,	WS.PRODUCTDEFID
					,	WS.PRODUCTDEFVERSION
					,	WS.PROCESSSEGMENTID
					,	WS.PROCESSSEGMENTVERSION
					,	WS.AREAID
					,	WS.QTY
					,	WS.PANELQTY
					,	COALESCE(PD.RTRSHT, 'SHT')	AS RTRSHT
					,	PD.PCSMM
				FROM PCM_WIPSUMMARYPERDAILY		WS
				INNER JOIN BAS_PRODUCTDEFINITION		PD	ON	WS.PRODUCTDEFID = PD.PRODUCTDEFID
																AND	WS.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				INNER JOIN BAS_PROCESSPATH				 BP 	ON BP.PROCESSDEFID  = WS.PRODUCTDEFID 
																AND	BP.PROCESSDEFVERSION = WS.PRODUCTDEFVERSION
																AND	BP.PROCESSSEGMENTID = WS.PROCESSSEGMENTID
				WHERE 1=1				
					<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
						AND WS.TXNTIME  =  TO_CHAR(TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD') - (INTERVAL '1' DAY), 'YYYY-MM-DD')
					</if>
					--품목코드
					<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
						AND	WS.PRODUCTDEFID = #{PRODUCTDEFID}
					</if>
				   --품목버전
				   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
						AND WS.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
					</if>
				   --품목명칭 
				   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
				   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
					</if>
					<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
						AND WS.LOTTYPE = #{PRODUCTIONTYPE}			
					</if>
				   	<if test="PLANTID != null and PLANTID !=''">
						AND WS.PLANTID = #{PLANTID}		
					</if>
					-- 제품구분
					<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
						AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
					</if> 
					
			)	WS
			GROUP BY 	
					WS.TXNTIME
				,	WS.PLANTID
				,	WS.PROCESSSEGMENTID
				,	WS.PROCESSSEGMENTVERSION
				,	WS.AREAID
				,	WS.RTRSHT
			UNION ALL
			-- 실적
			SELECT
					LWR.PLANTID
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 	AS RTRSHT
				,	0							AS BASEPCSQTY
				,	0							AS BASEPANELQTY
				, 	0							AS BASEMMQTY
				,	SUM(LWR.SENDPCSQTY)			AS SENDPCSQTY			
				,	SUM(LWR.SENDPANELQTY)		AS SENDPANELQTY
				, 	SUM(NVL(ROUND((LWR.SENDPCSQTY / PD.PCSMM), 2),0))	AS SENDMMQTY
				,	COUNT(1)					AS SENDLOTCNT
				,	0							AS WIPPCSQTY
				,	0							AS WIPPANELQYT
				, 	0							AS WIPMMQTY
				,	0				AS INPUTPCSQTY
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
			FROM	PCM_LOTWORKRESULT LWR
			INNER JOIN	BAS_PRODUCTDEFINITION     PD  ON  LWR.PRODUCTDEFID = PD.PRODUCTDEFID
													AND LWR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_LOT				 L 	ON LWR.LOTID = L.LOTID
			WHERE 1=1
				AND     L.LOTSTATE IN ('InProduction', 'InTransit', 'Finished')
				AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
		    <if test="ISHOLD != null and ISHOLD !=''">
				AND     COALESCE(L.ISHOLD, 'N') = #{ISHOLD}
			</if>
				AND		COALESCE(L.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				AND		COALESCE(LWR.RESULTTYPE, 'NORMAL') NOT IN ('SKIP')
				<if test="PLANTID != null and PLANTID !=''">
					AND LWR.PLANTID = #{PLANTID}			
				</if>
				
				<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
					AND LWR.SENDTIME <![CDATA[>=]]> TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,14), 'YYYYMMDDHH24MISS')
					AND LWR.SENDTIME <![CDATA[<]]>  TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || SUBSTR(#{PERIOD_PERIODTO}, 9, 6), 'YYYY-MM-DD HH24:MI:SS') 
				</if>
				--품목코드
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	LWR.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>  
			   --품목버전
			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND LWR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if>   
			   --품목명
			   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if>  
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>	
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
				AND	LWR.SENDPCSQTY > 0
			GROUP BY 
					LWR.PLANTID
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT')
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
			UNION ALL	
			-- 재공
			SELECT  
					L.PLANTID
			  --  ,   L.USERSEQUENCE
				,   L.PROCESSSEGMENTID
				,   L.PROCESSSEGMENTVERSION
				,   L.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 				AS RTRSHT
				,	0										AS BASEPCSQTY
				,	0										AS BASEPANELQTY
				, 	0										AS BASEMMQTY
				,   0			              				AS SENDPCSQTY
				,   0							         	AS SENDPANELQTY
				, 	0										AS SENDMMQTY
				,	0										AS SENDLOTCNT
				,   SUM(L.PCSQTY)              				AS WIPQTY
				,   SUM(L.PANELQTY)				         	AS WIPPANELQTY
				, 	SUM(NVL(ROUND((L.PCSQTY / PD.PCSMM), 2),0))	AS WIPMMQTY
				,	0				AS INPUTPCSQTY			
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,   CASE WHEN NVL(L.ISREWORK,'N') = 'Y' AND L.LOTCREATEDTYPE <![CDATA[<>]]> 'Defect' THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
			FROM    PCM_LOT                  	L                                   
			INNER JOIN BAS_PRODUCTDEFINITION 	PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
													AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION                                    
			WHERE   1 = 1
			AND     L.LOTSTATE IN ('InProduction', 'InTransit')
			AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
		  <if test="ISHOLD != null and ISHOLD !=''">
			AND     COALESCE(L.ISHOLD, 'N') = #{ISHOLD}
		  </if>
			AND		COALESCE(L.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
			--AND     L.ISREPRESENTROLLLOT = 'N'
				--품목코드
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	L.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>
			   	--품목버전
			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 
			   	--품목명
			   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if>  
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				<if test="PLANTID != null and PLANTID !=''">
					AND L.PLANTID = #{PLANTID}			
				</if>
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
			GROUP BY L.PLANTID
				,    L.PROCESSSEGMENTID
				,    L.PROCESSSEGMENTVERSION
				,    L.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 
				,   CASE WHEN NVL(L.ISREWORK,'N') = 'Y' AND L.LOTCREATEDTYPE <![CDATA[<>]]> 'Defect' THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
			UNION ALL
			-- 실적
			SELECT 
					LWR.PLANTID
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 	AS RTRSHT
				,	0							AS BASEPCSQTY
				,	0							AS BASEPANELQTY
				, 	0							AS BASEMMQTY
				,	0							AS SENDPCSQTY
				,	0							AS SENDPANELQTY
				, 	0							AS SENDMMQTY
				,	0							AS SENDLOTCNT
				,	0							AS WIPPCSQTY
				,	0							AS WIPPANELQTY
				, 	0							AS WIPMMQTY
				,	SUM(COALESCE(LWR.RECEIVEPCSQTY , 0))		AS INPUTPCSQTY
				,	SUM(COALESCE(LWR.RECEIVEPANELQTY ,0))	AS INPUTPANELQTY
				, 	SUM(NVL(ROUND((LWR.RECEIVEPCSQTY / PD.PCSMM), 2),0))	AS INPUTMMQTY
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR NVL(LOT.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
			FROM PCM_LOTWORKRESULT LWR
			INNER JOIN BAS_PRODUCTDEFINITION 	PD  ON  LWR.PRODUCTDEFID = PD.PRODUCTDEFID
													AND LWR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_LOT				LOT	ON	LWR.LOTID	=	LOT.LOTID
			WHERE 1=1
				AND     LOT.LOTSTATE IN ('InProduction', 'InTransit', 'Finished')
				AND     COALESCE(LOT.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">				
				AND     COALESCE(LOT.ISHOLD, 'N') = #{ISHOLD}
   </if>			
				AND		COALESCE(LOT.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
					AND LWR.CREATEDTIME <![CDATA[>=]]> TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,14), 'YYYYMMDDHH24MISS')
					AND LWR.CREATEDTIME <![CDATA[<]]>  TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || SUBSTR(#{PERIOD_PERIODTO}, 9, 6), 'YYYY-MM-DD HH24:MI:SS') 
				</if>
				--품목코드
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	LWR.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>
				<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND LWR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 
				--품목명
				<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if> 
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND LOT.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				<if test="PLANTID != null and PLANTID !=''">
					AND LWR.PLANTID = #{PLANTID}			
				</if>
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
			GROUP BY 
					LWR.PLANTID
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT')
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR NVL(LOT.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
			) WR	
			LEFT JOIN FN_AREA(#{MODIFIER}) A ON  WR.AREAID = A.AREAID
			LEFT OUTER JOIN BAS_PROCESSSEGMENT     	PS  ON  WR.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
												AND WR.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
			LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS	MPS	ON	PS.PROCESSSEGMENTCLASSID = MPS.PROCESSSEGMENTCLASSID
													AND MPS.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass'
			LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS	TPS	ON	MPS.PARENTPROCESSSEGMENTCLASSID = TPS.PROCESSSEGMENTCLASSID
													AND TPS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
			LEFT OUTER JOIN	CMD_DICTIONARY			DC1	ON	PS.PROCESSSEGMENTNAME = DC1.DICTIONARYID
													AND	DC1.LANGUAGETYPE='ko-KR'
			LEFT OUTER JOIN	CMD_DICTIONARY			DC2	ON	A.AREANAME = DC2.DICTIONARYID
													AND	DC2.LANGUAGETYPE='ko-KR'
			LEFT JOIN CMD_DICTIONARY                 DC3  ON  MPS.PROCESSSEGMENTCLASSNAME = DC3.DICTIONARYID
													AND DC3.LANGUAGETYPE = 'ko-KR'
			LEFT JOIN CMD_DICTIONARY                 DC4  ON  TPS.PROCESSSEGMENTCLASSNAME = DC4.DICTIONARYID
													AND DC4.LANGUAGETYPE = 'ko-KR'
			WHERE 1 = 1
				 --작업장
			 	<if test="AREANAME != null and AREANAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{AREAID}, ',')	LMP WHERE WR.AREAID = LMP.VALUE)	   				
				</if> 
				--공정
				<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTID}, ',')	LMP WHERE WR.PROCESSSEGMENTID = LMP.VALUE)	   				
				</if>
				--중공정
				<if test="MIDDLEPROCESSSEGMENTNAME != null and MIDDLEPROCESSSEGMENTNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{MIDDLEPROCESSSEGMENTID}, ',')	LMP WHERE MPS.PROCESSSEGMENTCLASSID = LMP.VALUE)	   				
				</if>
				--대공정
				<if test="TOPPROCESSSEGMENTCLASSNAME != null and TOPPROCESSSEGMENTCLASSNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{TOPPROCESSSEGMENTCLASSID}, ',')	LMP WHERE TPS.PROCESSSEGMENTCLASSID = LMP.VALUE)	   				
				</if>
				--작업구분
				<if test="WORKTYPE != null and WORKTYPE !=''">
			   		AND WR.WORKTYPE = #{WORKTYPE}   				
				</if>	
			GROUP BY
				WR.PLANTID
			,	WR.PROCESSSEGMENTID
			,	WR.PROCESSSEGMENTVERSION
			,	WR.AREAID
			,	WR.RTRSHT
			,	DC1.DICTIONARYNAME
			,	DC2.DICTIONARYNAME
			,   MPS.PROCESSSEGMENTCLASSID				
			,  	TPS.PROCESSSEGMENTCLASSID
			,	DC3.DICTIONARYNAME
			,	DC4.DICTIONARYNAME
			,	NVL(WR.WORKTYPE, 'Normal')
			ORDER BY 
				WR.PROCESSSEGMENTID,	WR.AREAID	
	</select>
	<select id="selectWorkResultByproductList" parameterType="map" resultType="hashmap">
	/* SelectWorkResultList 10001 */
	--id : selectWorkResultByproductList
		SELECT
				WR.PLANTID
			--,	WR.LOTTYPE
			,	DC5.DICTIONARYNAME		AS LOTTYPE
			,	WR.PROCESSSEGMENTID
			,	WR.PROCESSSEGMENTVERSION
			,	DC1.DICTIONARYNAME		AS PROCESSSEGMENTNAME
			,	WR.PRODUCTDEFID
			,	WR.PRODUCTDEFVERSION
			,	WR.PRODUCTDEFNAME
			--,	WR.LOTID
			,	WR.AREAID
			,	DC2.DICTIONARYNAME		AS AREANAME
			,	WR.RTRSHT
			,	SUM(COALESCE(BASEPCSQTY,0))			AS BASEPCSQTY
			,	SUM(COALESCE(BASEPANELQTY,0))		AS BASEPANELQTY
			,	SUM(COALESCE(BASEMMQTY,0))		 	AS BASEMMQTY
			,	SUM(COALESCE(SENDPCSQTY,0))			AS SENDPCSQTY
			,	SUM(COALESCE(SENDPANELQTY,0))		AS SENDPANELQTY
			,	SUM(COALESCE(SENDMMQTY,0))		 	AS SENDMMQTY
			,	SUM(COALESCE(WIPPCSQTY,0))			AS WIPQTY
			,	SUM(COALESCE(WIPPANELQTY,0))		AS WIPPANELQTY
			,	SUM(COALESCE(WIPMMQTY,0))		 	AS WIPMMQTY
			,	SUM(COALESCE(INPUTPCSQTY,0)) 		AS INPUTPCSQTY
			,	SUM(COALESCE(INPUTPANELQTY,0))		AS INPUTPANELQTY
			,	SUM(COALESCE(INPUTMMQTY,0))		 	AS INPUTMMQTY
			,   MPS.PROCESSSEGMENTCLASSID				AS MIDDLEPROCESSSEGMENTID	--중공정
			,	DC3.DICTIONARYNAME					AS MIDDLEPROCESSSEGMENT
			,  	TPS.PROCESSSEGMENTCLASSID				AS TOPPROCESSSEGMENTID		--대공정
			,	DC4.DICTIONARYNAME					AS LARGEPROCESSSEGMENT
			,	NVL(WR.WORKTYPE, 'Normal')			AS WORKTYPE	
			,	WR.USERSEQUENCE
			FROM(
			-- 기초
			SELECT
					WS.PLANTID
				,	WS.LOTTYPE
				,	WS.PROCESSSEGMENTID
				,	WS.PROCESSSEGMENTVERSION
				,	WS.PRODUCTDEFID
				,	WS.PRODUCTDEFVERSION
				,	WS.PRODUCTDEFNAME
				--,	WS.LOTID
				,	WS.AREAID
				,	WS.RTRSHT
				,	SUM(WS.QTY)		AS BASEPCSQTY
				,	SUM(PANELQTY)	AS BASEPANELQTY
				, 	SUM(NVL(ROUND((WS.QTY / WS.PCSMM), 2),0))	AS BASEMMQTY
				,	0				AS SENDPCSQTY
				,	0				AS SENDPANELQTY
				, 	0				AS SENDMMQTY
				,	0				AS SENDLOTCNT
				,	0				AS WIPPCSQTY
				,	0				AS WIPPANELQTY
				, 	0				AS WIPMMQTY
				,	0				AS INPUTPCSQTY
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,	''				AS WORKTYPE
				,	WS.USERSEQUENCE AS USERSEQUENCE
			FROM(
				SELECT 
						WS.TXNTIME
					,	WS.LOTTYPE
					,	WS.PLANTID
					,	WS.PRODUCTDEFID
					,	WS.PRODUCTDEFVERSION
					,	PD.PRODUCTDEFNAME
					,	WS.PROCESSSEGMENTID
					,	WS.PROCESSSEGMENTVERSION
					--,	L.LOTID
					,	WS.AREAID
					,	WS.QTY
					,	WS.PANELQTY
					,	COALESCE(PD.RTRSHT, 'SHT')	AS RTRSHT
					,	PD.PCSMM
					,	BP.USERSEQUENCE
				FROM PCM_WIPSUMMARYPERDAILY		WS
				INNER JOIN BAS_PRODUCTDEFINITION		PD	ON	WS.PRODUCTDEFID = PD.PRODUCTDEFID
																AND	WS.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				INNER JOIN BAS_PROCESSPATH				 BP 	ON BP.PROCESSDEFID  = WS.PRODUCTDEFID 
																AND	BP.PROCESSDEFVERSION = WS.PRODUCTDEFVERSION
																AND	BP.PROCESSSEGMENTID = WS.PROCESSSEGMENTID
				WHERE 1=1
					<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
						AND WS.TXNTIME  =  TO_CHAR(TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD') - (INTERVAL '1' DAY), 'YYYY-MM-DD')
					</if>							
					--품목코드
					<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
						AND	WS.PRODUCTDEFID = #{PRODUCTDEFID}
					</if>			              
	   			   --품목버전
	   			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
						AND WS.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
					</if>			               
				   --품목명칭
				   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
				   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
					</if>
					<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
						AND WS.LOTTYPE = #{PRODUCTIONTYPE}			
					</if>
					<if test="PLANTID != null and PLANTID !=''">
						AND WS.PLANTID = #{PLANTID}		
					</if>
					-- 제품구분
					<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
						AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
					</if> 					
			)	WS
			GROUP BY 	
					WS.TXNTIME
				,	WS.LOTTYPE
				,	WS.PLANTID
				,	WS.PROCESSSEGMENTID
				,	WS.PROCESSSEGMENTVERSION
				,	WS.PRODUCTDEFID
				,	WS.PRODUCTDEFVERSION
				,	WS.PRODUCTDEFNAME
				--,	WS.LOTID
				,	WS.AREAID
				,	WS.RTRSHT
				,	WS.USERSEQUENCE
			UNION ALL
			-- 실적
			SELECT
					LWR.PLANTID
				,	L.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				--,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 	AS RTRSHT
				,	0							AS BASEPCSQTY
				,	0							AS BASEPANELQTY
				, 	0							AS BASEMMQTY
				,	SUM(LWR.SENDPCSQTY)			AS SENDPCSQTY			
				,	SUM(LWR.SENDPANELQTY)		AS SENDPANELQTY
				, 	SUM(NVL(ROUND((LWR.SENDPCSQTY / PD.PCSMM), 2),0))	AS SENDMMQTY
				,	COUNT(1)					AS SENDLOTCNT
				,	0							AS WIPPCSQTY
				,	0							AS WIPPANELQYT
				, 	0							AS WIPMMQTY
				,	0				AS INPUTPCSQTY
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0 THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
                --,	LWR.USERSEQUENCE 				AS USERSEQUENCE
                ,	CASE WHEN LWR.AREAID IS NULL THEN LWR.USERSEQUENCE
                		 ELSE PCM_USERSEQUENCE_FN(LWR.PROCESSPATHSTACK)	
                		 END AS USERSEQUENCE      
			FROM	PCM_LOTWORKRESULT LWR
			INNER JOIN	BAS_PRODUCTDEFINITION     PD  ON  LWR.PRODUCTDEFID = PD.PRODUCTDEFID
													AND LWR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_LOT				 L 	ON LWR.LOTID = L.LOTID
			WHERE 1=1
				AND     L.LOTSTATE IN ('InProduction', 'InTransit', 'Finished')
				AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">				
				AND     COALESCE(L.ISHOLD, 'N') = #{ISHOLD}
   </if>				
				AND		COALESCE(L.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				AND	COALESCE(LWR.RESULTTYPE, 'NORMAL')	NOT IN ('SKIP')
				<if test="PLANTID != null and PLANTID !=''">
					AND LWR.PLANTID = #{PLANTID}		
				</if>					
				<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
					AND LWR.SENDTIME <![CDATA[>=]]> TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,14), 'YYYYMMDDHH24MISS')
					AND LWR.SENDTIME <![CDATA[<]]>  TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || SUBSTR(#{PERIOD_PERIODTO}, 9, 6), 'YYYY-MM-DD HH24:MI:SS') 
				</if>				
				--품목코드
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	LWR.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>  			   
			   	--품목버전
			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND LWR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 			  
			   	--품목명
			   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if>  
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 			  
				AND	LWR.SENDPCSQTY > 0
			GROUP BY 
					LWR.PLANTID
				,	L.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				--,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT')
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
                ,	LWR.USERSEQUENCE
                ,	LWR.PROCESSPATHSTACK
			UNION ALL	
			-- 재공
			SELECT  
					L.PLANTID
			  --  ,   L.USERSEQUENCE
			  	,	L.LOTTYPE
				,   L.PROCESSSEGMENTID
				,   L.PROCESSSEGMENTVERSION
				,	L.PRODUCTDEFID
				,	L.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				--,	L.LOTID
				,   L.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 				AS RTRSHT
				,	0										AS BASEPCSQTY
				,	0										AS BASEPANELQTY
				, 	0										AS BASEMMQTY
				,   0			              				AS SENDPCSQTY
				,   0							         	AS SENDPANELQTY
				, 	0										AS SENDMMQTY
				,	0										AS SENDLOTCNT
				,   SUM(L.PCSQTY)              				AS WIPQTY
				,   SUM(L.PANELQTY)				         	AS WIPPANELQTY
				, 	SUM(NVL(ROUND((L.PCSQTY / PD.PCSMM), 2),0))	AS WIPMMQTY
				,	0				AS INPUTPCSQTY			
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,   CASE WHEN NVL(L.ISREWORK,'N') = 'Y' AND L.LOTCREATEDTYPE <![CDATA[<>]]> 'Defect'  THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
                --,	L.USERSEQUENCE 				AS USERSEQUENCE
                 ,	CASE WHEN L.AREAID IS NULL THEN L.USERSEQUENCE
                		 ELSE PCM_USERSEQUENCE_FN(L.PROCESSPATHSTACK)	
                		 END AS USERSEQUENCE 
			FROM    PCM_LOT                  	L                                   
			INNER JOIN BAS_PRODUCTDEFINITION 	PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
													AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION                                    
			WHERE   1 = 1
			AND     L.LOTSTATE IN ('InProduction', 'InTransit')
			AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">			
			AND     COALESCE(L.ISHOLD, 'N') = #{ISHOLD}
   </if>			
			AND		COALESCE(L.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
			--AND     L.ISREPRESENTROLLLOT = 'N'
				--품목코드
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	L.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>
			   	--품목버전
			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 
			   	--품목명
			   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if>  
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				<if test="PLANTID != null and PLANTID !=''">
					AND L.PLANTID = #{PLANTID}			
				</if>
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
			GROUP BY L.PLANTID
				,	L.LOTTYPE
				,    L.PROCESSSEGMENTID
				,    L.PROCESSSEGMENTVERSION
				,	L.PRODUCTDEFID
				,	L.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				--,	L.LOTID
				,    L.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 
				,   CASE WHEN NVL(L.ISREWORK,'N') = 'Y' AND L.LOTCREATEDTYPE <![CDATA[<>]]> 'Defect' THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR NVL(L.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
                ,	L.USERSEQUENCE
                ,	L.PROCESSPATHSTACK
			UNION ALL
			-- 실적
			SELECT 
					LWR.PLANTID
				,	LOT.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				--,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 	AS RTRSHT
				,	0							AS BASEPCSQTY
				,	0							AS BASEPANELQTY
				, 	0							AS BASEMMQTY
				,	0							AS SENDPCSQTY
				,	0							AS SENDPANELQTY
				, 	0							AS SENDMMQTY
				,	0							AS SENDLOTCNT
				,	0							AS WIPPCSQTY
				,	0							AS WIPPANELQTY
				, 	0							AS WIPMMQTY
				,	SUM(COALESCE(LWR.RECEIVEPCSQTY , 0))		AS INPUTPCSQTY
				,	SUM(COALESCE(LWR.RECEIVEPANELQTY , 0))	AS INPUTPANELQTY
				, 	SUM(NVL(ROUND((LWR.RECEIVEPCSQTY / PD.PCSMM), 2),0))	AS INPUTMMQTY
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework' 
                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR NVL(LOT.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
                --,	LWR.USERSEQUENCE 			AS USERSEQUENCE
                ,	CASE WHEN LWR.AREAID IS NULL THEN LWR.USERSEQUENCE
                		 ELSE PCM_USERSEQUENCE_FN(LWR.PROCESSPATHSTACK)	
                		 END AS USERSEQUENCE   
			FROM PCM_LOTWORKRESULT LWR
			INNER JOIN BAS_PRODUCTDEFINITION 	PD  ON  LWR.PRODUCTDEFID = PD.PRODUCTDEFID
													AND LWR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_LOT				LOT	ON	LWR.LOTID	=	LOT.LOTID
			WHERE 1=1
				AND     LOT.LOTSTATE IN ('InProduction', 'InTransit', 'Finished')
				AND     COALESCE(LOT.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">				
				AND     COALESCE(LOT.ISHOLD, 'N') = #{ISHOLD}
   </if>
				AND		COALESCE(LOT.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
					AND LWR.CREATEDTIME <![CDATA[>=]]> TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,14), 'YYYYMMDDHH24MISS')
					AND LWR.CREATEDTIME <![CDATA[<]]>  TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || SUBSTR(#{PERIOD_PERIODTO}, 9, 6), 'YYYY-MM-DD HH24:MI:SS') 
				</if>
				--품목코드
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	LWR.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>
				<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND LWR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 
				--품목명
				<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if> 
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND LOT.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				<if test="PLANTID != null and PLANTID !=''">
					AND LWR.PLANTID = #{PLANTID}			
				</if>
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
			GROUP BY 
					LWR.PLANTID
				,	LOT.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				--,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT')
				,   CASE WHEN  NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework' 
                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR NVL(LOT.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
                ,	LWR.USERSEQUENCE
                ,	LWR.PROCESSPATHSTACK
			) WR	
			LEFT JOIN FN_AREA(#{MODIFIER}) A ON  WR.AREAID = A.AREAID
			LEFT OUTER JOIN BAS_PROCESSSEGMENT     	PS  ON  WR.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
												AND WR.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
			LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS	MPS	ON	PS.PROCESSSEGMENTCLASSID = MPS.PROCESSSEGMENTCLASSID
													AND MPS.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass'
			LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS	TPS	ON	MPS.PARENTPROCESSSEGMENTCLASSID = TPS.PROCESSSEGMENTCLASSID
													AND TPS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
			LEFT OUTER JOIN	CMD_DICTIONARY			DC1	ON	PS.PROCESSSEGMENTNAME = DC1.DICTIONARYID
													AND	DC1.LANGUAGETYPE='ko-KR'
			LEFT OUTER JOIN	CMD_DICTIONARY			DC2	ON	A.AREANAME = DC2.DICTIONARYID
													AND	DC2.LANGUAGETYPE='ko-KR'
			LEFT JOIN CMD_DICTIONARY                 DC3  ON  MPS.PROCESSSEGMENTCLASSNAME = DC3.DICTIONARYID
													AND DC3.LANGUAGETYPE = 'ko-KR'
			LEFT JOIN CMD_DICTIONARY                 DC4  ON  TPS.PROCESSSEGMENTCLASSNAME = DC4.DICTIONARYID
													AND DC4.LANGUAGETYPE = 'ko-KR'
			LEFT JOIN CMD_LOOKUP_VALUES				CDL	 ON	WR.LOTTYPE = CDL.LOOKUP_CODE
														AND	CDL.LOOKUP_TYPE ='ProductionType'
			LEFT JOIN CMD_DICTIONARY					DC5	ON	CDL.DICTIONARYID = DC5.DICTIONARYID
														AND DC5.LANGUAGETYPE = 'ko-KR'
			WHERE 1 = 1
				 --작업장
			 	<if test="AREANAME != null and AREANAME !=''">
		   			AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{AREAID}, ',')	LMP WHERE WR.AREAID = LMP.VALUE)	   				
				</if> 
				--공정
				<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTID}, ',')	LMP WHERE WR.PROCESSSEGMENTID = LMP.VALUE)	   				
				</if>
				--중공정
				<if test="MIDDLEPROCESSSEGMENTNAME != null and MIDDLEPROCESSSEGMENTNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{MIDDLEPROCESSSEGMENTID}, ',')	LMP WHERE MPS.PROCESSSEGMENTCLASSID = LMP.VALUE)	   				
				</if>
				--대공정
				<if test="TOPPROCESSSEGMENTCLASSNAME != null and TOPPROCESSSEGMENTCLASSNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{TOPPROCESSSEGMENTCLASSID}, ',')	LMP WHERE TPS.PROCESSSEGMENTCLASSID = LMP.VALUE)	   				
				</if>		
				--작업구분
				<if test="WORKTYPE != null and WORKTYPE !=''">
			   		AND WR.WORKTYPE = #{WORKTYPE}   				
				</if>	  
				--AND NVL(WR.WORKTYPE, 'Normal') != 'IsRework'
			GROUP BY
				WR.PLANTID
			,	WR.LOTTYPE
			,	WR.PROCESSSEGMENTID
			,	WR.PROCESSSEGMENTVERSION
			,	WR.PRODUCTDEFID
			,	WR.PRODUCTDEFVERSION
			,	WR.PRODUCTDEFNAME
			--,	WR.LOTID
			,	WR.AREAID
			,	WR.RTRSHT
			,	DC1.DICTIONARYNAME
			,	DC2.DICTIONARYNAME
			,   MPS.PROCESSSEGMENTCLASSID				
			,  	TPS.PROCESSSEGMENTCLASSID
			,	DC3.DICTIONARYNAME
			,	DC4.DICTIONARYNAME
			,	DC5.DICTIONARYNAME
			,	NVL(WR.WORKTYPE, 'Normal')
			,	WR.USERSEQUENCE
			ORDER BY 
				WR.PRODUCTDEFID, WR.PRODUCTDEFVERSION, TO_NUMBER(WR.USERSEQUENCE),	WR.AREAID, WR.PROCESSSEGMENTID
	</select>
	<select id="selectWorkResultBylotList" parameterType="map" resultType="hashmap">
	/* SelectWorkResultList 10001 */
	--id : selectWorkResultBylotList		
			--LOT별
			SELECT
				WR.PLANTID
			--,	WR.LOTTYPE
			,	DC5.DICTIONARYNAME		AS LOTTYPE
			,	WR.PROCESSSEGMENTID
			,	WR.PROCESSSEGMENTVERSION
			,	DC1.DICTIONARYNAME		AS PROCESSSEGMENTNAME
			,	WR.PRODUCTDEFID
			,	WR.PRODUCTDEFVERSION
			,	WR.PRODUCTDEFNAME
			,	WR.LOTID
			,	WR.AREAID
			,	DC2.DICTIONARYNAME		AS AREANAME
			,	WR.RTRSHT
			,	WR.WORKTYPE
			,	SUM(COALESCE(BASEPCSQTY,0))				AS BASEPCSQTY
			,	CEIL(SUM(COALESCE(BASEPANELQTY,0)))		AS BASEPANELQTY
			,	SUM(COALESCE(BASEMMQTY,0))		 		AS BASEMMQTY
			,	SUM(COALESCE(SENDPCSQTY,0))				AS SENDPCSQTY
			,	CEIL(SUM(COALESCE(SENDPANELQTY,0)))		AS SENDPANELQTY
			,	SUM(COALESCE(SENDMMQTY,0))		 		AS SENDMMQTY
			,	SUM(COALESCE(WIPPCSQTY,0))				AS WIPQTY
			,	CEIL(SUM(COALESCE(WIPPANELQTY,0)))		AS WIPPANELQTY
			,	SUM(COALESCE(WIPMMQTY,0))		 		AS WIPMMQTY
			,	SUM(COALESCE(INPUTPCSQTY,0)) 			AS INPUTPCSQTY
			,	CEIL(SUM(COALESCE(INPUTPANELQTY,0)))	AS INPUTPANELQTY
			,	SUM(COALESCE(INPUTMMQTY,0))		 		AS INPUTMMQTY
			,	SUM(COALESCE(EQUIPMENT,0))				AS EQUIPMENT
			,   MPS.PROCESSSEGMENTCLASSID				AS MIDDLEPROCESSSEGMENTID	--以묎났?젙
			,	DC3.DICTIONARYNAME						AS MIDDLEPROCESSSEGMENT
			,  	TPS.PROCESSSEGMENTCLASSID				AS TOPPROCESSSEGMENTID		--??怨듭젙
			,	DC4.DICTIONARYNAME						AS LARGEPROCESSSEGMENT
			,	WR.USERSEQUENCE	
			FROM(
			-- 실적
			SELECT
					LWR.PLANTID
				,	L.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 	AS RTRSHT
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR L.LOTCREATEDTYPE = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
				,	0							AS BASEPCSQTY
				,	0							AS BASEPANELQTY
				, 	0							AS BASEMMQTY
				,	SUM(LWR.SENDPCSQTY)			AS SENDPCSQTY			
				,	SUM(LWR.SENDPANELQTY)		AS SENDPANELQTY
				, 	SUM(NVL(ROUND((LWR.SENDPCSQTY / PD.PCSMM), 2),0))	AS SENDMMQTY
				,	COUNT(1)					AS SENDLOTCNT
				,	0							AS WIPPCSQTY
				,	0							AS WIPPANELQTY
				, 	0							AS WIPMMQTY
				,	0				AS INPUTPCSQTY
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,	MAX((SELECT COUNT(LE.LOTID)	FROM PCM_LOTEQUIPMENT LE
					WHERE L.LOTID = LE.LOTID
					AND L.PROCESSSEGMENTID = LE.PROCESSSEGMENTID
                  	AND L.PROCESSSEGMENTVERSION = LE.PROCESSSEGMENTVERSION
					AND L.WORKCOUNT = LE.WORKCOUNT    ))	AS EQUIPMENT
				,	CASE WHEN LWR.AREAID IS NULL THEN LWR.USERSEQUENCE
                		 ELSE PCM_USERSEQUENCE_FN(LWR.PROCESSPATHSTACK)	
                		 END AS USERSEQUENCE 
			FROM	PCM_LOTWORKRESULT LWR
			INNER JOIN	BAS_PRODUCTDEFINITION     PD  ON  LWR.PRODUCTDEFID = PD.PRODUCTDEFID
													AND LWR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_LOT				 L 	ON LWR.LOTID = L.LOTID
		
			WHERE 1=1
				AND     L.LOTSTATE IN ('InProduction', 'InTransit', 'Finished')
				AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">				
				AND     COALESCE(L.ISHOLD, 'N') = #{ISHOLD}
   </if>				
				AND		COALESCE(L.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				AND	COALESCE(LWR.RESULTTYPE, 'NORMAL')	NOT IN ('SKIP')
				<if test="PLANTID != null and PLANTID !=''">
					AND LWR.PLANTID = #{PLANTID}		
				</if>					
				
				<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
					AND LWR.SENDTIME <![CDATA[>=]]> TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,14), 'YYYYMMDDHH24MISS')
					AND LWR.SENDTIME <![CDATA[<]]>  TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || SUBSTR(#{PERIOD_PERIODTO}, 9, 6), 'YYYY-MM-DD HH24:MI:SS') 
				</if>				
				<!-- 품목코드 -->
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	LWR.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>  			   
			   
			   	<!-- 품목버전 -->
			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND LWR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 	
			   	<!-- 품목명 -->
			   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if>  
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>	
				--LOTID
				<if test="LOTID != null and LOTID !=''">
					AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')	LMP WHERE LWR.LOTID = LMP.VALUE)		
				</if>
				-- 제품구분
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
				AND	LWR.SENDPCSQTY > 0
			GROUP BY 
					LWR.PLANTID
				,	L.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT')
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR L.LOTCREATEDTYPE = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END
                ,	LWR.USERSEQUENCE
                ,	LWR.PROCESSPATHSTACK
			UNION ALL	
			-- 재공
			SELECT  
					L.PLANTID
			  --  ,   L.USERSEQUENCE
			  	,	L.LOTTYPE
				,   L.PROCESSSEGMENTID
				,   L.PROCESSSEGMENTVERSION
				,	L.PRODUCTDEFID
				,	L.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	L.LOTID
				,   L.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 				AS RTRSHT
				,   CASE WHEN NVL(L.ISREWORK,'N') = 'Y' AND L.LOTCREATEDTYPE <![CDATA[<>]]> 'Defect' THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR L.LOTCREATEDTYPE = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
				,	0										AS BASEPCSQTY
				,	0										AS BASEPANELQTY
				, 	0										AS BASEMMQTY
				,   0			              				AS SENDPCSQTY
				,   0							         	AS SENDPANELQTY
				, 	0										AS SENDMMQTY
				,	0										AS SENDLOTCNT
				,   SUM(L.PCSQTY)              				AS WIPQTY
				,   SUM(L.PANELQTY)				         	AS WIPPANELQTY
				, 	SUM(NVL(ROUND((L.PCSQTY / PD.PCSMM), 2),0))	AS WIPMMQTY
				,	0				AS INPUTPCSQTY			
				,	0				AS INPUTPANELQTY
				, 	0				AS INPUTMMQTY
				,	MAX((SELECT COUNT(LE.LOTID)	FROM PCM_LOTEQUIPMENT LE
					WHERE L.LOTID = LE.LOTID
					AND L.PROCESSSEGMENTID = LE.PROCESSSEGMENTID
                  	AND L.PROCESSSEGMENTVERSION = LE.PROCESSSEGMENTVERSION
					AND L.WORKCOUNT = LE.WORKCOUNT    ))	AS EQUIPMENT
				,	CASE WHEN L.AREAID IS NULL THEN L.USERSEQUENCE
                		 ELSE PCM_USERSEQUENCE_FN(L.PROCESSPATHSTACK)	
                		 END AS USERSEQUENCE 
			FROM    PCM_LOT                  	L                                   
			INNER JOIN BAS_PRODUCTDEFINITION 	PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
													AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION           
			WHERE   1 = 1
			AND     L.LOTSTATE IN ('InProduction', 'InTransit')
			AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">			
			AND     COALESCE(L.ISHOLD, 'N') = #{ISHOLD}
   </if>
			AND		COALESCE(L.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	L.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>
			   	
			   	<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 
			   
			   	<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if>  
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND L.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				<if test="PLANTID != null and PLANTID !=''">
					AND L.PLANTID = #{PLANTID}			
				</if>
				
				<if test="LOTID != null and LOTID !=''">
					AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')	LMP WHERE L.LOTID = LMP.VALUE)	
				</if>
				
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
			GROUP BY L.PLANTID
				,	L.LOTTYPE
				,    L.PROCESSSEGMENTID
				,    L.PROCESSSEGMENTVERSION
				,	L.PRODUCTDEFID
				,	L.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	L.LOTID
				,    L.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 
				,   CASE WHEN NVL(L.ISREWORK,'N') = 'Y' AND L.LOTCREATEDTYPE <![CDATA[<>]]> 'Defect' THEN 'IsRework'
                         WHEN L.LOTCREATEDTYPE = 'SplitRoll' OR L.LOTCREATEDTYPE = 'FinalInspect' OR L.LOTCREATEDTYPE = 'Normal' THEN 'Normal'
                         WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 	
                ,	L.USERSEQUENCE	
                ,	L.PROCESSPATHSTACK				
			UNION ALL
			
			SELECT 
					LWR.PLANTID
				,	LOT.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT') 	AS RTRSHT
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR LOT.LOTCREATEDTYPE = 'Normal' THEN 'Normal'
                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 						AS WORKTYPE
				,	0							AS BASEPCSQTY
				,	0							AS BASEPANELQTY
				, 	0							AS BASEMMQTY
				,	0							AS SENDPCSQTY
				,	0							AS SENDPANELQTY
				, 	0							AS SENDMMQTY
				,	0							AS SENDLOTCNT
				,	0							AS WIPPCSQTY
				,	0							AS WIPPANELQTY
				, 	0							AS WIPMMQTY
				,	SUM(COALESCE(LWR.RECEIVEPCSQTY  ,0))		AS INPUTPCSQTY
				,	SUM(COALESCE(LWR.RECEIVEPANELQTY ,0))		AS INPUTPANELQTY
				, 	SUM(NVL(ROUND((LWR.RECEIVEPCSQTY / PD.PCSMM), 2),0))	AS INPUTMMQTY
				,	MAX((SELECT COUNT(LE.LOTID)	FROM PCM_LOTEQUIPMENT LE
					WHERE LOT.LOTID = LE.LOTID
					AND LOT.PROCESSSEGMENTID = LE.PROCESSSEGMENTID
                  	AND LOT.PROCESSSEGMENTVERSION = LE.PROCESSSEGMENTVERSION
					AND LOT.WORKCOUNT = LE.WORKCOUNT    ))	AS EQUIPMENT
				,	CASE WHEN LWR.AREAID IS NULL THEN LWR.USERSEQUENCE
                		 ELSE PCM_USERSEQUENCE_FN(LWR.PROCESSPATHSTACK)	
                		 END AS USERSEQUENCE 
			FROM PCM_LOTWORKRESULT LWR
			INNER JOIN BAS_PRODUCTDEFINITION 	PD  ON  LWR.PRODUCTDEFID = PD.PRODUCTDEFID
													AND LWR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_LOT				LOT	ON	LWR.LOTID	=	LOT.LOTID
		
			WHERE 1=1
			AND     LOT.LOTSTATE IN ('InProduction', 'InTransit', 'Finished')
			AND     COALESCE(LOT.ISDEFECTED, 'N') = 'N'
   <if test="ISHOLD != null and ISHOLD !=''">			
			AND     COALESCE(LOT.ISHOLD, 'N') = #{ISHOLD}
   </if>			
			AND		NVL(LWR.RESULTTYPE, 'NORMAL')	NOT IN ('SKIP') 
			AND		COALESCE(LOT.LOTCREATEDTYPE, ' ') <![CDATA[<>]]> 'Return'
				<if test="PERIOD_PERIODFR != null and PERIOD_PERIODFR !='' and PERIOD_PERIODTO != null and PERIOD_PERIODTO !=''">
					AND LWR.CREATEDTIME <![CDATA[>=]]> TO_TIMESTAMP(SUBSTR(#{PERIOD_PERIODFR},1,14), 'YYYYMMDDHH24MISS')
					AND LWR.CREATEDTIME <![CDATA[<]]>  TO_TIMESTAMP(TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD'), 'YYYY-MM-DD') || ' ' || SUBSTR(#{PERIOD_PERIODTO}, 9, 6), 'YYYY-MM-DD HH24:MI:SS') 
				</if>
				
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
					AND	LWR.PRODUCTDEFID = #{PRODUCTDEFID}
				</if>
				<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
					AND LWR.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if> 
				
				<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFNAME}, ',')	LMP WHERE PD.PRODUCTDEFNAME LIKE LMP.VALUE)	   				
				</if> 
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">
					AND LOT.LOTTYPE = #{PRODUCTIONTYPE}			
				</if>
				<if test="PLANTID != null and PLANTID !=''">
					AND LWR.PLANTID = #{PLANTID}			
				</if>
				
				<if test="LOTID != null and LOTID !=''">
					AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')	LMP WHERE LWR.LOTID = LMP.VALUE)
				</if>
				
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
					AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if> 
			GROUP BY 
					LWR.PLANTID
				,	LOT.LOTTYPE
				,	LWR.PROCESSSEGMENTID
				,	LWR.PROCESSSEGMENTVERSION
				,	LWR.PRODUCTDEFID
				,	LWR.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	LWR.LOTID
				,	LWR.AREAID
				,	COALESCE(PD.RTRSHT, 'SHT')
				,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' AND NVL(LWR.DEFECTQTY,0) = 0  THEN 'IsRework'
                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR LOT.LOTCREATEDTYPE = 'Normal' THEN 'Normal'
                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
                    END 	
                ,	LWR.USERSEQUENCE	
                ,	LWR.PROCESSPATHSTACK				
			) WR	
			LEFT JOIN FN_AREA(#{MODIFIER}) A ON  WR.AREAID = A.AREAID
			LEFT OUTER JOIN BAS_PROCESSSEGMENT     	PS  ON  WR.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
												AND WR.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
			LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS	MPS	ON	PS.PROCESSSEGMENTCLASSID = MPS.PROCESSSEGMENTCLASSID
													AND MPS.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass'
			LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS	TPS	ON	MPS.PARENTPROCESSSEGMENTCLASSID = TPS.PROCESSSEGMENTCLASSID
													AND TPS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
			LEFT OUTER JOIN	CMD_DICTIONARY			DC1	ON	PS.PROCESSSEGMENTNAME = DC1.DICTIONARYID
													AND	DC1.LANGUAGETYPE='ko-KR'
			LEFT OUTER JOIN	CMD_DICTIONARY			DC2	ON	A.AREANAME = DC2.DICTIONARYID
													AND	DC2.LANGUAGETYPE='ko-KR'
			LEFT JOIN CMD_DICTIONARY                 DC3  ON  MPS.PROCESSSEGMENTCLASSNAME = DC3.DICTIONARYID
													AND DC3.LANGUAGETYPE = 'ko-KR'
			LEFT JOIN CMD_DICTIONARY                 DC4  ON  TPS.PROCESSSEGMENTCLASSNAME = DC4.DICTIONARYID
													AND DC4.LANGUAGETYPE = 'ko-KR'
			LEFT JOIN CMD_LOOKUP_VALUES				CDL	 ON	WR.LOTTYPE = CDL.LOOKUP_CODE
														AND	CDL.LOOKUP_TYPE ='ProductionType'
			LEFT JOIN CMD_DICTIONARY					DC5	ON	CDL.DICTIONARYID = DC5.DICTIONARYID
														AND DC5.LANGUAGETYPE = 'ko-KR'
			WHERE 1 = 1
				<if test="AREANAME != null and AREANAME !=''">
		   			AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{AREAID}, ',')	LMP WHERE WR.AREAID = LMP.VALUE)	   				
				</if> 
				--공정
				<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTID}, ',')	LMP WHERE WR.PROCESSSEGMENTID = LMP.VALUE)	   				
				</if>
				--중공정
				<if test="MIDDLEPROCESSSEGMENTNAME != null and MIDDLEPROCESSSEGMENTNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{MIDDLEPROCESSSEGMENTID}, ',')	LMP WHERE MPS.PROCESSSEGMENTCLASSID = LMP.VALUE)	   				
				</if>
				--대공정
				<if test="TOPPROCESSSEGMENTCLASSNAME != null and TOPPROCESSSEGMENTCLASSNAME !=''">
			   		AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{TOPPROCESSSEGMENTCLASSID}, ',')	LMP WHERE TPS.PROCESSSEGMENTCLASSID = LMP.VALUE)	   				
				</if>
				--작업구분
				<if test="WORKTYPE != null and WORKTYPE !=''">
			   		AND WR.WORKTYPE = #{WORKTYPE}   				
				</if>
				
			GROUP BY
				WR.PLANTID
			,	WR.LOTTYPE
			,	WR.PROCESSSEGMENTID
			,	WR.PROCESSSEGMENTVERSION
			,	WR.PRODUCTDEFID
			,	WR.PRODUCTDEFVERSION
			,	WR.PRODUCTDEFNAME
			,	WR.LOTID
			,	WR.AREAID
			,	WR.RTRSHT
			,	WR.WORKTYPE
			,	DC1.DICTIONARYNAME
			,	DC2.DICTIONARYNAME
			,   MPS.PROCESSSEGMENTCLASSID				
			,  	TPS.PROCESSSEGMENTCLASSID
			,	DC3.DICTIONARYNAME
			,	DC4.DICTIONARYNAME
			,	DC5.DICTIONARYNAME
			,	WR.USERSEQUENCE
			ORDER BY 
				WR.PRODUCTDEFID,	TO_NUMBER(WR.USERSEQUENCE),	WR.AREAID, WR.PROCESSSEGMENTID
	</select>
</mapper>
