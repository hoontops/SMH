<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    파일명       : Lot Routing
    설명          : 
    작성자       : 김애리
    최초작성일 : 2021.04.26
<< 개정이력(Modification Information) >>
      수정일              수정자      수정내용
     2021.04.26      김애리     최초  생성
-->

<mapper namespace="smh.pcm.dao.PCM04700Dao">

	<!-- PCNNO 팝업 -->
	<select id="selectPcnListForRC" parameterType="map" resultType="hashmap">
		/* GetPcnListForRC 10001 */
				SELECT 
						CH.CHANGEPOINTNO PCNNO
				    ,	CH.REQUESTDEPARTMENT
				    ,	CH.SUBJECT
				    ,	TO_CHAR(CH.REQUESTDATE,'YYYY-MM-DD') AS REQUESTDATE
				    ,	MG.REASON
				    ,	MG.PRODUCTDEFID
				    ,	MG.PRODUCTDEFVERSION
				    ,	PD.PRODUCTDEFNAME
				    ,	MG.RCPRODUCTDEFID
				    ,	MG.RCPRODUCTDEFVERSION
				    ,	RPD.PRODUCTDEFNAME AS RCPRODUCTDEFNAME
				    ,	PD.CREATEDTIME
				FROM 		QAM_CHANGEPOINT 			CH
				INNER JOIN 	BAS_GOVERNANCE 			MG 	ON	CH.CHANGEPOINTNO = MG.PCRNO
				INNER JOIN 	BAS_PRODUCTDEFINITION 	PD 	ON  MG.PRODUCTDEFID = PD.PRODUCTDEFID 
				                                   		AND MG.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				INNER JOIN 	BAS_PRODUCTDEFINITION 	RPD ON  MG.RCPRODUCTDEFID = RPD.PRODUCTDEFID 
				                                   		AND MG.RCPRODUCTDEFVERSION = RPD.PRODUCTDEFVERSION
				WHERE	1 = 1
				AND		MG.STATUS = 'Confirm'		-- 확정상태의 R/C 요청만 조회
			<if test="CHANGEPOINTNO != null and CHANGEPOINTNO !=''"> 
				AND     CH.CHANGEPOINTNO = #{CHANGEPOINTNO}
			</if>
			<if test="TXTPRODUCTDEFNAME != null and TXTPRODUCTDEFNAME !=''"> 
				AND (
						UPPER(PD.PRODUCTDEFID) LIKE UPPER(<![CDATA['%' ||]]> #{TXTPRODUCTDEFNAME} <![CDATA[|| '%']]> )
					OR
						UPPER(PD.PRODUCTDEFNAME) LIKE UPPER(<![CDATA['%' ||]]> #{TXTPRODUCTDEFNAME} <![CDATA[|| '%']]> )
					)
			</if>
			<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''"> 
				AND  	PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
			</if>

	</select>
	
	<!-- LOT 적용 품목 조회 -->
	<select id="selectProductDefinitionList" parameterType="map" resultType="hashmap">
		/* GetProductDefinitionList 10004 */
		
				SELECT
						PD.PRODUCTDEFID
					,	PD.PRODUCTDEFNAME
					,	PD.PRODUCTDEFVERSION
					,	PD.PRODUCTDEFTYPE
					,	PD.PRODUCTIONTYPE
					,	PD.UNIT
					,	PD.PRODUCTDEFID || '|' || PD.PRODUCTDEFVERSION	AS PRODUCTDEF
					,   PD.PRODUCTDEFID AS RCPRODUCTDEFID
					,   PD.PRODUCTDEFVERSION AS RCPRODUCTDEFVERSION
					, 	PD.ENTERPRISEID 
					,   PD.PLANTID 
					, 1 AS ISLOTCARDPRINTED
					, 0 AS ISSENDEMAIL
				FROM	BAS_PRODUCTDEFINITION	PD
				WHERE	1 = 1
				AND ROWNUM = 1
				AND PD.PRODUCTDEFID = #{PRODUCTDEFID}
			<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''"> 
				AND PD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
			</if>
				ORDER BY PD.PRODUCTDEFID, PD.PRODUCTDEFVERSION
	</select>

	<!-- LOT 적용 PCNNO 조회 -->
	<select id="selectPcnInfoForRC" parameterType="map" resultType="hashmap">
		/* GetPcnInfoForRC 10001 */
		
				SELECT
						MG.PCRNO AS PCNNO
					,	TO_CHAR(CC.REQUESTDATE, 'YYYY-MM-DD') AS REQUESTDATE 
					,	TO_CHAR(MG.IMPLEMENTATIONDATE, 'YYYY-MM-DD') AS IMPLEMENTATIONDATE 
					,	MG.PRODUCTDEFID
					,	MG.PRODUCTDEFVERSION
					,	PD.PRODUCTDEFNAME
					,	MG.RCPRODUCTDEFID
					,	MG.RCPRODUCTDEFVERSION
					,	CC.LOTID
					,	PD.ENTERPRISEID 
					,	PD.PLANTID 
					,   NVL(RC.CNT,0) RC_CNT
					,	CASE WHEN NVL(RC.CNT,0) > 0 THEN 'Y' ELSE 'N' END RC_APPLYYN
					, 1 AS ISLOTCARDPRINTED
					, 0 AS ISSENDEMAIL
				FROM 		BAS_GOVERNANCE MG
				INNER JOIN 	QAM_CHANGEPOINT 		CC	ON MG.PCRNO = CC.CHANGEPOINTNO
				INNER JOIN 	BAS_PRODUCTDEFINITION 	PD	ON MG.PRODUCTDEFID = PD.PRODUCTDEFID
				                                   		AND MG.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION                                   
				LEFT JOIN (
					SELECT PCN_NO, COUNT(*)CNT FROM (
						SELECT PCN_NO,TXNGROUPHISTKEY, COUNT(*)CNT FROM PCM_RUNNINGCHANGEINFO 
						WHERE PCN_NO = #{PCNNO}--'IFC2019121300001'
						GROUP BY PCN_NO , TXNGROUPHISTKEY
						)
					GROUP BY PCN_NO 
				)RC										ON RC.PCN_NO = MG.PCRNO
				WHERE MG.GOVERNANCETYPE = 'RunningChange'
				AND   MG.PCRNO =  #{PCNNO}
				AND ROWNUM = 1
				
	</select>
	

	<!-- 적용이력 조회-->
	<select id="selectRcApplyHistory" parameterType="map" resultType="hashmap">
		/* SelectRcApplyHistory 10001 */
		
				SELECT
						RCI.PCN_NO AS PCNNO
					,	TO_CHAR(RCI.APPLYTIME,'YYYY-MM-DD HH24:MI:SS') AS APPLYTIME
					,	RCI.LOTID
					,	RCI.PRODUCTDEFID
					,	RCI.PRODUCTDEFVERSION
					,	RCI.TOPRODUCTDEFID AS RCPRODUCTDEFID
					,	RCI.TOPRODUCTDEFVERSION	AS RCPRODUCTDEFVERSION
					,	RCI.USERSEQUENCE
					,	RCI.PROCESSSEGMENTID
					,	RCI.PROCESSSEGMENTVERSION
					,	COALESCE(PSD.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
					,	RCI.PLANTID
					,	RCI.AREAID
					,	COALESCE(ARD.DICTIONARYNAME, AR.AREANAME) AS AREANAME
					,	RCI.CHANGESTATE
					,	COALESCE(CSD.DICTIONARYNAME, RCI.CHANGESTATE) AS CHANGESTATENAME
					,	LOT.USERSEQUENCE AS LOTUSERSEQUENCE
					,	LOT.PROCESSSEGMENTID  AS LOTPROCESSSEGMENTID
					,	LOT.PROCESSSEGMENTVERSION AS LOTPROCESSSEGMENTVERSION
					,	COALESCE(LPD.DICTIONARYNAME, LP.PROCESSSEGMENTNAME) AS LOTPROCESSSEGMENTNAME
					,	LOT.PCSQTY AS LOTPCSQTY
					,	LOT.PANELQTY AS LOTPNLQTY
				FROM PCM_RUNNINGCHANGEINFO			RCI
				INNER JOIN PCM_LOT					LOT	ON	LOT.LOTID = RCI.LOTID
				INNER JOIN fn_area(#{SESSION_USER_ID}) AR 	ON	AR.AREAID = RCI.AREAID
																	AND AR.ISMODIFY = 'Y' -- 등록화면
				LEFT OUTER JOIN BAS_PROCESSSEGMENT	PS	ON	PS.PROCESSSEGMENTID = RCI.PROCESSSEGMENTID
														AND	PS.PROCESSSEGMENTVERSION = RCI.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY		PSD	ON	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
														AND PSD.LANGUAGETYPE = 'ko-KR'
				LEFT OUTER JOIN CMD_DICTIONARY		ARD	ON	ARD.DICTIONARYID = AR.AREANAME
														AND ARD.LANGUAGETYPE = 'ko-KR'
				LEFT OUTER JOIN CMD_DICTIONARY		CSD	ON	CSD.DICTIONARYID = RCI.CHANGESTATE
														AND CSD.LANGUAGETYPE = 'ko-KR'
				LEFT OUTER JOIN BAS_PROCESSSEGMENT	LP	ON	LP.PROCESSSEGMENTID = LOT.PROCESSSEGMENTID
														AND	LP.PROCESSSEGMENTVERSION = LOT.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY		LPD	ON	LPD.DICTIONARYID = LP.PROCESSSEGMENTNAME
														AND LPD.LANGUAGETYPE = 'ko-KR'
				WHERE	1 = 1
				AND		RCI.PLANTID = #{PLANTID}
			<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''"> 
				AND		RCI.PRODUCTDEFID  = #{PRODUCTDEFID}
			</if>
			<if test="PCNNO != null and PCNNO !=''"> 
				AND		RCI.PCN_NO = #{PCNNO}
			</if>
				AND   RCI.APPLYTIME	 	 BETWEEN TO_TIMESTAMP( SUBSTR(#{PERIOD_PERIODFR},1,8) || ' 08:30:00','YYYY-MM-DD HH24:MI:SS')
												AND	 TO_TIMESTAMP( SUBSTR(#{PERIOD_PERIODTO},1,8) || ' 08:29:59','YYYY-MM-DD HH24:MI:SS')					
				ORDER BY RCI.APPLYTIME DESC 
	</select>

	<!-- RC LOT 대상 목록 -->
	<select id="selectRcTargetLotList" parameterType="map" resultType="hashmap">
		/* SelectRcTargetLotList 10002 */
		
				WITH PROCESS AS
				(
					-- 공정 변경 사항 최소 시퀀스
					SELECT	NVL(NVL(MIN(PRV.PATHSEQUENCE), MIN(AFT.PATHSEQUENCE)), 99999) MIN_PATHSEQUENCE
					FROM
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	PP.PLANTID
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						WHERE 1 = 1
						AND   PD.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
						AND   PD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} --'FA1'
					) PRV
					FULL OUTER  JOIN
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	PP.PLANTID
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH 		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						WHERE 1 = 1
						AND   PD.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
						AND   PD.PRODUCTDEFVERSION = #{RCPRODUCTDEFVERSION} --'FA2'
					) AFT	ON  PRV.PATHSEQUENCE = AFT.PATHSEQUENCE
							AND PRV.PROCESSSEGMENTID = AFT.PROCESSSEGMENTID
							AND PRV.PLANTID = AFT.PLANTID
					WHERE	1 = 1
					AND		(AFT.PATHSEQUENCE IS NULL OR PRV.PATHSEQUENCE IS NULL)
				) 
				, BOM AS
				(
					-- BOM
					SELECT NVL(NVL(MIN(PRV.PATHSEQUENCE), MIN(AFT.PATHSEQUENCE)), 99999) MIN_PATHSEQUENCE
					FROM
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	BOM.MATERIALDEFID
							,	BOM.MATERIALDEFVERSION
							,	BOM.MATERIALTYPE
							,	BOM.QTY
							,	BOM.UNIT
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND	PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						INNER JOIN BAS_BILLOFMATERIAL    BOM ON  PD.PRODUCTDEFID = BOM.PRODUCTDEFID
															AND PD.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
															AND PD.PROCESSDEFID = BOM.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
															AND PP.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
															AND PP.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
						WHERE 1 = 1
						AND   PD.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
						AND   PD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} --'FA1'
					) PRV
					FULL OUTER JOIN
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	BOM.MATERIALDEFID
							,	BOM.MATERIALDEFVERSION
							,	BOM.MATERIALTYPE
							,	BOM.QTY
							,	BOM.UNIT
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						INNER JOIN BAS_BILLOFMATERIAL	BOM	ON  PD.PRODUCTDEFID = BOM.PRODUCTDEFID
															AND PD.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
															AND PD.PROCESSDEFID = BOM.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
															AND PP.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
															AND PP.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
						WHERE	1 = 1
						AND		PD.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
						AND		PD.PRODUCTDEFVERSION = #{RCPRODUCTDEFVERSION} --'FA2'
					) AFT	ON	PRV.PROCESSSEGMENTID = AFT.PROCESSSEGMENTID
							AND PRV.MATERIALDEFID = AFT.MATERIALDEFID
							AND PRV.MATERIALDEFVERSION = AFT.MATERIALDEFVERSION
							AND PRV.MATERIALTYPE= AFT.MATERIALTYPE
							AND NVL(PRV.QTY,0) = NVL(AFT.QTY,0)
							AND PRV.UNIT = AFT.UNIT
					WHERE	1 = 1
					AND		(AFT.PATHSEQUENCE IS NULL OR PRV.PATHSEQUENCE IS NULL)
				)
				, MIN_PATH AS
				(
					SELECT LEAST(PROCESS.MIN_PATHSEQUENCE, BOM.MIN_PATHSEQUENCE) AS MIN_PATHSEQUENCE
					FROM 		PROCESS
					INNER JOIN	BOM		ON 1 = 1
				)
				, TARGET_LOT_LIST AS
				(
					SELECT		CP.LOTID
					FROM 		BAS_GOVERNANCE       GV
					INNER JOIN	QAM_CHANGEPOINT 		CP	ON	GV.PCRNO = CP.CHANGEPOINTNO
					WHERE		CP.CHANGEPOINTNO = #{PCNNO}
				)
				SELECT
--						CASE WHEN POSITION(L.LOTID IN LL.LOTID) > 0 THEN 'Y'
--							ELSE 'N' 
--						END CHK
						CASE WHEN LL.LOTID IS NOT NULL THEN  1 ELSE 0 END CHK
					,  	NVL(SD1.DICTIONARYNAME, PD.PRODUCTIONTYPE) PRODUCTIONTYPE
					,  	L.PRODUCTDEFID
					,  	L.PRODUCTDEFVERSION
					,  	L.LOTID
					,  	PD.PRODUCTDEFNAME
					,  	L.USERSEQUENCE
					,	NVL(SGD.DICTIONARYNAME, SG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
					,  	L.PLANTID
					,  	NVL(SD2.DICTIONARYNAME, SA.AREAID) AREANAME
					,  	NVL(SSD.DICTIONARYNAME, L.PROCESSSTATE) WIPPROCESSSTATE
					,  	L.QTY
					, 	CEIL(L.QTY / L.PANELPERQTY) PANELQTY
					, 	NVL(L.ISLOCKING, 'N') AS ISLOCKING 
					,	NVL(L.ISHOLD, 'N') AS ISHOLD 
					, 	PP.PATHSEQUENCE
					,	'' AS RCRESULT
					,	L.PROCESSSEGMENTID
					,	L.PROCESSSTATE
					,	L.WORKCOUNT 
				FROM PCM_LOT 					L
				INNER JOIN BAS_PRODUCTDEFINITION PD 	ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
													AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				INNER JOIN fn_area(#{SESSION_USER_ID}) SA 	ON	L.AREAID = SA.AREAID
																	AND	L.PLANTID = SA.PLANTID
																	AND SA.ISMODIFY = 'Y' -- 등록화면
				INNER JOIN BAS_PROCESSPATH 		PP	ON 	L.PROCESSDEFID = PP.PROCESSDEFID
													AND L.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
													AND L.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
				INNER JOIN BAS_PROCESSSEGMENT 	SG	ON	SG.PROCESSSEGMENTID = L.PROCESSSEGMENTID
													AND SG.PROCESSSEGMENTVERSION = L.PROCESSSEGMENTVERSION
				LEFT JOIN CMD_LOOKUP_VALUES		SC	ON  PD.PRODUCTIONTYPE = SC.LOOKUP_CODE
													AND SC.LOOKUP_TYPE = 'ProductionType' 
				LEFT JOIN CMD_DICTIONARY 		SD1	ON 	SC.DICTIONARYID = SD1.DICTIONARYID
													AND SD1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
				LEFT JOIN CMD_DICTIONARY 		SD2 ON 	SA.AREANAME = SD2.DICTIONARYID
													AND SD2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}   
				LEFT JOIN CMD_DICTIONARY		SGD	ON	SGD.DICTIONARYID = SG.PROCESSSEGMENTNAME
													AND	SGD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
				LEFT JOIN CMD_DICTIONARY		SSD ON	SSD.DICTIONARYID = 	CASE WHEN L.PROCESSSTATE = 'WaitForReceive' THEN 'WAITFORRECEIVE'
																				 WHEN L.PROCESSSTATE = 'Wait'           THEN 'ACCEPT'
																				 WHEN L.PROCESSSTATE = 'Run'            THEN 'WORKSTART'
																				 WHEN L.PROCESSSTATE = 'WaitForSend'    THEN 'WORKEND'
																			END
													AND	SSD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
				LEFT JOIN TARGET_LOT_LIST 		LL	ON  LL.LOTID = L.LOTID  --	1 = 1                             
				WHERE 	1 = 1
				AND  	L.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
				AND  	L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} --'FA1'
				AND 	L.PRODUCTDEFID = L.PROCESSDEFID  -- LOT ROUTING 제외
				AND  	NVL(L.ISDEFECTED, 'N') = 'N'
				AND		NVL(L.ISREWORK, 'N') = 'N'
				AND		L.LOTSTATE IN ('InTransit', 'InProduction')
				AND		NVL(L.ISREPRESENTROLLLOT, 'N') = 'N'
				AND  	 (SELECT MIN_PATHSEQUENCE FROM MIN_PATH) > PP.PATHSEQUENCE
				AND		L.LOTCREATEDTYPE != 'Claim'
		
	</select>

	<select id="selectMinPathSequenceForRc" parameterType="map" resultType="hashmap">
		/* GetMinPathSequenceForRc 10002*/
				WITH PROCESS AS
				(
					-- 공정 변경 사항 최소 시퀀스
					SELECT	NVL(NVL(MIN(PRV.PATHSEQUENCE), MIN(AFT.PATHSEQUENCE)), 99999) MIN_PATHSEQUENCE
					FROM
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	PP.PLANTID
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						WHERE 1 = 1
						AND   PD.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
						AND   PD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} --'FA1'
					) PRV
					FULL OUTER  JOIN
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	PP.PLANTID
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH 		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						WHERE 1 = 1
						AND   PD.PRODUCTDEFID =  #{RCPRODUCTDEFID} --'1010761D1'
						AND   PD.PRODUCTDEFVERSION = #{RCPRODUCTDEFVERSION} --'FA2'
					) AFT	ON  PRV.PATHSEQUENCE = AFT.PATHSEQUENCE
							AND PRV.PROCESSSEGMENTID = AFT.PROCESSSEGMENTID
							AND PRV.PLANTID = AFT.PLANTID
					WHERE	1 = 1
					AND		(AFT.PATHSEQUENCE IS NULL OR PRV.PATHSEQUENCE IS NULL)
				)
				, BOM AS
				(
					-- BOM
					SELECT NVL(NVL(MIN(PRV.PATHSEQUENCE), MIN(AFT.PATHSEQUENCE)), 99999) MIN_PATHSEQUENCE
					FROM
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	BOM.MATERIALDEFID
							,	BOM.MATERIALDEFVERSION
							,	BOM.MATERIALTYPE
							,	BOM.QTY
							,	BOM.UNIT
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND	PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						INNER JOIN BAS_BILLOFMATERIAL    BOM ON  PD.PRODUCTDEFID = BOM.PRODUCTDEFID
															AND PD.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
															AND PD.PROCESSDEFID = BOM.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
															AND PP.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
															AND PP.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
						WHERE 1 = 1
						AND   PD.PRODUCTDEFID = #{PRODUCTDEFID} --'1010761D1'
						AND   PD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION} --'FA1'
					) PRV
					FULL OUTER JOIN
					(
						SELECT	PP.PATHSEQUENCE
							,	PP.PROCESSSEGMENTID
							,	PP.USERSEQUENCE
							,	BOM.MATERIALDEFID
							,	BOM.MATERIALDEFVERSION
							,	BOM.MATERIALTYPE
							,	BOM.QTY
							,	BOM.UNIT
						FROM	BAS_PRODUCTDEFINITION	PD
						INNER JOIN BAS_PROCESSPATH		PP	ON	PD.PROCESSDEFID = PP.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
						INNER JOIN BAS_BILLOFMATERIAL	BOM	ON  PD.PRODUCTDEFID = BOM.PRODUCTDEFID
															AND PD.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
															AND PD.PROCESSDEFID = BOM.PROCESSDEFID
															AND PD.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
															AND PP.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
															AND PP.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
						WHERE	1 = 1
						AND		PD.PRODUCTDEFID = #{RCPRODUCTDEFID} --'1010761D1'
						AND		PD.PRODUCTDEFVERSION = #{RCPRODUCTDEFVERSION} --'FA2'
					) AFT	ON	PRV.PROCESSSEGMENTID = AFT.PROCESSSEGMENTID
							AND PRV.MATERIALDEFID = AFT.MATERIALDEFID
							AND PRV.MATERIALDEFVERSION = AFT.MATERIALDEFVERSION
							AND PRV.MATERIALTYPE= AFT.MATERIALTYPE
							AND NVL(PRV.QTY,0) = NVL(AFT.QTY,0)
							AND PRV.UNIT = AFT.UNIT
					WHERE	1 = 1
					AND		(AFT.PATHSEQUENCE IS NULL OR PRV.PATHSEQUENCE IS NULL)
				)
				SELECT LEAST(PROCESS.MIN_PATHSEQUENCE, BOM.MIN_PATHSEQUENCE) AS MIN_PATHSEQUENCE 
				FROM 		PROCESS 
				INNER JOIN	BOM		ON 1 = 1 
				
	</select>
	
	    <!-- Running Change 변경 이력 등록 -->
    <insert id="insertPcmRunningchangeinfo" parameterType="map">
	    INSERT INTO PCM_RUNNINGCHANGEINFO( 
	        TXNHISTKEY  
	        ,LOTID  
	        ,ENTERPRISEID  
	        ,PLANTID  
	        ,PCN_NO  
	        ,AREAID  
	        ,PRODUCTDEFID  
	        ,PRODUCTDEFVERSION  
	        ,USERSEQUENCE  
	        ,PROCESSSEGMENTID  
	        ,PROCESSSEGMENTVERSION  
	        ,PROCESSSTATE  
	        ,TOPRODUCTDEFID  
	        ,TOPRODUCTDEFVERSION  
	        ,CHANGESTATE  
	        ,APPLYTIME  
	        ,DESCRIPTION  
	        ,CREATOR  
	        ,CREATEDTIME  
	        ,TXNGROUPHISTKEY  
	        ,TXNID  
	        ,TXNUSER  
	        ,TXNTIME  
	        ,TXNREASONCODECLASS  
	        ,TXNREASONCODE  
	        ,TXNCOMMENT        ) 
	    VALUES( 
	        #{TXNHISTKEY}  
	        ,#{LOTID}  
	        ,#{ENTERPRISEID}  
	        ,#{PLANTID}  
	        ,#{PCN_NO}  
	        ,#{AREAID}  
	        ,#{PRODUCTDEFID}  
	        ,#{PRODUCTDEFVERSION}  
	        ,#{USERSEQUENCE}  
	        ,#{PROCESSSEGMENTID}  
	        ,#{PROCESSSEGMENTVERSION}  
	        ,#{PROCESSSTATE}  
	        ,#{TOPRODUCTDEFID}  
	        ,#{TOPRODUCTDEFVERSION}  
	        ,#{CHANGESTATE}  
	        ,SYSDATE 
	        ,#{DESCRIPTION}  
	        ,#{CREATOR}  
	        ,SYSDATE  
	        ,#{TXNGROUPHISTKEY}  
	        ,#{TXNID}  
	        ,#{TXNUSER}  
	        ,#{TXNTIME}  
	        ,#{TXNREASONCODECLASS}  
	        ,#{TXNREASONCODE}  
	        ,#{TXNCOMMENT}    )
    </insert>
	
	<select id="selectUserListForRcEmail" resultType="hashmap">
		/* GetUserListForRcEmail 10001 */
		SELECT BU.USERGROUPID
				      ,BU.USERID
				      ,BU.VALIDSTATE
				      ,U1.USER_NM
				      ,U1.DEPT_CD
				      ,U1.JIKWI_CD
				      ,U1.EMAIL_ADDR
				      ,U1.MBPH_NO
				      ,U1.LANGUAGETYPE
				FROM   BAS_USERGROUPUSER BU
				LEFT   OUTER JOIN CMD_USERS U1
				ON     BU.USERID = U1.USER_ID
			WHERE  1 = 1
			AND    BU.USERGROUPID = 'RCChangeEmail' 
        ORDER  BY BU.USERID
	</select>
	
	<select id="saveBasItemMaster"  statementType="CALLABLE" parameterType="map">
  		{call  	 INF_BAS_ROUTING_PKG.SEND_BAS_ROUTING_ALL(#{ITEMID}
  										,#{ITEMVERSION}
  										,#{O_RESULT_CODE,mode=OUT,jdbcType=VARCHAR ,javaType=string}
  										,#{O_RESULT_MSG,mode=OUT,jdbcType=VARCHAR ,javaType=string}
  										)
  	          }
      </select>
      
</mapper>
