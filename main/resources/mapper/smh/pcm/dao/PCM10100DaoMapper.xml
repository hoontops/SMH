<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM10100Dao">

	<select id="selectInfPcmWipSubulList" parameterType="map" resultType="hashmap">
	    SELECT PERIOD_NAME
		     , PLANTID
		     , PRODUCTDEFID
		     , PRODUCTDEFVERSION
		     , PRODUCTDEFNAME
		     , LOTID
		     , PRODUCTIONTYPE
		     , LOTWORKTYPE
		     , PRODUCTIONTYPENAME
		     , LOTWORKTYPENAME
		     , PROCESSSEGMENTCLASSID
		     , PROCESSSEGMENTCLASSIDNAME
		     , AREAID
		     , AREANAME
		     , USERSEQUENCE
		     , PROCESSSEGMENTID
		     , PROCESSSEGMENTIDNAME
		     , STEPCLASS
		     , RESOURCEID
		     , OWNTYPE
		     , OWNTYPENAME
		     , BEGIN_WIP_QTY
		     , QUEUE_BEGIN_QTY
		     , QUEUE_FR_QTY
		     , QUEUE_TO_QTY
		     , QUEUE_ENDING_QTY
		     , QUEUE_SPLIT_QTY
		     , RUN_BEGIN_QTY
		     , RUN_FR_QTY
		     , RUN_TO_QTY
		     , RUN_ENDING_QTY
		     , RUN_SPLIT_QTY
		     , TOMOVE_BEGIN_QTY
		     , TOMOVE_FR_QTY
		     , TOMOVE_TO_QTY
		     , TOMOVE_ENDING_QTY
		     , TOMOVE_SPLIT_QTY
		     , REJECT_BEGIN_QTY
		     , REJECT_FR_QTY
		     , REJECT_TO_QTY
		     , REJECT_ENDING_QTY
		     , REJECT_SPLIT_QTY
		     , SCRAP_BEGIN_QTY
		     , SCRAP_FR_QTY
		     , ENDING_WIP_QTY
		     , ISSTART
		     , ISEND
		     , PROD_DATE
		     , RUNNING_CHANGE_YN
		     , FIRST_LOT_YN
		     , PARENTLOTID
		     , PARENTLOTID_USERSEQUENCE
		     , PARENTLOTID_PROCESSSTATE
		     , SPLIT_LOT_YN
		  FROM (
				SELECT PERIOD_NAME
				     , PLANTID
				     , PRODUCTDEFID
				     , PRODUCTDEFVERSION
				     , PRODUCTDEFNAME
				     , LOTID
				     , PRODUCTIONTYPE
				     , LOTWORKTYPE
				     , PRODUCTIONTYPENAME
				     , LOTWORKTYPENAME
				     , PROCESSSEGMENTCLASSID
				     , PROCESSSEGMENTCLASSIDNAME
				     , AREAID
				     , AREANAME
				     , USERSEQUENCE
				     , PROCESSSEGMENTID
				     , PROCESSSEGMENTIDNAME
				     , STEPCLASS
				     , RESOURCEID
				     , OWNTYPE
				     , OWNTYPENAME
				     , BEGIN_WIP_QTY
				     , QUEUE_BEGIN_QTY
				     , QUEUE_FR_QTY
				     , QUEUE_TO_QTY
				     , QUEUE_ENDING_QTY
				     , QUEUE_SPLIT_QTY
				     , RUN_BEGIN_QTY
				     , RUN_FR_QTY
				     , RUN_TO_QTY
				     , RUN_ENDING_QTY
				     , RUN_SPLIT_QTY
				     , TOMOVE_BEGIN_QTY
				     , TOMOVE_FR_QTY
				     , TOMOVE_TO_QTY
				     , TOMOVE_ENDING_QTY
				     , TOMOVE_SPLIT_QTY
				     , REJECT_BEGIN_QTY
				     , REJECT_FR_QTY
				     , REJECT_TO_QTY
				     , REJECT_ENDING_QTY
				     , REJECT_SPLIT_QTY
				     , SCRAP_BEGIN_QTY
				     , SCRAP_FR_QTY
				     , ENDING_WIP_QTY
				     , ISSTART
				     , ISEND
				     , PROD_DATE
				     , RUNNING_CHANGE_YN
				     , FIRST_LOT_YN
				     , PARENTLOTID
				     , PARENTLOTID_USERSEQUENCE
				     , PARENTLOTID_PROCESSSTATE
				     , SPLIT_LOT_YN
				     ,(SELECT NVL(ENDING_WIP_QTY,0) 
                          FROM INF_PCM_WIP_SUBUL_V B  
                        WHERE B.Plantid      = A.PLANTID
                          AND B.LOTID        = A.LOTID
                          AND B.PERIOD_NAME  = TO_CHAR(ADD_MONTHS(TO_DATE(A.PERIOD_NAME||'-01'), -1),'YYYY-MM')
                          AND B.USERSEQUENCE = A.USERSEQUENCE
                          AND B.PROD_DATE  = ( SELECT MAX(PROD_DATE)
                                                   FROM INF_PCM_WIP_SUBUL_V C
                                                  WHERE PLANTID      = A.PLANTID
                                                    AND PERIOD_NAME  = TO_CHAR(ADD_MONTHS(TO_DATE(A.PERIOD_NAME||'-01'), -1),'YYYY-MM')
                                                )
                        ) AS PREV_ENDING_WIP_QTY
				  FROM INF_PCM_WIP_SUBUL_V A
				 WHERE PLANTID      = #{PLANTID} 
				   AND PERIOD_NAME  = #{PERIOD_NAME}
				   AND PROD_DATE    = ( SELECT MAX(PROD_DATE)
		                                  FROM INF_PCM_WIP_SUBUL_V
		                                 WHERE PLANTID      = #{PLANTID} 
				                           AND PERIOD_NAME  = #{PERIOD_NAME} 
				                      )
				<if test="PRODUCTDEFID != null and PRODUCTDEFID !='' ">
				   AND PRODUCTDEFID IN (   SELECT TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS PRODUCTDEFID
				                             FROM (SELECT  #{PRODUCTDEFID} AS ORG_DATA FROM DUAL)
				                       CONNECT BY INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
				                       )
				</if>
				<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' ">
				   AND PRODUCTDEFVERSION  = #{PRODUCTDEFVERSION}
				</if>
				<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !='' ">
				   AND PRODUCTDEFNAME LIKE <![CDATA['%' ||]]> #{PRODUCTDEFNAME} <![CDATA[|| '%']]>
				</if>
				<if test="LOTID != null and LOTID !='' ">
				   AND LOTID IN (   SELECT TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS LOTID
				                      FROM (SELECT  #{LOTID} AS ORG_DATA FROM DUAL)
				                CONNECT BY INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
				                )
				</if>     
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !='' ">
				   AND PRODUCTIONTYPE = #{PRODUCTIONTYPE}
				</if>
				<if test="LOTWORKTYPE != null and LOTWORKTYPE !='' ">
				   AND LOTWORKTYPE = #{LOTWORKTYPE}
				</if>
				<if test="AREAID != null and AREAID !='' ">
				   AND AREAID IN (   SELECT TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS AREAID
				                       FROM (SELECT  #{AREAID} AS ORG_DATA FROM DUAL)
				                 CONNECT BY INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
				                 )
				</if> 
				<if test="ISEND != null and ISEND !='' ">
				   AND ISEND = #{ISEND}
				</if>
			 )
		WHERE 1= 1
	    <if test="REQUIREMENT != null and REQUIREMENT !='' ">
			<choose>
				<when test="REQUIREMENT eq '1'.toString()">
				    AND SCRAP_FR_QTY > 0
				</when>
				<when test="REQUIREMENT eq '2'.toString()">
				    AND ENDING_WIP_QTY <![CDATA[<]]>  0
				</when>
				<when test="REQUIREMENT eq '3'.toString()">
				    AND REJECT_ENDING_QTY > 0
				</when>
				<when test="REQUIREMENT eq '4'.toString()">
				    AND NVL(PREV_ENDING_WIP_QTY,0) > 0
				    AND PREV_ENDING_WIP_QTY <![CDATA[<>]]> BEGIN_WIP_QTY
				</when>
				<when test="REQUIREMENT eq '5'.toString()">
				    AND  SPLIT_LOT_YN = 'Y'
				</when>
			</choose>
		</if>
	 ORDER BY PRODUCTDEFID, LOTID, TO_NUMBER(USERSEQUENCE)   
	</select>

</mapper>
