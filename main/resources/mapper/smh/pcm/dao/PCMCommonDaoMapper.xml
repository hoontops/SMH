<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCMCommonDao">
<!-- PCM 기준정보 공통 -->

	<!-- 제품 Rev 조회 -->
    <select id="selectProductVersion" parameterType="map" resultType="hashmap">
    		SELECT 
					PRODUCTDEFVERSION        AS PRODUCTDEFVERSIONCODE
				,	PRODUCTDEFVERSION        AS PRODUCTDEFVERSIONNAME
			FROM 	BAS_PRODUCTDEFINITION 
			WHERE 	1=1
			AND     PRODUCTDEFID = #{PRODUCTDEFID}
		<if test="ENTERPRISEID != null and ENTERPRISEID !=''"> 
			AND 	ENTERPRISEID = #{ENTERPRISEID}
		</if>
    </select>

	<select id="selectProductVersionMulty" parameterType="map" resultType="hashmap">
    		SELECT DISTINCT
					PRODUCTDEFVERSION        AS PRODUCTDEFVERSIONCODE
				,	PRODUCTDEFVERSION        AS PRODUCTDEFVERSIONNAME
			FROM 	BAS_PRODUCTDEFINITION 
			WHERE 	1=1
			AND     PRODUCTDEFID IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID},',') ) 
		<if test="ENTERPRISEID != null and ENTERPRISEID !=''"> 
			AND 	ENTERPRISEID = #{ENTERPRISEID}
		</if>
    </select>
    
    <!-- LOT 정보 조회-->
    <select id="selectPcmLotList" parameterType="map" resultType="hashmap">
       SELECT 
	        A.LOTID	
	        ,A.PRODUCTIONORDERID	
	        ,A.LINENO	
	        ,A.LOTGROUPID	
	        ,A.LOTNAME	
	        ,A.ENTERPRISEID	
	        ,A.PLANTID	
	        ,A.FACTORYID	
	        ,A.ORIGINALPLANTID	
	        ,A.AREAID	
	        ,A.EQUIPMENTID	
	        ,A.LOCATIONID	
	        ,A.RECIPEDEFID	
	        ,A.RECIPEDEFVERSION	
	        ,A.RAWMATERIALID	
	        ,A.ROOTLOTID	
	        ,A.PARENTLOTID	
	        ,A.CHILDLOTID	
	        ,A.CARRIERID	
	        ,A.LOTTYPE	
	        ,A.LOTCREATEDTYPE	
	        ,A.LOTINPUTTYPE	
	        ,A.ISREPRESENTROLLLOT	
	        ,A.HASSUBLOT	
	        ,A.PRODUCTDEFID	
	        ,A.PRODUCTDEFVERSION	
	        ,A.PREVPRODUCTDEFVERSION	
	        ,A.PROCESSDEFID	
	        ,A.PROCESSDEFVERSION	
	        ,A.PROCESSPATHSTACK	
	        ,A.USERSEQUENCE	
	        ,A.PROCESSSEGMENTID	
	        ,A.PROCESSSEGMENTVERSION	
	        ,A.PRIORITY	
	        ,A.DUEDATE	
	        ,A.EXPECTEDCOMPLETEDATE	
	        ,A.ROOTLOTSTARTDATE	
	        ,A.LOTSTARTDATE	
	        ,A.WEEK	
	        ,A.TRACKINUSER	
	        ,A.TRACKINTIME	
	        ,A.TRACKOUTUSER	
	        ,A.TRACKOUTTIME	
	        ,A.LOTSTATE	
	        ,A.PROCESSSTATE	
	        ,A.ISHOLD	
	        ,A.ISREWORK	
	        ,A.ISLOCKING	
	        ,A.REWORKTYPE	
	        ,A.REWORKREASONCODE	
	        ,A.ISPRINTLOTCARD	
	        ,A.ISPRINTRCLOTCARD	
	        ,A.LAYER	
	        ,A.CREATEDQTY	
	        ,A.LOTSTDPANELQTY	
	        ,A.UNIT	
	        ,A.DEFECTUNIT	
	        ,A.QTY	
	        ,A.DEFECTQTY	
	        ,A.PSEUDODEFECTQTY	
	        ,A.PCSQTY	
	        ,A.ARRAYQTY	
	        ,A.PANELQTY	
	        ,A.PANELPERQTY	
	        ,A.REWORKCOUNT	
	        ,A.TOTALREWORKCOUNT	
	        ,A.PUREORDER	
	        ,A.PUREINPUT	
	        ,A.SUBPROCESSDEFID	
	        ,A.SUBPROCESSDEFVERSION	
	        ,A.RECEIVEUSER	
	        ,A.RECEIVETIME	
	        ,A.STARTEDUSER	
	        ,A.STARTEDDATE	
	        ,A.SENDUSER	
	        ,A.SENDTIME	
	        ,A.HANDLETYPE	
	        ,A.DESCRIPTION	
	        ,A.CREATOR	
	        ,A.CREATEDTIME	
	        ,A.MODIFIER	
	        ,A.MODIFIEDTIME	
	        ,A.LASTTXNHISTKEY	
	        ,A.LASTTXNID	
	        ,A.LASTTXNUSER	
	        ,A.LASTTXNTIME	
	        ,A.LASTTXNCOMMENT	
	        ,A.ISDEFECTED	
	        ,A.LASTTXNGROUPHISTKEY	
	        ,A.WORKCOUNT	
	        ,A.RESOURCEID	
	        ,A.MKLOTID	
	        ,A.PREVPRODUCTDEFID	
	        ,A.PNLROOTLOTID	
	        ,A.PNLCREATEDQTY	
	        ,A.INPUTCONFIRMDATE	
	        ,A.INPUTCONFIRMUSER	
	        ,A.ISFINALINSPECTPROGESS	
	        ,A.LOTINPUTQTY	
	        ,A.ISFIRSTCREATELOT	
	        ,A.ISOEM	
	        ,A.ISSHRINKTEST	
	    FROM	PCM_LOT A 
        WHERE 1=1 
    <if test="LOTID != null and LOTID !='' "> 
        AND A.LOTID = #{LOTID}
    </if>
    <if test="PRODUCTIONORDERID != null and PRODUCTIONORDERID !='' "> 
        AND A.PRODUCTIONORDERID = #{PRODUCTIONORDERID}
    </if>
    <if test="LINENO != null and LINENO !='' "> 
        AND A.LINENO = #{LINENO}
    </if>
    <if test="LOTGROUPID != null and LOTGROUPID !='' "> 
        AND A.LOTGROUPID = #{LOTGROUPID}
    </if>
    <if test="LOTNAME != null and LOTNAME !='' "> 
        AND A.LOTNAME = #{LOTNAME}
    </if>
    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
        AND A.ENTERPRISEID = #{ENTERPRISEID}
    </if>
    <if test="PLANTID != null and PLANTID !='' "> 
        AND A.PLANTID = #{PLANTID}
    </if>
    <if test="FACTORYID != null and FACTORYID !='' "> 
        AND A.FACTORYID = #{FACTORYID}
    </if>
    <if test="ORIGINALPLANTID != null and ORIGINALPLANTID !='' "> 
        AND A.ORIGINALPLANTID = #{ORIGINALPLANTID}
    </if>
    <if test="AREAID != null and AREAID !='' "> 
        AND A.AREAID = #{AREAID}
    </if>
    <if test="EQUIPMENTID != null and EQUIPMENTID !='' "> 
        AND A.EQUIPMENTID = #{EQUIPMENTID}
    </if>
    <if test="LOCATIONID != null and LOCATIONID !='' "> 
        AND A.LOCATIONID = #{LOCATIONID}
    </if>
    <if test="RECIPEDEFID != null and RECIPEDEFID !='' "> 
        AND A.RECIPEDEFID = #{RECIPEDEFID}
    </if>
    <if test="RECIPEDEFVERSION != null and RECIPEDEFVERSION !='' "> 
        AND A.RECIPEDEFVERSION = #{RECIPEDEFVERSION}
    </if>
    <if test="RAWMATERIALID != null and RAWMATERIALID !='' "> 
        AND A.RAWMATERIALID = #{RAWMATERIALID}
    </if>
    <if test="ROOTLOTID != null and ROOTLOTID !='' "> 
        AND A.ROOTLOTID = #{ROOTLOTID}
    </if>
    <if test="PARENTLOTID != null and PARENTLOTID !='' "> 
        AND A.PARENTLOTID = #{PARENTLOTID}
    </if>
    <if test="CHILDLOTID != null and CHILDLOTID !='' "> 
        AND A.CHILDLOTID = #{CHILDLOTID}
    </if>
    <if test="PNLROOTLOTID != null and PNLROOTLOTID !='' "> 
        AND A.PNLROOTLOTID = #{PNLROOTLOTID}
    </if>
    <if test="MKLOTID != null and MKLOTID !='' "> 
        AND A.MKLOTID = #{MKLOTID}
    </if>
    <if test="CARRIERID != null and CARRIERID !='' "> 
        AND A.CARRIERID = #{CARRIERID}
    </if>
    <if test="LOTTYPE != null and LOTTYPE !='' "> 
        AND A.LOTTYPE = #{LOTTYPE}
    </if>
    <if test="LOTCREATEDTYPE != null and LOTCREATEDTYPE !='' "> 
        AND A.LOTCREATEDTYPE = #{LOTCREATEDTYPE}
    </if>
    <if test="LOTINPUTTYPE != null and LOTINPUTTYPE !='' "> 
        AND A.LOTINPUTTYPE = #{LOTINPUTTYPE}
    </if>
    <if test="ISREPRESENTROLLLOT != null and ISREPRESENTROLLLOT !='' "> 
        AND A.ISREPRESENTROLLLOT = #{ISREPRESENTROLLLOT}
    </if>
    <if test="HASSUBLOT != null and HASSUBLOT !='' "> 
        AND A.HASSUBLOT = #{HASSUBLOT}
    </if>
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="PREVPRODUCTDEFID != null and PREVPRODUCTDEFID !='' "> 
        AND A.PREVPRODUCTDEFID = #{PREVPRODUCTDEFID}
    </if>
    <if test="PREVPRODUCTDEFVERSION != null and PREVPRODUCTDEFVERSION !='' "> 
        AND A.PREVPRODUCTDEFVERSION = #{PREVPRODUCTDEFVERSION}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="PROCESSPATHSTACK != null and PROCESSPATHSTACK !='' "> 
        AND A.PROCESSPATHSTACK = #{PROCESSPATHSTACK}
    </if>
    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
        AND A.USERSEQUENCE = #{USERSEQUENCE}
    </if>
    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    </if>
    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </if>
    <if test="WORKCOUNT != null and WORKCOUNT !='' "> 
        AND A.WORKCOUNT = #{WORKCOUNT}
    </if>
    <if test="PRIORITY != null and PRIORITY !='' "> 
        AND A.PRIORITY = #{PRIORITY}
    </if>
    <if test="DUEDATE != null and DUEDATE !='' "> 
        AND A.DUEDATE = #{DUEDATE}
    </if>
    <if test="EXPECTEDCOMPLETEDATE != null and EXPECTEDCOMPLETEDATE !='' "> 
        AND A.EXPECTEDCOMPLETEDATE = #{EXPECTEDCOMPLETEDATE}
    </if>
    <if test="ROOTLOTSTARTDATE != null and ROOTLOTSTARTDATE !='' "> 
        AND A.ROOTLOTSTARTDATE = #{ROOTLOTSTARTDATE}
    </if>
    <if test="LOTSTARTDATE != null and LOTSTARTDATE !='' "> 
        AND A.LOTSTARTDATE = #{LOTSTARTDATE}
    </if>
    <if test="WEEK != null and WEEK !='' "> 
        AND A.WEEK = #{WEEK}
    </if>
    <if test="TRACKINUSER != null and TRACKINUSER !='' "> 
        AND A.TRACKINUSER = #{TRACKINUSER}
    </if>
    <if test="TRACKINTIME != null and TRACKINTIME !='' "> 
        AND A.TRACKINTIME = #{TRACKINTIME}
    </if>
    <if test="TRACKOUTUSER != null and TRACKOUTUSER !='' "> 
        AND A.TRACKOUTUSER = #{TRACKOUTUSER}
    </if>
    <if test="TRACKOUTTIME != null and TRACKOUTTIME !='' "> 
        AND A.TRACKOUTTIME = #{TRACKOUTTIME}
    </if>
    <if test="LOTSTATE != null and LOTSTATE !='' "> 
        AND A.LOTSTATE = #{LOTSTATE}
    </if>
    <if test="PROCESSSTATE != null and PROCESSSTATE !='' "> 
        AND A.PROCESSSTATE = #{PROCESSSTATE}
    </if>
    <if test="ISHOLD != null and ISHOLD !='' "> 
        AND A.ISHOLD = #{ISHOLD}
    </if>
    <if test="ISREWORK != null and ISREWORK !='' "> 
        AND A.ISREWORK = #{ISREWORK}
    </if>
    <if test="ISLOCKING != null and ISLOCKING !='' "> 
        AND A.ISLOCKING = #{ISLOCKING}
    </if>
    <if test="ISDEFECTED != null and ISDEFECTED !='' "> 
        AND A.ISDEFECTED = #{ISDEFECTED}
    </if>
    <if test="REWORKTYPE != null and REWORKTYPE !='' "> 
        AND A.REWORKTYPE = #{REWORKTYPE}
    </if>
    <if test="REWORKREASONCODE != null and REWORKREASONCODE !='' "> 
        AND A.REWORKREASONCODE = #{REWORKREASONCODE}
    </if>
    <if test="ISPRINTLOTCARD != null and ISPRINTLOTCARD !='' "> 
        AND A.ISPRINTLOTCARD = #{ISPRINTLOTCARD}
    </if>
    <if test="ISPRINTRCLOTCARD != null and ISPRINTRCLOTCARD !='' "> 
        AND A.ISPRINTRCLOTCARD = #{ISPRINTRCLOTCARD}
    </if>
    <if test="LAYER != null and LAYER !='' "> 
        AND A.LAYER = #{LAYER}
    </if>
    <if test="CREATEDQTY != null and CREATEDQTY !='' "> 
        AND A.CREATEDQTY = #{CREATEDQTY}
    </if>
    <if test="PNLCREATEDQTY != null and PNLCREATEDQTY !='' "> 
        AND A.PNLCREATEDQTY = #{PNLCREATEDQTY}
    </if>
    <if test="LOTSTDPANELQTY != null and LOTSTDPANELQTY !='' "> 
        AND A.LOTSTDPANELQTY = #{LOTSTDPANELQTY}
    </if>
    <if test="UNIT != null and UNIT !='' "> 
        AND A.UNIT = #{UNIT}
    </if>
    <if test="DEFECTUNIT != null and DEFECTUNIT !='' "> 
        AND A.DEFECTUNIT = #{DEFECTUNIT}
    </if>
    <if test="QTY != null and QTY !='' "> 
        AND A.QTY = #{QTY}
    </if>
    <if test="DEFECTQTY != null and DEFECTQTY !='' "> 
        AND A.DEFECTQTY = #{DEFECTQTY}
    </if>
    <if test="PSEUDODEFECTQTY != null and PSEUDODEFECTQTY !='' "> 
        AND A.PSEUDODEFECTQTY = #{PSEUDODEFECTQTY}
    </if>
    <if test="PCSQTY != null and PCSQTY !='' "> 
        AND A.PCSQTY = #{PCSQTY}
    </if>
    <if test="ARRAYQTY != null and ARRAYQTY !='' "> 
        AND A.ARRAYQTY = #{ARRAYQTY}
    </if>
    <if test="PANELQTY != null and PANELQTY !='' "> 
        AND A.PANELQTY = #{PANELQTY}
    </if>
    <if test="PANELPERQTY != null and PANELPERQTY !='' "> 
        AND A.PANELPERQTY = #{PANELPERQTY}
    </if>
    <if test="REWORKCOUNT != null and REWORKCOUNT !='' "> 
        AND A.REWORKCOUNT = #{REWORKCOUNT}
    </if>
    <if test="TOTALREWORKCOUNT != null and TOTALREWORKCOUNT !='' "> 
        AND A.TOTALREWORKCOUNT = #{TOTALREWORKCOUNT}
    </if>
    <if test="PUREORDER != null and PUREORDER !='' "> 
        AND A.PUREORDER = #{PUREORDER}
    </if>
    <if test="PUREINPUT != null and PUREINPUT !='' "> 
        AND A.PUREINPUT = #{PUREINPUT}
    </if>
    <if test="SUBPROCESSDEFID != null and SUBPROCESSDEFID !='' "> 
        AND A.SUBPROCESSDEFID = #{SUBPROCESSDEFID}
    </if>
    <if test="SUBPROCESSDEFVERSION != null and SUBPROCESSDEFVERSION !='' "> 
        AND A.SUBPROCESSDEFVERSION = #{SUBPROCESSDEFVERSION}
    </if>
    <if test="RECEIVEUSER != null and RECEIVEUSER !='' "> 
        AND A.RECEIVEUSER = #{RECEIVEUSER}
    </if>
    <if test="RECEIVETIME != null and RECEIVETIME !='' "> 
        AND A.RECEIVETIME = #{RECEIVETIME}
    </if>
    <if test="STARTEDUSER != null and STARTEDUSER !='' "> 
        AND A.STARTEDUSER = #{STARTEDUSER}
    </if>
    <if test="STARTEDDATE != null and STARTEDDATE !='' "> 
        AND A.STARTEDDATE = #{STARTEDDATE}
    </if>
    <if test="SENDUSER != null and SENDUSER !='' "> 
        AND A.SENDUSER = #{SENDUSER}
    </if>
    <if test="SENDTIME != null and SENDTIME !='' "> 
        AND A.SENDTIME = #{SENDTIME}
    </if>
    <if test="HANDLETYPE != null and HANDLETYPE !='' "> 
        AND A.HANDLETYPE = #{HANDLETYPE}
    </if>
    <if test="RESOURCEID != null and RESOURCEID !='' "> 
        AND A.RESOURCEID = #{RESOURCEID}
    </if>
    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
        AND A.DESCRIPTION = #{DESCRIPTION}
    </if>
    </select>

    <!-- 제품 정보 조회-->
    <select id="selectBasProductdefinitionList" parameterType="map" resultType="map">
    SELECT 
        A.PRODUCTDEFID	
        ,A.PRODUCTDEFVERSION	
        ,A.PRODUCTCLASSID	
        ,A.PRODUCTDEFNAME	
        ,A.ENTERPRISEID	
        ,A.PLANTID	
        ,A.PRODUCTDEFTYPE	
        ,A.PRODUCTIONTYPE	
        ,A.PRODUCTSHAPE	
        ,A.UNIT	
        ,A.DEFAULTQTY	
        ,A.HASSUBLOT	
        ,A."owner"	 
        ,A.LEADTIME	
        ,A.PROCESSDEFID	
        ,A.PROCESSDEFVERSION	
        ,A.VERSIONSTATE	
        ,A.CUSTOMERID	
        ,A.LAYER	
        ,A.PACKINGQTY	
        ,A.ISWEEKMNG	
        ,A.RTRSHT	
        ,A.INPUTTYPE	
        ,A.PCSSIZEXAXIS	
        ,A.PCSSIZEYAXIS	
        ,A.ARYSIZEXAXIS	
        ,A.ARYSIZEYAXIS	
        ,A.PNLSIZEXAXIS	
        ,A.PNLSIZEYAXIS	
        ,A.PCSPNL	
        ,A.PNLMM	
        ,A.PCSMM	
        ,A.PCSARY	
        ,A.MATERIALCLASS	
        ,A.MATERIALSEQUENCE	
        ,A.CLMATERIAL	
        ,A.SUBSIDIARY	
        ,A.TOLERANCE	
        ,A.XOUT	
        ,A.LOADOWNER	
        ,A.PRIORITY	
        ,A.OWNERFACTORYID	
        ,A.DESCRIPTION	
        ,A.CREATOR	
        ,A.CREATEDTIME	
        ,A.MODIFIER	
        ,A.MODIFIEDTIME	
        ,A.VALIDSTATE	
    FROM	BAS_PRODUCTDEFINITION A 
    WHERE 1=1 
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="PRODUCTCLASSID != null and PRODUCTCLASSID !='' "> 
        AND A.PRODUCTCLASSID = #{PRODUCTCLASSID}
    </if>
    <if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !='' "> 
        AND A.PRODUCTDEFNAME = #{PRODUCTDEFNAME}
    </if>
    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
        AND A.ENTERPRISEID = #{ENTERPRISEID}
    </if>
    <if test="PLANTID != null and PLANTID !='' "> 
        AND A.PLANTID = #{PLANTID}
    </if>
    <if test="PRODUCTDEFTYPE != null and PRODUCTDEFTYPE !='' "> 
        AND A.PRODUCTDEFTYPE = #{PRODUCTDEFTYPE}
    </if>
    <if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !='' "> 
        AND A.PRODUCTIONTYPE = #{PRODUCTIONTYPE}
    </if>
    <if test="PRODUCTSHAPE != null and PRODUCTSHAPE !='' "> 
        AND A.PRODUCTSHAPE = #{PRODUCTSHAPE}
    </if>
    <if test="UNIT != null and UNIT !='' "> 
        AND A.UNIT = #{UNIT}
    </if>
    <if test="DEFAULTQTY != null and DEFAULTQTY !='' "> 
        AND A.DEFAULTQTY = #{DEFAULTQTY}
    </if>
    <if test="HASSUBLOT != null and HASSUBLOT !='' "> 
        AND A.HASSUBLOT = #{HASSUBLOT}
    </if>
    <if test="LEADTIME != null and LEADTIME !='' "> 
        AND A.LEADTIME = #{LEADTIME}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="VERSIONSTATE != null and VERSIONSTATE !='' "> 
        AND A.VERSIONSTATE = #{VERSIONSTATE}
    </if>
    <if test="CUSTOMERID != null and CUSTOMERID !='' "> 
        AND A.CUSTOMERID = #{CUSTOMERID}
    </if>
    <if test="LAYER != null and LAYER !='' "> 
        AND A.LAYER = #{LAYER}
    </if>
    <if test="PACKINGQTY != null and PACKINGQTY !='' "> 
        AND A.PACKINGQTY = #{PACKINGQTY}
    </if>
    <if test="ISWEEKMNG != null and ISWEEKMNG !='' "> 
        AND A.ISWEEKMNG = #{ISWEEKMNG}
    </if>
    <if test="RTRSHT != null and RTRSHT !='' "> 
        AND A.RTRSHT = #{RTRSHT}
    </if>
    <if test="INPUTTYPE != null and INPUTTYPE !='' "> 
        AND A.INPUTTYPE = #{INPUTTYPE}
    </if>
    <if test="PCSSIZEXAXIS != null and PCSSIZEXAXIS !='' "> 
        AND A.PCSSIZEXAXIS = #{PCSSIZEXAXIS}
    </if>
    <if test="PCSSIZEYAXIS != null and PCSSIZEYAXIS !='' "> 
        AND A.PCSSIZEYAXIS = #{PCSSIZEYAXIS}
    </if>
    <if test="ARYSIZEXAXIS != null and ARYSIZEXAXIS !='' "> 
        AND A.ARYSIZEXAXIS = #{ARYSIZEXAXIS}
    </if>
    <if test="ARYSIZEYAXIS != null and ARYSIZEYAXIS !='' "> 
        AND A.ARYSIZEYAXIS = #{ARYSIZEYAXIS}
    </if>
    <if test="PNLSIZEXAXIS != null and PNLSIZEXAXIS !='' "> 
        AND A.PNLSIZEXAXIS = #{PNLSIZEXAXIS}
    </if>
    <if test="PNLSIZEYAXIS != null and PNLSIZEYAXIS !='' "> 
        AND A.PNLSIZEYAXIS = #{PNLSIZEYAXIS}
    </if>
    <if test="PCSPNL != null and PCSPNL !='' "> 
        AND A.PCSPNL = #{PCSPNL}
    </if>
    <if test="PNLMM != null and PNLMM !='' "> 
        AND A.PNLMM = #{PNLMM}
    </if>
    <if test="PCSMM != null and PCSMM !='' "> 
        AND A.PCSMM = #{PCSMM}
    </if>
    <if test="PCSARY != null and PCSARY !='' "> 
        AND A.PCSARY = #{PCSARY}
    </if>
    <if test="MATERIALCLASS != null and MATERIALCLASS !='' "> 
        AND A.MATERIALCLASS = #{MATERIALCLASS}
    </if>
    <if test="MATERIALSEQUENCE != null and MATERIALSEQUENCE !='' "> 
        AND A.MATERIALSEQUENCE = #{MATERIALSEQUENCE}
    </if>
    <if test="CLMATERIAL != null and CLMATERIAL !='' "> 
        AND A.CLMATERIAL = #{CLMATERIAL}
    </if>
    <if test="SUBSIDIARY != null and SUBSIDIARY !='' "> 
        AND A.SUBSIDIARY = #{SUBSIDIARY}
    </if>
    <if test="TOLERANCE != null and TOLERANCE !='' "> 
        AND A.TOLERANCE = #{TOLERANCE}
    </if>
    <if test="XOUT != null and XOUT !='' "> 
        AND A.XOUT = #{XOUT}
    </if>
    <if test="LOADOWNER != null and LOADOWNER !='' "> 
        AND A.LOADOWNER = #{LOADOWNER}
    </if>
    <if test="PRIORITY != null and PRIORITY !='' "> 
        AND A.PRIORITY = #{PRIORITY}
    </if>
    <if test="OWNERFACTORYID != null and OWNERFACTORYID !='' "> 
        AND A.OWNERFACTORYID = #{OWNERFACTORYID}
    </if>
    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
        AND A.DESCRIPTION = #{DESCRIPTION}
    </if>
    <if test="VALIDSTATE != null and VALIDSTATE !='' "> 
        AND A.VALIDSTATE = #{VALIDSTATE}
    </if>
    </select>
	
    <!-- 라우팅 상세 정의 조회-->
    <select id="selectBasProcesspathList" parameterType="map" resultType="map">
    SELECT 
        A.PROCESSPATHID	
        ,A.ENTERPRISEID	
        ,A.PLANTID	
        ,A.PROCESSDEFID	
        ,A.PROCESSDEFVERSION	
        ,A.PROCESSSEGMENTID	
        ,A.PROCESSSEGMENTVERSION	
        ,A.PATHSEQUENCE	
        ,A.USERSEQUENCE	
        ,A.PATHTYPE	
        ,A.ALTERNATETYPE	
        ,A.ALTERNATEPROCESSCLASSID	
        ,A.REWORKPROCESSDEFID	
        ,A.REWORKPROCESSDEFVERSION	
        ,A.REWORKRETURNPATHID	
        ,A.DESCRIPTION	
        ,A.CREATOR	
        ,A.CREATEDTIME	
        ,A.MODIFIER	
        ,A.MODIFIEDTIME	
        ,A.VALIDSTATE	
        ,A.PROCESSUOM	
        ,A.ALTERNATIVERESOURCE	
        ,A.ASSIGNEQUIPMENT	
        ,A.ISWEEKMNG	
    FROM	BAS_PROCESSPATH A 
    WHERE 1=1 
    <if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
        AND A.PROCESSPATHID = #{PROCESSPATHID}
    </if>
    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
        AND A.ENTERPRISEID = #{ENTERPRISEID}
    </if>
    <if test="PLANTID != null and PLANTID !='' "> 
        AND A.PLANTID = #{PLANTID}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    </if>
    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </if>
    <if test="PATHSEQUENCE != null and PATHSEQUENCE !='' "> 
        AND A.PATHSEQUENCE = #{PATHSEQUENCE}
    </if>
    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
        AND A.USERSEQUENCE = #{USERSEQUENCE}
    </if>
    <if test="PATHTYPE != null and PATHTYPE !='' "> 
        AND A.PATHTYPE IN (  SELECT TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                               FROM (SELECT  #{PATHTYPE} AS ORG_DATA FROM DUAL)
                         CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0
                          )   
    </if>
    <if test="ALTERNATETYPE != null and ALTERNATETYPE !='' "> 
        AND A.ALTERNATETYPE = #{ALTERNATETYPE}
    </if>
    <if test="ALTERNATEPROCESSCLASSID != null and ALTERNATEPROCESSCLASSID !='' "> 
        AND A.ALTERNATEPROCESSCLASSID = #{ALTERNATEPROCESSCLASSID}
    </if>
    <if test="REWORKPROCESSDEFID != null and REWORKPROCESSDEFID !='' "> 
        AND A.REWORKPROCESSDEFID = #{REWORKPROCESSDEFID}
    </if>
    <if test="REWORKPROCESSDEFVERSION != null and REWORKPROCESSDEFVERSION !='' "> 
        AND A.REWORKPROCESSDEFVERSION = #{REWORKPROCESSDEFVERSION}
    </if>
    <if test="REWORKRETURNPATHID != null and REWORKRETURNPATHID !='' "> 
        AND A.REWORKRETURNPATHID = #{REWORKRETURNPATHID}
    </if>
    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
        AND A.DESCRIPTION = #{DESCRIPTION}
    </if>
    <if test="VALIDSTATE != null and VALIDSTATE !='' "> 
        AND A.VALIDSTATE = #{VALIDSTATE}
    </if>
    <if test="PROCESSUOM != null and PROCESSUOM !='' "> 
        AND A.PROCESSUOM = #{PROCESSUOM}
    </if>
    <if test="ALTERNATIVERESOURCE != null and ALTERNATIVERESOURCE !='' "> 
        AND A.ALTERNATIVERESOURCE = #{ALTERNATIVERESOURCE}
    </if>
    <if test="ASSIGNEQUIPMENT != null and ASSIGNEQUIPMENT !='' "> 
        AND A.ASSIGNEQUIPMENT = #{ASSIGNEQUIPMENT}
    </if>
    <if test="ISWEEKMNG != null and ISWEEKMNG !='' "> 
        AND A.ISWEEKMNG = #{ISWEEKMNG}
    </if>
    ORDER BY PROCESSDEFID, TO_NUMBER(USERSEQUENCE)
    </select>

	<!-- 공정 정보 조회-->
    <select id="selectProcessAList" parameterType="map" resultType="hashmap">
     <if test="CMB_TYPE != null and CMB_TYPE != '' and !(CMB_TYPE eq ''.toString())  and !(CMB_TYPE eq 'VAL'.toString()) "> 
    SELECT
         NULL AS CODE
        ,#{CMB_TYPE} AS NAME                
    FROM DUAL
    UNION ALL
    </if>
    SELECT CODE, NAME
  FROM 
    (
  		SELECT PSC.PROCESSSEGMENTCLASSID  AS CODE
		         ,PSC.PROCESSSEGMENTCLASSID || '_' ||
		         NVL(D.DICTIONARYNAME, PSC.PROCESSSEGMENTCLASSNAME) AS   NAME
		  FROM   BAS_PROCESSSEGMENTCLASS PSC   
		  LEFT   OUTER JOIN CMD_DICTIONARY D ON     PSC.PROCESSSEGMENTCLASSNAME = D.DICTIONARYID
		                                     AND    D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}  
		  WHERE  1 = 1		  
		  <if test="PROCESSSEGMENTCLASSTYPE != null and PROCESSSEGMENTCLASSTYPE !='' ">
		            AND    PSC.PROCESSSEGMENTCLASSTYPE = #{PROCESSSEGMENTCLASSTYPE}
			  <choose>
		          <when test="PROCESSSEGMENTCLASSTYPE eq 'TopProcessSegmentClass'.toString()">
		          		AND	PSC.PARENTPROCESSSEGMENTCLASSID IS NULL
		          </when>
		          <otherwise>
		          		AND	PSC.PARENTPROCESSSEGMENTCLASSID IS NOT NULL
		          </otherwise>
	          </choose>
	    </if>
	    <if test="PROCESSSEGMENTCLASSID != null and PROCESSSEGMENTCLASSID !='' ">
	    	AND ( UPPER(PSC.PROCESSSEGMENTCLASSID) 		  LIKE '%' || UPPER(#{PROCESSSEGMENTCLASSID}) ||'%'
		          OR    UPPER(PSC.PROCESSSEGMENTCLASSNAME) LIKE '%' || UPPER(#{PROCESSSEGMENTCLASSID}) ||'%'
		          OR    UPPER(D.DICTIONARYNAME) 				  LIKE '%' || UPPER(#{PROCESSSEGMENTCLASSID}) ||'%' )
	    </if>

	    <if test="PARENTPROCESSSEGMENTCLASSID != null and PARENTPROCESSSEGMENTCLASSID !='' ">
	              AND    PSC.PARENTPROCESSSEGMENTCLASSID = #{PARENTPROCESSSEGMENTCLASSID}	    	
	    </if>
	    		    
        AND   PSC.VALIDSTATE = 'Valid'
        ORDER BY PSC.PROCESSSEGMENTCLASSID ASC
        )
    </select>    			

 	<!-- 공정 정보 조회-->
    <select id="selectProcessBList" parameterType="map" resultType="hashmap">
     <if test="CMB_TYPE != null and CMB_TYPE != '' and !(CMB_TYPE eq ''.toString())  and !(CMB_TYPE eq 'VAL'.toString()) "> 
    SELECT
         NULL AS CODE
        ,#{CMB_TYPE} AS NAME                
    FROM DUAL
    UNION ALL
    </if>
    SELECT CODE, NAME
  FROM 
    (
  		SELECT PSC.PROCESSSEGMENTCLASSID  AS CODE
		         ,PSC.PROCESSSEGMENTCLASSID || '_' ||
		         NVL(D.DICTIONARYNAME, PSC.PROCESSSEGMENTCLASSNAME) AS   NAME
		  FROM   BAS_PROCESSSEGMENTCLASS PSC   
		  LEFT   OUTER JOIN CMD_DICTIONARY D ON     PSC.PROCESSSEGMENTCLASSNAME = D.DICTIONARYID
		                                     AND    D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}  
		  WHERE  1 = 1		  
		  <if test="PROCESSSEGMENTCLASSTYPE != null and PROCESSSEGMENTCLASSTYPE !='' ">
		            AND    PSC.PROCESSSEGMENTCLASSTYPE = #{PROCESSSEGMENTCLASSTYPE}
			  <choose>
		          <when test="PROCESSSEGMENTCLASSTYPE eq 'TopProcessSegmentClass'.toString()">
		          		AND	PSC.PARENTPROCESSSEGMENTCLASSID IS NULL
		          </when>
		          <otherwise>
		          		AND	PSC.PARENTPROCESSSEGMENTCLASSID IS NOT NULL
		          </otherwise>
	          </choose>
	    </if>
	    <if test="PROCESSSEGMENTCLASSID != null and PROCESSSEGMENTCLASSID !='' ">
	    	AND ( UPPER(PSC.PROCESSSEGMENTCLASSID) 		  LIKE '%' || UPPER(#{PROCESSSEGMENTCLASSID}) ||'%'
		          OR    UPPER(PSC.PROCESSSEGMENTCLASSNAME) LIKE '%' || UPPER(#{PROCESSSEGMENTCLASSID}) ||'%'
		          OR    UPPER(D.DICTIONARYNAME) 				  LIKE '%' || UPPER(#{PROCESSSEGMENTCLASSID}) ||'%' )
	    </if>
  			<choose>
		          <when test="PARENTPROCESSSEGMENTCLASSID != null and PARENTPROCESSSEGMENTCLASSID !='' ">
		          		AND    PSC.PARENTPROCESSSEGMENTCLASSID = #{PARENTPROCESSSEGMENTCLASSID}	  
		          </when>
		          <otherwise>
		          		AND    PSC.PARENTPROCESSSEGMENTCLASSID = 'TEMPTEMPTEMP'	  
		          </otherwise>
	          </choose>	    		    
        AND   PSC.VALIDSTATE = 'Valid'
        ORDER BY PSC.PROCESSSEGMENTCLASSID ASC
        )
    </select>    			
	
	<select id="selectMaxOutboundNo" parameterType="map" resultType="hashmap">
		SELECT TRIM(TO_CHAR(TO_NUMBER(SUBSTR(REQUESTNO,9,4))+1,'0000')) AS LASTNO,
			   REQUESTNO
        FROM MTM_CONSUMABLEREQUEST
        WHERE 1=1
        AND ENTERPRISEID = #{ENTERPRISEID}
        AND PLANTID = #{PLANTID}
        AND SUBSTR(REQUESTNO,1,8) = #{YYYYMMDD}
    </select>
    
    <update id="insertMaxOutboundNo" parameterType="map">
        INSERT INTO MTM_CONSUMABLEREQUEST 
        	(
        	 ENTERPRISEID, PLANTID, REQUESTNO, AREAID, PROCESSSEGMENTID, PROCESSSEGMENTVERSION,
        	 CREATOR, CREATEDTIME, MODIFIER, MODIFIEDTIME, 
        	 LASTTXNHISTKEY, VALIDSTATE
        	)
        VALUES
        	(
        	 #{ENTERPRISEID}, #{PLANTID}, #{LASTNO}, #{AREAID}, #{PROCESSSEGMENTID}, #{PROCESSSEGMENTVERSION},
        	 #{CREATOR}, SYSDATE, #{LASTNO}, SYSDATE, 
        	 #{LASTTXNHISTKEY}, 'Valid'
        	)
    </update>
 
    <update id="updateMaxOutboundNo" parameterType="map">
        UPDATE MTM_CONSUMABLEREQUEST 
        SET REQUESTNO = #{LASTNO},
            MODIFIER = #{MODIFIER},
            MODIFIEDTIME = SYSDATE,
            LASTTXNHISTKEY = #{LASTTXNHISTKEY},
            VALIDSTATE = 'Valid'
        WHERE 1=1
        AND ENTERPRISEID = #{ENTERPRISEID}
        AND PLANTID = #{PLANTID}
        AND REQUESTNO = #{REQUESTNO}        
    </update>
    
	<insert id="insertPcmLotHistory" parameterType="map">
 INSERT 
   INTO PCM_LOTHISTORY(  TXNHISTKEY                          
                       , LOTID                               
                       , PRODUCTIONORDERID                   
                       , LINENO                              
                       , LOTGROUPID                          
                       , LOTNAME                             
                       , ENTERPRISEID                        
                       , ORIGINALPLANTID                     
                       , PLANTID                             
                       , FACTORYID                           
                       , AREAID                              
                       , EQUIPMENTID                         
                       , LOCATIONID                          
                       , RECIPEDEFID                         
                       , RECIPEDEFVERSION                    
                       , PREVPRODUCTDEFID                    
                       , PREVPRODUCTDEFVERSION               
                       , PRODUCTDEFID                        
                       , PRODUCTDEFVERSION                   
                       , PROCESSDEFID                        
                       , PROCESSDEFVERSION                   
                       , PROCESSPATHSTACK                    
                       , USERSEQUENCE                        
                       , PROCESSSEGMENTID                    
                       , PROCESSSEGMENTVERSION               
                       , RAWMATERIALID                       
                       , ROOTLOTID                           
                       , PARENTLOTID                         
                       , CHILDLOTID                          
                       , CARRIERID                           
                       , LOTTYPE                             
                       , LOTCREATEDTYPE                      
                       , LOTINPUTTYPE                        
                       , ISREPRESENTROLLLOT                  
                       , HASSUBLOT                           
                       , PRIORITY                            
                       , DUEDATE                             
                       , EXPECTEDCOMPLETEDATE                
                       , ROOTLOTSTARTDATE                    
                       , LOTSTARTDATE                        
                       , WEEK                                
                       , TRACKINUSER                         
                       , TRACKINTIME                         
                       , TRACKOUTUSER                        
                       , TRACKOUTTIME                        
                       , LOTSTATE                            
                       , PROCESSSTATE                        
                       , ISHOLD                              
                       , ISREWORK                            
                       , ISLOCKING                           
                       , REWORKTYPE                          
                       , REWORKREASONCODE                    
                       , ISPRINTLOTCARD                      
                       , ISPRINTRCLOTCARD                    
                       , LAYER                               
                       , CREATEDQTY                          
                       , LOTSTDPANELQTY                      
                       , UNIT                                
                       , DEFECTUNIT                          
                       , QTY                                 
                       , DEFECTQTY                           
                       , PSEUDODEFECTQTY                     
                       , PCSQTY                              
                       , ARRAYQTY                            
                       , PANELQTY                            
                       , PANELPERQTY                         
                       , REWORKCOUNT                         
                       , TOTALREWORKCOUNT                    
                       , PUREORDER                           
                       , PUREINPUT                           
                       , SUBPROCESSDEFID                     
                       , SUBPROCESSDEFVERSION                
                       , RECEIVEUSER                         
                       , RECEIVETIME                         
                       , STARTEDUSER                         
                       , STARTEDDATE                         
                       , SENDUSER                            
                       , SENDTIME                            
                       , HANDLETYPE                          
                       , DESCRIPTION                         
                       , CREATOR                             
                       , CREATEDTIME                         
                       , MODIFIER                            
                       , MODIFIEDTIME                        
                       , TXNGROUPHISTKEY                     
                       , TXNID                               
                       , TXNUSER                             
                       , TXNTIME                             
                       , TXNCOMMENT                          
                       , ISDEFECTED                          
                       , WORKCOUNT                           
                       , RESOURCEID                          
                       , MKLOTID                             
                       , PNLROOTLOTID                        
                       , PNLCREATEDQTY                       
                       , INPUTCONFIRMDATE                    
                       , INPUTCONFIRMUSER                    
                       , ISFINALINSPECTPROGESS               
                       , LOTINPUTQTY                         
                       , ISFIRSTCREATELOT                    
                       , ISOEM) VALUES(   #{LASTTXNHISTKEY}  
                                        , #{LOTID}
                                        , #{PRODUCTIONORDERID}
                                        , #{LINENO}
                                        , #{LOTGROUPID}
                                        , #{LOTNAME}
                                        , #{ENTERPRISEID}
                                        , #{ORIGINALPLANTID}
                                        , #{PLANTID}
                                        , #{FACTORYID}
                                        , #{AREAID}
                                        , #{EQUIPMENTID}
                                        , #{LOCATIONID}
                                        , #{RECIPEDEFID}
                                        , #{RECIPEDEFVERSION}
                                        , #{PREVPRODUCTDEFID}
                                        , #{PREVPRODUCTDEFVERSION}
                                        , #{PRODUCTDEFID}
                                        , #{PRODUCTDEFVERSION}
                                        , #{PROCESSDEFID}
                                        , #{PROCESSDEFVERSION}
                                        , #{PROCESSPATHSTACK}
                                        , #{USERSEQUENCE}
                                        , #{PROCESSSEGMENTID}
                                        , #{PROCESSSEGMENTVERSION}
                                        , #{RAWMATERIALID}
                                        , #{ROOTLOTID}
                                        , #{PARENTLOTID}
                                        , #{CHILDLOTID}
                                        , #{CARRIERID}
                                        , #{LOTTYPE}
                                        , #{LOTCREATEDTYPE}
                                        , #{LOTINPUTTYPE}
                                        , #{ISREPRESENTROLLLOT}
                                        , #{HASSUBLOT}
                                        , #{PRIORITY}
                                        , #{DUEDATE}
                                        , #{EXPECTEDCOMPLETEDATE}
                                        , #{ROOTLOTSTARTDATE}
                                        , #{LOTSTARTDATE}
                                        , #{WEEK}
                                        , #{TRACKINUSER}
                                        , #{TRACKINTIME}
                                        , #{TRACKOUTUSER}
                                        , #{TRACKOUTTIME}
                                        , #{LOTSTATE}
                                        , #{PROCESSSTATE}
                                        , #{ISHOLD}
                                        , #{ISREWORK}
                                        , #{ISLOCKING}
                                        , #{REWORKTYPE}
                                        , #{REWORKREASONCODE}
                                        , #{ISPRINTLOTCARD}
                                        , #{ISPRINTRCLOTCARD}
                                        , #{LAYER}
                                        , #{CREATEDQTY}
                                        , #{LOTSTDPANELQTY}
                                        , #{UNIT}
                                        , #{DEFECTUNIT}
                                        , #{QTY}
                                        , #{DEFECTQTY}
                                        , #{PSEUDODEFECTQTY}
                                        , #{PCSQTY}
                                        , #{ARRAYQTY}
                                        , #{PANELQTY}
                                        , #{PANELPERQTY}
                                        , #{REWORKCOUNT}
                                        , #{TOTALREWORKCOUNT}
                                        , #{PUREORDER}
                                        , #{PUREINPUT}
                                        , #{SUBPROCESSDEFID}
                                        , #{SUBPROCESSDEFVERSION}
                                        , #{RECEIVEUSER}
                                        , #{RECEIVETIME}
                                        , #{CREATOR}
                                        , SYSDATE
                                        , #{SENDUSER}
                                        , #{SENDTIME}
                                        , #{HANDLETYPE}
                                        , #{DESCRIPTION}
                                        , #{CREATOR}
                                        , SYSDATE
                                        , #{MODIFIER}
                                        , SYSDATE
                                        , #{TXNGROUPHISTKEY}
                                        , #{TXNID}
                                        , #{TXNUSER}
                                        , SYSDATE
                                        , #{TXNCOMMENT}
                                        , #{ISDEFECTED}
                                        , #{WORKCOUNT}
                                        , #{RESOURCEID}
                                        , #{MKLOTID}
                                        , #{PNLROOTLOTID}
                                        , #{PNLCREATEDQTY}
                                        , #{INPUTCONFIRMDATE}
                                        , #{INPUTCONFIRMUSER}
                                        , #{ISFINALINSPECTPROGESS}
                                        , #{LOTINPUTQTY}
                                        , #{ISFIRSTCREATELOT}
                                        , #{ISOEM}
                                      ) 
		                                   
		</insert>
	
	<insert id="insertPcmLotGeneal" parameterType="map">
			INSERT 
			  INTO PCM_LOTGENEAL
			  (  PROCESSDEFID
			   , PROCESSDEFVERSION
			   , PROCESSPATHID
			   , USERSEQUENCE
			   , PROCESSSEGMENTID
			   , PROCESSSEGMENTVERSION
			   , "DEPTH"
			   , LOTID
			   , ENTERPRISEID
			   , PLANTID
			   , AREAID
			   , PRODUCTDEFID
			   , PRODUCTDEFVERSION
			   , ROOTLOTID
			   , SOURCELOTID
			   , DESTINATIONLOTID
			   , CREATEDQTY
			   , QTY
			   , TXNHISTKEY
			   , TXNUSER
			   ,TXNTIME
			   , WORKCOUNT  
			  ) VALUES(  #{PROCESSDEFID}
			           , #{PROCESSDEFVERSION}
			           , #{PROCESSPATHID}
			           , #{USERSEQUENCE}
			           , #{PROCESSSEGMENTID}
			           , #{PROCESSSEGMENTVERSION}
			           , #{DEPTH}
			           , #{LOTID}
			           , #{ENTERPRISEID}
			           , #{PLANTID}
			           , #{AREAID}
			           , #{PRODUCTDEFID}
			           , #{PRODUCTDEFVERSION}
			           , #{ROOTLOTID}
			           , #{SOURCELOTID}
			           , #{DESTINATIONLOTID}
			           , #{CREATEDQTY}
			           , #{QTY}
			           , #{TXNHISTKEY}
			           , #{CREATOR}
			           , SYSDATE
			           , #{WORKCOUNT}
			          )	
	</insert>
	
	<select id="getCosumableByLot" parameterType="map" resultType="hashmap">
		  WITH BILLOFMATERIAL(  PLANTID
		                      , PRODUCTDEFID
		                      , PRODUCTDEFVERSION
		                      , MATERIALDEFID
		                      , MATERIALDEFVERSION
		                      , MATERIALDEFNAME
		                      , PROCESSDEFID
		                      , PROCESSDEFVERSION
		                      , QTY
		                      , UNIT
		                      , SEQ
		                    )
		    AS
		    (
		         SELECT PD.PLANTID
		              , PD.PRODUCTDEFID
		              , PD.PRODUCTDEFVERSION
		              , PD.PRODUCTDEFID       AS MATERIALDEFID
		              , PD.PRODUCTDEFVERSION  AS MATERIALDEFVERSION
		              , PD.PRODUCTDEFNAME     AS MATERIALDEFNAME
		              , PD.PROCESSDEFID
		              , PD.PROCESSDEFVERSION
		              , 1                     AS QTY
		              , PD.UNIT
		              , 1                     AS SEQ
		           FROM PCM_LOT  L
		     INNER JOIN BAS_PRODUCTIONORDER  PO   ON L.PRODUCTIONORDERID  = PO.PRODUCTIONORDERID
		                                         AND L.LINENO             = PO.LINENO
		     INNER JOIN BAS_PRODUCTDEFINITION PD  ON PO.PRODUCTDEFID      = PD.PRODUCTDEFID
		                                         AND PO.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
		                                         AND PO.PRODUCTDEFID      = PD.PROCESSDEFID
		                                         AND PO.PRODUCTDEFVERSION = PD.PROCESSDEFVERSION
		          WHERE PD.PLANTID = #{PLANTID}
		            AND L.LOTID    = #{LOTID}
		      UNION ALL
		         SELECT BOM.PLANTID
		              , BOM.PRODUCTDEFID
		              , BOM.PRODUCTDEFVERSION
		              , PD.PRODUCTDEFID       AS MATERIALDEFID
		              , PD.PRODUCTDEFVERSION  AS MATERIALDEFVERSION
		              , PD.PRODUCTDEFNAME     AS MATERIALDEFNAME
		              , PD.PROCESSDEFID
		              , PD.PROCESSDEFVERSION
		              , P.QTY * BOM.QTY       AS QTY
		              , PD.UNIT
		              , BOM."sequence"        AS SEQ
		           FROM BILLOFMATERIAL    P
		     INNER JOIN BAS_BILLOFMATERIAL  BOM    ON P.PLANTID              = BOM.PLANTID
		                                          AND P.MATERIALDEFID        = BOM.PRODUCTDEFID
		                                          AND P.MATERIALDEFVERSION   = BOM.PRODUCTDEFVERSION
		                                          AND P.PROCESSDEFID         = BOM.PROCESSDEFID
		                                          AND P.PROCESSDEFVERSION    = BOM.PROCESSDEFVERSION
		                                          AND BOM.MATERIALTYPE       = 'Product'
		     INNER JOIN BAS_PRODUCTDEFINITION PD   ON BOM.PLANTID            = PD.PLANTID
		                                          AND BOM.MATERIALDEFID      = PD.PRODUCTDEFID
		                                          AND BOM.MATERIALDEFVERSION = PD.PRODUCTDEFVERSION
		    )
		             SELECT BOM.MATERIALDEFID
		                  , BOM.MATERIALDEFVERSION
		                  , L.LOTID
		                  , L.AREAID
		                  , L.PROCESSSEGMENTID
		                  , NVL(PD.UNIT, CD.UNIT) AS UNIT
		                  , ROUND((L.QTY * COALESCE(P.QTY, 1) * BOM.QTY * CASE WHEN COALESCE(BC.USERLAYER, '') IN ('001','002','003','004','005') AND LPD.MATERIALCLASS IN ('CL','PP') THEN 0.5
		                                                                       WHEN COALESCE(BC.USERLAYER, '') IN ('001','002','003','004','005') AND COALESCE(PD.MATERIALCLASS, '') IN ('CL','PP') THEN 1
		                                                                       ELSE 1 
		                                                                  END
		                          ), 5) AS REQQTY
		               FROM PCM_LOT  L
		         INNER JOIN BAS_PRODUCTDEFINITION LPD   ON L.PRODUCTDEFID      = LPD.PRODUCTDEFID
		                                               AND L.PRODUCTDEFVERSION = LPD.PRODUCTDEFVERSION
		         INNER JOIN BAS_BILLOFMATERIAL  BOM     ON L.PLANTID           = BOM.PLANTID
		                                               AND L.PRODUCTDEFID      = BOM.PRODUCTDEFID
		                                               AND L.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
		                                               AND L.PRODUCTDEFID      = BOM.PROCESSDEFID
		                                               AND L.PRODUCTDEFVERSION = BOM.PROCESSDEFVERSION
		                                               AND L.PROCESSSEGMENTID  = BOM.PROCESSSEGMENTID
		                                               AND BOM.MATERIALTYPE    = 'Consumable'
		                                               AND BOM.WIPSUPPLYTYPE  != 'OperationPull'
		         INNER JOIN BAS_PROCESSPATH  PP         ON L.PRODUCTDEFID      = PP.PROCESSDEFID
		                                               AND L.PRODUCTDEFVERSION = PP.PROCESSDEFVERSION
		                                               AND L.PROCESSSEGMENTID  = PP.PROCESSSEGMENTID
		    LEFT OUTER JOIN BAS_PRODUCTDEFINITION  PD   ON BOM.MATERIALDEFID   = PD.PRODUCTDEFID
		                                               AND BOM.MATERIALDEFVERSION = PD.PRODUCTDEFVERSION
		    LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION CD ON BOM.MATERIALDEFID      = CD.CONSUMABLEDEFID
		                                               AND BOM.MATERIALDEFVERSION = CD.CONSUMABLEDEFVERSION
		    LEFT OUTER JOIN BILLOFMATERIAL   P          ON BOM.PLANTID            = P.PLANTID
		                                               AND BOM.PRODUCTDEFID       = P.MATERIALDEFID
		                                               AND BOM.PRODUCTDEFVERSION  = P.MATERIALDEFVERSION
		         INNER JOIN MFM_PRODUCTIONORDER  PO     ON L.PRODUCTIONORDERID    = PO.PRODUCTIONORDERID
		                                               AND L.LINENO               = PO.LINENO
		         INNER JOIN BAS_PRODUCTDEFINITION  MD   ON PO.PRODUCTDEFID        = MD.PRODUCTDEFID
		                                               AND PO.PRODUCTDEFVERSION   = MD.PRODUCTDEFVERSION
		    LEFT OUTER JOIN BAS_BOMCOMPONENT  BC        ON L.PRODUCTDEFID         = BC.MAINPRODUCTID
		                                               AND L.PRODUCTDEFVERSION    = BC.MAINPRODUCTVERSION
		                                               AND BOM.MATERIALDEFID      = BC.COMPONENTITEMID
		                                               AND BOM.MATERIALDEFVERSION = BC.COMPONENTITEMVERSION
		                                               AND PP.PROCESSPATHID       = BC.OPERATIONID
		               WHERE L.ENTERPRISEID = #{ENTERPRISEID}
		                 AND L.PLANTID      = #{PLANTID}
		                 AND L.LOTID        = #{LOTID}
	</select>

	<select id="getCreatedLotListPoByProduct" parameterType="map" resultType="int">
          SELECT COUNT(*)
            FROM PCM_LOT L
           WHERE L.PRODUCTIONORDERID = #{PRODUCTIONORDERID}
             AND L.LINENO            = #{LINENO}
             AND L.PLANTID           = #{PLANTID}  
             AND L.LOTSTATE          = 'Created'                   
	</select>
	    
	<select id="selectBasProcessdefinition" parameterType="map" resultType="map">
    SELECT 
        A.PROCESSDEFID	 
        ,A.PROCESSDEFVERSION	 
        ,A.PROCESSCLASSID	 
        ,A.PROCESSDEFNAME	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.PROCESSDEFTYPE	 
        ,A.LEADTIME	 
        ,A.VERSIONSTATE	 
        ,A.REWORKITEMCONTROL	 
        ,A.REWORKSEGMENTCONTROL	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
        ,A.TOPPROCESSSEGMENTID	 
    FROM  BAS_PROCESSDEFINITION A 
    WHERE A.PROCESSDEFID = #{PROCESSDEFID}
    AND	A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
   
    </select>

	<select id="selectUserList" parameterType="map" resultType="hashmap">
		/* GetUserList 10001 */
			SELECT ENTERPRISEID
					,	PLANTID
					,	AREAID
					,	USERID
					,	WORKERNAME  AS USERNAME
					,	EMPLOYEENO
					,	DEPARTMENT
					,	OWNTYPE
					,	WORKERTYPE
					,	ISMAINAREA
					,	WORKERNO
					,	VALIDSTATE
					,	'' AS EMAILADDRESS
  					,	'' AS CELLPHONENUMBER
				FROM 	BAS_AREAWORKER 
				WHERE 	1 = 1
			<if test="USERIDNAME != null and USERIDNAME !=''">
				<choose>
						<!-- 2021-06-08 최성민 추가, 작업자 다중검색문제로 추가함 -->
							<when test="USERIDNAME',') >= 0" >
								AND     UPPER(WORKERNAME) IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{USERIDNAME},',') )								
							</when> 
							<otherwise>
											AND 	(  UPPER(USERID) LIKE '%' || UPPER(#{USERIDNAME}) ||'%'
					 	OR UPPER(WORKERNAME) LIKE '%' || UPPER(#{USERIDNAME}) ||'%'
					 	)
							</otherwise>
					</choose>
			</if>
			<if test="ENTERPRISEID != null and ENTERPRISEID !=''"> 
				AND 	ENTERPRISEID = #{ENTERPRISEID}
			</if>
			<if test="PLANTID != null and PLANTID !=''"> 
				AND 	PLANTID = #{PLANTID}
			</if>
			<if test="AREAID != null and AREAID !=''"> 
				AND 	AREAID = #{AREAID}
			</if>
			ORDER BY USERNAME ASC
	</select>

	<select id="selectReasonConsumableList" parameterType="map" resultType="hashmap">
		/* GetReasonConsumableList 10002 */
		
			SELECT	
						ORIGINALLOTID		AS LOTID
					,	LOTID				AS PARENTLOTID
					,   CONSUMABLEDEFID
					,	CONSUMABLEDEFVERSION
					,   CONSUMABLEDEFNAME
					,	MATERIALTYPE
					, 	CONSUMABLEDEFID		AS CONSUMABLEDEFIDVERSION
					,	CONSUMABLEDEFID || '|' || CONSUMABLEDEFVERSION 		AS SPLITCONSUMABLEDEFIDVERSION
				FROM
				(
					WITH LOTGENEAL AS
					(
						SELECT  LOTID
							,   PARENTLOTID
							,	ORIGINALLOTID
							,   LLEVEL AS LEVEL_
						FROM FN_LOTGENEAL_BOTTOMUP_MULTI(#{LOTID})
					) ,
					LOTLEVEL AS
					(
						SELECT 	Z.*
							,   RANK() OVER (PARTITION BY TO_NUMBER(Z.USERSEQUENCE) ORDER BY LEVEL_) AS RNK
						FROM
						(
						SELECT  GL.*
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFID
	                                ELSE PAT.PROCESSDEFID
	                                END AS PROCESSDEFID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFVERSION
	                                ELSE PAT.PROCESSDEFVERSION
	                                END AS PROCESSDEFVERSION
	                            ,   WR.PROCESSSEGMENTID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.USERSEQUENCE
	                                ELSE PAT.USERSEQUENCE
	                                END AS USERSEQUENCE
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFID
	                                END AS SUBPROCESSDEFID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFVERSION
	                                END AS SUBPROCESSDEFVERSION
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSSEGMENTID
	                                END AS SUBPROCESSSEGMENTID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.USERSEQUENCE
	                                ELSE '0' END AS SUBUSERSEQUENCE
	                            ,   WR.WORKCOUNT
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' OR NVL(WR.WORKCOUNT, 0) > 0 THEN 'IsRework'
	                                ELSE 'Normal' END AS ISREWORK
	                            ,   WR.TXNHISTKEY
	                        FROM    LOTGENEAL           		GL
	                        LEFT OUTER JOIN PCM_LOTWORKRESULT    WR  ON  GL.LOTID = WR.LOTID
	                                                                AND NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
	                        INNER JOIN PCM_LOT           		L   ON  WR.LOTID = L.LOTID
	                        LEFT  JOIN BAS_PROCESSPATH   		PAT ON  regexp_substr(WR.PROCESSPATHSTACK, '[^.]+') = PAT.PROCESSPATHID
	                        WHERE   1 = 1
	                    ) Z
	                    ORDER BY LEVEL_
					),
					RESULTMAX AS
                    (
                        SELECT  GL.LOTID
                            ,   GL.LEVEL_
                            ,   MIN(TO_NUMBER(WR.USERSEQUENCE))   AS MIN_SEQUENCE
                            ,   MAX(TO_NUMBER(WR.USERSEQUENCE))   AS MAX_SEQUENCE
                        FROM    LOTGENEAL           GL
                        LEFT JOIN PCM_LOTWORKRESULT  WR  ON  GL.LOTID = WR.LOTID
                        WHERE   GL.LEVEL_ = 1
                        GROUP BY GL.LOTID
                            ,   GL.LEVEL_
                    )
                    SELECT  DISTINCT
							LV.LOTID
						,   ML.VALUE                                    AS ORIGINALLOTID
						,   CML.CONSUMABLEDEFID
						,   CD.CONSUMABLEDEFNAME
						,	CD.CONSUMABLEDEFVERSION
						,	COALESCE(DC1.DICTIONARYNAME, SC.MEANING)	AS MATERIALTYPE
						,	3							    AS SEQ
					FROM    LOTLEVEL                        LV
					LEFT  JOIN  MTM_CONSUMEMATERIALLOT      CML ON  LV.LOTID = CML.LOTID
																AND LV.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
					-- INNER JOIN  MTM_CONSUMABLELOT           CL  ON  CML.MATERIALLOTID = CL.CONSUMABLELOTID
					INNER JOIN  BAS_CONSUMABLEDEFINITION    CD  ON  CML.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
					LEFT  JOIN  CMD_LOOKUP_VALUES 			SC	ON 	CD.CONSUMABLECLASSID = SC.LOOKUP_CODE
																AND SC.LOOKUP_TYPE = 'MaterialType'
					LEFT  JOIN  CMD_DICTIONARY				DC1 ON 	SC.DICTIONARYID = DC1.DICTIONARYID
																AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					CROSS  JOIN 
                    (
                        SELECT  *
                        FROM    UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')
                    )   ML	
                    CROSS JOIN RESULTMAX    				RM
                    WHERE   RNK = 1
                    AND     TO_NUMBER(LV.USERSEQUENCE) <![CDATA[<=]]> RM.MAX_SEQUENCE
					AND     CD.CONSUMABLECLASSID NOT IN ('SubAssembly')
					UNION ALL
					SELECT	DISTINCT
							LV.LOTID
						,   ML.VALUE                                    AS ORIGINALLOTID
						,   CML.CONSUMABLEDEFID
						,	CD.CONSUMABLEDEFNAME
						,	CD.CONSUMABLEDEFVERSION
						,	COALESCE(DC1.DICTIONARYNAME, SC.MEANING)	AS MATERIALTYPE
						,	2							    AS SEQ	
					FROM    LOTLEVEL                        LV
					INNER JOIN  MTM_CONSUMEMATERIALLOT       CML ON  LV.LOTID = CML.LOTID
																AND  LV.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
					--INNER JOIN  MTM_CONSUMABLELOT            CL  ON  CML.MATERIALLOTID = CL.CONSUMABLELOTID
					INNER JOIN  BAS_CONSUMABLEDEFINITION     CD  ON  CML.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
					LEFT  JOIN  CMD_LOOKUP_VALUES			 SC	 ON  CD.CONSUMABLECLASSID = SC.LOOKUP_CODE
																AND SC.LOOKUP_TYPE = 'MaterialType'
					LEFT  JOIN  CMD_DICTIONARY				DC1 ON 	SC.DICTIONARYID = DC1.DICTIONARYID
																AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					CROSS  JOIN 
                    (
                        SELECT  *
                        FROM    UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')
                    )   ML
					CROSS JOIN RESULTMAX    				RM
                    WHERE   RNK = 1
                    AND     TO_NUMBER(LV.USERSEQUENCE) <![CDATA[<=]]> RM.MAX_SEQUENCE
					AND     CD.CONSUMABLECLASSID = 'SubAssembly'
					UNION ALL
					SELECT
							L.LOTID
						,	L.LOTID		AS ORIGINALLOTID
						, 	PD.PRODUCTDEFID								AS CONSUMABLEDEFID
						,	PD.PRODUCTDEFNAME							AS CONSUMABLEDEFNAME
						,	PD.PRODUCTDEFVERSION 						AS CONSUMABLEDEFVERSION
						,	COALESCE(DC1.DICTIONARYNAME, SC.MEANING)	AS MATERIALTYPE
						,	1											AS SEQ
					FROM 	PCM_LOT						L
					INNER JOIN BAS_PRODUCTDEFINITION	PD	ON 	L.PRODUCTDEFID = PD.PRODUCTDEFID
															AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
					LEFT  JOIN  CMD_LOOKUP_VALUES		SC	ON 	PD.PRODUCTCLASSID = SC.LOOKUP_CODE
															AND SC.LOOKUP_TYPE = 'MaterialType'
					LEFT  JOIN  CMD_DICTIONARY			DC1 ON 	SC.DICTIONARYID = DC1.DICTIONARYID
															AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					WHERE	1 = 1
					AND		EXISTS
							(
								SELECT	1
								FROM	UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')	T
								WHERE	L.LOTID = T.VALUE
							)
				) CM
				ORDER BY ORIGINALLOTID, SEQ
	</select>

	<select id="selectDefectReasonConsumableLot" parameterType="map" resultType="hashmap">
		/* GetDefectReasonConsumableLot 10002 */
		
					WITH LOTGENEAL AS
					(
						SELECT  LOTID
							,   PARENTLOTID
							,	ORIGINALLOTID
							,   LLEVEL AS LEVEL_
						FROM FN_LOTGENEAL_BOTTOMUP_MULTI(#{LOTID})
					) ,
					LOTLEVEL AS
					(
						SELECT 	Z.*
							,   RANK() OVER (PARTITION BY TO_NUMBER(Z.USERSEQUENCE) ORDER BY LEVEL_) AS RNK
						FROM
						(
						SELECT  GL.*
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFID
	                                ELSE PAT.PROCESSDEFID
	                                END AS PROCESSDEFID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFVERSION
	                                ELSE PAT.PROCESSDEFVERSION
	                                END AS PROCESSDEFVERSION
	                            ,   WR.PROCESSSEGMENTID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.USERSEQUENCE
	                                ELSE PAT.USERSEQUENCE
	                                END AS USERSEQUENCE
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFID
	                                END AS SUBPROCESSDEFID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFVERSION
	                                END AS SUBPROCESSDEFVERSION
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSSEGMENTID
	                                END AS SUBPROCESSSEGMENTID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.USERSEQUENCE
	                                ELSE '0' END AS SUBUSERSEQUENCE
	                            ,   WR.WORKCOUNT
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' OR NVL(WR.WORKCOUNT, 0) > 0 THEN 'IsRework'
	                                ELSE 'Normal' END AS ISREWORK
	                            ,   WR.TXNHISTKEY
	                        FROM    LOTGENEAL           		GL
	                        LEFT OUTER JOIN PCM_LOTWORKRESULT    WR  ON  GL.LOTID = WR.LOTID
	                                                                AND NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
	                        INNER JOIN PCM_LOT           		L   ON  WR.LOTID = L.LOTID
	                        LEFT  JOIN BAS_PROCESSPATH   		PAT ON  regexp_substr(WR.PROCESSPATHSTACK, '[^.]+') = PAT.PROCESSPATHID
	                        WHERE   1 = 1
	                    ) Z
	                    ORDER BY LEVEL_
					),
					RESULTMAX AS
                    (
                        SELECT  GL.LOTID
                            ,   GL.LEVEL_
                            ,   MIN(TO_NUMBER(WR.USERSEQUENCE))   AS MIN_SEQUENCE
                            ,   MAX(TO_NUMBER(WR.USERSEQUENCE))   AS MAX_SEQUENCE
                        FROM    LOTGENEAL           GL
                        LEFT JOIN PCM_LOTWORKRESULT  WR  ON  GL.LOTID = WR.LOTID
                        WHERE   GL.LEVEL_ = 1
                        GROUP BY GL.LOTID
                            ,   GL.LEVEL_
                    )
                    SELECT	DISTINCT
						ML.VALUE					AS LOTID
					--,	LV.LOTID					AS PARENTLOTID
					,	CML.MATERIALLOTID			AS CONSUMABLELOTID
					,	CML.CONSUMABLEDEFID			AS REASONCONSUMABLEDEFIDVERSION
					,	CML.CONSUMABLEDEFID || '|' || CML.CONSUMABLEDEFVERSION	AS SPLITCONSUMABLEDEFIDVERSION
				FROM    LOTLEVEL                    LV
				INNER JOIN MTM_CONSUMEMATERIALLOT	CML	ON	LV.LOTID = CML.LOTID
														AND LV.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
				--INNER JOIN MTM_CONSUMABLELOT			CL	ON 	CML.MATERIALLOTID = CL.CONSUMABLELOTID
				LEFT  JOIN BAS_PRODUCTDEFINITION		PD	ON	CML.CONSUMABLEDEFID = PD.PRODUCTDEFID
														AND CML.CONSUMABLEDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT  JOIN BAS_CONSUMABLEDEFINITION	CD	ON	CML.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
														AND CML.CONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION
														AND	NVL(CD.ISLOTMNG, 'N') = 'Y'
				CROSS JOIN
				(
					SELECT *
					FROM 	UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')
				) ML
				CROSS JOIN RESULTMAX    			RM
                WHERE   RNK = 1
                AND     TO_NUMBER(LV.USERSEQUENCE) <![CDATA[<=]]> RM.MAX_SEQUENCE
				AND     CD.CONSUMABLECLASSID IN ('SubAssembly', 'RawMaterial')
			<if test="REASONCONSUMABLEDEFID != null and REASONCONSUMABLEDEFID !=''"> 
				AND 	CML.CONSUMABLEDEFID = #{REASONCONSUMABLEDEFID}
			</if>
			<if test="REASONCONSUMABLEDEFVERSION != null and REASONCONSUMABLEDEFVERSION !=''"> 
				AND 	CML.CONSUMABLEDEFVERSION = #{REASONCONSUMABLEDEFVERSION}
			</if>
				UNION ALL
				SELECT  L.LOTID
                    ,   L.LOTID          	AS CONSUMABLELOTID
                    ,   PD.PRODUCTDEFID	  	AS REASONCONSUMABLEDEFIDVERSION
                    ,	PD.PRODUCTDEFID || '|' || PD.PRODUCTDEFVERSION	AS SPLITCONSUMABLEDEFIDVERSION
                FROM    PCM_LOT                	L
                INNER JOIN BAS_PRODUCTDEFINITION PD  ON  L.PRODUCTDEFID = PD.PRODUCTDEFID
                                                    AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
                WHERE   EXISTS
                		(
                			SELECT	1
                			FROM	UFN_SELECTSTRINGTOSPLIT(#{LOTID}, ',')	T
                			WHERE	L.LOTID = T.VALUE
                		)
            <if test="REASONCONSUMABLEDEFID != null and REASONCONSUMABLEDEFID !=''"> 
				AND 	PD.PRODUCTDEFID = #{REASONCONSUMABLEDEFID}
			</if>
			<if test="REASONCONSUMABLEDEFVERSION != null and REASONCONSUMABLEDEFVERSION !=''"> 
				AND 	PD.PRODUCTDEFVERSION = #{REASONCONSUMABLEDEFVERSION}
			</if>
	</select>
	
	<select id="selectDefectReasonProcesssegment" parameterType="map" resultType="hashmap">
		/* GetDefectReasonProcesssegment 10002 */
		
					WITH LOTGENEAL AS
					(
						SELECT	DISTINCT
								LOTID
							,   PARENTLOTID
							,	ORIGINALLOTID
							,   LLEVEL AS LEVEL_
						FROM FN_LOTGENEAL_BOTTOMUP_MULTI(#{LOTID})
					),
					LOTLEVEL AS
					(
						SELECT Z.*
                            ,   RANK() OVER (PARTITION BY TO_NUMBER(Z.USERSEQUENCE) ORDER BY LEVEL_) AS RNK
                        FROM
                        (
                            SELECT  GL.*
                            ,   WR.PRODUCTDEFID
                                ,   WR.PRODUCTDEFVERSION
                                ,   WR.AREAID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFID
	                                ELSE PAT.PROCESSDEFID
	                                END AS PROCESSDEFID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFVERSION
	                                ELSE PAT.PROCESSDEFVERSION
	                                END AS PROCESSDEFVERSION
	                            ,   WR.PROCESSSEGMENTID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'N' THEN WR.USERSEQUENCE
	                                ELSE PAT.USERSEQUENCE
	                                END AS USERSEQUENCE
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFID
	                                END AS SUBPROCESSDEFID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFVERSION
	                                END AS SUBPROCESSDEFVERSION
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSSEGMENTID
	                                END AS SUBPROCESSSEGMENTID
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' THEN WR.USERSEQUENCE
	                                ELSE '0' END AS SUBUSERSEQUENCE
	                            ,   WR.WORKCOUNT
	                            ,   CASE WHEN NVL(WR.ISREWORK, 'N') = 'Y' OR NVL(WR.WORKCOUNT, 0) > 0 THEN 'IsRework'
	                                ELSE 'Normal' END AS ISREWORK
	                            ,   WR.TXNHISTKEY
	                        FROM    LOTGENEAL           		GL
	                        LEFT OUTER JOIN PCM_LOTWORKRESULT    WR  ON  GL.LOTID = WR.LOTID
	                                                                AND NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
	                        INNER JOIN PCM_LOT           		L   ON  WR.LOTID = L.LOTID
	                        LEFT  JOIN BAS_PROCESSPATH   		PAT ON  regexp_substr(WR.PROCESSPATHSTACK, '[^.]+') = PAT.PROCESSPATHID
	                        WHERE   1 = 1
                        ) Z
                        ORDER BY LEVEL_
					),
					RESULTMAX AS
                    (
                        SELECT  GL.LOTID
                            ,   GL.LEVEL_
                            ,   MIN(TO_NUMBER(WR.USERSEQUENCE))   AS MIN_SEQUENCE
                            ,   MAX(TO_NUMBER(WR.USERSEQUENCE))   AS MAX_SEQUENCE
                        FROM    LOTGENEAL           GL
                        LEFT JOIN PCM_LOTWORKRESULT  WR  ON  GL.LOTID = WR.LOTID
                        WHERE   GL.LEVEL_ = 1
                        GROUP BY GL.LOTID
                            ,   GL.LEVEL_
                    ),
					MATERIALLOTLIST AS
					(
						SELECT	DISTINCT
								CML.MATERIALLOTID
							,	CML.CONSUMABLEDEFID
							,	CML.CONSUMABLEDEFVERSION
							,	BOM.MATERIALTYPE
						FROM	LOTGENEAL					LG
						INNER JOIN MTM_CONSUMEMATERIALLOT	CML	ON	LG.LOTID = CML.LOTID
																AND	CML.MATERIALTYPE = 'Consumable'
						INNER JOIN BAS_CONSUMABLEDEFINITION	CD	ON	CML.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
																AND	CML.CONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION
																AND	COALESCE(CD.ISLOTMNG, 'N') = 'Y'
						INNER JOIN BAS_BILLOFMATERIAL		BOM	ON	CML.PRODUCTDEFID = BOM.PRODUCTDEFID
																AND	CML.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
																AND	CML.PROCESSDEFID = BOM.PROCESSDEFID
																AND	CML.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
																AND	CD.CONSUMABLEDEFID = BOM.MATERIALDEFID
																AND	CD.CONSUMABLEDEFVERSION = BOM.MATERIALDEFVERSION
																AND	COALESCE(BOM.WIPSUPPLYTYPE, '') != 'OperationPull'
					),	
					MATERIALLOTGENEAL AS
					(
						SELECT	DISTINCT
								LOTID
							,	PARENTLOTID
							,	ORIGINALLOTID
							,	LLEVEL AS LEVEL_
						FROM	FN_LOTGENEAL_BOTTOMUP_MULTI(
											( SELECT LISTAGG(MLL.MATERIALLOTID, ',') WITHIN GROUP(ORDER BY MLL.MATERIALLOTID) 
											    FROM MATERIALLOTLIST MLL 
											   WHERE MLL.MATERIALTYPE = 'Product'
											))
					),	
					MATERIALLOTLEVEL AS
					(
						SELECT  Z.*
                            ,   RANK() OVER (PARTITION BY TO_NUMBER(Z.USERSEQUENCE) ORDER BY LEVEL_) AS RNK
                        FROM
                        (
                            SELECT
                                    LG.*
                                ,   WR.PRODUCTDEFID
                                ,   WR.PRODUCTDEFVERSION
                                ,   WR.AREAID
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFID
                                    ELSE PAT.PROCESSDEFID
                                    END AS PROCESSDEFID
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'N' THEN WR.PROCESSDEFVERSION
                                    ELSE PAT.PROCESSDEFVERSION
                                    END AS PROCESSDEFVERSION
                                ,   WR.PROCESSSEGMENTID
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'N' THEN WR.USERSEQUENCE
                                    ELSE PAT.USERSEQUENCE
                                    END AS USERSEQUENCE
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFID
                                    END AS SUBPROCESSDEFID
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSDEFVERSION
                                    END AS SUBPROCESSDEFVERSION
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'Y' THEN WR.PROCESSSEGMENTID
                                    END AS SUBPROCESSSEGMENTID
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'Y' THEN WR.USERSEQUENCE
                                    ELSE '0' END AS SUBUSERSEQUENCE
                                ,   WR.WORKCOUNT
                                ,   CASE WHEN COALESCE(WR.ISREWORK, 'N') = 'Y' OR COALESCE(WR.WORKCOUNT, 0) > 0 THEN 'IsRework'
                                    ELSE 'Normal' END AS ISREWORK
                                ,   WR.TXNHISTKEY
                            FROM    MATERIALLOTGENEAL           LG
                            LEFT OUTER JOIN PCM_LOTWORKRESULT    WR  ON  LG.LOTID = WR.LOTID
                                                                    AND COALESCE(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
                            INNER JOIN PCM_LOT           L   ON  WR.LOTID = L.LOTID
                            LEFT  JOIN BAS_PROCESSPATH   PAT ON  regexp_substr(WR.PROCESSPATHSTACK, '[^.]+') = PAT.PROCESSPATHID
                            WHERE   1 = 1
                        ) Z
                        ORDER BY LEVEL_
					)
					SELECT DISTINCT
						P.PRODUCTDEFID || '|' || P.PRODUCTDEFVERSION		AS SPLITCONSUMABLEDEFIDVERSION
					,	P.PRODUCTDEFID										AS REASONCONSUMABLEDEFIDVERSION
					,	P.LOTID												AS REASONCONSUMABLELOTID
					,	P.PROCESSSEGMENTID
					,	NVL(PSN.DICTIONARYNAME, PS.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
					,	TO_NUMBER(P.USERSEQUENCE)									AS USERSEQUENCE
					,	P.AREAID
					,	NVL(AN.DICTIONARYNAME, A.AREANAME)	AS AREANAME
					,	P.SEQ 
					FROM 
					(
						SELECT  LL.ORIGINALLOTID                AS LOTID
	                        ,   LL.PARENTLOTID
	                        ,   LL.ORIGINALLOTID
	                        ,   LL.LEVEL_
	                        ,   LL.PRODUCTDEFID
	                        ,   LL.PRODUCTDEFVERSION
	                        ,   LL.AREAID
	                        ,   LL.PROCESSDEFID
	                        ,   LL.PROCESSDEFVERSION
	                        ,   LL.PROCESSSEGMENTID
	                        ,   LL.USERSEQUENCE
	                        ,   LL.SUBPROCESSDEFID
	                        ,   LL.SUBPROCESSDEFVERSION
	                        ,   LL.SUBPROCESSSEGMENTID
	                        ,   LL.SUBUSERSEQUENCE
	                        ,   LL.WORKCOUNT
	                        ,   LL.ISREWORK
	                        ,   LL.TXNHISTKEY
	                        ,   LL.RNK
	                        ,   1              AS SEQ
	                    FROM    LOTLEVEL            LL
	                    WHERE   1 = 1
	                    UNION ALL
	                    SELECT  MLL.*
	                        ,   11             AS SEQ
	                    FROM    MATERIALLOTLEVEL    MLL
	                    CROSS JOIN RESULTMAX    RM
	                    WHERE   MLL.RNK = 1
	                    AND     TO_NUMBER(MLL.USERSEQUENCE) <![CDATA[<=]]> RM.MAX_SEQUENCE
                    ) P
                    INNER JOIN BAS_PRODUCTDEFINITION	PD	ON	P.PRODUCTDEFID = PD.PRODUCTDEFID
														AND	P.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
					INNER JOIN BAS_PROCESSSEGMENT	PS	ON	P.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
					LEFT OUTER JOIN CMD_DICTIONARY	PSN	ON	PS.PROCESSSEGMENTNAME = PSN.DICTIONARYID
														AND	PSN.LANGUAGETYPE = #{LANGUAGETYPE}
					INNER JOIN BAS_AREA				A	ON	P.AREAID = A.AREAID
					LEFT OUTER JOIN CMD_DICTIONARY	AN	ON	A.AREANAME = AN.DICTIONARYID
														AND	AN.LANGUAGETYPE = #{LANGUAGETYPE}
					WHERE 	1 = 1
				<if test="REASONCONSUMABLEDEFID != null and REASONCONSUMABLEDEFID !=''"> 
					AND 	P.PRODUCTDEFID = #{REASONCONSUMABLEDEFID}
				</if>
				<if test="REASONCONSUMABLEDEFVERSION != null and REASONCONSUMABLEDEFVERSION !=''"> 
					AND 	P.PRODUCTDEFVERSION = #{REASONCONSUMABLEDEFVERSION}
				</if>
				<if test="REASONCONSUMABLELOTID != null and REASONCONSUMABLELOTID !=''"> 
					AND 	P.LOTID = #{REASONCONSUMABLELOTID}
				</if>
					ORDER BY P.SEQ
							,P.LOTID
							,TO_NUMBER(P.USERSEQUENCE
							)
	</select>

	
    <select id="SelectSelfInspectHisForFinalInspect" parameterType="map" resultType="hashmap">
    	/* SelectSelfInspectHisForFinalInspect 10001 */
    	-- ID : SelectSelfInspectHisForFinalInspect
				-- Version:10001
				WITH WORKRESULT AS
			    (
					SELECT * FROM FN_GETLOTHISTORY4(#{LOTID},#{LANGUAGETYPE})
				),
				INSPECTIONRESULT AS
				(
					SELECT	LR.LOTID
						,	LR.USERSEQUENCE
						,	LR.PROCESSDEFID
						,	LR.PROCESSDEFVERSION
						,	LR.PROCESSSEGMENTID
						,	LR.WORKCOUNT
						,	IR.AREAID
						,	IR.INSPECTIONDEFID
						,	IR."degree"
						,	IR.INSPECTIONDATE
						,	NVL(US.USERNAME, IW.INSPECTIONUSER)	AS INSPECTIONUSER
						,	IR.INSPECTIONQTY
						,	IR.SPECOUTQTY
						,	CEIL(IR.INSPECTIONQTY / L.PANELPERQTY)		AS INSPECTPNLQTY
					FROM 	WORKRESULT				LR
					INNER  JOIN PCM_LOT              L   ON  LR.LOTID = L.LOTID
					INNER  JOIN QAM_INSPECTIONRESULT	IR	ON 	LR.LOTID = IR.RESOURCEID
														AND LR.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
														AND IR.INSPECTIONDEFID IN ('SelfInspectionTake', 'SelfInspectionShip', 'AOIInspection', 'BBTInspection')
					LEFT   JOIN PCM_INSPECTIONWORKER	IW	ON 	IR.RESOURCEID = IW.RESOURCEID
														AND IR.PROCESSSEGMENTID = IW.PROCESSSEGMENTID
														AND IR.WORKCOUNT = IW.WORKCOUNT
														AND IR."degree" = IW."DEGREE"
														AND IR.INSPECTIONDEFID = IW.INSPECTIONDEFID
					LEFT  JOIN CMD_USER_V			US 	ON 	IW.INSPECTIONUSER = US.USERID
				),
				DEFECTRESULT AS
				(
					SELECT  IR.LOTID
						,	IR.USERSEQUENCE
						,	IR.PROCESSSEGMENTID
						,	IR.WORKCOUNT
						,   IR.INSPECTIONDEFID
						,	IR."degree"
						,	SUM(ID.DEFECTQTY)		AS DEFECTQTY
					FROM  INSPECTIONRESULT			IR
					LEFT JOIN QAM_INSPECTIONDEFECT	ID 	ON 	IR.LOTID = ID.RESOURCEID
														AND IR.INSPECTIONDEFID = ID.RESOURCETYPE
														AND IR.PROCESSSEGMENTID = ID.PROCESSRELNO
														AND IR."degree" = ID."DEGREE"
					GROUP BY IR.LOTID
						,	IR.USERSEQUENCE
						,	IR.PROCESSSEGMENTID
						,	IR.WORKCOUNT
						,   IR.INSPECTIONDEFID
						,	IR."degree"
				)
				SELECT  IR.LOTID
					,	IR.USERSEQUENCE
					,	IR.PROCESSDEFID
					,	IR.PROCESSDEFVERSION
					,	IR.PROCESSSEGMENTID
					,	NVL(DC1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
					,	IR.WORKCOUNT
					,	IR.AREAID
					,	NVL(DC2.DICTIONARYNAME, AR.AREANAME)			AS AREANAME
					,	IR.INSPECTIONDEFID
					,	NVL(DC3.DICTIONARYNAME, IDF.INSPECTIONDEFNAME)	AS INSPECTIONDEFNAME
					,	IR."degree"
					,	TO_CHAR(IR.INSPECTIONDATE, 'YYYY-MM-DD HH24:MI:SS')    INSPECTIONDATE
					,	IR.INSPECTIONUSER
					,	IR.INSPECTIONQTY
					,	IR.INSPECTPNLQTY
					,	NVL(DR.DEFECTQTY, IR.SPECOUTQTY)					AS DEFECTQTY
					,	((NVL(DR.DEFECTQTY, 0) / IR.INSPECTIONQTY) * 100) 	AS DEFECTRATE
				FROM 	INSPECTIONRESULT 			IR
				LEFT JOIN DEFECTRESULT 				DR 	ON 	IR.LOTID = DR.LOTID
														AND IR.USERSEQUENCE = DR.USERSEQUENCE
														AND IR.PROCESSSEGMENTID = DR.PROCESSSEGMENTID
														AND IR.WORKCOUNT = DR.WORKCOUNT
														AND IR.INSPECTIONDEFID = DR.INSPECTIONDEFID
														AND IR."degree" = DR."degree"
				LEFT JOIN BAS_PROCESSSEGMENT			SG 	ON 	IR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT JOIN CMD_DICTIONARY				DC1	ON 	SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
														AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT JOIN BAS_AREA					AR	ON 	IR.AREAID = AR.AREAID
				LEFT JOIN CMD_DICTIONARY				DC2	ON 	AR.AREANAME = DC2.DICTIONARYID
														AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT JOIN BAS_INSPECTIONDEFINITION	IDF	ON 	IR.INSPECTIONDEFID = IDF.INSPECTIONDEFID
				LEFT JOIN cmd_DICTIONARY				DC3	ON 	IDF.INSPECTIONDEFNAME = DC3.DICTIONARYID
														AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
			<if test="INSPECTIONDEFID != null and INSPECTIONDEFID !=''"> 
				WHERE IR.INSPECTIONDEFID = #{INSPECTIONDEFID}
			</if>								
				ORDER BY TO_NUMBER(IR.USERSEQUENCE), IR."degree"
				
    </select>
    
    <select id="SelectLotHistoryInspectionDefectPop" parameterType="map" resultType="hashmap">
    	/* SelectLotHistoryInspectionDefectPop 10001 */
    	SELECT  WR.LOTID
                    ,   WR.PROCESSDEFID
                    ,   WR.PROCESSDEFVERSION
                    ,   WR.PROCESSSEGMENTID
                    ,   COALESCE(DT3.DICTIONARYNAME, SG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
                    ,   WR.USERSEQUENCE
                    ,   WR.WORKCOUNT
                    ,   WR.AREAID
                    ,   COALESCE(DT4.DICTIONARYNAME, AR.DESCRIPTION)        AS AREANAME
                    ,	IR.INSPECTIONDEFID
                    ,   COALESCE(DC9.DICTIONARYNAME, IDF.INSPECTIONDEFNAME) AS INSPECTIONDEFNAME
                    ,   IR."degree"
                    ,   ID.DEFECTCODE
                    ,   COALESCE(DT1.DICTIONARYNAME, DC.DEFECTCODENAME)     AS DEFECTCODENAME
                    ,   ID.QCSEGMENTID
                    ,   COALESCE(DT2.DICTIONARYNAME, QS.QCSEGMENTNAME)      AS QCSEGMENTNAME
                    ,   ID.DEFECTQTY
                    ,   ID.REASONCONSUMABLEDEFID
                    ,   CASE WHEN COALESCE(ID.REASONCONSUMABLEDEFID, '') NOT IN ('') THEN
                            CASE WHEN PD.PRODUCTDEFID IS NOT NULL THEN 
                                COALESCE(DT5.DICTIONARYNAME, PD.PRODUCTDEFNAME)
                            ELSE 
                                COALESCE(DT6.DICTIONARYNAME, CD.DESCRIPTION)
                            END
                        ELSE NULL END                                       AS REASONCONSUMABLEDEFNAME
                    ,   ID.REASONCONSUMABLELOTID
                    ,   COALESCE(DT7.DICTIONARYNAME, SG2.PROCESSSEGMENTNAME) AS REASONSEGMENT
                    ,   ID.REASONAREAID
                    ,   COALESCE(DT8.DICTIONARYNAME, AR2.DESCRIPTION)       AS REASONAREA
                    ,	ID.FILERESOURCEID
                    ,   AF.OC_FILE_NM 
                    ,   AF.ATCH_FILE_GUID 
                FROM   PCM_LOTWORKRESULT            WR
                INNER JOIN QAM_INSPECTIONRESULT      IR  ON  WR.LOTID = IR.RESOURCEID
                                                        AND WR.PROCESSDEFID = IR.PROCESSDEFID
                                                        AND WR.PROCESSDEFVERSION = IR.PROCESSDEFVERSION
                                                        AND WR.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
                                                        AND WR.WORKCOUNT = IR.WORKCOUNT
                INNER JOIN QAM_INSPECTIONDEFECT      ID  ON  IR.RESOURCEID = ID.RESOURCEID
                                                        AND IR.INSPECTIONDEFID = ID.RESOURCETYPE 
                                                        AND IR.PROCESSSEGMENTID = ID.PROCESSRELNO
                                                        AND IR."degree" = ID."DEGREE"
                LEFT  JOIN (SELECT LISTAGG(A.OC_FILE_NM,',') WITHIN GROUP (ORDER BY A.ATCH_FILE_ID)  AS OC_FILE_NM
								, LISTAGG(A.ATCH_FILE_GUID ,',') WITHIN GROUP (ORDER BY A.ATCH_FILE_ID)  AS ATCH_FILE_GUID
								, ATCH_FILE_ID
							FROM CMD_ATCH_FILES A
							GROUP BY ATCH_FILE_ID
							)  AF  					 	 ON AF.ATCH_FILE_ID = ID.FILERESOURCEID
                LEFT  JOIN BAS_DEFECTCODE            DC  ON  ID.DEFECTCODE = DC.DEFECTCODE
                LEFT  JOIN CMD_DICTIONARY            DT1 ON  DC.DICTIONARYID = DT1.DICTIONARYID
                                                        AND DT1.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN QAM_QCSEGMENTDEFINITION   QS  ON  ID.QCSEGMENTID = QS.QCSEGMENTID
                LEFT  JOIN CMD_DICTIONARY            DT2 ON  QS.QCSEGMENTNAME = DT2.DICTIONARYID
                                                        AND DT2.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  WR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY            DT3 ON  SG.PROCESSSEGMENTNAME = DT3.DICTIONARYID
                                                        AND DT3.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA                  AR  ON  WR.AREAID = AR.AREAID
                LEFT  JOIN CMD_DICTIONARY            DT4 ON  AR.AREANAME = DT4.DICTIONARYID
                                                        AND DT4.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_PRODUCTDEFINITION     PD  ON  ID.REASONCONSUMABLEDEFID = PD.PRODUCTDEFID
                                                        AND ID.REASONCONSUMABLEDEFVERSION = PD.PRODUCTDEFVERSION
                LEFT  JOIN CMD_DICTIONARY            DT5 ON  PD.PRODUCTDEFNAME = DT5.DICTIONARYID
                                                        AND DT5.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_CONSUMABLEDEFINITION  CD  ON  ID.REASONCONSUMABLEDEFID = CD.CONSUMABLEDEFID
                                                        AND ID.REASONCONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION
                LEFT  JOIN CMD_DICTIONARY            DT6 ON  CD.CONSUMABLEDEFNAME = DT6.DICTIONARYID
                                                        AND DT6.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_PROCESSSEGMENT        SG2  ON ID.REASONSEGMENTID = SG2.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY            DT7 ON  SG2.PROCESSSEGMENTNAME = DT7.DICTIONARYID
                                                        AND DT7.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA                  AR2 ON  ID.REASONAREAID = AR2.AREAID
                LEFT  JOIN CMD_DICTIONARY            DT8 ON  AR2.AREANAME = DT8.DICTIONARYID
                                                        AND DT8.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT JOIN BAS_INSPECTIONDEFINITION   IDF ON  IR.INSPECTIONDEFID = IDF.INSPECTIONDEFID
                LEFT JOIN CMD_DICTIONARY             DC9 ON  IDF.INSPECTIONDEFNAME = DC9.DICTIONARYID
                                                        AND DC9.LANGUAGETYPE = #{LANGUAGETYPE}
                WHERE   WR.LOTID = #{LOTID}
                AND     WR.PROCESSDEFID = #{PROCESSDEFID}
                AND     WR.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
 				AND     WR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
                AND     WR.WORKCOUNT = #{WORKCOUNT}
                AND     IR.INSPECTIONDEFID = #{INSPECTIONDEFID}
                AND     IR."degree" = #{DEGREE}
    </select>
    
    <select id="selectCheckLotInspection" parameterType="map" resultType="hashmap">
    /* GetCheckLotInspection 10003 */
    	SELECT
						NVL(ISR.INSPECTIONCLASSID, #{INSPECTIONDEFID})	AS INSPECTIONDEFID
					,	L.PROCESSSEGMENTID
					,	L.PROCESSSTATE
					,	L.ISHOLD
					,   L.LOTID
					,	ISR.ISREQUIRED AS ISR_ISREQUIRED
					,   IS8.ISREQUIRED AS IS8_ISREQUIRED
                    ,   IS9.ISREQUIRED AS IS9_ISREQUIRED
                    ,   CASE WHEN (CASE WHEN ISR.ISREQUIRED IS NULL THEN 
                             CASE WHEN IS8.ISREQUIRED IS NULL THEN
                                        CASE WHEN IS9.ISREQUIRED IS NULL THEN 'N'
                                             ELSE IS9.ISREQUIRED
                                             END
                                  ELSE IS8.ISREQUIRED 
                                  END
                        ELSE ISR.ISREQUIRED
                        END) = 'Y' AND LW.MEASUREINSPRESULT IS NULL THEN 'N'
                            ELSE 'Y'
                        END                             AS CHECKINSPECTION
				FROM	PCM_LOT							L
				INNER JOIN BAS_PROCESSSEGMENT			PS	ON	L.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				INNER JOIN PCM_LOTWORKRESULT             LW  ON  L.LOTID = LW.LOTID
				                                            AND L.PROCESSSEGMENTID = LW.PROCESSSEGMENTID
				                                            AND L.WORKCOUNT = LW.WORKCOUNT															
				LEFT OUTER JOIN BAS_INSPECTIONSEGMENTREL ISR ON	L.PROCESSSEGMENTID = ISR.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = ISR.PROCESSSEGMENTVERSION
															AND	ISR.INSPECTIONCLASSID =#{INSPECTIONDEFID}
															AND	ISR.VALIDSTATE = 'Valid'
				LEFT OUTER JOIN BAS_INSPECTIONSEGMENTREL IS8 ON  PS.PROCESSSEGMENTCLASSID = IS8.PROCESSSEGMENTID
                                                            AND IS8.PROCESSSEGMENTVERSION = '*'
                                                            AND IS8.INSPECTIONCLASSID = 'OperationInspection'                                       
                                                            AND IS8.PROCESSSEGMENTTYPE  = 'MiddleProcessSegmentClass'
                LEFT OUTER JOIN BAS_PROCESSSEGMENTCLASS  TPS ON  SUBSTR(PS.PROCESSSEGMENTCLASSID,1,2) = TPS.PROCESSSEGMENTCLASSID  
                                                            AND TPS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
                LEFT OUTER JOIN BAS_INSPECTIONSEGMENTREL IS9 ON  TPS.PROCESSSEGMENTCLASSID = IS9.PROCESSSEGMENTID   
                                                            AND IS9.PROCESSSEGMENTVERSION = '*'
                                                            AND IS9.INSPECTIONCLASSID = 'OperationInspection'                                       
                                                            AND IS9.PROCESSSEGMENTTYPE  = 'TopProcessSegmentClass'											
				WHERE	1 = 1
				AND		L.LOTID = #{LOTID}
    </select>
    
    
    <!-- 유저 리스트를 조회한다  -->
    <select id="getUserList" parameterType="map" resultType="hashmap">
			-- Id : GetUserList
			-- Version : 10002
			SELECT 
					USER_ID      WORKERID
				,	USER_NM       WORKERNAME 
				,	EMAIL_ADDR
				,	MBPH_NO 
			FROM 	CMD_USERS
			WHERE 	1 = 1
			
		    <if test="USERIDNAME != null and USERIDNAME !='' "> 
				AND (UPPER(USER_ID) LIKE '%' || UPPER(#{USERIDNAME}) || '%'
				 OR UPPER(USER_NM) LIKE '%' || UPPER(#{USERIDNAME}) || '%' )
			</if>
			
		    <if test="PLANTID != null and PLANTID !='' "> 
				AND	PLANTID = #{PLANTID}
		    </if>
		    
			<if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
				AND	ENTERPRISEID = #{ENTERPRISEID}
			</if>
		
			<if test="AREAID != null and AREAID !='' "> 
				AND	AREAID = #{AREAID}
			</if>
			
			ORDER BY USER_NM ASC
    </select>
    
    <!-- rocess 4-Step Info User Control에서 작업자 팝업 데이터를 조회 한다.  -->
    <select id="getWorkerByProcess" parameterType="map" resultType="hashmap">
		-- Id : getWorkerByProcess
		-- Version : 10001

			SELECT
					CASE WHEN  NVL(AW.USERID,'')='' OR AW.USERID= '*' THEN AW.WORKERNAME
					     ELSE  AW.USERID
					     END  		AS WORKERID
				,	NVL(U.USER_NM,AW.WORKERNAME)		AS WORKERNAME
<!-- 				,	AW.EMPLOYEENO
				,	AW.DEPARTMENT -->
				,	U.USER_ID as EMPLOYEENO
				,	d.dept_nm as DEPARTMENT
				,	NVL(DC1.DICTIONARYNAME, AW.OWNTYPE) AS OWNTYPE
				,	NVL(DC2.DICTIONARYNAME, AW.WORKERTYPE) AS WORKERTYPE
			FROM	BAS_AREAWORKER	AW
			LEFT OUTER JOIN CMD_USERS	U	ON	AW.USERID = U.USER_ID AND U.USE_YN='Y'
			LEFT OUTER JOIN CMD_DEPTS	D	ON	d.dept_cd = U.dept_cd
      LEFT  JOIN  CMD_LOOKUP_VALUES 			SC1	ON 	AW.OWNTYPE = SC1.LOOKUP_CODE
																              AND SC1.LOOKUP_TYPE = 'OwnType'
			LEFT  JOIN  CMD_DICTIONARY				DC1 ON 	SC1.DICTIONARYID = DC1.DICTIONARYID
																        AND DC1.LANGUAGETYPE = 'ko-KR'
      LEFT  JOIN  CMD_LOOKUP_VALUES 			SC2	ON 	AW.WORKERTYPE = SC2.LOOKUP_CODE
																              AND SC2.LOOKUP_TYPE = 'WORKERTYPE'
			LEFT  JOIN  CMD_DICTIONARY				DC2 ON 	SC2.DICTIONARYID = DC2.DICTIONARYID
																        AND DC2.LANGUAGETYPE = 'ko-KR'     
		WHERE	1 = 1
		AND		AW.ENTERPRISEID = #{ENTERPRISEID}
		AND		AW.PLANTID = #{PLANTID}
		AND		AW.AREAID = #{AREAID}
		AND		AW.VALIDSTATE = 'Valid'
		
		
		<if test="TXTWORKERIDNAME != null and TXTWORKERIDNAME !='' ">
			<choose>
				<when test="USERID == null or USERID =='' ">
					AND		AW.WORKERNAME LIKE '%' || UPPER(#{TXTWORKERIDNAME})|| '%' 
				</when>
				<otherwise>
						<choose>
						<!-- 2021-06-08 최성민 추가, 작업자 다중검색문제로 추가함 -->
							<when test="TXTWORKERIDNAME.indexOf(',') >= 0" >
								AND     (
											U.USER_NM IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{TXTWORKERIDNAME},',') )
									OR 	AW.WORKERNAME IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{TXTWORKERIDNAME},',') )
								)
							</when> 
							<otherwise>
										AND		(AW.USERID LIKE '%' || UPPER(#{TXTWORKERIDNAME}) || '%' 
										OR		U.USER_NM LIKE '%' || UPPER(#{TXTWORKERIDNAME}) || '%' 
										OR		AW.WORKERNAME LIKE '%' || UPPER(#{TXTWORKERIDNAME}) || '%' 
										)
							</otherwise>
							</choose>	
				</otherwise>
			</choose>						
		</if>
    </select>
    
    <!-- LOT 정보 조회  -->
    <select id="selectSfLotKey" parameterType="map" resultType="hashmap">
			SELECT 
			    *		  
			FROM 
			PCM_LOT
			WHERE LOTID = #{LOTID}			
    </select>
    
    <!-- 작업장 자원 정보 조회  -->
    <select id="selectMmResourceKey" parameterType="map" resultType="hashmap">
			SELECT 
			    AREAID
			FROM 
			BAS_RESOURCE
			WHERE 1 = 1			
			  AND ENTERPRISEID = #{ENTERPRISEID}	
			  AND PLANTID       = #{PLANTID}	
			  AND RESOURCEID  = #{RESOURCEID}					
    </select>    
    
    <!-- LOT 정보 update  -->    
    <update id="updateSfLotKey" parameterType="map">
			UPDATE PCM_LOT
			SET 
			      MODIFIER = #{MODIFIER}
			    , MODIFIEDTIME = #{MODIFIEDTIME}
			    , LASTTXNHISTKEY = #{LASTTXNHISTKEY}
			    , LASTTXNID = #{LASTTXNID}
			    , LASTTXNUSER = #{LASTTXNUSER}
			    , LASTTXNTIME = SYSDATE			
		    <if test="PRODUCTIONORDERID != null and PRODUCTIONORDERID !='' "> 
				, PRODUCTIONORDERID = #{PRODUCTIONORDERID}
			</if>
		    <if test="LINENO != null and LINENO !='' "> 
				, LINENO = #{LINENO}
			</if>			    
		    <if test="LOTGROUPID != null and LOTGROUPID !='' "> 
				, LOTGROUPID = #{LOTGROUPID}
			</if>			  
		    <if test="LOTNAME != null and LOTNAME !='' "> 
				, LOTNAME = #{LOTNAME}
			</if>			  
		    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
				, ENTERPRISEID = #{ENTERPRISEID}
			</if>			  
		    <if test="PLANTID != null and PLANTID !='' "> 
				, PLANTID = #{PLANTID}
			</if>			  
		    <if test="FACTORYID != null and FACTORYID !='' "> 
				, FACTORYID = #{FACTORYID}
			</if>			  
		    <if test="ORIGINALPLANTID != null and ORIGINALPLANTID !='' "> 
				, ORIGINALPLANTID = #{ORIGINALPLANTID}
			</if>			  
		    <if test="AREAID != null and AREAID !='' "> 
				, AREAID = #{AREAID}
			</if>			  
		    <if test="EQUIPMENTID != null and EQUIPMENTID !='' "> 
				, EQUIPMENTID = #{EQUIPMENTID}
			</if>			  
		    <if test="LOCATIONID != null and LOCATIONID !='' "> 
				, LOCATIONID= #{LOCATIONID}
			</if>			  
		    <if test="RECIPEDEFID != null and RECIPEDEFID !='' "> 
				, RECIPEDEFID = #{RECIPEDEFID}
			</if>			  
		    <if test="RECIPEDEFVERSION != null and RECIPEDEFVERSION !='' "> 
				, RECIPEDEFVERSION = #{RECIPEDEFVERSION}
			</if>			  
		    <if test="RAWMATERIALID != null and RAWMATERIALID !='' "> 
				, RAWMATERIALID = #{RAWMATERIALID}
			</if>			  
		    <if test="ROOTLOTID != null and ROOTLOTID !='' "> 
				, ROOTLOTID = #{ROOTLOTID}
			</if>			  
		    <if test="PARENTLOTID != null and PARENTLOTID !='' "> 
				, PARENTLOTID = #{PARENTLOTID}
			</if>			  
		    <if test="CHILDLOTID != null and CHILDLOTID !='' "> 
				, CHILDLOTID = #{CHILDLOTID}
			</if>			  
		    <if test="CARRIERID != null and CARRIERID !='' "> 
				, CARRIERID = #{CARRIERID}
			</if>			  
		    <if test="LOTTYPE != null and LOTTYPE !='' "> 
				, LOTTYPE = #{LOTTYPE}
			</if>			  
		    <if test="LOTCREATEDTYPE != null and LOTCREATEDTYPE !='' "> 
				, LOTCREATEDTYPE = #{LOTCREATEDTYPE}
			</if>			  
		    <if test="LOTINPUTTYPE != null and LOTINPUTTYPE !='' "> 
				, LOTINPUTTYPE = #{LOTINPUTTYPE}
			</if>			  
		    <if test="ISREPRESENTROLLLOT != null and ISREPRESENTROLLLOT !='' "> 
				, ISREPRESENTROLLLOT = #{ISREPRESENTROLLLOT}
			</if>			  
		    <if test="HASSUBLOT != null and HASSUBLOT !='' "> 
				, HASSUBLOT = #{HASSUBLOT}
			</if>			  
		    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
				, PRODUCTDEFID = #{PRODUCTDEFID}
			</if>			  
		    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
				, PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
			</if>			  
		    <if test="PREVPRODUCTDEFVERSION != null and PREVPRODUCTDEFVERSION !='' "> 
				, PREVPRODUCTDEFVERSION = #{PREVPRODUCTDEFVERSION}
			</if>			  
		    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
				, PROCESSDEFID = #{PROCESSDEFID}
			</if>			  
		    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
				, PROCESSDEFVERSION = #{PROCESSDEFVERSION}
			</if>			  
		    <if test="PROCESSPATHSTACK != null and PROCESSPATHSTACK !='' "> 
				, PROCESSPATHSTACK = #{PROCESSPATHSTACK}
			</if>			  
		    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
				, USERSEQUENCE = #{USERSEQUENCE}
			</if>			  
		    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
				, PROCESSSEGMENTID = #{PROCESSSEGMENTID}
			</if>			  
		    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
				, PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
			</if>			  
		    <if test="PRIORITY != null and PRIORITY !='' "> 
				, PRIORITY = #{PRIORITY}
			</if>			  
		    <if test="DUEDATE != null and DUEDATE !='' "> 
				, DUEDATE = #{DUEDATE}
			</if>			  
		    <if test="EXPECTEDCOMPLETEDATE != null and EXPECTEDCOMPLETEDATE !='' "> 
				, EXPECTEDCOMPLETEDATE = #{EXPECTEDCOMPLETEDATE}
			</if>			  
		    <if test="ROOTLOTSTARTDATE != null and ROOTLOTSTARTDATE !='' "> 
				, ROOTLOTSTARTDATE = #{ROOTLOTSTARTDATE}
			</if>			  
		    <if test="LOTSTARTDATE != null and LOTSTARTDATE !='' "> 
				, LOTSTARTDATE = #{LOTSTARTDATE}
			</if>			  
		    <if test="WEEK != null and WEEK !='' "> 
				, WEEK = #{WEEK}
			</if>	
		    <if test="LOTSTATE != null and LOTSTATE !='' "> 
				, LOTSTATE = #{LOTSTATE}
			</if>			  
		    <if test="PROCESSSTATE != null and PROCESSSTATE !='' "> 
				, PROCESSSTATE = #{PROCESSSTATE}
			</if>			  
		    <if test="ISHOLD != null and ISHOLD !='' "> 
				, ISHOLD = #{ISHOLD}
			</if>			  
		    <if test="ISREWORK != null and ISREWORK !='' "> 
				, ISREWORK = #{ISREWORK}
			</if>			  
		    <if test="ISLOCKING != null and ISLOCKING !='' "> 
				, ISLOCKING = #{ISLOCKING}
			</if>			  
		    <if test="REWORKTYPE != null and REWORKTYPE !='' "> 
				, REWORKTYPE = #{REWORKTYPE}
			</if>			  
		    <if test="REWORKREASONCODE != null and REWORKREASONCODE !='' "> 
				, REWORKREASONCODE = #{REWORKREASONCODE}
			</if>			  
		    <if test="ISPRINTLOTCARD != null and ISPRINTLOTCARD !='' "> 
				, ISPRINTLOTCARD = #{ISPRINTLOTCARD}
			</if>			  
		    <if test="ISPRINTRCLOTCARD != null and ISPRINTRCLOTCARD !='' "> 
				, ISPRINTRCLOTCARD = #{ISPRINTRCLOTCARD}
			</if>			  
		    <if test="LAYER != null and LAYER !='' "> 
				, LAYER = #{LAYER}
			</if>			  
		    <if test="CREATEDQTY != null and CREATEDQTY !='' "> 
				, CREATEDQTY = #{CREATEDQTY}
			</if>			  
		    <if test="LOTSTDPANELQTY != null and LOTSTDPANELQTY !='' "> 
				, LOTSTDPANELQTY = #{LOTSTDPANELQTY}
			</if>			  
		    <if test="UNIT != null and UNIT !='' "> 
				, UNIT = #{UNIT}
			</if>			  
		    <if test="DEFECTUNIT != null and DEFECTUNIT !='' "> 
				, DEFECTUNIT = #{DEFECTUNIT}
			</if>			  
		    <if test="QTY != null and QTY !='' "> 
				, QTY = #{QTY}
			</if>			  
		    <if test="DEFECTQTY != null and DEFECTQTY !='' "> 
				, DEFECTQTY = #{DEFECTQTY}
			</if>			  
		    <if test="PSEUDODEFECTQTY != null and PSEUDODEFECTQTY !='' "> 
				, PSEUDODEFECTQTY = #{PSEUDODEFECTQTY}
			</if>			  
		    <if test="PCSQTY != null and PCSQTY !='' "> 
				, PCSQTY = #{PCSQTY}
			</if>			  
		    <if test="ARRAYQTY != null and ARRAYQTY !='' "> 
				, ARRAYQTY = #{ARRAYQTY}
			</if>			  
		    <if test="PANELQTY != null and PANELQTY !='' "> 
				, PANELQTY = #{PANELQTY}
			</if>			  
		    <if test="PANELPERQTY != null and PANELPERQTY !='' "> 
				, PANELPERQTY = #{PANELPERQTY}
			</if>			  
		    <if test="TOTALREWORKCOUNT != null and TOTALREWORKCOUNT !='' "> 
				, TOTALREWORKCOUNT = #{TOTALREWORKCOUNT}
			</if>			  
		    <if test="PUREORDER != null and PUREORDER !='' "> 
				, PUREORDER = #{PUREORDER}
			</if>			  
		    <if test="PUREINPUT != null and PUREINPUT !='' "> 
				, PUREINPUT = #{PUREINPUT}
			</if>			  
		    <if test="SUBPROCESSDEFID != null and SUBPROCESSDEFID !='' "> 
				, SUBPROCESSDEFID = #{SUBPROCESSDEFID}
			</if>			  
		    <if test="SUBPROCESSDEFVERSION != null and SUBPROCESSDEFVERSION !='' "> 
				, SUBPROCESSDEFVERSION = #{SUBPROCESSDEFVERSION}
			</if>			  
		    <if test="RECEIVEUSER != null and RECEIVEUSER !='' "> 
				, RECEIVEUSER = #{RECEIVEUSER}
			</if>			  
		    <if test="RECEIVETIME != null and RECEIVETIME !='' "> 
				, RECEIVETIME = #{RECEIVETIME}
			</if>			  
		    <if test="STARTEDUSER != null and STARTEDUSER !='' "> 
				, STARTEDUSER = #{STARTEDUSER}
			</if>			  
		    <if test="STARTEDDATE != null and STARTEDDATE !='' "> 
				, STARTEDDATE = #{STARTEDDATE}
			</if>			  
		    <if test="SENDUSER != null and SENDUSER !='' "> 
				, SENDUSER = #{SENDUSER}
			</if>			  
		    <if test="SENDTIME != null and SENDTIME !='' "> 
				, SENDTIME = #{SENDTIME}
			</if>			  
		    <if test="HANDLETYPE != null and HANDLETYPE !='' "> 
				, HANDLETYPE = #{HANDLETYPE}
			</if>			  
		    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
				, DESCRIPTION = #{DESCRIPTION}
			</if>			  
		    <if test="LASTTXNCOMMENT != null and LASTTXNCOMMENT !='' "> 
				, LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			</if>			  
		    <if test="ISDEFECTED != null and ISDEFECTED !='' "> 
				, ISDEFECTED = #{ISDEFECTED}
			</if>
		    <if test="WORKCOUNT != null and WORKCOUNT !='' "> 
				, WORKCOUNT = #{WORKCOUNT}
			</if>			  
		    <if test="RESOURCEID != null and RESOURCEID !='' "> 
				, RESOURCEID = #{RESOURCEID}
			</if>			  
		    <if test="MKLOTID != null and MKLOTID !='' "> 
				, MKLOTID = #{MKLOTID}
			</if>			  
		    <if test="PREVPRODUCTDEFID != null and PREVPRODUCTDEFID !='' "> 
				, PREVPRODUCTDEFID = #{PREVPRODUCTDEFID}
			</if>			   
		    <if test="PNLROOTLOTID != null and PNLROOTLOTID !='' "> 
				, PNLROOTLOTID = #{PNLROOTLOTID}
			</if>			  
		    <if test="PNLCREATEDQTY != null and PNLCREATEDQTY !='' "> 
				, PNLCREATEDQTY = #{PNLCREATEDQTY}
			</if>			  
		    <if test="INPUTCONFIRMDATE != null and INPUTCONFIRMDATE !='' "> 
				, INPUTCONFIRMDATE = #{INPUTCONFIRMDATE}
			</if>			  
		    <if test="INPUTCONFIRMUSER != null and INPUTCONFIRMUSER !='' "> 
				, INPUTCONFIRMUSER = #{INPUTCONFIRMUSER}
			</if>			  
		    <if test="ISFINALINSPECTPROGESS != null and ISFINALINSPECTPROGESS !='' "> 
				, ISFINALINSPECTPROGESS = #{ISFINALINSPECTPROGESS}
			</if>			  
		    <if test="LOTINPUTQTY != null and LOTINPUTQTY !='' "> 
				, LOTINPUTQTY = #{LOTINPUTQTY}
			</if>			  
		    <if test="ISFIRSTCREATELOT != null and ISFIRSTCREATELOT !='' "> 
				, ISFIRSTCREATELOT = #{ISFIRSTCREATELOT}
			</if>			  
		    <if test="ISOEM != null and ISOEM !='' "> 
				, ISOEM = #{ISOEM}
			</if>			  
			WHERE LOTID = #{LOTID}				
    </update>
    
    <!-- 작업 시작 시 등록 된 작업 실적 정보를 조회 한다.  -->
    <select id="getLotWorkResultByTrackIn" parameterType="map" resultType="hashmap">
				-- 
				-- Id : getLotWorkResultByTrackIn
				-- Version : 10001
				SELECT
						*
				FROM	PCM_LOTWORKRESULT	WR
				WHERE	1 = 1


				AND		WR.LOTID = #{LOTID}
				AND		WR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
				AND		WR.WORKCOUNT = #{WORKCOUNT}		
    </select>       
            
       <!-- 작업장 자원 정보를 조회 한다.  -->
    <select id="selectMmResourceKey3" parameterType="map" resultType="hashmap">
			SELECT
			    *
			FROM 
			BAS_RESOURCE
			WHERE 1 = 1
			  AND RESOURCEID  	= #{RESOURCEID}	
			  AND ENTERPRISEID	= #{ENTERPRISEID}	
			  AND PLANTID	        = #{PLANTID}	
    </select> 
        
    
    <!-- LOT 작업실적 update  -->    
    <update id="updateCtLotworkresultKey" parameterType="map">
		 UPDATE PCM_LOTWORKRESULT
		        SET 
					  MODIFIER = #{MODIFIER}
					, MODIFIEDTIME = SYSDATE
		    	<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
					, PROCESSSEGMENTID = #{PROCESSSEGMENTID}
				</if>						
		    	<if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
					, PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
				</if>						
		    	<if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
					, ENTERPRISEID = #{ENTERPRISEID}
				</if>						
			    <if test="PLANTID != null and PLANTID !='' "> 
					, PLANTID = #{PLANTID}
				</if>						
			    <if test="FACTORYID != null and FACTORYID !='' "> 
					, FACTORYID = #{FACTORYID}
				</if>						
			    <if test="AREAID != null and AREAID !='' "> 
					, AREAID = #{AREAID}
				</if>						
			    <if test="PRODUCTIONORDERID != null and PRODUCTIONORDERID !='' "> 
					, PRODUCTIONORDERID = #{PRODUCTIONORDERID}
				</if>						
			    <if test="LINENO != null and LINENO !='' "> 
					, LINENO = #{LINENO}
				</if>						
			    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
					, PRODUCTDEFID = #{PRODUCTDEFID}
				</if>						
			    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
					, PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if>						
			    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
					, PROCESSDEFID = #{PROCESSDEFID}
				</if>						
			    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
					, PROCESSDEFVERSION = #{PROCESSDEFVERSION}
				</if>						
			    <if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
					, PROCESSPATHID = #{PROCESSPATHID}
				</if>						
			    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
					, USERSEQUENCE = #{USERSEQUENCE}
				</if>						
			    <if test="WORKCOUNT != null and WORKCOUNT !='' "> 
					, WORKCOUNT = #{WORKCOUNT}
				</if>						
			    <if test="RESULTTYPE != null and RESULTTYPE !='' "> 
					, RESULTTYPE = #{RESULTTYPE}
				</if>						
			    <if test="ISPRINTLOTCARD != null and ISPRINTLOTCARD !='' "> 
					, ISPRINTLOTCARD = #{ISPRINTLOTCARD}
				</if>						
			    <if test="WEEK != null and WEEK !='' "> 
					, WEEK = #{WEEK}
				</if>						
			    <if test="ISREWORK != null and ISREWORK !='' "> 
					, ISREWORK = #{ISREWORK}
				</if>						
			    <if test="REWORKTYPE != null and REWORKTYPE !='' "> 
					, REWORKTYPE = #{REWORKTYPE}
				</if>								
			    <if test="REWORKREASONCODE != null and REWORKREASONCODE !='' "> 
					, REWORKREASONCODE = #{REWORKREASONCODE}
				</if>						
			    <if test="REWORKCOUNT != null and REWORKCOUNT !='' "> 
					, REWORKCOUNT = #{REWORKCOUNT}
				</if>						
			    <if test="RECEIVETIME != null and RECEIVETIME !='' "> 
					, RECEIVETIME = #{RECEIVETIME}
				</if>											
			    <if test="RECEIVEUSER != null and RECEIVEUSER !='' "> 
					, RECEIVEUSER = #{RECEIVEUSER}
				</if>						
			    <if test="ROOTLOTSTARTDATE != null and ROOTLOTSTARTDATE !='' "> 
					, ROOTLOTSTARTDATE = #{ROOTLOTSTARTDATE}
				</if>						
			    <if test="WORKSTARTTIME != null and WORKSTARTTIME !='' "> 
					, WORKSTARTTIME = #{WORKSTARTTIME}
				</if>						
			    <if test="WORKSTARTUSER != null and WORKSTARTUSER !='' "> 
					, WORKSTARTUSER = #{WORKSTARTUSER}
				</if>						
			    <if test="WORKENDTIME != null and WORKENDTIME !='' "> 
					, WORKENDTIME = #{WORKENDTIME}
				</if>						
			    <if test="WORKENDUSER != null and WORKENDUSER !='' "> 
					, WORKENDUSER = #{WORKENDUSER}
				</if>						
			    <if test="SENDTIME != null and SENDTIME !='' "> 
					, SENDTIME = #{SENDTIME}
				</if>						
			    <if test="SENDUSER != null and SENDUSER !='' "> 
					, SENDUSER = #{SENDUSER}
				</if>						
			    <if test="RECEIVELEADTIME != null and RECEIVELEADTIME !='' "> 
					, RECEIVELEADTIME = #{RECEIVELEADTIME}
				</if>						
			    <if test="WORKSTARTLEADTIME != null and WORKSTARTLEADTIME !='' "> 
					, WORKSTARTLEADTIME = #{WORKSTARTLEADTIME}
				</if>						
			    <if test="WORKENDLEADTIME != null and WORKENDLEADTIME !='' "> 
					, WORKENDLEADTIME = #{WORKENDLEADTIME}
				</if>						
			    <if test="SENDLEADTIME != null and SENDLEADTIME !='' "> 
					, SENDLEADTIME = #{SENDLEADTIME}
				</if>						
			    <if test="DEFECTQTY != null and DEFECTQTY !='' "> 
					, DEFECTQTY = #{DEFECTQTY}
				</if>						
			    <if test="PSEUDODEFECTQTY != null and PSEUDODEFECTQTY !='' "> 
					, PSEUDODEFECTQTY = #{PSEUDODEFECTQTY}
				</if>											
			    <if test="ROOTLOTINPUTPCSQTY != null and ROOTLOTINPUTPCSQTY !='' "> 
					, ROOTLOTINPUTPCSQTY = #{ROOTLOTINPUTPCSQTY}
				</if>											
			    <if test="ROOTLOTINPUTARRAYQTY != null and ROOTLOTINPUTARRAYQTY !='' "> 
					, ROOTLOTINPUTARRAYQTY = #{ROOTLOTINPUTARRAYQTY}
				</if>						
			    <if test="ROOTLOTINPUTPANELQTY != null and ROOTLOTINPUTPANELQTY !='' "> 
					, ROOTLOTINPUTPANELQTY = #{ROOTLOTINPUTPANELQTY}
				</if>											
			    <if test="RECEIVEPCSQTY != null and RECEIVEPCSQTY !='' "> 
					, RECEIVEPCSQTY = #{RECEIVEPCSQTY}
				</if>											
			    <if test="RECEIVEARRAYQTY != null and RECEIVEARRAYQTY !='' "> 
					, RECEIVEARRAYQTY = #{RECEIVEARRAYQTY}
				</if>											
			    <if test="RECEIVEPANELQTY != null and RECEIVEPANELQTY !='' "> 
					, RECEIVEPANELQTY = #{RECEIVEPANELQTY}
				</if>						
			    <if test="WORKSTARTPCSQTY != null and WORKSTARTPCSQTY !='' "> 
					, WORKSTARTPCSQTY = #{WORKSTARTPCSQTY}
				</if>						
			    <if test="WORKSTARTARRAYQTY != null and WORKSTARTARRAYQTY !='' "> 
					, WORKSTARTARRAYQTY = #{WORKSTARTARRAYQTY}
				</if>						
			    <if test="WORKSTARTPANELQTY != null and WORKSTARTPANELQTY !='' "> 
					, WORKSTARTPANELQTY = #{WORKSTARTPANELQTY}
				</if>						
			    <if test="WORKENDPCSQTY != null and WORKENDPCSQTY !='' "> 
					, WORKENDPCSQTY = #{WORKENDPCSQTY}
				</if>						
			    <if test="WORKENDARRAYQTY != null and WORKENDARRAYQTY !='' "> 
					, WORKENDARRAYQTY = #{WORKENDARRAYQTY}
				</if>						
			    <if test="WORKENDPANELQTY != null and WORKENDPANELQTY !='' "> 
					, WORKENDPANELQTY = #{WORKENDPANELQTY}
				</if>						
			    <if test="SENDPCSQTY != null and SENDPCSQTY !='' "> 
					, SENDPCSQTY = #{SENDPCSQTY}
				</if>							
			    <if test="SENDARRAYQTY != null and SENDARRAYQTY !='' "> 
					, SENDARRAYQTY = #{SENDARRAYQTY}
				</if>											
			    <if test="SENDPANELQTY != null and SENDPANELQTY !='' "> 
					, SENDPANELQTY = #{SENDPANELQTY}
				</if>						
			    <if test="PREVSENDLOTHISTKEY != null and PREVSENDLOTHISTKEY !='' "> 
					, PREVSENDLOTHISTKEY = #{PREVSENDLOTHISTKEY}
				</if>						
			    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
					, DESCRIPTION = #{DESCRIPTION}
				</if>						
			    <if test="PROCESSPATHSTACK != null and PROCESSPATHSTACK !='' "> 
					, PROCESSPATHSTACK = #{PROCESSPATHSTACK}
				</if>						
			    <if test="RESOURCEID != null and RESOURCEID !='' "> 
					, RESOURCEID = #{RESOURCEID}
				</if>						
			    <if test="SELFTAKEINSPRESULT != null and SELFTAKEINSPRESULT !='' "> 
					, SELFTAKEINSPRESULT = #{SELFTAKEINSPRESULT}
				</if>						
			    <if test="SELFSHIPINSPRESULT != null and SELFSHIPINSPRESULT !='' "> 
					, SELFSHIPINSPRESULT = #{SELFSHIPINSPRESULT}
				</if>						
			    <if test="MEASUREINSPRESULT != null and MEASUREINSPRESULT !='' "> 
					, MEASUREINSPRESULT = #{MEASUREINSPRESULT}		
				</if>						
			WHERE 1 = 1
			  AND TXNHISTKEY  = #{TXNHISTKEY}	
			  AND LOTID	      = #{LOTID}	
    </update>


	<!-- 0. 품목 사양정보 -->
	<select id="selectProductSpecInfo" parameterType="map" resultType="hashmap">
		/* SelectProductSpecInfo 10001 */
		SELECT  PS.ITEMID                                       AS PRODUCTDEFID
                    ,   PS.ITEMVERSION                                  AS PRODUCTDEFVERSION
                    ,   IM.ITEMNAME                                     AS PRODUCTDEFNAME
                    ,   PS.CUSTOMERID
                    ,   CU.CUSTOMERNAME
                    ,   PS.CUSTOMERITEMID
                    ,   PS.CUSTOMERITEMVERSION
                    ,   PS.CUSTOMERITEMNAME
                    ,   PS.CUSTOMERSPEC
                    ,   NVL(DC1.DICTIONARYNAME, CD1.MEANING)      AS PRODUCTIONTYPE
                    ,   NVL(DC2.DICTIONARYNAME, CD2.MEANING)      AS PRODUCTTYPE
                    ,   NVL(DC3.DICTIONARYNAME, CD3.MEANING)      AS LOTINPUTTYPE
                    ,   PS.HSCODE
                    ,   PS.LAYER
                    ,   PS.USELAYER
                    ,   PS.COPPERTYPE
                    ,   PS.PACKINGQTY
                    ,   PS.PROJECTNAME
                    ,   PS.ENDUSER
                    ,   PS.COPPERPLATINGTYPE
                    --,   PS.PRODUCTTHICKNESS
                    ,   PS.UL_MARK
                    ,   PS.MANUFACTUREDDATE
                    ,   PS.HG_FR
                    ,   PS.ASSY
                    ,   PS.OXIDE
                    ,   PS.SEPARATINGPORTION
                    ,   PS.RTRSHT
                    ,   PS.IMPEDANCE
                    ,   PS.PCSSIZEXAXIS
                    ,   PS.PCSSIZEYAXIS
                    ,   PS.ARYSIZEXAXIS
                    ,   PS.ARYSIZEYAXIS
                    ,   PS.PNLSIZEXAXIS
                    ,   PS.PNLSIZEYAXIS
                    ,   PS.PCSPNL
                    ,   PS.PNLMM
                    ,   PS.PCSMM
                    ,   PS.INPUTSIZEXAXIS
                    ,   PS.INNERLAYER
                    ,   PS.OUTERLAYER
                    ,   PS.INNERLAYERCIRCUIT
                    ,   PS.OUTERLAYERCIRCUIT
                    ,   PS.COPPERFOILUPLAYER
                    ,   PS.COPPERFOILDOWNLAYER
                    ,   COALESCE(DC4.DICTIONARYNAME, CD4.MEANING)      AS JOBTYPE
                    ,   PS.CONNECTORDISTANCE
                    ,   PS.CONNECTORTILTING
                    ,   PS.DUMMY
                    --,   PS.INPUTSCALE
                    ,   PS.RELIABILITY
                    ,   PS.HAZARDOUSSUBSTANCES
                    ,   PS.MEASUREMENT
                    ,   PS.INKSPECIFICATION
                    ,   PS.OLBCIRCUIT
                    ,   PS.ELONGATION
                    ,   PS.PITCHBEFORE
                    ,   PS.PITCHAFTER
                    ,   PS.MINCL
                    ,   PS.MINPSR
                    ,   PS.SMD
                    ,   PS.ISWEEKMNG
                    ,   PS.PCSARY
                    ,   PS.XOUT
				FROM    BAS_PRODUCTITEMSPEC      PS
				INNER JOIN  BAS_ITEMMASTER      IM  ON  PS.ITEMID = IM.ITEMID
				                                    AND PS.ITEMVERSION = IM.ITEMVERSION
				LEFT  JOIN  BAS_CUSTOMER        CU  ON  PS.CUSTOMERID = CU.CUSTOMERID
				LEFT  JOIN  CMD_LOOKUP_VALUES   CD1 ON  PS.PRODUCTIONTYPE = CD1.LOOKUP_CODE
				                                    AND CD1.LOOKUP_TYPE = 'ProductionType'
				LEFT  JOIN  CMD_DICTIONARY      DC1 ON  CD1.DICTIONARYID = DC1.DICTIONARYID
				                                    AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN  CMD_LOOKUP_VALUES   CD2 ON  PS.PRODUCTTYPE = CD2.LOOKUP_CODE
				                                    AND CD2.LOOKUP_TYPE = 'ProductType'
				LEFT  JOIN  CMD_DICTIONARY      DC2 ON  CD2.DICTIONARYID = DC2.DICTIONARYID
				                                    AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN  CMD_LOOKUP_VALUES   CD3 ON  PS.INPUTTYPE = CD3.LOOKUP_CODE
				                                    AND CD3.LOOKUP_TYPE = 'InputType'
				LEFT  JOIN  CMD_DICTIONARY       DC3 ON  CD3.DICTIONARYID = DC3.DICTIONARYID
				                                    AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN  CMD_LOOKUP_VALUES   CD4 ON  PS.JOBTYPE = CD4.LOOKUP_CODE
                                                    AND CD4.LOOKUP_TYPE = 'JobType'
                LEFT  JOIN  CMD_DICTIONARY       DC4 ON  CD4.DICTIONARYID = DC4.DICTIONARYID
                                                    AND DC4.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE   PS.ITEMID = #{PRODUCTDEFID}
				AND     PS.ITEMVERSION = #{PRODUCTDEFVERSION}
	</select>
	
	<!-- 1. 계측값 정보  -->
	<select id="selectLotHistoryMeasure" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryMeasure 10001 */
				WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT DISTINCT  LV.LOTID
					,   LV.PRODUCTDEFID
					,   LV.PRODUCTDEFVERSION
					,   LV.PLANTID
					,   AR.FACTORYID
					,   LV.AREAID
					,   NVL(DC5.DICTIONARYNAME, CD2.MEANING)              AS SUBNAME
					,	PD.PRODUCTIONTYPE										AS LOTTYPE
					,	''														AS EQUIPMENTID
					,   DR.PROCESSSEGMENTID
					,   LV.USERSEQUENCE
					,   NVL(DC1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)     AS PROCESSSEGMENTNAME
					,   TO_CHAR(DR.INSPECTIONDATE, 'YYYY-MM-DD HH24:MI:SS')     AS MEASUREDATETIME
					,   DR.AREAID
					,   NVL(DC2.DICTIONARYNAME, AR.AREANAME)               AS AREANAME
					,   NVL(DC3.DICTIONARYNAME, II.INSPITEMNAME)           AS INSPITEMNAME
					,   SPC.LSL || '~' || SPC.USL 
					|| '(' || SPC.SL || ')'                        AS SPEC
					,   DR.INSPECTIONRESULT
					,   NVL(DC4.DICTIONARYNAME, CD.MEANING)               AS ACTIONRESULT
				FROM    WORKRESULT                		LV    
				INNER JOIN QAM_INSPECTIONRESULT    		DR  ON  LV.LOTID = DR.RESOURCEID
															AND LV.PROCESSSEGMENTID = DR.PROCESSSEGMENTID
															AND DR.INSPECTIONDEFID = 'OperationInspection-OperationInspection'
				INNER JOIN BAS_PROCESSSEGMENT    		SG  ON  DR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY        		DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
															AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_AREA              		AR  ON  DR.AREAID = AR.AREAID
				LEFT  JOIN CMD_DICTIONARY        		DC2 ON  AR.AREANAME = DC2.DICTIONARYID
															AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_INSPECTIONITEMREL		    IT  ON  LV.PROCESSSEGMENTID = IT.PROCESSSEGID
															AND LV.PRODUCTDEFID = IT.RESOURCEID
															AND LV.PRODUCTDEFVERSION = IT.RESOURCEVERSION
				LEFT JOIN BAS_SPECDETAIL		            SPC ON  IT.SPECSEQUENCE = SPC.SPECSEQUENCE
				LEFT  JOIN BAS_INSPITEM		            II  ON  IT.INSPITEMID = II.INSPITEMID
				LEFT  JOIN CMD_DICTIONARY                DC3 ON  II.INSPITEMNAME = DC3.DICTIONARYID
															AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN QAM_ABNORMALOCCURRENCE    	AN  ON  LV.LOTID = AN.LOTID
															AND LV.PROCESSSEGMENTID = AN.PROCESSSEGMENTID
				LEFT  JOIN QAM_AFFECTLOT             	AF  ON  AN.ABNOCRNO = AF.ABNOCRNO
															AND AN.ABNOCRTYPE = AF.ABNOCRTYPE
															AND AN.LOTID = AF.LOTID
				LEFT  JOIN CMD_LOOKUP_VALUES           	CD  ON  AF.RESULTCODE = CD.LOOKUP_CODE
															AND CD.LOOKUP_TYPE = 'ProcessingStatus'
				LEFT  JOIN CMD_DICTIONARY            	DC4 ON  CD.DICTIONARYID = DC4.DICTIONARYID
															AND DC4.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_PRODUCTDEFINITION     	PD  ON  LV.PRODUCTDEFID = PD.PRODUCTDEFID
															AND LV.PRODUCTDEFVERSION = PD.PROCESSDEFVERSION
				LEFT  JOIN CMD_LOOKUP_VALUES          	CD2 ON  PD.PRODUCTIONTYPE = CD2.LOOKUP_CODE
															AND CD2.LOOKUP_TYPE = 'ProductionType'
				LEFT  JOIN CMD_DICTIONARY            	DC5 ON  CD2.DICTIONARYID = DC5.DICTIONARYID
															AND DC5.LANGUAGETYPE = #{LANGUAGETYPE}
				ORDER BY TO_NUMBER(LV.USERSEQUENCE)
	</select>
	
	<!-- 2. 자재 정보 -->
	<select id="selectLotHistoryConsumable" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryConsumable 10001 */
		-- Id : SelectLotHistoryConsumable
				-- Version : 10001
				WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  X.LOTID
				    ,   X.PROCESSSEQUENCE                                       AS USERSEQUENCE
                    ,   X.PROCESSSEGMENTID
                    ,   NVL(DC3.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
                    ,   TO_CHAR(X.WORKENDDATE, 'YYYY-MM-DD HH24:MI:SS')         AS WORKENDDATE
                    ,   CD.CONSUMABLEDEFID
                    ,   NVL(DC1.DICTIONARYNAME , CD.CONSUMABLEDEFNAME)     AS CONSUMABLEDEFNAME
                    ,   CASE WHEN CD.CONSUMABLEDEFVERSION = '*' THEN ''
                        ELSE CD.CONSUMABLEDEFVERSION END                        AS CONSUMABLEDEFVERSION
                    ,   X.AREAID
                    ,   NVL(DC2.DICTIONARYNAME , AR.AREANAME)              AS AREANAME
                    ,   CD.UNIT                                                 AS UOM
                    ,   X.REQUIREMENTQTY
                    ,   X.MATERIALLOTID                                         AS CONSUMABLELOTID
                    ,   X.CONSUMEDQTY
                    ,   X.TRANSACTIONCODE
                    ,   X.TXNUNIT
                    ,   X.SENDQTY
				FROM
                (
                    SELECT  LV.LOTID
                        ,   LV.PROCESSSEGMENTID
                        ,   LV.USERSEQUENCE
                        ,   LV.SUBUSERSEQUENCE
                        ,   LV.PROCESSSEQUENCE
                        ,   LV.WORKCOUNT
                        ,   LV.ISREWORK
                        ,   LV.RECEIVEDATE
                        ,   LV.WORKENDDATE
                        ,   LV.LOTSENDDATE
                        ,   BM.MATERIALDEFID                                AS CONSUMABLEDEFID
                        ,   BM.MATERIALDEFVERSION                           AS CONSUMABLEDEFVERSION
                        ,   BM.UNIT
                        ,   ROUND((BM.QTY * LV.WORKENDPCSQTY), 5)     AS REQUIREMENTQTY
                        ,   CML.AREAID
                        ,   CML.MATERIALLOTID
                        ,   ROUND(CML.CONSUMEDQTY, 5)                 AS CONSUMEDQTY
                        ,   CTX.TRANSACTIONCODE
                        ,   CTX.UNIT                                        AS TXNUNIT
                        ,   ROUND(CTX.QTY, 5)                         AS SENDQTY
                    FROM    WORKRESULT                  LV
                    INNER JOIN BAS_BILLOFMATERIAL        BM  ON  LV.PROCESSDEFID = BM.PROCESSDEFID
                                                            AND LV.PROCESSDEFVERSION = BM.PROCESSDEFVERSION
                                                            AND LV.PROCESSSEGMENTID = BM.PROCESSSEGMENTID
                    INNER JOIN MTM_CONSUMEMATERIALLOT    CML ON  LV.LOTID = CML.LOTID
                                                            AND LV.PROCESSDEFID = CML.PROCESSDEFID
                                                            AND LV.PROCESSDEFVERSION = CML.PROCESSDEFVERSION
                                                            AND LV.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
                                                            AND LV.USERSEQUENCE = TO_NUMBER(CML.USERSEQUENCE)
                                                            AND BM.MATERIALDEFID = CML.CONSUMABLEDEFID
                                                            AND BM.MATERIALDEFVERSION = CML.CONSUMABLEDEFVERSION
                                                            AND CML.MATERIALTYPE = 'Consumable'
                    LEFT  JOIN MTM_CONSUMABLETXNLINE     CTX ON  CML.CONSUMABLEDEFID = CTX.CONSUMABLEDEFID
                                                            AND CML.MATERIALLOTID = CTX.CONSUMABLELOTID
                                                            AND CML.AREAID = CTX.FROMAREAID
                                                            AND CML.TXNGROUPHISTKEY = CTX.RELKEYNO
                    UNION ALL
                    SELECT  LV.LOTID
                        ,   LV.PROCESSSEGMENTID
                        ,   LV.USERSEQUENCE
                        ,   LV.SUBUSERSEQUENCE
                        ,   LV.PROCESSSEQUENCE
                        ,   LV.WORKCOUNT
                        ,   LV.ISREWORK
                        ,   LV.RECEIVEDATE
                        ,   LV.WORKENDDATE
                        ,   LV.LOTSENDDATE
                        ,   BM.MATERIALDEFID                                AS CONSUMABLEDEFID
                        ,   BM.MATERIALDEFVERSION                           AS CONSUMABLEDEFVERSION
                        ,   BM.UNIT
                        ,   ROUND((BM.QTY * LV.WORKENDPCSQTY), 5)     AS REQUIREMENTQTY
                        ,   CML.AREAID
                        ,   CML.MATERIALLOTID
                        ,   ROUND(CML.CONSUMEDQTY, 5)                 AS CONSUMEDQTY
                        ,   CTX.TRANSACTIONCODE
                        ,   CTX.UNIT                                        AS TXNUNIT
                        ,   ROUND(CTX.QTY, 5)                         AS SENDQTY
                    FROM    WORKRESULT                  LV
                    INNER JOIN BAS_BILLOFMATERIAL        BM  ON  LV.SUBPROCESSDEFID = BM.PROCESSDEFID
                                                            AND LV.SUBPROCESSDEFVERSION = BM.PROCESSDEFVERSION
                                                            AND LV.SUBPROCESSSEGMENTID = BM.PROCESSSEGMENTID
                    LEFT  JOIN MTM_CONSUMEMATERIALLOT    CML ON  LV.LOTID = CML.LOTID
                                                            AND LV.SUBPROCESSDEFID = CML.PROCESSDEFID
                                                            AND LV.SUBPROCESSDEFVERSION = CML.PROCESSDEFVERSION
                                                            AND LV.SUBPROCESSSEGMENTID = CML.PROCESSSEGMENTID
                                                            AND LV.SUBUSERSEQUENCE = TO_NUMBER(CML.USERSEQUENCE)
                                                            AND BM.MATERIALDEFID = CML.CONSUMABLEDEFID
                                                            AND BM.MATERIALDEFVERSION = CML.CONSUMABLEDEFVERSION
                                                            AND CML.MATERIALTYPE = 'Consumable'
                    LEFT  JOIN MTM_CONSUMABLETXNLINE     CTX ON  CML.CONSUMABLEDEFID = CTX.CONSUMABLEDEFID
                                                            AND CML.MATERIALLOTID = CTX.CONSUMABLELOTID
                                                            AND CML.AREAID = CTX.FROMAREAID
                                                            AND CML.TXNGROUPHISTKEY = CTX.RELKEYNO
                ) X
				LEFT  JOIN BAS_CONSUMABLEDEFINITION  CD  ON  X.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
														AND X.CONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION
				LEFT  JOIN CMD_DICTIONARY            DC1 ON  CD.CONSUMABLEDEFNAME = DC1.DICTIONARYID
				                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_AREA                  AR  ON  X.AREAID = AR.AREAID
				LEFT  JOIN CMD_DICTIONARY            DC2 ON  AR.AREANAME = DC2.DICTIONARYID
				                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  X.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY            DC3 ON  SG.PROCESSSEGMENTNAME = DC3.DICTIONARYID
				                                        AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE 	1=1   
				ORDER BY X.RECEIVEDATE, X.LOTSENDDATE, TO_NUMBER(X.USERSEQUENCE), X.WORKCOUNT, TO_NUMBER(X.SUBUSERSEQUENCE), X.MATERIALLOTID
	</select>
	
	<!-- 3. 치공구 -->
	<select id="selectLotHistoryDurable" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryDurable 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  X.LOTID
					,   NVL(DC3.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
					,   X.WORKENDDATE
				    ,   X.DURABLELOTID
				    ,   X.AREAID
				    ,   NVL(DC2.DICTIONARYNAME , AR.AREANAME)              AS AREANAME
				    ,   DD.DURABLEDEFID
				    ,   DD.DURABLEDEFVERSION
				    ,   NVL(DC1.DICTIONARYNAME , DD.DURABLEDEFNAME)        AS DURABLEDEFNAME
				    ,   DD.DURABLECLASSID
                    ,   NVL(DC4.DICTIONARYNAME , DDC.DURABLECLASSNAME)     AS DURABLECLASS
				    ,   X.PROCESSSEQUENCE					 					AS USERSEQUENCE
				    ,   X.PROCESSSEGMENTID
				    ,   NVL(DC3.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
				    ,   X.TOTALUSEDCOUNT
				    ,   DD.USEDLIMIT
				FROM
				(
					SELECT 	LV.LOTID
						,	CML.DURABLELOTID
						,	LV.AREAID
						,	LV.USERSEQUENCE
						,	LV.SUBUSERSEQUENCE
						,	LV.PROCESSSEQUENCE
						,	LV.PROCESSSEGMENTID
						,	TO_CHAR(CML.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS WORKENDDATE
						,	DL.DURABLEDEFID
						,	DL.DURABLEDEFVERSION
						,	LV.ISREWORK
						,	LV.WORKCOUNT
						,	DL.TOTALUSEDCOUNT
						,   LV.RECEIVEDATE
                        ,   LV.LOTSENDDATE
					FROM 	WORKRESULT					LV
					INNER JOIN PCM_LOTDURABLE		    CML ON  LV.LOTID = CML.LOTID
				                                        	AND LV.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
				                                        	AND LV.WORKCOUNT = CML.WORKCOUNT
					INNER JOIN TOM_DURABLELOT            DL  ON  CML.DURABLELOTID = DL.DURABLELOTID
					UNION ALL
					SELECT 	LV.LOTID
						,	CML.DURABLELOTID
						,	LV.AREAID
						,	LV.USERSEQUENCE
						,	LV.SUBUSERSEQUENCE
						,	LV.PROCESSSEQUENCE
						,	LV.PROCESSSEGMENTID
						,	TO_CHAR(CML.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS WORKENDDATE
						,	DL.DURABLEDEFID
						,	DL.DURABLEDEFVERSION
						,	LV.ISREWORK
						,	LV.WORKCOUNT
						,	DL.TOTALUSEDCOUNT
						,   LV.RECEIVEDATE
                        ,   LV.LOTSENDDATE
					FROM 	WORKRESULT					LV
					INNER JOIN PCM_LOTDURABLE		    CML ON  LV.LOTID = CML.LOTID
				                                        	AND LV.SUBPROCESSSEGMENTID = CML.PROCESSSEGMENTID
				                                        	AND LV.WORKCOUNT = CML.WORKCOUNT
					INNER JOIN TOM_DURABLELOT            DL  ON  CML.DURABLELOTID = DL.DURABLELOTID
				) X
				INNER JOIN TOM_DURABLEDEFINITION     DD  ON  X.DURABLEDEFID = DD.DURABLEDEFID
				LEFT  JOIN CMD_DICTIONARY            DC1 ON  DD.DURABLEDEFNAME = DC1.DICTIONARYID
				                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN TOM_DURABLECLASS          DDC ON  DD.DURABLECLASSID = DDC.DURABLECLASSID
                LEFT  JOIN CMD_DICTIONARY            DC4 ON  DDC.DURABLECLASSNAME = DC4.DICTIONARYID
                                                        AND DC4.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_AREA                  AR  ON  X.AREAID = AR.AREAID
				LEFT  JOIN CMD_DICTIONARY            DC2 ON  AR.AREANAME = DC2.DICTIONARYID
				                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  X.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY            DC3 ON  SG.PROCESSSEGMENTNAME = DC3.DICTIONARYID
				                                        AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE   1=1
				AND     NOT EXISTS
                        (
                            SELECT  1
                            FROM    TOM_DURABLEDEFINITION    DRD
                            WHERE   DURABLECLASSID IN (SELECT DURABLECLASSID FROM TOM_DURABLECLASS WHERE DURABLECLASSTYPE = 'Film')
                            AND     DD.DURABLEDEFID = DRD.DURABLEDEFID
                        )
				ORDER BY X.RECEIVEDATE, X.LOTSENDDATE, TO_NUMBER(X.USERSEQUENCE), X.WORKCOUNT, TO_NUMBER(X.SUBUSERSEQUENCE)
	</select>
	
	<!-- 4. 설비 -->
	<select id="selectLotHistoryEquipment" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryEquipment 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				),
				EQUIPMENTRESULT AS
				(
					SELECT 	LEQ.LOTID
						,   LEQ.PROCESSSEGMENTID
						,   TO_NUMBER(LV.USERSEQUENCE)									AS USERSEQUENCE
						,   TO_NUMBER(LV.SUBUSERSEQUENCE)								AS SUBUSERSEQUENCE
						,	LV.PROCESSSEQUENCE
						,   TO_CHAR(LEQ.TRACKINTIME, 'YYYY-MM-DD HH24:MI')			AS WORKSTARTTIME
						,   TO_CHAR(LEQ.TRACKOUTTIME, 'YYYY-MM-DD HH24:MI')			AS WORKENDDATE
						,   LEQ.EQUIPMENTID											AS EQUIPMENTID
						,   WR.AREAID
						,	LV.WORKCOUNT
						,	LEQ.TXNID
						,	LV.ISREWORK
					FROM 	WORKRESULT					LV
					INNER JOIN PCM_LOTEQUIPMENT			LEQ	ON 	LV.LOTID = LEQ.LOTID
															AND LV.PROCESSSEGMENTID = LEQ.PROCESSSEGMENTID
															AND LV.WORKCOUNT = LEQ.WORKCOUNT
					LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
					                                        AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
					                                        AND LV.USERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
					                                        AND LV.WORKCOUNT = WR.WORKCOUNT
					WHERE   1=1
					AND     NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
					AND 	WR.USERSEQUENCE IS NOT NULL
					UNION ALL 
					SELECT 	LEQ.LOTID
						,   LEQ.PROCESSSEGMENTID
						,   TO_NUMBER(LV.USERSEQUENCE)									AS USERSEQUENCE
						,   TO_NUMBER(LV.SUBUSERSEQUENCE)									AS SUBUSERSEQUENCE
						,	LV.PROCESSSEQUENCE
						,   TO_CHAR(LEQ.TRACKINTIME, 'YYYY-MM-DD HH24:MI')			AS WORKSTARTTIME
						,   TO_CHAR(LEQ.TRACKOUTTIME, 'YYYY-MM-DD HH24:MI')			AS WORKENDDATE
						,   LEQ.EQUIPMENTID											AS EQUIPMENTID
						,   WR.AREAID
						,	LV.WORKCOUNT
						,	LEQ.TXNID
						,	LV.ISREWORK
					FROM 	WORKRESULT					LV
					INNER JOIN PCM_LOTEQUIPMENT			LEQ	ON 	LV.LOTID = LEQ.LOTID
															AND LV.SUBPROCESSSEGMENTID = LEQ.PROCESSSEGMENTID
															AND LV.WORKCOUNT = LEQ.WORKCOUNT
					LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
					                                        AND LV.SUBPROCESSSEGMENTID = WR.PROCESSSEGMENTID
					                                        AND LV.SUBUSERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
					                                        AND LV.WORKCOUNT = WR.WORKCOUNT
					WHERE   1=1
					AND     NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
					AND 	WR.USERSEQUENCE IS NOT NULL
				),
                WOKERDATA AS
                (
                    SELECT  LOTID
                        ,   PROCESSSEGMENTID
                        ,   WORKCOUNT
                        ,   USERSEQUENCE
                        ,   SUBUSERSEQUENCE
                        ,   PROCESSSEQUENCE
                        ,   LISTAGG(WORKERNAME, ',') WITHIN GROUP (ORDER BY WD.LOTID
									                        ,   WD.PROCESSSEGMENTID
									                        ,   WD.WORKCOUNT
									                        ,   WD.USERSEQUENCE
									                        ,   WD.SUBUSERSEQUENCE
									                        ,   WD.PROCESSSEQUENCE)     AS WORKERNAME
                    FROM
                    (
                        SELECT  LW.LOTID
                            ,   LW.PROCESSSEGMENTID
                            ,   LW.WORKCOUNT
                            ,   LV.USERSEQUENCE
                            ,   LV.SUBUSERSEQUENCE
                            ,   LV.PROCESSSEQUENCE
                            ,   NVL(NVL(QI.INSPECTORNAME, US.USER_NM), LW.WORKERNAME)   AS WORKERNAME
                        FROM    WORKRESULT              LV
                        INNER JOIN PCM_LOTWORKER         LW  ON  LV.LOTID = LW.LOTID
                                                            AND LV.PROCESSSEGMENTID = LW.PROCESSSEGMENTID
                                                            AND LV.USERSEQUENCE = TO_NUMBER(LW.USERSEQUENCE)
                        LEFT  JOIN PCM_LOTWORKRESULT     WR  ON  LV.LOTID = WR.LOTID
                                                            AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                            AND LV.USERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
                                                            AND LV.WORKCOUNT = WR.WORKCOUNT
                        LEFT  JOIN CMD_USERS              US  ON  LW.USERID = US.USER_ID
                        LEFT  JOIN QAM_QCINSPECTOR       QI  ON  LW.WORKERNAME = QI.INSPECTORID
                        WHERE   1=1
                        UNION ALL
                        SELECT  LW.LOTID
                            ,   LW.PROCESSSEGMENTID
                            ,   LW.WORKCOUNT
                            ,   LV.USERSEQUENCE
                            ,   LV.SUBUSERSEQUENCE
                            ,   LV.PROCESSSEQUENCE
                            ,   NVL(NVL(QI.INSPECTORNAME, US.USER_NM), LW.WORKERNAME)   AS WORKERNAME
                        FROM    WORKRESULT              LV
                        INNER JOIN PCM_LOTWORKER         LW  ON  LV.LOTID = LW.LOTID
                                                            AND LV.SUBPROCESSSEGMENTID = LW.PROCESSSEGMENTID
                                                            AND LV.SUBUSERSEQUENCE = TO_NUMBER(LW.USERSEQUENCE)
                        LEFT  JOIN PCM_LOTWORKRESULT     WR  ON  LV.LOTID = WR.LOTID
                                                            AND LV.SUBPROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                            AND LV.SUBUSERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
                                                            AND LV.WORKCOUNT = WR.WORKCOUNT
                        LEFT  JOIN CMD_USERS             US  ON  LW.USERID = US.USER_ID
                        LEFT  JOIN QAM_QCINSPECTOR       QI  ON  LW.WORKERNAME = QI.INSPECTORID
                        WHERE   1=1
                    ) WD
                    GROUP BY WD.LOTID
                        ,   WD.PROCESSSEGMENTID
                        ,   WD.WORKCOUNT
                        ,   WD.USERSEQUENCE
                        ,   WD.SUBUSERSEQUENCE
                        ,   WD.PROCESSSEQUENCE
                )
				SELECT  X.LOTID
				    ,   X.PROCESSSEGMENTID   
				    ,	X.PROCESSSEGMENTNAME
				    ,	X.PROCESSUSERSEQUENCE							AS USERSEQUENCE
				    ,	X.WORKSTARTTIME
				    ,   X.WORKENDDATE
				    ,	X.EQUIPMENTID
				    ,	X.EQUIPMENTNAME
				    ,   X.WORKERNAME                                    AS WORKER
				    ,	X.AREAID
				    ,	X.AREANAME
				    ,   NVL(SD.DICTIONARYNAME,X.EQPLOTPROCESSTYPE) AS STATE
				FROM
				(
					SELECT 	ER.LOTID
						,   ER.PROCESSSEGMENTID
						,   NVL(DC2.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
						,	ER.USERSEQUENCE
						,	ER.SUBUSERSEQUENCE
						,   ER.PROCESSSEQUENCE										AS PROCESSUSERSEQUENCE
						,	ER.WORKCOUNT
						,   ER.WORKSTARTTIME
						,   ER.WORKENDDATE
						,   ER.EQUIPMENTID
						,   NVL(DC1.DICTIONARYNAME , EQ.EQUIPMENTNAME)			AS EQUIPMENTNAME
						,   WD.WORKERNAME
						,   ER.AREAID
						,   NVL(DC3.DICTIONARYNAME , AR.AREANAME)				AS AREANAME
						,   CASE WHEN ER.ISREWORK = 'IsRework' THEN 'IsRework'
							     ELSE CASE WHEN ER.TXNID = 'SaveChangeEquipment' THEN 'Added'
							               ELSE 'Normal'
							               END
							     END  EQPLOTPROCESSTYPE
					FROM 	EQUIPMENTRESULT				ER
					INNER JOIN BAS_EQUIPMENT             EQ  ON  ER.EQUIPMENTID = EQ.EQUIPMENTID
					LEFT  JOIN CMD_DICTIONARY            DC1 ON  EQ.EQUIPMENTNAME = DC1.DICTIONARYID
					                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  ER.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
					LEFT  JOIN CMD_DICTIONARY            DC2 ON  SG.PROCESSSEGMENTNAME = DC2.DICTIONARYID
					                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN BAS_AREA                  AR  ON  ER.AREAID = AR.AREAID
					LEFT  JOIN CMD_DICTIONARY            DC3 ON  AR.AREANAME = DC3.DICTIONARYID
					                                        AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
                    LEFT  JOIN WOKERDATA                WD  ON  ER.LOTID = WD.LOTID
                                                            AND ER.PROCESSSEGMENTID = WD.PROCESSSEGMENTID
                                                            AND ER.PROCESSSEQUENCE = WD.PROCESSSEQUENCE
                                                            AND ER.WORKCOUNT = WD.WORKCOUNT
				)X
				LEFT JOIN CMD_LOOKUP_VALUES       SC ON  X.EQPLOTPROCESSTYPE = SC.LOOKUP_CODE
	                                       AND SC.LOOKUP_TYPE = 'LotWorkType'  
				LEFT JOIN CMD_DICTIONARY SD ON  SC.DICTIONARYID = SD.DICTIONARYID
				                           AND SD.LANGUAGETYPE = #{LANGUAGETYPE}
				ORDER BY X.WORKSTARTTIME, X.USERSEQUENCE, X.WORKCOUNT, X.SUBUSERSEQUENCE 
	</select>
	
	<!-- 5. Recipe -->
	<select id="selectLotHistoryEquipmentRecipe" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryEquipmentRecipe 10001 */
			WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				),
				EQUIPMENTRESULT AS
				(
					SELECT 	LEQ.LOTID
						,   LEQ.PROCESSSEGMENTID
						,   TO_NUMBER(LV.USERSEQUENCE)									AS USERSEQUENCE
						,   TO_NUMBER(LV.SUBUSERSEQUENCE)									AS SUBUSERSEQUENCE
						,	LV.PROCESSSEQUENCE
						,   TO_CHAR(LEQ.TRACKINTIME, 'YYYY-MM-DD HH24:MI')			AS WORKSTARTTIME
						,   TO_CHAR(LEQ.TRACKOUTTIME, 'YYYY-MM-DD HH24:MI')			AS WORKENDDATE
						,   LEQ.EQUIPMENTID											AS EQUIPMENTID
						,   LEQ.RECIPEID
                        ,   LEQ.RECIPEVERSION
						,   WR.AREAID
						,	LV.WORKCOUNT
						,	LEQ.TXNID
						,	LV.ISREWORK
						,   WR.RESOURCEID
					FROM 	WORKRESULT					LV
					INNER JOIN PCM_LOTEQUIPMENT			LEQ	ON 	LV.LOTID = LEQ.LOTID
															AND LV.PROCESSSEGMENTID = LEQ.PROCESSSEGMENTID
															AND LV.WORKCOUNT = LEQ.WORKCOUNT
					LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
					                                        AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
					                                        AND LV.USERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
					                                        AND LV.WORKCOUNT = WR.WORKCOUNT
					WHERE   1=1
					AND     NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
					AND 	WR.USERSEQUENCE IS NOT NULL
					UNION ALL 
					SELECT 	LEQ.LOTID
						,   LEQ.PROCESSSEGMENTID
						,   TO_NUMBER(LV.USERSEQUENCE)									AS USERSEQUENCE
						,   TO_NUMBER(LV.SUBUSERSEQUENCE)									AS SUBUSERSEQUENCE
						,	LV.PROCESSSEQUENCE
						,   TO_CHAR(LEQ.TRACKINTIME, 'YYYY-MM-DD HH24:MI')			AS WORKSTARTTIME
						,   TO_CHAR(LEQ.TRACKOUTTIME, 'YYYY-MM-DD HH24:MI')			AS WORKENDDATE
						,   LEQ.EQUIPMENTID											AS EQUIPMENTID
						,   LEQ.RECIPEID
                        ,   LEQ.RECIPEVERSION
						,   WR.AREAID
						,	LV.WORKCOUNT
						,	LEQ.TXNID
						,	LV.ISREWORK
						,   WR.RESOURCEID
					FROM 	WORKRESULT					LV
					INNER JOIN PCM_LOTEQUIPMENT			LEQ	ON 	LV.LOTID = LEQ.LOTID
															AND LV.SUBPROCESSSEGMENTID = LEQ.PROCESSSEGMENTID
															AND LV.WORKCOUNT = LEQ.WORKCOUNT
					LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
					                                        AND LV.SUBPROCESSSEGMENTID = WR.PROCESSSEGMENTID
					                                        AND LV.SUBUSERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
					                                        AND LV.WORKCOUNT = WR.WORKCOUNT
					WHERE   1=1
					AND     NVL(WR.RESULTTYPE, 'NORMAL') = 'NORMAL'
					AND 	WR.USERSEQUENCE IS NOT NULL
				)
				SELECT  X.LOTID
				    ,   X.PROCESSSEGMENTID   
				    ,	X.PROCESSSEGMENTNAME
				    ,	X.PROCESSUSERSEQUENCE							AS USERSEQUENCE
				    ,	X.WORKSTARTTIME
				    ,   X.WORKENDDATE
				    ,	X.EQUIPMENTID
				    ,	X.EQUIPMENTNAME
				    ,   X.RECIPEID
                    ,   X.RECIPEVERSION
				    ,	X.AREAID
				    ,	X.AREANAME
				    ,   NVL(SD.DICTIONARYNAME,X.EQPLOTPROCESSTYPE) AS STATE
				    ,	X.RESOURCEID
				FROM
				(
					SELECT 	ER.LOTID
						,   ER.PROCESSSEGMENTID
						,   NVL(DC2.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
						,	ER.USERSEQUENCE
						,	ER.SUBUSERSEQUENCE
						,   ER.PROCESSSEQUENCE										AS PROCESSUSERSEQUENCE
						,	ER.WORKCOUNT
						,   ER.WORKSTARTTIME
						,   ER.WORKENDDATE
						,   ER.EQUIPMENTID
						,   NVL(DC1.DICTIONARYNAME , EQ.EQUIPMENTNAME)			AS EQUIPMENTNAME
						,   ER.RECIPEID
                        ,   NVL(ER.RECIPEVERSION, '0')                         AS RECIPEVERSION
						,   ER.AREAID
						,   NVL(DC3.DICTIONARYNAME , AR.AREANAME)				AS AREANAME
						,   CASE WHEN ER.ISREWORK = 'IsRework' THEN 'IsRework'
							     ELSE CASE WHEN ER.TXNID = 'SaveChangeEquipment' THEN 'Added'
							               ELSE 'Normal'
							               END
							     END  EQPLOTPROCESSTYPE
						,	ER.RESOURCEID
					FROM 	EQUIPMENTRESULT				ER
					INNER JOIN BAS_EQUIPMENT             EQ  ON  ER.EQUIPMENTID = EQ.EQUIPMENTID
					LEFT  JOIN CMD_DICTIONARY            DC1 ON  EQ.EQUIPMENTNAME = DC1.DICTIONARYID
					                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  ER.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
					LEFT  JOIN CMD_DICTIONARY            DC2 ON  SG.PROCESSSEGMENTNAME = DC2.DICTIONARYID
					                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN BAS_AREA                  AR  ON  ER.AREAID = AR.AREAID
					LEFT  JOIN CMD_DICTIONARY            DC3 ON  AR.AREANAME = DC3.DICTIONARYID
					                                        AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				)X
				LEFT JOIN CMD_LOOKUP_VALUES       SC ON  X.EQPLOTPROCESSTYPE = SC.LOOKUP_CODE
	                                       			AND SC.LOOKUP_TYPE = 'LotWorkType'  
				LEFT JOIN CMD_DICTIONARY SD ON  SC.DICTIONARYID = SD.DICTIONARYID
				                           AND SD.LANGUAGETYPE = #{LANGUAGETYPE}
				ORDER BY X.WORKSTARTTIME, X.USERSEQUENCE, X.WORKCOUNT, X.SUBUSERSEQUENCE 
	</select>
	
	<!-- 5-1. Recipe Parameter -->
	<select id="selectLotHistoryEquipmentRecipePara" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryEquipmentRecipePara 10001 */

	</select>
	
	
	<!-- 6. 이상발생 -->
	<select id="selectLotHistoryAbnormal" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryAbnormal 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  DISTINCT 
						Z.LOTID
				    ,   Z.ABNORMALTYPE
				    ,   Z.USERSEQUENCE    									AS USERSEQUENCE
				    ,	Z.WORKCOUNT
				    ,   Z.PROCESSSEGMENTID
				    ,   NVL(DC1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
				    ,   Z.AREAID
				    ,   NVL(DC2.DICTIONARYNAME, AR.AREANAME)           AS AREANAME
				    ,   Z.OCCURDATE
				    ,   Z.REASONCODECLASSNAME
				    ,   Z.REASONCODENAME
				    ,   Z.ABNORMALSTATUS
				    ,	Z.STOPRELEASEDATE
				    ,   Z.RECEIVEDATE
                    ,   Z.LOTSENDDATE
				FROM
				(
				    SELECT  LK.LOTID
                        ,   'LOCK'                                                  AS ABNORMALTYPE
                        ,   LK.PROCESSSEGMENTID
                        ,   LV.PROCESSSEQUENCE
                        ,	LV.USERSEQUENCE
                        ,   LV.WORKCOUNT
                        ,   LV.RECEIVEDATE
                        ,   LV.LOTSENDDATE
                        ,   LK.AREAID
                        ,   LK.LOCKINGTYPE
                        ,   NVL(DC1.DICTIONARYNAME, RC.REASONCODECLASSNAME)    AS REASONCODECLASSNAME
                        ,   LK.LOCKINGCODE
                        ,   TO_CHAR(LK.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS OCCURDATE
                        ,   NVL(DC2.DICTIONARYNAME, RD.REASONCODENAME)         AS REASONCODENAME   
                        ,   LK.LOCKINGSTATUS                                        AS ABNORMALSTATUS
                        ,   TO_CHAR(LK.TXNTIME, 'YYYY-MM-DD HH24:MI:SS')            AS STOPRELEASEDATE
                    FROM    WORKRESULT              LV
				    INNER JOIN PCM_LOTLOCKING        LK  ON  LV.LOTID = LK.LOTID
				                                        AND LV.PROCESSSEGMENTID = LK.PROCESSSEGMENTID
				                                        AND LV.USERSEQUENCE = TO_NUMBER(LK.USERSEQUENCE)
				    INNER JOIN BAS_REASONCODECLASS   RC  ON  LK.LOCKINGTYPE = RC.REASONCODECLASSID
				    LEFT  JOIN CMD_DICTIONARY        DC1 ON  RC.REASONCODECLASSNAME = DC1.DICTIONARYID
				                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				    INNER JOIN BAS_REASONCODE        RD  ON  LK.LOCKINGCODE = RD.REASONCODEID
				    LEFT  JOIN CMD_DICTIONARY        DC2 ON  RD.REASONCODENAME = DC2.DICTIONARYID
				                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
					WHERE   1=1
				    UNION ALL
					SELECT  LH.LOTID
                        ,   'HOLD'                                                  AS ABNORMALTYPE
                        ,   LH.PROCESSSEGMENTID
                        ,   LV.PROCESSSEQUENCE
                        ,	LV.USERSEQUENCE
                        ,   LV.WORKCOUNT
                        ,   LV.RECEIVEDATE
                        ,   LV.LOTSENDDATE
                        ,   LH.AREAID
                        ,   LH.HOLDTOPCLASSID
                        ,   NVL(DC1.DICTIONARYNAME, RC.REASONCODECLASSNAME)    AS REASONCODECLASSNAME
                        ,   LH.HOLDCODE
                        ,   TO_CHAR(LH.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS OCCURDATE
                        ,   NVL(DC2.DICTIONARYNAME, RD.REASONCODENAME)         AS REASONCODENAME   
                        ,   LH.HOLDSTATUS                                           AS ABNORMALSTATUS
                        ,   TO_CHAR(LH.RELEASEDATE, 'YYYY-MM-DD HH24:MI:SS')        AS STOPRELEASEDATE
                    FROM    WORKRESULT              LV
					INNER JOIN PCM_LOTHOLD           LH  ON  LV.LOTID = LH.LOTID
					                                    AND LV.PROCESSSEGMENTID = LH.PROCESSSEGMENTID
					INNER JOIN BAS_REASONCODECLASS   RC  ON  LH.HOLDTOPCLASSID = RC.REASONCODECLASSID
					LEFT  JOIN CMD_DICTIONARY        DC1 ON  RC.REASONCODECLASSNAME = DC1.DICTIONARYID
					                                    AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					INNER JOIN BAS_REASONCODE        RD  ON  LH.HOLDCODE = RD.REASONCODEID
					LEFT  JOIN CMD_DICTIONARY        DC2 ON  RD.REASONCODENAME = DC2.DICTIONARYID
					                                    AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
					WHERE   1=1
					UNION ALL
					SELECT  LV.LOTID
					    ,   'NCR'                                                   AS ABNORMALTYPE
					    ,   LL.PROCESSSEGMENTID
					    ,   LV.PROCESSSEQUENCE
					    ,	LV.USERSEQUENCE
					    ,	LV.WORKCOUNT
					    ,   LV.RECEIVEDATE
                        ,   LV.LOTSENDDATE
					    ,   LL.AREAID
					    ,   ''                                                      AS HOLDTOPCLASSID
					    ,   NVL(DC1.DICTIONARYNAME, RC.REASONCODECLASSNAME)    AS REASONCODECLASSNAME
					    ,   TO_CHAR(AN.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS OCCURDATE
					    ,   AL.REASONCODEID
					    ,   NVL(DC2.DICTIONARYNAME, RD.REASONCODENAME)         AS REASONCODENAME   
					    ,   CASE WHEN AL.ISLOCKING = 'Y' AND LL.LOCKINGSTATUS = 'Y' THEN 'Stop'
                            WHEN AN.STATE = 'N' THEN 'Run'
                            WHEN AN.STATE = 'Y' THEN 'Complete' END			        AS ABNORMALSTATUS
                        ,	TO_CHAR(EV.CLOSEDATE, 'YYYY-MM-DD HH24:MI:SS') 			AS STOPRELEASEDATE
					FROM    QAM_ABNORMALOCCURRENCE       	AN
					INNER JOIN QAM_AFFECTLOT             	AL  ON  AN.ABNOCRNO = AL.ABNOCRNO
					                                        	AND AN.ABNOCRTYPE = AL.ABNOCRTYPE
					                                        	AND AN.ABNOCRTYPE = 'ChemicalAnalysisInspection'
					LEFT  JOIN BAS_REASONCODE            	RD  ON  AL.REASONCODEID = RD.REASONCODEID
					LEFT  JOIN BAS_REASONCODECLASS           RC  ON  RD.REASONCODECLASSID = RC.REASONCODECLASSID
					LEFT  JOIN CMD_DICTIONARY                DC1 ON  RC.REASONCODECLASSNAME = DC1.DICTIONARYID
																AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN PCM_LOTLOCKING            	LL  ON  AL.LOTID = LL.LOTID
					                                        	AND AL.LOCKINGTXNHISTKEY = LL.TXNHISTKEY
					INNER JOIN WORKRESULT                 	LV  ON  LL.LOTID = LV.LOTID
																AND LL.PROCESSSEGMENTID = LV.PROCESSSEGMENTID
					LEFT  JOIN CMD_DICTIONARY            	DC2 ON  RD.REASONCODENAME = DC2.DICTIONARYID
					                                        	AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN QAM_ESTIMATEVALIDITY			EV	ON 	AN.ABNOCRNO = EV.ABNOCRNO
																AND EV.SEQUENCE = 1
																AND EV.ISCLOSE = 'Y'
					WHERE   1=1
					UNION ALL
					SELECT LV.LOTID
					    ,   'NCR'                                                   AS ABNORMALTYPE
					    ,   AN.PROCESSSEGMENTID
					    ,   PROCESSSEQUENCE
					    ,	LV.USERSEQUENCE
					    ,	LV.WORKCOUNT
					    ,   LV.RECEIVEDATE
                        ,   LV.LOTSENDDATE
					    ,   AN.AREAID
					    ,   ''                                                      AS HOLDTOPCLASSID
					    ,   NVL(DC1.DICTIONARYNAME, RC.REASONCODECLASSNAME)    AS REASONCODECLASSNAME
					    ,   AN.REASONCODEID
					    ,   TO_CHAR(AN.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS OCCURDATE
					    ,   NVL(DC2.DICTIONARYNAME, RD.REASONCODENAME)         AS REASONCODENAME   
					    ,   CASE WHEN AL.ISLOCKING = 'Y' AND LL.LOCKINGSTATUS = 'Y' THEN 'Stop'
                            WHEN AN.STATE = 'N' THEN 'Run'
                            WHEN AN.STATE = 'Y' THEN 'Complete' END			        AS ABNORMALSTATUS
                        ,	TO_CHAR(EV.CLOSEDATE, 'YYYY-MM-DD HH24:MI:SS') 			AS STOPRELEASEDATE
					FROM    WORKRESULT                     	LV
					INNER JOIN QAM_ABNORMALOCCURRENCE		AN	ON  LV.LOTID = AN.LOTID
					                                        	AND LV.PROCESSSEGMENTID = AN.PROCESSSEGMENTID
					LEFT  JOIN QAM_AFFECTLOT                 AL  ON  AN.ABNOCRNO = AL.ABNOCRNO
					                                        	AND AN.ABNOCRTYPE = AL.ABNOCRTYPE
					                                        	AND AN.LOTID = AL.LOTID
					LEFT  JOIN BAS_REASONCODE                RD  ON  AN.REASONCODEID = RD.REASONCODEID
					INNER JOIN BAS_REASONCODECLASS           RC  ON  RD.REASONCODECLASSID = RC.REASONCODECLASSID
                    LEFT  JOIN CMD_DICTIONARY                DC1 ON  RC.REASONCODECLASSNAME = DC1.DICTIONARYID
                                                                AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN PCM_LOTLOCKING                LL  ON  AL.LOTID = LL.LOTID
					                                        	AND AL.LOCKINGTXNHISTKEY = LL.TXNHISTKEY
					LEFT  JOIN CMD_DICTIONARY                DC2 ON  RD.REASONCODENAME = DC2.DICTIONARYID
					                                        	AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT  JOIN QAM_ESTIMATEVALIDITY			EV	ON 	AN.ABNOCRNO = EV.ABNOCRNO
																AND EV.SEQUENCE = 1
																AND EV.ISCLOSE = 'Y'
					WHERE   1=1
				) Z
				LEFT JOIN BAS_PROCESSSEGMENT     SG  ON  Z.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT JOIN CMD_DICTIONARY         DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
				                                AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT JOIN BAS_AREA               AR  ON  Z.AREAID = AR.AREAID
				LEFT JOIN CMD_DICTIONARY         DC2 ON  AR.AREANAME = DC2.DICTIONARYID
				                                AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				ORDER BY Z.RECEIVEDATE, Z.LOTSENDDATE, TO_NUMBER(Z.USERSEQUENCE), Z.WORKCOUNT 
	</select>
	
	<!-- 7. 불량 -->
	<select id="selectLotHistoryDefect" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryDefect 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY2(#{LOTID}, #{LANGUAGETYPE})
				),
				LOTINPUTDATA AS
                (
                	SELECT  DISTINCT
                            CASE WHEN WR.ROOTLOTID = #{LOTID} THEN '10'
                            ELSE PROCESSSEQUENCE END AS PROCESSSEQUENCE
                        ,   SENDPCSQTY               AS DFTINPUTQTY
                    FROM    WORKRESULT                  WR
                    INNER JOIN BAS_PRODUCTDEFINITION     PD  ON  WR.PRODUCTDEFID = PD.PRODUCTDEFID
                                                            AND WR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
                    WHERE   WR.PROCESSSEGMENTID IN (SELECT PROCESSSEGMENTID FROM BAS_PROCESSSEGMENT WHERE PROCESSSEGMENTCLASSID = '1020')
                    AND     NVL(PD.RTRSHT, 'RTR') = 'RTR'
                    UNION ALL
                    SELECT  PROCESSSEQUENCE
                        ,   RECEIVEPCSQTY                  AS DFTINPUTQTY
                    FROM    WORKRESULT                  WR
                    INNER JOIN BAS_PRODUCTDEFINITION     PD  ON  WR.PRODUCTDEFID = PD.PRODUCTDEFID
                                                            AND WR.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
                    WHERE   WR.PROCESSSEQUENCE = '10'
                    AND     PD.RTRSHT = 'SHT'
                ),
				DEFECTLIST AS
				(
				    SELECT  WR.LOTID
				    	,	WR.ROOTLOTID
				        ,   WR.PRODUCTDEFID
				        ,   WR.PRODUCTDEFVERSION
				        ,   WR.PROCESSDEFID
				        ,   WR.PROCESSDEFVERSION
				        ,   WR.PROCESSSEGMENTID
				        ,   WR.USERSEQUENCE
				        ,	WR.WORKCOUNT
				        ,   SUM(DF.DEFECTQTY)       AS DEFECTQTY
				    FROM    WORKRESULT          WR
				    INNER JOIN PCM_LOT           L   ON  WR.LOTID = L.LOTID
					LEFT  JOIN PCM_LOT           DL  ON  L.LOTID = DL.PARENTLOTID
				    LEFT JOIN PCM_LOTDEFECT      DF  ON  DL.LOTID = DF.LOTID
                                                    AND WR.PRODUCTDEFID = DF.PRODUCTDEFID
                                                    AND WR.PRODUCTDEFVERSION = DF.PRODUCTDEFVERSION
                                                    AND WR.PROCESSSEGMENTID = DF.PROCESSSEGMENTID
                                                    AND WR.WORKCOUNT = NVL(DF.WORKCOUNT, DL.WORKCOUNT)
				    GROUP BY WR.LOTID
				    	,	WR.ROOTLOTID
				        ,   WR.PRODUCTDEFID
				        ,   WR.PRODUCTDEFVERSION
				        ,   WR.PROCESSDEFID
				        ,   WR.PROCESSDEFVERSION
				        ,   WR.PROCESSSEGMENTID
				        ,   WR.USERSEQUENCE
				        ,	WR.WORKCOUNT
				),
				SELFTAKEINSP AS
				(
					SELECT *
					FROM
					(
					    SELECT  WR.LOTID
					    	,	WR.ROOTLOTID
					        ,   WR.PROCESSSEGMENTID
					        ,   WR.USERSEQUENCE
					        ,	WR.WORKCOUNT
					        ,   IR.SPECOUTQTY
					        ,	RANK() OVER (PARTITION BY IR.RESOURCEID, IR.INSPECTIONDEFID, IR.PROCESSSEGMENTID ORDER BY IR."degree") AS RNK
					    FROM    WORKRESULT              WR
					    INNER JOIN QAM_INSPECTIONRESULT  IR  ON  WR.LOTID = IR.RESOURCEID
					                                        AND IR.INSPECTIONDEFID = 'SelfInspectionTake'
					                                        AND WR.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
					) IR
					WHERE	IR.RNK = 1
				),
				SELFSHIPINSP AS
				(
					SELECT *
					FROM
					(
					    SELECT  WR.LOTID
					    	,	WR.ROOTLOTID
					        ,   WR.PROCESSSEGMENTID
					        ,   WR.USERSEQUENCE
					        ,	WR.WORKCOUNT
					        ,   IR.SPECOUTQTY
					        ,	RANK() OVER (PARTITION BY IR.RESOURCEID, IR.INSPECTIONDEFID, IR.PROCESSSEGMENTID ORDER BY IR."degree") AS RNK
					    FROM    WORKRESULT              WR
					    INNER JOIN QAM_INSPECTIONRESULT  IR  ON  WR.LOTID = IR.RESOURCEID
					                                        AND IR.INSPECTIONDEFID = 'SelfInspectionShip'
					                                        AND WR.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
					) IR
					WHERE	IR.RNK = 1
				),
				AOIBBTINSP AS
				(
					SELECT *
					FROM
					(
					    SELECT  WR.LOTID
					    	,	WR.ROOTLOTID
					        ,   WR.PROCESSSEGMENTID
					        ,   WR.USERSEQUENCE
					        ,	WR.WORKCOUNT
					        ,   IR.SPECOUTQTY
					        ,	RANK() OVER (PARTITION BY IR.RESOURCEID, IR.INSPECTIONDEFID, IR.PROCESSSEGMENTID ORDER BY IR."degree") AS RNK
					    FROM    WORKRESULT              WR
					    INNER JOIN QAM_INSPECTIONRESULT  IR  ON  WR.LOTID = IR.RESOURCEID
					                                        AND IR.INSPECTIONDEFID IN ('AOIInspection', 'BBTInspection','AOIHoleInspection') -- AOIHoleInspection 추가해 달라고 함. by 박성수 
					                                        AND WR.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
					) IR
					WHERE	IR.RNK = 1
				)
				SELECT  WR.*
					,   CASE WHEN WR.SUBUSERSEQUENCE = 0 AND WR.ISREWORK ='IsRework' THEN WR.USERSEQUENCE || '.' || WR.WORKCOUNT ELSE WR.PROCESSSEQUENCE END AS PROCESSSEQUENCE2
					,   CASE WHEN SG.PROCESSSEGMENTCLASSID = '1020' THEN WR.SENDPCSQTY 
                        ELSE WR.RECEIVEPCSQTY END                                                           AS INPUTPCSQTY
					,   DF.DEFECTQTY
					,   SUM(DF.DEFECTQTY) OVER (PARTITION BY DF.ROOTLOTID ORDER BY TO_NUMBER(WR.USERSEQUENCE))	AS CUM_DEFECTQTY
					,   ROUND((TO_NUMBER(DF.DEFECTQTY) / TO_NUMBER(LID.DFTINPUTQTY)) * 100, 2)                  AS DEFECTRATE
					,   ROUND(SUM((TO_NUMBER(DF.DEFECTQTY)/ TO_NUMBER(LID.DFTINPUTQTY)) * 100) OVER (PARTITION BY DF.ROOTLOTID ORDER BY TO_NUMBER(WR.USERSEQUENCE)), 2)
                        AS CUM_DEFECTRATE
					,   STI.SPECOUTQTY                                                                      AS INBOUNDINSPECTION
					,   SSI.SPECOUTQTY                                                                      AS SELFINSPECTION
					,	AOB.SPECOUTQTY																		AS AOI
					,   CASE WHEN WR.RECEIVEPCSQTY > 0 THEN 
							ROUND(((NVL(TO_NUMBER(DF.DEFECTQTY), 0) + NVL(TO_NUMBER(AOB.SPECOUTQTY), 0)) 
					    	/ TO_NUMBER(WR.RECEIVEPCSQTY)) * 100, 2)
					    ELSE NULL END																		AS PROCESSSEGMENT
					,   CASE WHEN COALESCE(WR.RECEIVEPCSQTY, 0) > 0 THEN
							CASE WHEN DF.DEFECTQTY > 0 AND COALESCE(AOB.SPECOUTQTY, 0) > 0 THEN
								ROUND(SUM(((NVL(TO_NUMBER(DF.DEFECTQTY), 0) + NVL(TO_NUMBER(AOB.SPECOUTQTY), 0)) 
						    	/ TO_NUMBER(LID.DFTINPUTQTY)) * 100) OVER (PARTITION BY DF.ROOTLOTID ORDER BY TO_NUMBER(WR.USERSEQUENCE)), 2)
							ELSE 
								ROUND(SUM(((NVL(TO_NUMBER(DF.DEFECTQTY), 0) + NVL(TO_NUMBER(AOB.SPECOUTQTY), 0)) 
							    / TO_NUMBER(LID.DFTINPUTQTY)) * 100) OVER (PARTITION BY DF.ROOTLOTID ORDER BY TO_NUMBER(WR.USERSEQUENCE)), 2)
						    END
						END 			AS CUM_PREDICTDEFECTRATE
				FROM    WORKRESULT              WR
				INNER JOIN BAS_PROCESSSEGMENT    SG  ON  WR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT  JOIN LOTINPUTDATA         LID ON  TO_NUMBER(WR.USERSEQUENCE) >= TO_NUMBER(LID.PROCESSSEQUENCE)
				LEFT  JOIN DEFECTLIST           DF  ON  WR.LOTID = DF.LOTID
				                                    AND WR.PRODUCTDEFID = DF.PRODUCTDEFID
				                                    AND WR.PRODUCTDEFVERSION = DF.PRODUCTDEFVERSION
				                                    AND WR.PROCESSDEFID = DF.PROCESSDEFID
				                                    AND WR.PROCESSDEFVERSION = DF.PROCESSDEFVERSION
				                                    AND WR.PROCESSSEGMENTID = DF.PROCESSSEGMENTID
				                                    AND WR.USERSEQUENCE = DF.USERSEQUENCE
				                                    AND WR.WORKCOUNT = DF.WORKCOUNT
				LEFT JOIN SELFTAKEINSP          STI ON  WR.LOTID = STI.LOTID
													AND WR.PROCESSSEGMENTID = STI.PROCESSSEGMENTID
													AND WR.USERSEQUENCE = STI.USERSEQUENCE
													AND WR.WORKCOUNT = STI.WORKCOUNT
				LEFT JOIN SELFSHIPINSP          SSI ON  WR.LOTID = SSI.LOTID
													AND WR.PROCESSSEGMENTID = SSI.PROCESSSEGMENTID
													AND WR.USERSEQUENCE = SSI.USERSEQUENCE
													AND WR.WORKCOUNT = SSI.WORKCOUNT
				LEFT JOIN AOIBBTINSP	        AOB ON  WR.LOTID = AOB.LOTID
													AND WR.PROCESSSEGMENTID = AOB.PROCESSSEGMENTID
													AND WR.USERSEQUENCE = AOB.USERSEQUENCE
													AND WR.WORKCOUNT = AOB.WORKCOUNT
				WHERE 	1=1
				ORDER BY TO_NUMBER(WR.USERSEQUENCE), WR.RECEIVEDATE, WR.LOTSENDDATE, TO_NUMBER(WR.SUBUSERSEQUENCE), WR.WORKCOUNT 
	</select>
	
	<!-- 8-1. 주차 -->
	<select id="selectLotHistoryInkjet" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryInkjet 10001 */
				WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
                SELECT  LV.LOTID
                    ,   TO_NUMBER(WR.USERSEQUENCE)									AS USERSEQUENCE
                    ,   SG.PROCESSSEGMENTID
                    ,   NVL(DC1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)     AS PROCESSSEGMENTNAME
                    ,   TO_CHAR(WR.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS WORKENDDATE
                    ,   WR.AREAID
                    ,   NVL(DC2.DICTIONARYNAME, AR.AREANAME)               AS AREANAME
                    ,   L.WEEK
                FROM    WORKRESULT                  LV
                INNER JOIN BAS_PROCESSPATH           PP  ON  SPLIT_PART(LV.PROCESSPATHSTACK,'.',1) = PP.PROCESSPATHID
                LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
                                                        AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                        AND LV.USERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
                LEFT  JOIN PCM_LOT					L	ON 	LV.LOTID = L.LOTID
                INNER JOIN BAS_PROCESSSEGMENT        SG  ON  WR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY            DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
                                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA                  AR  ON  WR.AREAID = AR.AREAID
                LEFT  JOIN CMD_DICTIONARY            DC2 ON  AR.AREANAME = DC2.DICTIONARYID
                                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
                WHERE   PP.ISWEEKMNG = 'Y' 
	</select>
	
	<!-- 8-2. 주차 -->
	<select id="selectLotHistoryQR" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryQR 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				),
				QRDATA AS
				(
				    SELECT  LV.LOTID
				        ,   MIN(PC.PCSID)       AS QRNO
				    FROM    WORKRESULT      LV
				    INNER JOIN PCM_LOTPCSREL PC  ON  LV.LOTID = PC.LOTID
				    GROUP BY LV.LOTID
				)
				SELECT  LV.LOTID
                    ,   TO_NUMBER(WR.USERSEQUENCE)									AS USERSEQUENCE
                    ,   SG.PROCESSSEGMENTID
                    ,   NVL(DC1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)     AS PROCESSSEGMENTNAME
                    ,   TO_CHAR(WR.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS')        AS WORKENDDATE
                    ,   WR.AREAID
                    ,   COALESCE(DC2.DICTIONARYNAME, AR.AREANAME)               AS AREANAME
                    ,   QR.QRNO
                FROM    WORKRESULT                  LV
                LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
                                                        AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                        AND LV.USERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
                INNER JOIN BAS_PROCESSSEGMENT        SG  ON  WR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY            DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
                                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA                  AR  ON  WR.AREAID = AR.AREAID
                LEFT  JOIN CMD_DICTIONARY            DC2 ON  AR.AREANAME = DC2.DICTIONARYID
                                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
                INNER JOIN QRDATA                   QR  ON  LV.LOTID = QR.LOTID
                WHERE   SG.PROCESSSEGMENTTYPE = 'QRPrint'
	</select>
	
	<!-- 8-3. 주차 -->
	<select id="selectLotHistoryPacking" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryPacking 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
                SELECT  LV.LOTID
                    ,   BX.BOXNO
                    ,   L.WEEK
                    ,   BX.QTY
                    ,   TO_CHAR(BX.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')    AS PACKINGDATE
                FROM    WORKRESULT                  LV
                INNER JOIN PCM_LOT                   L   ON  LV.LOTID = L.LOTID
                INNER  JOIN PCM_BOXPACKING           BX  ON  LV.LOTID = BX.LOTID
                                                        AND LV.PROCESSSEGMENTID = BX.PROCESSSEGMENTID
                ORDER BY BX.BOXNO 
	</select>
	
	<!-- 9. FILM -->
	<select id="selectLotHistoryFilm" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryFilm 10001 */
				WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  CML.LOTID
					,   NVL(DC3.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
					,   TO_CHAR(CML.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS')       AS WORKENDDATE
				    ,   CML.DURABLELOTID
				    ,   LV.AREAID
				    ,   NVL(DC2.DICTIONARYNAME , AR.AREANAME)              AS AREANAME
				    ,   DD.DURABLEDEFID
				    ,   DD.DURABLEDEFVERSION
				    ,   NVL(DC1.DICTIONARYNAME , DD.DURABLEDEFNAME)        AS DURABLEDEFNAME
				    ,   LV.PROCESSSEQUENCE										AS USERSEQUENCE
				    ,   CML.PROCESSSEGMENTID
				    ,   NVL(DC3.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
				    ,   DL.CONTRACTIONX || ' : ' || DL.CONTRACTIONY             AS CONTRACTION
				FROM    WORKRESULT                  LV
				INNER JOIN PCM_LOTDURABLE		    CML ON  LV.LOTID = CML.LOTID
				                                        AND LV.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
				                                        AND LV.WORKCOUNT = CML.WORKCOUNT
				INNER JOIN TOM_DURABLELOT            DL  ON  CML.DURABLELOTID = DL.DURABLELOTID
				INNER JOIN TOM_DURABLEDEFINITION     DD  ON  DL.DURABLEDEFID = DD.DURABLEDEFID
				INNER JOIN TOM_DURABLECLASS          DDC ON  DD.DURABLECLASSID = DDC.DURABLECLASSID
                                                        AND DDC.DURABLECLASSTYPE = 'Film'
				LEFT  JOIN CMD_DICTIONARY            DC1 ON  DD.DURABLEDEFNAME = DC1.DICTIONARYID
				                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_AREA                  AR  ON  LV.AREAID = AR.AREAID
				LEFT  JOIN CMD_DICTIONARY            DC2 ON  AR.AREANAME = DC2.DICTIONARYID
				                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  CML.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY            DC3 ON  SG.PROCESSSEGMENTNAME = DC3.DICTIONARYID
				                                        AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN PCM_LOTWORKRESULT         WR  ON  LV.LOTID = WR.LOTID
                                                        AND LV.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                        AND LV.USERSEQUENCE = TO_NUMBER(WR.USERSEQUENCE)
				ORDER BY LV.RECEIVEDATE, LV.LOTSENDDATE, TO_NUMBER(LV.USERSEQUENCE), LV.WORKCOUNT, TO_NUMBER(LV.SUBUSERSEQUENCE) 
	</select>
	
	<!-- 10. W-TIME -->
	<select id="selectLotHistoryWtime" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryWtime 10001 */
				WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  LV.LOTID
				    ,   LW.PROCESSSEGMENTID
				    ,   NVL(DC1.DICTIONARYNAME, FSG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
				    ,   LW.PROCESSPATHID
				    ,   TO_NUMBER(FPT.USERSEQUENCE)								AS USERSEQUENCE
				    ,   LW.TOPROCESSSEGMENTID
				    ,   NVL(DC2.DICTIONARYNAME, TSG.PROCESSSEGMENTNAME)    AS TOPROCESSSEGMENTNAME
				    ,   LW.TOPROCESSPATHID
				    ,   TPT.USERSEQUENCE                                    	AS TOUSERSEQUENCE
				    ,	LW.PROCESSSTATE											AS PROCESSSTATE_CD
				    ,	DC3.DICTIONARYNAME										AS PROCESSSTATE
				    ,   TO_CHAR(LW.SETTIME, 'YYYY-MM-DD HH24:MI:SS')   			AS STARTTIME
				    ,	LW.WTIMELIMIT											AS STDTIMEPERMINUTE
				    ,   TO_CHAR(LW.OCCURETIME, 'YYYY-MM-DD HH24:MI:SS')   		AS LIMITTIME
				    ,	LW.TOPROCESSSTATE										AS TOPROCESSSTATECD
				    ,	DC4.DICTIONARYNAME										AS TOPROCESSSTATE
				    ,   TO_CHAR(LW.WTIME, 'YYYY-MM-DD HH24:MI:SS')   			AS EXECUTETIME
				    ,   CASE WHEN LW.WTIME IS NULL THEN ROUND((LW.OCCURETIME - SYSDATE) * 1440) 
				    	ELSE ROUND((LW.WTIME - LW.SETTIME) * 1440) END AS EXECUTETIMEPERMINUTE  -- 분단위
				FROM    WORKRESULT                  LV
				INNER JOIN PCM_LOTWTIME              LW  ON  LV.LOTID = LW.LOTID
				                                        AND LV.PROCESSSEGMENTID = LW.PROCESSSEGMENTID
				                                        AND LV.PROCESSPATHSTACK LIKE '%' || LW.PROCESSPATHID  -- 재작업인 경우 물릴 수가 없어서 바꿈. 
				                                        --AND LV.USERSEQUENCE = TO_NUMBER(LW.USERSEQUENCE)
				LEFT  JOIN BAS_WTIMEDEFINITION       WT  ON  LW.WTIMEDEFID = WT.WTIMEDEFID
				LEFT  JOIN BAS_PROCESSPATH           FPT ON  LW.PROCESSDEFID = FPT.PROCESSDEFID
				                                        AND LW.PROCESSDEFVERSION = FPT.PROCESSDEFVERSION
				                                        AND LW.PROCESSSEGMENTID = FPT.PROCESSSEGMENTID
				LEFT  JOIN BAS_PROCESSSEGMENT        FSG ON  LW.PROCESSSEGMENTID = FSG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY            DC1 ON  FSG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
				                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_PROCESSPATH           TPT ON  LW.TOPROCESSDEFID = TPT.PROCESSDEFID
				                                        AND LW.TOPROCESSDEFVERSION = TPT.PROCESSDEFVERSION
				                                        AND LW.TOPROCESSSEGMENTID = TPT.PROCESSSEGMENTID
				LEFT  JOIN BAS_PROCESSSEGMENT        TSG ON  LW.TOPROCESSSEGMENTID = TSG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY            DC2 ON  TSG.PROCESSSEGMENTNAME = DC2.DICTIONARYID
				                                        AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN	CMD_LOOKUP_VALUES		CD1 ON	LW.PROCESSSTATE = CD1.LOOKUP_CODE
														AND CD1.LOOKUP_TYPE = '4Step'
				LEFT  JOIN  CMD_DICTIONARY			DC3	ON	CD1.DICTIONARYID = DC3.DICTIONARYID
														AND	DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN	CMD_LOOKUP_VALUES		CD2	ON	LW.TOPROCESSSTATE = CD2.LOOKUP_CODE
														AND	CD2.LOOKUP_TYPE = '4Step'
				LEFT  JOIN	CMD_DICTIONARY			DC4	ON	CD2.DICTIONARYID = DC4.DICTIONARYID
														AND DC4.LANGUAGETYPE = #{LANGUAGETYPE}
                ORDER BY LW.SETTIME
                
	</select>
	
	<!-- 11. 출하정보 -->
	<select id="selectLotHistoryShipmentInsp" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryShipmentInsp 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  LV.LOTID
					,	IR.TXNHISTKEY
					,   IR.TXNGROUPHISTKEY
				    ,   IR."degree" AS DEGREE1
				    ,   TO_CHAR(IR.INSPECTIONDATE, 'YYYY-MM-DD HH24:MI:SS')     AS INSPECTDATE
				    ,   LV.AREAID
				    ,   NVL(DC1.DICTIONARYNAME, AR.AREANAME)               AS AREANAME
				    ,   IR.INSPECTIONRESULT										AS INSPECTINRESULT
				    ,   IR.INSPECTIONUSER
				    ,   IUS.INSPECTORNAME
				FROM    WORKRESULT                  LV
				INNER JOIN QAM_INSPECTIONRESULT      IR  ON  LV.LOTID = IR.RESOURCEID
														AND LV.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
														AND LV.WORKCOUNT = IR.WORKCOUNT
				LEFT  JOIN BAS_AREA                  AR  ON  LV.AREAID = AR.AREAID
				LEFT  JOIN CMD_DICTIONARY            DC1 ON  AR.AREANAME = DC1.DICTIONARYID
				                                        AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN QAM_QCINSPECTOR           IUS ON  IR.INSPECTIONUSER = IUS.INSPECTORID
				WHERE IR.INSPECTIONDEFID = 'ShipmentInspection'
				ORDER BY IR.INSPECTIONDATE
	</select>
	
	<!-- 11-1. 출하정보 -->
	<select id="selectLotHistoryShipmentInspDefect" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryShipmentInspectionDefect 10001 */
			SELECT  IR.RESOURCEID                                   AS LOTID
				    ,   ISD.DEFECTCODE
				    ,   NVL(DC.DICTIONARYNAME, DF.DEFECTCODENAME)  AS DEFECTCODENAME
				    ,   ISD.DEFECTQTY
				FROM    QAM_INSPECTIONDEFECT     ISD
				INNER JOIN QAM_INSPECTIONRESULT  IR  ON  ISD.TXNGROUPHISTKEY = IR.TXNGROUPHISTKEY
				                                    AND ISD.RESOURCETYPE = IR.RESOURCETYPE
				                                    AND ISD.RESOURCEID = IR.RESOURCEID
				INNER JOIN BAS_DEFECTCODE        DF  ON  ISD.DEFECTCODE = DF.DEFECTCODE
				LEFT  JOIN CMD_DICTIONARY        DC  ON  DF.DICTIONARYID = DC.DICTIONARYID
				                                    AND DC.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE   IR.RESOURCEID = #{LOTID}
				AND     IR.TXNGROUPHISTKEY = #{TXNGROUPHISTKEY}
				AND     IR."degree" = #{DEGREE1}
	</select>
	
	<!-- 12. 메시지 정보 -->
	<select id="selectLotHistoryMessage" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryMessage 10001 */
			WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  MSG.TXNHISTKEY
                    ,   MSG.LOTID
                    ,   MSG.PROCESSSEGMENTID
                    ,   NVL(DC1.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
                    ,   NVL(DC3.DICTIONARYNAME , IPS.PROCESSSEGMENTNAME)   AS WRITEPROCESSSEGMENT
                    ,   MSG.USERSEQUENCE                                        AS PATHSEQUENCE
                    ,   MSG.PROCESSSEQUENCE										AS USERSEQUENCE
                    ,   MSG.AREAID
                    ,   NVL(DC2.DICTIONARYNAME , AR.AREANAME)              AS AREANAME
                    ,   MSG.MESSAGETYPE
                    ,   MSG.WRITER
                    ,   MSG.WRITEDATE
                    ,	MSG.ISREAD
                    ,	MSG.CONTEXT
                FROM 
                (
                    SELECT  LCM.TXNHISTKEY
                    	,	LCM.LOTID
                        ,   LCM.PROCESSSEGMENTID
                        ,   LCM.PROCESSSEGMENTID                                AS INPUTPROCESSSEGMENTID
                        ,   LCM.PROCESSSEGMENTVERSION                           AS INPUTPROCESSSEGMENTVERSION
                        ,   LCM.USERSEQUENCE
                        ,	LV.PROCESSSEQUENCE
                        ,	LV.WORKCOUNT
                        ,   LCM.AREAID
                        ,   'Comment'                                           AS MESSAGETYPE
                        ,   NVL(USR.USER_NM, LCM.CREATOR)                 AS WRITER
                        ,   TO_CHAR(LCM.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')   AS WRITEDATE
                        ,	'Y'													AS ISREAD
                        ,	LCM.COMMENTS										AS CONTEXT
                    FROM    WORKRESULT          LV            
                    INNER JOIN PCM_LOTCOMMENT    LCM ON  LV.LOTID = LCM.LOTID
                                                    AND LV.PROCESSSEGMENTID = LCM.PROCESSSEGMENTID
                                                    AND LV.USERSEQUENCE = TO_NUMBER(LCM.USERSEQUENCE)
                    LEFT  JOIN CMD_USERS          USR ON  LCM.CREATOR = USR.USER_ID
                    UNION 
                    SELECT  TO_CHAR(LMS."SEQUENCE")                              AS TXNHISTKEY
                    	,	LMS.LOTID
                        ,   LMS.PROCESSSEGMENTID
                        ,	LMS.REGPROCESSSEGMENTID                             AS INPUTPROCESSSEGMENTID
                        ,   LMS.REGPROCESSSEGMENTVERSION                        AS INPUTPROCESSSEGMENTVERSION
                        ,   LMS.USERSEQUENCE
                        ,	LV.PROCESSSEQUENCE
                        ,	LV.WORKCOUNT
                        ,   LMS.AREAID
                        ,   'Lot Message'										AS MESSAGETYPE
                        ,   NVL(USR.USER_NM, LMS.CREATOR)                 AS WRITER
                        ,   TO_CHAR(LMS.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')   AS WRITEDATE
                        ,	NVL(LMS.ISREAD, 'N')							AS ISREAD
                        ,	LMS.TITLE											AS CONTEXT
                    FROM    WORKRESULT          LV    
                    INNER JOIN PCM_LOTMESSAGE    LMS ON  LV.LOTID = LMS.LOTID
                                                    AND LV.PROCESSSEGMENTID = LMS.PROCESSSEGMENTID
                                                    AND LV.USERSEQUENCE = TO_NUMBER(LMS.USERSEQUENCE)
                    LEFT  JOIN CMD_USERS          USR ON  LMS.CREATOR = USR.USER_ID
                ) MSG
                LEFT  JOIN BAS_PROCESSSEGMENT    SG  ON  MSG.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY        DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
                                                    AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA              AR  ON  MSG.AREAID = AR.AREAID
                LEFT  JOIN CMD_DICTIONARY        DC2 ON  AR.AREANAME = DC2.DICTIONARYID
                                                    AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_PROCESSSEGMENT    IPS ON  MSG.INPUTPROCESSSEGMENTID = IPS.PROCESSSEGMENTID
                                                    AND MSG.INPUTPROCESSSEGMENTVERSION = IPS.PROCESSSEGMENTVERSION
                LEFT  JOIN CMD_DICTIONARY        DC3 ON  IPS.PROCESSSEGMENTNAME = DC3.DICTIONARYID
                                                    AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				ORDER BY MSG.WRITEDATE, MSG.WORKCOUNT, TO_NUMBER(MSG.USERSEQUENCE)
	</select>
	
	<!-- 12-1. Lot 메시지 내용 조회 -->
	<select id="selectLotMessage" parameterType="map" resultType="hashmap">
		/* SelectLotMessage 10001 */
		SELECT  MSG.TXNHISTKEY
                    ,   MSG.LOTID
                    ,   MSG.PROCESSSEGMENTID
                    ,   NVL(DC1.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
                    ,   MSG.USERSEQUENCE
                    ,   MSG.AREAID
                    ,   NVL(DC2.DICTIONARYNAME , AR.AREANAME)              AS AREANAME
                    ,   MSG.MESSAGETYPE
                    ,   MSG.WRITER
                    ,   MSG.WRITEDATE
                    ,   MSG.TITLE
                    ,   MSG.MESSAGE
                FROM 
                (
                    SELECT  LCM.TXNHISTKEY
                    	,	LCM.LOTID
                        ,   LCM.PROCESSSEGMENTID
                        ,   LCM.USERSEQUENCE
                        ,   LCM.AREAID
                        ,   'Comment'                                           AS MESSAGETYPE
                        ,   COALESCE(USR.USER_NM, LCM.CREATOR)                 AS WRITER
                        ,   TO_CHAR(LCM.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')   AS WRITEDATE
                        ,   ''                                                  AS TITLE
                        ,   LCM.COMMENTS                                        AS MESSAGE
                    FROM    PCM_LOTCOMMENT    	LCM
                    LEFT  JOIN CMD_USERS          USR ON  LCM.CREATOR = USR.USER_ID 
                    WHERE 	LCM.LOTID = #{LOTID}
                    AND 	LCM.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
                    AND 	LCM.TXNHISTKEY = #{TXNHISTKEY_SEQUENCE}
                    UNION ALL
                    SELECT  TO_CHAR(LMS."SEQUENCE")                              AS TXNHISTKEY
                    	,	LMS.LOTID
                        ,   LMS.PROCESSSEGMENTID
                        ,   LMS.USERSEQUENCE
                        ,   LMS.AREAID
                        ,   'Lot Message'										AS MESSAGETYPE
                        ,   NVL(USR.USER_NM, LMS.CREATOR)                 AS WRITER
                        ,   TO_CHAR(LMS.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS')   AS WRITEDATE
                        ,   LMS.TITLE
                        ,   LMS.MESSAGE
                    FROM    PCM_LOTMESSAGE    	LMS 
                    LEFT  JOIN CMD_USERS          USR ON  LMS.CREATOR = USR.USER_ID
                    WHERE 	LMS.LOTID = #{LOTID}
                    AND 	LMS.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
                    AND 	LMS."SEQUENCE" =REPLACE (#{TXNHISTKEY_SEQUENCE},'-','') 
                ) MSG
                LEFT  JOIN BAS_PROCESSSEGMENT    SG  ON  MSG.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY        DC1 ON  SG.PROCESSSEGMENTNAME = DC1.DICTIONARYID
                                                    AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA              AR  ON  MSG.AREAID = AR.AREAID
                LEFT  JOIN CMD_DICTIONARY        DC2 ON  AR.AREANAME = DC2.DICTIONARYID
                                                    AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
	</select>
	
	<!-- 13. 작업장 변경 -->
	<select id="selectLotHistoryChangeArea" parameterType="map" resultType="hashmap">
		/* SelectLotHistoryChangeArea 10001 */
		WITH WORKRESULT AS
				(
				    SELECT  *
				    FROM 	FN_GETLOTHISTORY3(#{LOTID}, #{LANGUAGETYPE})
				)
				SELECT  CA.LOTID
					,   CA.USERSEQUENCE
					,   CA.PROCESSSEGMENTID
					,   NVL(DC3.DICTIONARYNAME , SG.PROCESSSEGMENTNAME)    AS PROCESSSEGMENTNAME
					,   NVL(DC4.DICTIONARYNAME , CD.MEANING)              AS PROCESSSTATE                    
					,   CA.LAGAREAID											AS AREAID
					,   NVL(DC1.DICTIONARYNAME, AR1.AREANAME)              	AS PREVAREANAME
					,   CA.AREAID												AS CHANGEAREA
					,   NVL(DC2.DICTIONARYNAME, AR2.AREANAME)              	AS TOAREANAME 
					--,   CA.LAGAREAID											AS CHANGEAREA
					--,	NVL(DC1.DICTIONARYNAME, AR1.AREANAME)              		AS TOAREANAME
					--,	CA.AREAID												AS AREAID
					--,   NVL(DC2.DICTIONARYNAME, AR2.AREANAME)              		AS PREVAREANAME
					,	TO_CHAR(CA.CHANGEDATE, 'YYYY-MM-DD HH24:MI:SS')			AS CHANGEDATE
					,   NVL(US.USER_NM, CA.TXNUSER)                       AS CHANGEUSER
				FROM
				(
					SELECT  Z.LOTID
					    ,   Z.PARENTLOTID
					    ,   Z.USERSEQUENCE
					    ,   Z.PROCESSSEGMENTID
					    ,   Z.AREAID
					    ,   Z.PROCESSSTATE
					    ,	LAG(AREAID) OVER (ORDER BY TXNTIME) AS LAGAREAID
					    ,   Z.TXNTIME							AS CHANGEDATE
						,   Z.TXNID
						,   Z.TXNUSER
					FROM
					(
						SELECT  DISTINCT
						        LV.LOTID
						    ,   LV.PARENTLOTID
						    ,   LV.USERSEQUENCE
						    ,   LV.PROCESSSEGMENTID
						    ,   LH.AREAID
						    ,   LH.PROCESSSTATE
						    ,   LH.TXNTIME
							,   LH.TXNID
							,   LH.TXNUSER
						FROM    WORKRESULT      LV
						LEFT JOIN PCM_LOTHISTORY LH  ON  LV.LOTID = LH.LOTID
						                            AND LV.PROCESSSEGMENTID = LH.PROCESSSEGMENTID
						                            AND TO_NUMBER(LV.USERSEQUENCE) = TO_NUMBER(LH.USERSEQUENCE)
						WHERE  	LH.PROCESSSTATE IN ('WaitForReceive', 'WaitForSend')
						AND 	LH.AREAID NOT IN ('*')
					) Z
--					WINDOW W AS (PARTITION BY LOTID, PROCESSSEGMENTID, PROCESSSTATE) --일단 LAG 하나라 사용할 필요 없어보이는데...
				) CA
				LEFT  JOIN BAS_AREA              AR1 ON  CA.LAGAREAID = AR1.AREAID
				LEFT  JOIN CMD_DICTIONARY        DC1 ON  AR1.AREANAME = DC1.DICTIONARYID
				                                    AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_AREA              AR2 ON  CA.AREAID = AR2.AREAID
				LEFT  JOIN CMD_DICTIONARY        DC2 ON  AR2.AREANAME = DC2.DICTIONARYID
				                                    AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN BAS_PROCESSSEGMENT    SG  ON  CA.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
				LEFT  JOIN CMD_DICTIONARY        DC3 ON  SG.PROCESSSEGMENTNAME = DC3.DICTIONARYID
				                                    AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT  JOIN CMD_LOOKUP_VALUES     CD  ON  CA.PROCESSSTATE = CD.LOOKUP_CODE
				                                    AND CD.LOOKUP_TYPE = 'WipProcessState'
				LEFT  JOIN CMD_DICTIONARY        DC4 ON  CD.DICTIONARYID = DC4.DICTIONARYID
				                                    AND DC4.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN CMD_USERS            US  ON  CA.TXNUSER = US.USER_ID
				WHERE 	1=1
				AND CA.LAGAREAID IS NOT NULL 
				AND CA.LAGAREAID != CA.AREAID 
				AND		CA.TXNID LIKE '/pcm02800/saveChangeArea%'
				ORDER BY TO_NUMBER(CA.USERSEQUENCE )
	</select>
    <select id="selectBasWtimedefinitionList" parameterType="map" resultType="hashmap">
		   SELECT 
		         A.WTIMEDEFID	
		        ,A.WTIMEDEFNAME	
		        ,A.ENTERPRISEID	
		        ,A.PLANTID	
		        ,A.AREAID	
		        ,A.PRODUCTDEFID	
		        ,A.PRODUCTDEFVERSION	
		        ,A.PROCESSDEFID	
		        ,A.PROCESSDEFVERSION	
		        ,A.PROCESSPATHID	
		        ,A.USERSEQUENCE	
		        ,A.PROCESSSEGMENTID	
		        ,A.PROCESSSEGMENTVERSION	
		        ,A.PROCESSSTATE	
		        ,A.TOPROCESSDEFID	
		        ,A.TOPROCESSDEFVERSION	
		        ,A.TOPROCESSPATHID	
		        ,A.TOPROCESSSEGMENTID	
		        ,A.TOPROCESSSEGMENTVERSION	
		        ,A.TOPROCESSSTATE	
		        ,A.WTIMETYPE	
		        ,A.WTIMELIMIT	
		        ,A.DESCRIPTION	
		        ,A.CREATOR	
		        ,A.CREATEDTIME	
		        ,A.MODIFIER	
		        ,A.MODIFIEDTIME	
		        ,A.LASTTXNHISTKEY	
		        ,A.LASTTXNID	
		        ,A.LASTTXNUSER	
		        ,A.LASTTXNTIME	
		        ,A.LASTTXNCOMMENT	
		        ,A.VALIDSTATE	
		    FROM	BAS_WTIMEDEFINITION A 
		    WHERE 1=1 
		    <if test="WTIMEDEFID != null and WTIMEDEFID !='' "> 
		        AND A.WTIMEDEFID = #{WTIMEDEFID}
		    </if>
		    <if test="WTIMEDEFNAME != null and WTIMEDEFNAME !='' "> 
		        AND A.WTIMEDEFNAME = #{WTIMEDEFNAME}
		    </if>
		    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
		        AND A.ENTERPRISEID = #{ENTERPRISEID}
		    </if>
		    <if test="PLANTID != null and PLANTID !='' "> 
		        AND A.PLANTID = #{PLANTID}
		    </if>
		    <if test="AREAID != null and AREAID !='' "> 
		        AND A.AREAID = #{AREAID}
		    </if>
		    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
		        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
		    </if>
		    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
		        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
		    </if>
		    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
		        AND A.PROCESSDEFID = #{PROCESSDEFID}
		    </if>
		    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
		        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		    </if>
		    <if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
		        AND A.PROCESSPATHID = #{PROCESSPATHID}
		    </if>
		    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
		        AND A.USERSEQUENCE = #{USERSEQUENCE}
		    </if>
		    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
		        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
		    </if>
		    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
		        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
		    </if>
		    <if test="PROCESSSTATE != null and PROCESSSTATE !='' "> 
		        AND A.PROCESSSTATE = #{PROCESSSTATE}
		    </if>
		    <if test="TOPROCESSDEFID != null and TOPROCESSDEFID !='' "> 
		        AND A.TOPROCESSDEFID = #{TOPROCESSDEFID}
		    </if>
		    <if test="TOPROCESSDEFVERSION != null and TOPROCESSDEFVERSION !='' "> 
		        AND A.TOPROCESSDEFVERSION = #{TOPROCESSDEFVERSION}
		    </if>
		    <if test="TOPROCESSPATHID != null and TOPROCESSPATHID !='' "> 
		        AND A.TOPROCESSPATHID = #{TOPROCESSPATHID}
		    </if>
		    <if test="TOPROCESSSEGMENTID != null and TOPROCESSSEGMENTID !='' "> 
		        AND A.TOPROCESSSEGMENTID = #{TOPROCESSSEGMENTID}
		    </if>
		    <if test="TOPROCESSSEGMENTVERSION != null and TOPROCESSSEGMENTVERSION !='' "> 
		        AND A.TOPROCESSSEGMENTVERSION = #{TOPROCESSSEGMENTVERSION}
		    </if>
		    <if test="TOPROCESSSTATE != null and TOPROCESSSTATE !='' "> 
		        AND A.TOPROCESSSTATE = #{TOPROCESSSTATE}
		    </if>
		    <if test="WTIMETYPE != null and WTIMETYPE !='' "> 
		        AND A.WTIMETYPE = #{WTIMETYPE}
		    </if>
		    <if test="WTIMELIMIT != null and WTIMELIMIT !='' "> 
		        AND A.WTIMELIMIT = #{WTIMELIMIT}
		    </if>
		    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
		        AND A.DESCRIPTION = #{DESCRIPTION}
		    </if>
		    <if test="VALIDSTATE != null and VALIDSTATE !='' "> 
		        AND A.VALIDSTATE = #{VALIDSTATE}
		    </if>
    </select>  
    
    <select id="selectBasResource" parameterType="map" resultType="map">
		   SELECT A.RESOURCEID	 
		        , A.ENTERPRISEID	 
		        , A.PLANTID	 
		        , A.RESOURCECLASSID	 
		        , A.RESOURCETYPE	 
		        , A.AREAID	 
		        , A.EQUIPMENTCLASSID	 
		        , A.VENDORID	 
		        , A.TOTALQTY	 
		        , A.TOTALCAPACITY	 
		        , A.AVAILABLECAPACITY	 
		        , A.STEPCLASS	 
		        , A.STEPTYPE	 
		        , A.ISOSPINSPCONTROL	 
		        , A.DESCRIPTION	 
		        , A.CREATOR	 
		        , A.CREATEDTIME	 
		        , A.MODIFIER	 
		        , A.MODIFIEDTIME	 
		        , A.LASTTXNHISTKEY	 
		        , A.LASTTXNID	 
		        , A.LASTTXNUSER	 
		        , A.LASTTXNTIME	 
		        , A.LASTTXNCOMMENT	 
		        , A.VALIDSTATE	 
		     FROM	BAS_RESOURCE A 
		    WHERE A.ENTERPRISEID = #{ENTERPRISEID}
		      AND	A.RESOURCEID   = #{RESOURCEID}
		      AND	A.PLANTID      = #{PLANTID}
		<if test="ISOSPINSPCONTROL != null and ISOSPINSPCONTROL !='' "> 
			  AND	A.ISOSPINSPCONTROL = #{ISOSPINSPCONTROL}
		</if>
</select>                 		
<select id="selectBasProcesssegment" parameterType="map" resultType="map">
    SELECT A.PROCESSSEGMENTID  
         , A.PROCESSSEGMENTVERSION  
         , A.PROCESSSEGMENTCLASSID  
         , A.PROCESSSEGMENTNAME  
         , A.ENTERPRISEID  
         , A.PLANTID  
         , A.AREAID  
         , A.PROCESSSEGMENTTYPE  
         , A.EQUIPMENTCLASSID  
         , A.ISTRACKINREQUIRED  
         , A.LEADTIME  
         , A.VERSIONSTATE  
         , A.STEPCLASS  
         , A.STEPTYPE  
         , A.ISIMPORTINSPECTION  
         , A.ISMAINSEGMENT  
         , A.WORKMETHOD  
         , A.QCTYPE  
         , A.ISDEFECTREASON  
         , A.MINWAITINGTIME  
         , A.MAXWAITINGTIME  
         , A.WORKUNIT  
         , A.DESCRIPTION  
         , A.CREATOR  
         , A.CREATEDTIME  
         , A.MODIFIER  
         , A.MODIFIEDTIME  
         , A.VALIDSTATE  
      FROM BAS_PROCESSSEGMENT A 
     WHERE A.PROCESSSEGMENTID      = #{PROCESSSEGMENTID}
       AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
</select>  
<select id="selectCmdLookupValuesList" parameterType="map" resultType="hashmap">
    SELECT A.LOOKUP_TYPE 
         , A.LOOKUP_CODE 
         , A.MEANING 
         , A.DESCRIPTION 
         , A.ENABLED_FLAG 
         , A.ATTRIBUTE1 
         , A.ATTRIBUTE2 
         , A.ATTRIBUTE3 
         , A.ATTRIBUTE4 
         , A.ATTRIBUTE5 
         , A.ATTRIBUTE6 
         , A.ATTRIBUTE7 
         , A.ATTRIBUTE8 
         , A.ATTRIBUTE9 
         , A.ATTRIBUTE10 
         , A.CREATED_BY 
         , A.CREATION_DATE 
         , A.LAST_UPDATED_BY 
         , A.LAST_UPDATE_DATE 
         , A.PARENTCODEID 
         , A.DISPLAYSEQUENCE 
         , A.DICTIONARYID 
         , A.DICTIONARYID2 
      FROM  CMD_LOOKUP_VALUES A 
     WHERE 1=1 
    <if test="LOOKUP_TYPE != null and LOOKUP_TYPE !='' "> 
        AND A.LOOKUP_TYPE = #{LOOKUP_TYPE}
    </if>
    <if test="LOOKUP_CODE != null and LOOKUP_CODE !='' "> 
        AND A.LOOKUP_CODE = #{LOOKUP_CODE}
    </if>
    AND A.ENABLED_FLAG = 'Y'
    ORDER BY A.DISPLAYSEQUENCE ASC
</select>  
   <select id="selectPcmLotworkresultList" parameterType="map" resultType="hashmap">
    SELECT 
        A.TXNHISTKEY	
        ,A.LOTID	
        ,A.PROCESSSEGMENTID	
        ,A.PROCESSSEGMENTVERSION	
        ,A.ENTERPRISEID	
        ,A.PLANTID	
        ,A.FACTORYID	
        ,A.AREAID	
        ,A.PRODUCTIONORDERID	
        ,A.LINENO	
        ,A.PRODUCTDEFID	
        ,A.PRODUCTDEFVERSION	
        ,A.PROCESSDEFID	
        ,A.PROCESSDEFVERSION	
        ,A.PROCESSPATHID	
        ,A.PROCESSPATHSTACK	
        ,A.USERSEQUENCE	
        ,A.WORKCOUNT	
        ,A.RESOURCEID	
        ,A.RESULTTYPE	
        ,A.ISPRINTLOTCARD	
        ,A.WEEK	
        ,A.ISREWORK	
        ,A.REWORKTYPE	
        ,A.REWORKREASONCODE	
        ,A.REWORKCOUNT	
        ,A.RECEIVETIME	
        ,A.RECEIVEUSER	
        ,A.ROOTLOTSTARTDATE	
        ,A.WORKSTARTTIME	
        ,A.WORKSTARTUSER	
        ,A.WORKENDTIME	
        ,A.WORKENDUSER	
        ,A.SENDTIME	
        ,A.SENDUSER	
        ,A.RECEIVELEADTIME	
        ,A.WORKSTARTLEADTIME	
        ,A.WORKENDLEADTIME	
        ,A.SENDLEADTIME	
        ,A.DEFECTQTY	
        ,A.PSEUDODEFECTQTY	
        ,A.ROOTLOTINPUTPCSQTY	
        ,A.ROOTLOTINPUTARRAYQTY	
        ,A.ROOTLOTINPUTPANELQTY	
        ,A.RECEIVEPCSQTY	
        ,A.RECEIVEARRAYQTY	
        ,A.RECEIVEPANELQTY	
        ,A.WORKSTARTPCSQTY	
        ,A.WORKSTARTARRAYQTY	
        ,A.WORKSTARTPANELQTY	
        ,A.WORKENDPCSQTY	
        ,A.WORKENDARRAYQTY	
        ,A.WORKENDPANELQTY	
        ,A.SENDPCSQTY	
        ,A.SENDARRAYQTY	
        ,A.SENDPANELQTY	
        ,A.PREVSENDLOTHISTKEY	
        ,A.SELFTAKEINSPRESULT	
        ,A.SELFSHIPINSPRESULT	
        ,A.MEASUREINSPRESULT	
        ,A.DESCRIPTION	
        ,A.CREATOR	
        ,A.CREATEDTIME	
        ,A.MODIFIER	
        ,A.MODIFIEDTIME	
    FROM	PCM_LOTWORKRESULT A 
    WHERE 1=1 
    <if test="TXNHISTKEY_SEARCH != null and TXNHISTKEY_SEARCH !='' "> 
        AND A.TXNHISTKEY = #{TXNHISTKEY_SEARCH}
    </if>
    <if test="LOTID != null and LOTID !='' "> 
        AND A.LOTID = #{LOTID}
    </if>
    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    </if>
    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </if>
    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
        AND A.ENTERPRISEID = #{ENTERPRISEID}
    </if>
    <if test="PLANTID != null and PLANTID !='' "> 
        AND A.PLANTID = #{PLANTID}
    </if>
    <if test="FACTORYID != null and FACTORYID !='' "> 
        AND A.FACTORYID = #{FACTORYID}
    </if>
    <if test="AREAID != null and AREAID !='' "> 
        AND A.AREAID = #{AREAID}
    </if>
    <if test="PRODUCTIONORDERID != null and PRODUCTIONORDERID !='' "> 
        AND A.PRODUCTIONORDERID = #{PRODUCTIONORDERID}
    </if>
    <if test="LINENO != null and LINENO !='' "> 
        AND A.LINENO = #{LINENO}
    </if>
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
        AND A.PROCESSPATHID = #{PROCESSPATHID}
    </if>
    <if test="PROCESSPATHSTACK != null and PROCESSPATHSTACK !='' "> 
        AND A.PROCESSPATHSTACK = #{PROCESSPATHSTACK}
    </if>
    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
        AND A.USERSEQUENCE = #{USERSEQUENCE}
    </if>
    <if test="WORKCOUNT != null and WORKCOUNT !='' "> 
        AND A.WORKCOUNT = #{WORKCOUNT}
    </if>
    <if test="RESOURCEID != null and RESOURCEID !='' "> 
        AND A.RESOURCEID = #{RESOURCEID}
    </if>
    <if test="RESULTTYPE != null and RESULTTYPE !='' "> 
        AND A.RESULTTYPE = #{RESULTTYPE}
    </if>
    <if test="ISPRINTLOTCARD != null and ISPRINTLOTCARD !='' "> 
        AND A.ISPRINTLOTCARD = #{ISPRINTLOTCARD}
    </if>
    <if test="WEEK != null and WEEK !='' "> 
        AND A.WEEK = #{WEEK}
    </if>
    <if test="ISREWORK != null and ISREWORK !='' "> 
        AND A.ISREWORK = #{ISREWORK}
    </if>
    <if test="REWORKTYPE != null and REWORKTYPE !='' "> 
        AND A.REWORKTYPE = #{REWORKTYPE}
    </if>
    <if test="REWORKREASONCODE != null and REWORKREASONCODE !='' "> 
        AND A.REWORKREASONCODE = #{REWORKREASONCODE}
    </if>
    <if test="REWORKCOUNT != null and REWORKCOUNT !='' "> 
        AND A.REWORKCOUNT = #{REWORKCOUNT}
    </if>
    <if test="RECEIVETIME != null and RECEIVETIME !='' "> 
        AND A.RECEIVETIME = #{RECEIVETIME}
    </if>
    <if test="RECEIVEUSER != null and RECEIVEUSER !='' "> 
        AND A.RECEIVEUSER = #{RECEIVEUSER}
    </if>
    <if test="ROOTLOTSTARTDATE != null and ROOTLOTSTARTDATE !='' "> 
        AND A.ROOTLOTSTARTDATE = #{ROOTLOTSTARTDATE}
    </if>
    <if test="WORKSTARTTIME != null and WORKSTARTTIME !='' "> 
        AND A.WORKSTARTTIME = #{WORKSTARTTIME}
    </if>
    <if test="WORKSTARTUSER != null and WORKSTARTUSER !='' "> 
        AND A.WORKSTARTUSER = #{WORKSTARTUSER}
    </if>
    <if test="WORKENDTIME != null and WORKENDTIME !='' "> 
        AND A.WORKENDTIME = #{WORKENDTIME}
    </if>
    <if test="WORKENDUSER != null and WORKENDUSER !='' "> 
        AND A.WORKENDUSER = #{WORKENDUSER}
    </if>
    <if test="SENDTIME != null and SENDTIME !='' "> 
        AND A.SENDTIME = #{SENDTIME}
    </if>
    <if test="SENDUSER != null and SENDUSER !='' "> 
        AND A.SENDUSER = #{SENDUSER}
    </if>
    <if test="RECEIVELEADTIME != null and RECEIVELEADTIME !='' "> 
        AND A.RECEIVELEADTIME = #{RECEIVELEADTIME}
    </if>
    <if test="WORKSTARTLEADTIME != null and WORKSTARTLEADTIME !='' "> 
        AND A.WORKSTARTLEADTIME = #{WORKSTARTLEADTIME}
    </if>
    <if test="WORKENDLEADTIME != null and WORKENDLEADTIME !='' "> 
        AND A.WORKENDLEADTIME = #{WORKENDLEADTIME}
    </if>
    <if test="SENDLEADTIME != null and SENDLEADTIME !='' "> 
        AND A.SENDLEADTIME = #{SENDLEADTIME}
    </if>
    <if test="DEFECTQTY != null and DEFECTQTY !='' "> 
        AND A.DEFECTQTY = #{DEFECTQTY}
    </if>
    <if test="PSEUDODEFECTQTY != null and PSEUDODEFECTQTY !='' "> 
        AND A.PSEUDODEFECTQTY = #{PSEUDODEFECTQTY}
    </if>
    <if test="ROOTLOTINPUTPCSQTY != null and ROOTLOTINPUTPCSQTY !='' "> 
        AND A.ROOTLOTINPUTPCSQTY = #{ROOTLOTINPUTPCSQTY}
    </if>
    <if test="ROOTLOTINPUTARRAYQTY != null and ROOTLOTINPUTARRAYQTY !='' "> 
        AND A.ROOTLOTINPUTARRAYQTY = #{ROOTLOTINPUTARRAYQTY}
    </if>
    <if test="ROOTLOTINPUTPANELQTY != null and ROOTLOTINPUTPANELQTY !='' "> 
        AND A.ROOTLOTINPUTPANELQTY = #{ROOTLOTINPUTPANELQTY}
    </if>
    <if test="RECEIVEPCSQTY != null and RECEIVEPCSQTY !='' "> 
        AND A.RECEIVEPCSQTY = #{RECEIVEPCSQTY}
    </if>
    <if test="RECEIVEARRAYQTY != null and RECEIVEARRAYQTY !='' "> 
        AND A.RECEIVEARRAYQTY = #{RECEIVEARRAYQTY}
    </if>
    <if test="RECEIVEPANELQTY != null and RECEIVEPANELQTY !='' "> 
        AND A.RECEIVEPANELQTY = #{RECEIVEPANELQTY}
    </if>
    <if test="WORKSTARTPCSQTY != null and WORKSTARTPCSQTY !='' "> 
        AND A.WORKSTARTPCSQTY = #{WORKSTARTPCSQTY}
    </if>
    <if test="WORKSTARTARRAYQTY != null and WORKSTARTARRAYQTY !='' "> 
        AND A.WORKSTARTARRAYQTY = #{WORKSTARTARRAYQTY}
    </if>
    <if test="WORKSTARTPANELQTY != null and WORKSTARTPANELQTY !='' "> 
        AND A.WORKSTARTPANELQTY = #{WORKSTARTPANELQTY}
    </if>
    <if test="WORKENDPCSQTY != null and WORKENDPCSQTY !='' "> 
        AND A.WORKENDPCSQTY = #{WORKENDPCSQTY}
    </if>
    <if test="WORKENDARRAYQTY != null and WORKENDARRAYQTY !='' "> 
        AND A.WORKENDARRAYQTY = #{WORKENDARRAYQTY}
    </if>
    <if test="WORKENDPANELQTY != null and WORKENDPANELQTY !='' "> 
        AND A.WORKENDPANELQTY = #{WORKENDPANELQTY}
    </if>
    <if test="SENDPCSQTY != null and SENDPCSQTY !='' "> 
        AND A.SENDPCSQTY = #{SENDPCSQTY}
    </if>
    <if test="SENDARRAYQTY != null and SENDARRAYQTY !='' "> 
        AND A.SENDARRAYQTY = #{SENDARRAYQTY}
    </if>
    <if test="SENDPANELQTY != null and SENDPANELQTY !='' "> 
        AND A.SENDPANELQTY = #{SENDPANELQTY}
    </if>
    <if test="PREVSENDLOTHISTKEY != null and PREVSENDLOTHISTKEY !='' "> 
        AND A.PREVSENDLOTHISTKEY = #{PREVSENDLOTHISTKEY}
    </if>
    <if test="SELFTAKEINSPRESULT != null and SELFTAKEINSPRESULT !='' "> 
        AND A.SELFTAKEINSPRESULT = #{SELFTAKEINSPRESULT}
    </if>
    <if test="SELFSHIPINSPRESULT != null and SELFSHIPINSPRESULT !='' "> 
        AND A.SELFSHIPINSPRESULT = #{SELFSHIPINSPRESULT}
    </if>
    <if test="MEASUREINSPRESULT != null and MEASUREINSPRESULT !='' "> 
        AND A.MEASUREINSPRESULT = #{MEASUREINSPRESULT}
    </if>
    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
        AND A.DESCRIPTION = #{DESCRIPTION}
    </if>
		${ETCCONDITION}
    </select> 
    
    
    <!-- WIP -->   
	<select id="selectWIPList" parameterType="map" resultType="hashmap">
		/* SelectWIPList 10001 */
				WITH WIPLIST 
				AS
				(
					SELECT 	0 AS CHK 
						,	L.LOTID
					    ,   L.WORKCOUNT
						,	L.PRODUCTDEFID
						,	L.PRODUCTDEFVERSION
						,	PD.PRODUCTDEFNAME
						,	L.PROCESSDEFID
						,	L.PROCESSDEFVERSION
						,	L.PROCESSSEGMENTID
						,	NVL(DS1.DICTIONARYNAME, SG.PROCESSSEGMENTNAME)	AS PROCESSSEGMENTNAME
						,	L.USERSEQUENCE
						,	L.PLANTID
						,	L.AREAID
						,	NVL(DS2.DICTIONARYNAME, AL.AREANAME)			AS AREANAME
						,	NVL(PD.RTRSHT, 'Sheet')							AS RTRSHT
						,	NVL(L.ISLOCKING, 'N')							AS ISLOCKING
						,	NVL(L.ISHOLD, 'N')								AS ISHOLD
						,   L.PROCESSSTATE
						,	L.UNIT
						,	L.QTY
						,	L.PCSQTY
						,	L.PANELQTY
						,	L.PANELPERQTY
						,	CASE WHEN PD.PCSMM IS NULL OR PD.PCSMM = 0 THEN NULL 
							ELSE ROUND((L.QTY / PD.PCSMM),2) END				AS M2QTY
						,	PO.PLANENDTIME		AS DELIVERYDATE
						,	L.ROOTLOTSTARTDATE
						,   PH.PATHTYPE
						,   CASE WHEN L.ISREWORK = 'Y' THEN 'Rework'
						         ELSE 'Normal'
						         END  REWORKDIVISION
						,	L.PROCESSPATHSTACK						
						,   PPH.PROCESSPATHID                                   AS PREVPATHID
						,   CASE WHEN L.PROCESSSTATE = 'WaitForReceive'  THEN 'WaitForReceive'
						         WHEN L.PROCESSSTATE = 'Wait'            THEN 'Receive'
						         WHEN L.PROCESSSTATE = 'Run'             THEN 'WorkStart'
						         WHEN L.PROCESSSTATE = 'WaitForSend'     THEN 'WorkEnd'
						         END 											AS WIPPROCESSSTATE
						,	CASE WHEN L.PROCESSDEFID = L.LOTID	THEN 'Y' ELSE 'N' END AS ISLOTROUTING
						,   DC1.DICTIONARYNAME          AS LOTTYPE
                        -- 공정 LeadTime
                        ,   (NVL(WR.RECEIVELEADTIME, 0) + NVL(WR.WORKSTARTLEADTIME, 0) + 
                             NVL(WR.WORKENDLEADTIME, 0) + NVL(WR.SENDLEADTIME, 0))            AS LEADTIME
			        FROM    PCM_LOT              		L
			        LEFT JOIN PCM_LOTWORKRESULT          WR ON  L.LOTID = WR.LOTID
                                                            AND L.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
                                                            AND L.USERSEQUENCE = WR.USERSEQUENCE
                                                            AND WR.RESULTTYPE = 'NORMAL'
                                                            AND L.WORKCOUNT = WR.WORKCOUNT
			        INNER JOIN BAS_PRODUCTDEFINITION	PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
				    										AND L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
					LEFT JOIN MFM_PRODUCTIONORDER		PO	ON	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
															AND L.LINENO = PO.LINENO
					INNER JOIN BAS_PROCESSSEGMENT		SG	ON	L.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
															AND L.PROCESSSEGMENTVERSION = SG.PROCESSSEGMENTVERSION
															AND SG.VALIDSTATE = 'Valid'
					INNER JOIN BAS_PROCESSPATH           PH  ON  SPLIT_PART(L.PROCESSPATHSTACK, '.', 1) = PH.PROCESSPATHID
					INNER JOIN FN_AREA(#{USERID}) 		 AL	ON	L.AREAID = AL.AREAID
															AND	AL.ISMODIFY = 'Y'	-- 등록화면					                                        
					LEFT JOIN BAS_PROCESSPATH            PPH ON  PH.PROCESSDEFID = PPH.PROCESSDEFID   
                                                            AND PH.PROCESSDEFVERSION = PPH.PROCESSDEFVERSION
                                                            AND PPH.PATHSEQUENCE = PH.PATHSEQUENCE -1
					LEFT JOIN BAS_PROCESSSEGMENTCLASS	MSC	ON	SG.PROCESSSEGMENTCLASSID = MSC.PROCESSSEGMENTCLASSID			-- 중공정
															AND MSC.VALIDSTATE = 'Valid'
					LEFT JOIN BAS_PROCESSSEGMENTCLASS	TSC ON	MSC.PARENTPROCESSSEGMENTCLASSID = TSC.PROCESSSEGMENTCLASSID		-- 대공정
															AND TSC.VALIDSTATE = 'Valid'
					LEFT JOIN CMD_DICTIONARY				DS1	ON	SG.PROCESSSEGMENTNAME = DS1.DICTIONARYID
															AND DS1.LANGUAGETYPE = #{LANGUAGETYPE}
					LEFT OUTER JOIN CMD_DICTIONARY		DS2 ON	AL.AREANAME = DS2.DICTIONARYID
															AND DS2.LANGUAGETYPE = #{LANGUAGETYPE}
                    INNER JOIN CMD_LOOKUP_VALUES        CD1 ON  L.LOTTYPE = CD1.LOOKUP_CODE
                                                            AND CD1.LOOKUP_TYPE = 'ProductionType'
                                                            AND CD1.ENABLED_FLAG = 'Y'
                    LEFT OUTER JOIN CMD_DICTIONARY       DC1 ON  DC1.DICTIONARYID = CD1.DICTIONARYID
                                                            AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
			        WHERE   L.LOTSTATE IN ('InProduction', 'InTransit')
					AND 	L.ISDEFECTED = 'N'
					AND	NVL(L.ISREPRESENTROLLLOT, 'N') <![CDATA[<>]]> 'Y'
				<if test="LOTSTATE != null and LOTSTATE !=''"> 
					AND 	L.LOTSTATE IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{LOTSTATE},','))
				</if>
				<if test="PLANTID != null and PLANTID !=''"> 
			        AND     L.PLANTID = #{PLANTID}
			    </if>
			    <if test="ISLOCKING != null and ISLOCKING !=''"> 
		    		AND     L.ISLOCKING = #{ISLOCKING}
		    	</if>
		    	<if test="ISHOLD != null and ISHOLD !=''"> 
		    		AND     L.ISHOLD = #{ISHOLD}
		    	</if>
		    	<if test="LOTID != null and LOTID !=''"> 
		    		AND     L.LOTID IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{LOTID},','))
		    	</if>
		    	<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''"> 
					AND 	L.PRODUCTDEFID IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{PRODUCTDEFID},','))
				</if>
				<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''"> 
					AND 	L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				</if>
				<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''"> 
					AND		UPPER(PD.PRODUCTDEFNAME) LIKE UPPER(<![CDATA['%' ||]]> #{PRODUCTDEFNAME} <![CDATA[|| '%']]> )
				</if> 
				<if test="AREAID != null and AREAID !=''"> 
					AND		L.AREAID IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{AREAID},','))
				</if> 
				<if test="PROCESSSEGMENTCLASSID_TOP != null and PROCESSSEGMENTCLASSID_TOP !=''"> 
					AND		TSC.PROCESSSEGMENTCLASSID IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTCLASSID_TOP},','))
				</if> 
				<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !=''"> 
					AND		SG.PROCESSSEGMENTID IN (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(#{PROCESSSEGMENTID},','))
				</if> 
				<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''"> 
					AND     L.LOTTYPE = #{PRODUCTIONTYPE} --생산구분
				</if>
				<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''"> 
					AND     PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION} --제품구분
				</if>
				<if test="OWNTYPE != null and OWNTYPE !=''"> 
					AND     AL.OWNTYPE = #{OWNTYPE} --자사/외주구분
				</if>
				<if test="PROCESSSTATE != null and PROCESSSTATE !=''"> 
					AND     L.PROCESSSTATE = #{PROCESSSTATE} -- 공정진행상태
				</if>
				)
				SELECT 	L.LOTID
					,	L.LOTTYPE
					,	L.PRODUCTDEFID
					,	L.PRODUCTDEFVERSION
					,	L.PRODUCTDEFNAME
					,	L.PROCESSDEFID
					,	L.PROCESSDEFVERSION
					,	L.PROCESSSEGMENTID
					,	L.PROCESSSEGMENTNAME
					,	L.USERSEQUENCE
					,	L.PLANTID
					,	L.AREAID
					,	L.AREANAME
					,	L.RTRSHT
					,	L.ISLOCKING
					,	L.ISHOLD
					,   L.PROCESSSTATE 
					,   NVL(DC3.DICTIONARYNAME, L.WIPPROCESSSTATE)                             AS STATE
					,	L.UNIT
					,	L.QTY      
					,	L.PANELQTY
					,	L.PANELPERQTY
					,	TO_CHAR(L.DELIVERYDATE, 'YYYY-MM-DD HH24:MI:SS')							AS DELIVERYDATE
					,	TO_CHAR(L.ROOTLOTSTARTDATE, 'YYYY-MM-DD HH24:MI:SS')						AS LOTINPUTDATE
					,   L.REWORKDIVISION
					,   NVL(DC2.DICTIONARYNAME, L.REWORKDIVISION)                               	AS PROCESSCLASSID_R					
					,	EXTRACT(DAY FROM (CURRENT_TIMESTAMP - DELIVERYDATE)) 						AS LEFTDATE
					-- 인수대기수량(전공정인계)
					,	CASE WHEN L.PROCESSSTATE = 'WaitForReceive' THEN  L.QTY ELSE 0 END          AS  RECEIVEPCSQTY
					,   CASE WHEN L.PROCESSSTATE = 'WaitForReceive' THEN  L.PANELQTY ELSE 0 END     AS  RECEIVEPANELQTY
					-- 작업시작(인수 완료 수량)
					,	CASE WHEN L.PROCESSSTATE = 'Wait' THEN  L.QTY ELSE 0 END                    AS SENDPCSQTY
					,   CASE WHEN L.PROCESSSTATE = 'Wait' THEN  L.PANELQTY ELSE 0 END               AS SENDPANELQTY					
					-- 작업완료(작업 시작 수량)
					,	CASE WHEN L.PROCESSSTATE = 'Run' THEN  L.QTY ELSE 0 END                     AS WORKSTARTPCSQTY
					,   CASE WHEN L.PROCESSSTATE = 'Run' THEN  L.PANELQTY ELSE 0 END                AS WORKSTARTPANELQTY					
					-- 인계 대기(작업완료 수량)
					,	CASE WHEN L.PROCESSSTATE = 'WaitForSend' THEN  L.QTY ELSE 0 END             AS WORKENDPCSQTY
					,   CASE WHEN L.PROCESSSTATE = 'WaitForSend' THEN  L.PANELQTY ELSE 0 END        AS WORKENDPANELQTY
					-- 공정 LeadTime
					,	L.LEADTIME
					,	L.ISLOTROUTING
					,   L.PROCESSPATHSTACK
			    FROM 	WIPLIST						L
				LEFT  JOIN CMD_LOOKUP_VALUES        CD2 ON  L.REWORKDIVISION = CD2.LOOKUP_CODE
				                                        AND CD2.LOOKUP_TYPE = 'ReworkDivision'     
				LEFT  JOIN CMD_DICTIONARY           DC2 ON  CD2.DICTIONARYID = DC2.DICTIONARYID
				                                        AND DC2.LANGUAGETYPE =  #{LANGUAGETYPE}														
				LEFT  JOIN CMD_LOOKUP_VALUES      	CD3 ON  L.WIPPROCESSSTATE = CD3.LOOKUP_CODE
				                                    	AND CD3.LOOKUP_TYPE = 'WipProcessState'     
				LEFT  JOIN CMD_DICTIONARY        	DC3 ON  CD3.DICTIONARYID = DC3.DICTIONARYID
				                                    	AND DC3.LANGUAGETYPE = #{LANGUAGETYPE} 
	</select>  	
	<select id="selectUomDefinitionList" parameterType="map" resultType="hashmap">
		/* GetUomDefinitionList 10001 */
				SELECT
						UD.UOMDEFID
					,	UI.UOMDEFNAME
					
				FROM	BAS_UOMDEFMAP		UD
			    INNER JOIN BAS_UOMDEFINITION	UI	ON	UD.UOMDEFID = UI.UOMDEFID
				WHERE	1 = 1
				AND		UD.UOMCATEGORY = #{UOMCLASSID}
				AND     UD.VALIDSTATE = 'Valid'
	</select>
	<select id="selectBasProcesssegmentclass" parameterType="map" resultType="hashmap">
	    SELECT A.PROCESSSEGMENTCLASSID	 
	         , A.PROCESSSEGMENTCLASSNAME	 
	         , A.ENTERPRISEID	 
	         , A.PLANTID	 
	         , A.PROCESSSEGMENTCLASSTYPE	 
	         , A.PROCESSTYPE	 
	         , A.PARENTPROCESSSEGMENTCLASSID	 
	         , A.DESCRIPTION	 
	         , A.CREATOR	 
	         , A.CREATEDTIME	 
	         , A.MODIFIER	 
	         , A.MODIFIEDTIME	 	        
	         , A.VALIDSTATE	 
	      FROM	BAS_PROCESSSEGMENTCLASS A 
	     WHERE A.PROCESSSEGMENTCLASSID = #{PROCESSSEGMENTCLASSID}
	</select>
	
	<select id="selectAreaListByAuthority" parameterType="map" resultType="hashmap">
		/* GetAreaListByAuthority 10001 */
			SELECT	AREAID 
				, 	NVL(D.DICTIONARYNAME, A.AREANAME ) AS AREANAME
				,	A.PLANTID
			FROM	FN_AREA(#{USERID}) A
			LEFT OUTER JOIN CMD_DICTIONARY 		 D	ON	A.AREANAME = D.DICTIONARYID
											  		AND	D.LANGUAGETYPE = #{LANGUAGETYPE}
			WHERE 	1 = 1		
		<if test="ISMODIFY == null or ISMODIFY !='N'"> 	
			AND     A.ISMODIFY = 'Y'
		</if>	
		<if test="PLANTID != null and PLANTID !=''"> 
			AND 	A.PLANTID = #{PLANTID}
		</if>
		<if test="TXTAREA != null and TXTAREA !=''"> 
			AND (  UPPER(AREAID) LIKE UPPER(<![CDATA['%' ||]]> #{TXTAREA} <![CDATA[|| '%']]> )
				OR UPPER(AREANAME) LIKE UPPER(<![CDATA['%' ||]]> #{TXTAREA} <![CDATA[|| '%']]> )
				OR UPPER(D.DICTIONARYNAME) LIKE UPPER(<![CDATA['%' ||]]> #{TXTAREA} <![CDATA[|| '%']]> )
				)
		</if>
		<if test="AREA != null and AREA !=''"> 
			AND (  UPPER(AREAID) LIKE UPPER(<![CDATA['%' ||]]> #{AREA} <![CDATA[|| '%']]> )
				OR UPPER(AREANAME) LIKE UPPER(<![CDATA['%' ||]]> #{AREA} <![CDATA[|| '%']]> )
				OR UPPER(D.DICTIONARYNAME) LIKE UPPER(<![CDATA['%' ||]]> #{AREA} <![CDATA[|| '%']]> )
				)
		</if>
			ORDER BY AREAID ASC
	</select>
	<select id="selectPcmLotreservelockingList" parameterType="map" resultType="hashmap">
	    SELECT 
	        A.TXNHISTKEY	
	        ,A.LOTID	
	        ,A.ENTERPRISEID	
	        ,A.PLANTID	
	        ,A.PROCESSDEFID	
	        ,A.PROCESSDEFVERSION	
	        ,A.PROCESSSEGMENTID	
	        ,A.PROCESSSEGMENTVERSION	
	        ,A.LOCKINGTYPE	
	        ,A.LOCKINGCODE	
	        ,A.COMMENTS	
	        ,A.LOCKINGSTATUS	
	        ,A.DESCRIPTION	
	        ,A.CREATOR	
	        ,A.CREATEDTIME	
	        ,A.TXNREASONCODECLASS	
	        ,A.TXNREASONCODE	
	        ,A.TXNCOMMENT	
	        ,A.LOCKING_PROCESSSTATE	
	    FROM	PCM_LOTRESERVELOCKING A 
	    WHERE 1=1 
	    <if test="TXNHISTKEY != null and TXNHISTKEY !='' "> 
	        AND A.TXNHISTKEY = #{TXNHISTKEY}
	    </if>
	    <if test="LOTID != null and LOTID !='' "> 
	        AND A.LOTID = #{LOTID}
	    </if>
	    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
	        AND A.ENTERPRISEID = #{ENTERPRISEID}
	    </if>
	    <if test="PLANTID != null and PLANTID !='' "> 
	        AND A.PLANTID = #{PLANTID}
	    </if>
	    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
	        AND A.PROCESSDEFID = #{PROCESSDEFID}
	    </if>
	    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
	        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
	    </if>
	    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
	        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	    </if>
	    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
	        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
	    </if>
	    <if test="LOCKINGTYPE != null and LOCKINGTYPE !='' "> 
	        AND A.LOCKINGTYPE = #{LOCKINGTYPE}
	    </if>
	    <if test="LOCKINGCODE != null and LOCKINGCODE !='' "> 
	        AND A.LOCKINGCODE = #{LOCKINGCODE}
	    </if>
	    <if test="COMMENTS != null and COMMENTS !='' "> 
	        AND A.COMMENTS = #{COMMENTS}
	    </if>
	    <if test="LOCKINGSTATUS != null and LOCKINGSTATUS !='' "> 
	        AND A.LOCKINGSTATUS = #{LOCKINGSTATUS}
	    </if>
	    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
	        AND A.DESCRIPTION = #{DESCRIPTION}
	    </if>
	    <if test="TXNREASONCODECLASS != null and TXNREASONCODECLASS !='' "> 
	        AND A.TXNREASONCODECLASS = #{TXNREASONCODECLASS}
	    </if>
	    <if test="TXNREASONCODE != null and TXNREASONCODE !='' "> 
	        AND A.TXNREASONCODE = #{TXNREASONCODE}
	    </if>
	    <if test="TXNCOMMENT != null and TXNCOMMENT !='' "> 
	        AND A.TXNCOMMENT = #{TXNCOMMENT}
	    </if>
	    <if test="LOCKING_PROCESSSTATE != null and LOCKING_PROCESSSTATE !='' "> 
	        AND A.LOCKING_PROCESSSTATE = #{LOCKING_PROCESSSTATE}
	    </if>
	</select>
	<select id="selectPcmDelaylot" parameterType="map" resultType="map">
	    SELECT A.LOTID  
	         , A.PRODUCTDEFID  
	         , A.PRODUCTDEFVERSION  
	         , A.PROCESSDEFID  
	         , A.PROCESSDEFVERSION  
	         , A.PROCESSSEGMENTID  
	         , A.PROCESSSEGMENTVERSION  
	         , A.PROCESSSTATE  
	         , A.WORKCOUNT  
	         , A.ENTERPRISEID  
	         , A.PLANTID  
	         , A.AREAID  
	         , A.STDDELAYTIME  
	         , A.DELAYTIME  
	         , A.CHECKSTARTTIME  
	         , A.CHECKENDTIME  
	         , A.DELAYREASONCODE  
	         , A.DELAYCOMMENT  
	         , A.DESCRIPTION  
	         , A.CREATOR  
	         , A.CREATEDTIME  
	         , A.MODIFIER  
	         , A.MODIFIEDTIME  
	         , A.LASTTXNHISTKEY  
	         , A.LASTTXNID  
	         , A.LASTTXNUSER  
	         , A.LASTTXNTIME  
	         , A.LASTTXNCOMMENT  
	         , A.VALIDSTATE  
	      FROM PCM_DELAYLOT A 
	     WHERE A.LOTID                 = #{LOTID}
	       AND A.PROCESSDEFID          = #{PROCESSDEFID}
	       AND A.PROCESSDEFVERSION     = #{PROCESSDEFVERSION}
	       AND A.PROCESSSEGMENTID      = #{PROCESSSEGMENTID}
	       AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
	       AND A.PROCESSSTATE          = #{PROCESSSTATE}
	       AND A.PRODUCTDEFID          = #{PRODUCTDEFID}
	       AND A.PRODUCTDEFVERSION     = #{PRODUCTDEFVERSION}
	       AND A.WORKCOUNT             = #{WORKCOUNT}
	</select>
    <select id="selectPcmSegmentstayingtime" parameterType="map" resultType="hashmap">
    SELECT 
        A.PROCESSSEGMENTID	 
        ,A.PROCESSSEGMENTVERSION	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.RECEIVESTAYINGTIME	 
        ,A.TRACKINSTAYINGTIME	 
        ,A.TRACKOUTSTAYINGTIME	 
        ,A.SENDSTAYINGTIME	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
        ,A.OPERATIONTOTALTIME	 
    FROM	PCM_SEGMENTSTAYINGTIME A 
    WHERE A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND	A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </select>
    <select id="selectPcmLotequipment" parameterType="map" resultType="map">
	    SELECT 
	        A.LOTID	 
	        ,A.TXNHISTKEY	 
	        ,A.EQUIPMENTID	 
	        ,A.PROCESSSTATE	 
	        ,A.PROCESSSEGMENTID	 
	        ,A.PROCESSSEGMENTVERSION	 
	        ,A.WORKCOUNT	 
	        ,A.RECEIVETIME	 
	        ,A.TRACKINTIME	 
	        ,A.TRACKOUTTIME	 
	        ,A.LOTQTY	 
	        ,A.DESCRIPTION	 
	        ,A.CREATOR	 
	        ,A.CREATEDTIME	 
	        ,A.MODIFIER	 
	        ,A.MODIFIEDTIME	 
	        ,A.TXNGROUPHISTKEY	 
	        ,A.TXNID	 
	        ,A.TXNUSER	 
	        ,A.TXNTIME	 
	        ,A.TXNREASONCODECLASS	 
	        ,A.TXNREASONCODE	 
	        ,A.TXNCOMMENT	 
	        ,A.RECIPEID	 
	        ,A.RECIPEVERSION	 
	        ,A.RECIPETYPE	 
	    FROM	PCM_LOTEQUIPMENT A 
	    WHERE A.LOTID = #{LOTID}
	    AND	A.TXNHISTKEY = #{TXNHISTKEY}
    </select>  
     
    <select id="selectBasEquipment" parameterType="map" resultType="hashmap">
    /* smh.pcm.dao.PCMCommonDao.selectBasEquipment */
	    SELECT 
	        A.EQUIPMENTID	 
	        ,A.RECIPECLASSID	 
	        ,A.EQUIPMENTCLASSID	 
	        ,A.EQUIPMENTNAME	 
	        ,A.ENTERPRISEID	 
	        ,A.PLANTID	 
	        ,A.AREAID	 
	        ,A.LOCATIONID	 
	        ,A.EQUIPMENTTYPE	 
	        ,A.DETAILEQUIPMENTTYPE	 
	        ,A.PARENTEQUIPMENTID	 
	        ,A.STATEMODELID	 
	        ,A.VENDORID	 
	        ,A.MODEL	 
	        ,A.SERIALNO	 
	        ,A.PROCESSUNIT	 
	        ,A.MINCAPACITY	 
	        ,A.MAXCAPACITY	 
	        ,A.TACTTIME	 
	        ,A.LEADTIME	 
	        ,A.STATE	 
	        ,A.E10STATE	 
	        ,A.CONTROLMODE	 
	        ,A.OPERATIONMODE	 
	        ,A.CURRENTRECIPEDEFID	 
	        ,A.CURRENTRECIPEDEFVERSION	 
	        ,A.PROCESSEDLOTCOUNT	 
	        ,A.LASTLOTID	 
	        ,A.LASTPRODUCTDEFID	 
	        ,A.LASTPRODUCTDEFVERSION	 
	        ,A.LASTPROCESSSEGMENTID	 
	        ,A.LASTPROCESSSEGMENTVERSION	 
	        ,A.TCID	 
	        ,A.DESCRIPTION	 
	        ,A.CREATOR	 
	        ,A.CREATEDTIME	 
	        ,A.MODIFIER	 
	        ,A.MODIFIEDTIME	 
	        ,A.LASTTXNHISTKEY	 
	        ,A.LASTTXNID	 
	        ,A.LASTTXNUSER	 
	        ,A.LASTTXNTIME	 
	        ,A.LASTTXNCOMMENT	 
	        ,A.VALIDSTATE	 
	    FROM	BAS_EQUIPMENT A 
	    WHERE A.EQUIPMENTID = #{EQUIPMENTID}
    </select>     
    <select id="selectPcmLotequipmentList" parameterType="map" resultType="hashmap">
	    SELECT 
	        A.LOTID	
	        ,A.TXNHISTKEY	
	        ,A.EQUIPMENTID	
	        ,A.PROCESSSTATE	
	        ,A.PROCESSSEGMENTID	
	        ,A.PROCESSSEGMENTVERSION	
	        ,A.WORKCOUNT	
	        ,A.RECEIVETIME	
	        ,A.TRACKINTIME	
	        ,A.TRACKOUTTIME	
	        ,A.LOTQTY	
	        ,A.DESCRIPTION	
	        ,A.CREATOR	
	        ,A.CREATEDTIME	
	        ,A.MODIFIER	
	        ,A.MODIFIEDTIME	
	        ,A.TXNGROUPHISTKEY	
	        ,A.TXNID	
	        ,A.TXNUSER	
	        ,A.TXNTIME	
	        ,A.TXNREASONCODECLASS	
	        ,A.TXNREASONCODE	
	        ,A.TXNCOMMENT	
	        ,A.RECIPEID	
	        ,A.RECIPEVERSION	
	        ,A.RECIPETYPE	
	    FROM	PCM_LOTEQUIPMENT A 
	    WHERE 1=1 
	    <if test="LOTID != null and LOTID !='' "> 
	        AND A.LOTID = #{LOTID}
	    </if>
	    <if test="TXNHISTKEY != null and TXNHISTKEY !='' "> 
	        AND A.TXNHISTKEY = #{TXNHISTKEY}
	    </if>
	    <if test="EQUIPMENTID != null and EQUIPMENTID !='' "> 
	        AND A.EQUIPMENTID = #{EQUIPMENTID}
	    </if>
	    <if test="PROCESSSTATE != null and PROCESSSTATE !='' "> 
	        AND A.PROCESSSTATE = #{PROCESSSTATE}
	    </if>
	    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
	        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	    </if>
	    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
	        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
	    </if>
	    <if test="WORKCOUNT != null and WORKCOUNT !='' "> 
	        AND A.WORKCOUNT = #{WORKCOUNT}
	    </if>
	    <if test="RECEIVETIME != null and RECEIVETIME !='' "> 
	        AND A.RECEIVETIME = #{RECEIVETIME}
	    </if>
	    <if test="TRACKINTIME != null and TRACKINTIME !='' "> 
	        AND A.TRACKINTIME = #{TRACKINTIME}
	    </if>
	    <if test="TRACKOUTTIME != null and TRACKOUTTIME !='' "> 
	        AND A.TRACKOUTTIME = #{TRACKOUTTIME}
	    </if>
	    <if test="LOTQTY != null and LOTQTY !='' "> 
	        AND A.LOTQTY = #{LOTQTY}
	    </if>
	    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
	        AND A.DESCRIPTION = #{DESCRIPTION}
	    </if>
	    <if test="TXNGROUPHISTKEY != null and TXNGROUPHISTKEY !='' "> 
	        AND A.TXNGROUPHISTKEY = #{TXNGROUPHISTKEY}
	    </if>
	    <if test="TXNID != null and TXNID !='' "> 
	        AND A.TXNID = #{TXNID}
	    </if>
	    <if test="TXNUSER != null and TXNUSER !='' "> 
	        AND A.TXNUSER = #{TXNUSER}
	    </if>
	    <if test="TXNTIME != null and TXNTIME !='' "> 
	        AND A.TXNTIME = #{TXNTIME}
	    </if>
	    <if test="TXNREASONCODECLASS != null and TXNREASONCODECLASS !='' "> 
	        AND A.TXNREASONCODECLASS = #{TXNREASONCODECLASS}
	    </if>
	    <if test="TXNREASONCODE != null and TXNREASONCODE !='' "> 
	        AND A.TXNREASONCODE = #{TXNREASONCODE}
	    </if>
	    <if test="TXNCOMMENT != null and TXNCOMMENT !='' "> 
	        AND A.TXNCOMMENT = #{TXNCOMMENT}
	    </if>
	    <if test="RECIPEID != null and RECIPEID !='' "> 
	        AND A.RECIPEID = #{RECIPEID}
	    </if>
	    <if test="RECIPEVERSION != null and RECIPEVERSION !='' "> 
	        AND A.RECIPEVERSION = #{RECIPEVERSION}
	    </if>
	    <if test="RECIPETYPE != null and RECIPETYPE !='' "> 
	        AND A.RECIPETYPE = #{RECIPETYPE}
	    </if>
	</select>
	<select id="selectPcmLotworker" parameterType="map" resultType="hashmap">
	    SELECT A.TXNHISTKEY	 
	         , A.LOTID	 
	         , A.ENTERPRISEID	 
	         , A.PLANTID	 
	         , A.AREAID	 
	         , A.PRODUCTDEFID	 
	         , A.PRODUCTDEFVERSION	 
	         , A.PROCESSDEFID	 
	         , A.PROCESSDEFVERSION	 
	         , A.PROCESSPATHID	 
	         , A.USERSEQUENCE	 
	         , A.PROCESSSEGMENTID	 
	         , A.PROCESSSEGMENTVERSION	 
	         , A.WORKCOUNT	 
	         , A.WORKERNAME	 
	         , A.USERID	 
	         , A.DESCRIPTION	 
	         , A.CREATOR	 
	         , A.CREATEDTIME	 
	         , A.TXNGROUPHISTKEY	 
	         , A.TXNUSER	 
	         , A.TXNTIME	 
	         , A.TXNREASONCODECLASS	 
	         , A.TXNREASONCODE	 
	         , A.TXNCOMMENT	 
	      FROM	PCM_LOTWORKER A 
	     WHERE A.LOTID = #{LOTID}
	       AND	A.TXNHISTKEY = #{TXNHISTKEY}
	</select>
    <select id="selectCmdUsers" parameterType="map" resultType="map">
		    SELECT 
		        A.ID	 
		        ,A.USER_ID	 
		        ,A.USER_PWD	 
		        ,A.USER_NM	 
		        ,A.EMP_NO	 
		        ,A.EMAIL_ADDR	 
		        ,A.CLPS_CD	 
		        ,A.JIKWI_CD	 
		        ,A.CMPN_PHN_NO	 
		        ,A.MBPH_NO	 
		        ,A.USE_YN	 
		        ,A.PWD_CHANGE_DATE	 
		        ,A.PWD_ERR_CNT	 
		        ,A.LAST_LGN_DTM	 
		        ,A.LAST_LGN_IP	 
		        ,A.CREATED_BY	 
		        ,A.CREATION_DATE	 
		        ,A.LAST_UPDATED_BY	 
		        ,A.LAST_UPDATE_DATE	 
		        ,A.PWD_ERR_DTM	 
		        ,A.PLANTID	 
		        ,A.DEPT_NM	 
		        ,A.ENTERPRISEID	 
		        ,A.NICKNAME	 
		        ,A.HOMEADDRESS	 
		        ,A.LANGUAGETYPE	 
		        ,A.USERSTATE	 
		        ,A.ISEESLINK	 
		        ,A.DESCRIPTION	 
		        ,A.AREARESPONSIBILITY	 
		        ,A.DEPT_CD	 
		        ,A.USE_REQ_YN	 
		        ,A.AREAID	 
		        ,A.RETR_DATE	 
		    FROM	CMD_USERS A 
		    WHERE A.USER_ID = #{USER_ID}
    </select>
    <select id="selectBasConsumabledefinition" parameterType="map" resultType="hashmap">
	    SELECT 
	        A.CONSUMABLEDEFID	 
	        ,A.CONSUMABLEDEFVERSION	 
	        ,A.CONSUMABLECLASSID	 
	        ,A.CONSUMABLEDEFNAME	 
	        ,A.ENTERPRISEID	 
	        ,A.PLANTID	 
	        ,A.CONSUMABLETYPE	 
	        ,A.ISLOTMNG	 
	        ,A.UNIT	 
	        ,A.VERSIONSTATE	 
	        ,A.DESCRIPTION	 
	        ,A.CREATOR	 
	        ,A.CREATEDTIME	 
	        ,A.MODIFIER	 
	        ,A.MODIFIEDTIME	 
	        ,A.LASTTXNHISTKEY	 
	        ,A.LASTTXNID	 
	        ,A.LASTTXNUSER	 
	        ,A.LASTTXNTIME	 
	        ,A.LASTTXNCOMMENT	 
	        ,A.VALIDSTATE	 
	        ,A.ISCUMTOMLOTALLOW	 
	    FROM	BAS_CONSUMABLEDEFINITION A 
	    WHERE A.CONSUMABLEDEFID = #{CONSUMABLEDEFID}
	    AND	A.CONSUMABLEDEFVERSION = #{CONSUMABLEDEFVERSION}
    </select> 
	<select id="selectBasArea" parameterType="map" resultType="hashmap">
	    SELECT A.AREAID  
	         , A.ENTERPRISEID  
	         , A.PLANTID  
	         , A.FACTORYID  
	         , A.AREANAME  
	         , A.AREATYPE  
	         , A.WAREHOUSEID  
	         , A.VENDORID  
	         , A.OWNTYPE  
	         , A.PARENTAREAID  
	         , A.DESCRIPTION  
	         , A.CREATOR  
	         , A.CREATEDTIME  
	         , A.MODIFIER  
	         , A.MODIFIEDTIME  
	         , A.LASTTXNHISTKEY  
	         , A.LASTTXNID  
	         , A.LASTTXNUSER  
	         , A.LASTTXNTIME  
	         , A.LASTTXNCOMMENT  
	         , A.VALIDSTATE  
	         , A.ISSUBCONTRACT  
	      FROM BAS_AREA A 
	     WHERE A.AREAID = #{AREAID}
	</select>
	<select id="selectTomDurablelot" parameterType="map" resultType="hashmap">
	    SELECT A.DURABLELOTID  
	         , A.DURABLELOTGROUPID  
	         , A.DURABLEDEFID  
	         , A.DURABLEDEFVERSION  
	         , A.DURABLELOTNAME  
	         , A.ENTERPRISEID  
	         , A.PLANTID  
	         , A.AREAID  
	         , A.EQUIPMENTID  
	         , A.LOCATIONID  
	         , A.DURABLESTATE  
	         , A.DURABLECLEANSTATE  
	         , A.ISHOLD  
	         , A.DURABLELOTQTY  
	         , A.USEDCOUNT  
	         , A.TOTALUSEDCOUNT  
	         , A.TOTALCLEANCOUNT  
	         , A.TOTALREPAIRCOUNT  
	         , A.VENDORID  
	         , A.OWNSHIPTYPE  
	         , A.WEIGHT  
	         , A.HORIZONTAL  
	         , A.VERTICAL  
	         , A.HEIGHT  
	         , A.FORM  
	         , A.CREATEDTHICKNESS  
	         , A.POLISHTHICKNESS  
	         , A.TOTALPOLISHTHICKNESS  
	         , A.RESOLUTION  
	         , A.ISCOATING  
	         , A.CONTRACTIONX  
	         , A.CONTRACTIONY  
	         , A.DESCRIPTION  
	         , A.CREATOR  
	         , A.CREATEDTIME  
	         , A.MODIFIER  
	         , A.MODIFIEDTIME  
	         , A.LASTTXNHISTKEY  
	         , A.LASTTXNID  
	         , A.LASTTXNUSER  
	         , A.LASTTXNTIME  
	         , A.LASTTXNCOMMENT  
	         , A.CLEANLIMIT  
	         , A.USEDLIMIT  
	      FROM TOM_DURABLELOT A 
	     WHERE A.DURABLELOTID = #{DURABLELOTID}
	</select>	
	<select id="selectPcmLotwtimeList" parameterType="map" resultType="hashmap">
	    SELECT 
	        A.TXNHISTKEY	
	        ,A.LOTID	
	        ,A.WTIMEDEFID	
	        ,A.WTIMEDEFNAME	
	        ,A.ENTERPRISEID	
	        ,A.PLANTID	
	        ,A.PRODUCTDEFID	
	        ,A.PRODUCTDEFVERSION	
	        ,A.PROCESSDEFID	
	        ,A.PROCESSDEFVERSION	
	        ,A.PROCESSPATHID	
	        ,A.USERSEQUENCE	
	        ,A.PROCESSSEGMENTID	
	        ,A.PROCESSSEGMENTVERSION	
	        ,A.PROCESSSTATE	
	        ,A.TOPROCESSDEFID	
	        ,A.TOPROCESSDEFVERSION	
	        ,A.TOPROCESSPATHID	
	        ,A.TOPROCESSSEGMENTID	
	        ,A.TOPROCESSSEGMENTVERSION	
	        ,A.TOPROCESSSTATE	
	        ,A.SETTIME	
	        ,A.OCCURETIME	
	        ,A.WTIME	
	        ,A.WTIMETYPE	
	        ,A.WTIMELIMIT	
	        ,A.DESCRIPTION	
	        ,A.CREATOR	
	        ,A.CREATEDTIME	
	        ,A.MODIFIER	
	        ,A.MODIFIEDTIME	
	        ,A.TXNGROUPHISTKEY	
	        ,A.TXNID	
	        ,A.TXNUSER	
	        ,A.TXNTIME	
	        ,A.TXNREASONCODECLASS	
	        ,A.TXNREASONCODE	
	        ,A.TXNCOMMENT	
	    FROM	PCM_LOTWTIME A 
	    WHERE 1=1 
	    <if test="TXNHISTKEY != null and TXNHISTKEY !='' "> 
	        AND A.TXNHISTKEY = #{TXNHISTKEY}
	    </if>
	    <if test="LOTID != null and LOTID !='' "> 
	        AND A.LOTID = #{LOTID}
	    </if>
	    <if test="WTIMEDEFID != null and WTIMEDEFID !='' "> 
	        AND A.WTIMEDEFID = #{WTIMEDEFID}
	    </if>
	    <if test="WTIMEDEFNAME != null and WTIMEDEFNAME !='' "> 
	        AND A.WTIMEDEFNAME = #{WTIMEDEFNAME}
	    </if>
	    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
	        AND A.ENTERPRISEID = #{ENTERPRISEID}
	    </if>
	    <if test="PLANTID != null and PLANTID !='' "> 
	        AND A.PLANTID = #{PLANTID}
	    </if>
	    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
	        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
	    </if>
	    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
	        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
	    </if>
	    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
	        AND A.PROCESSDEFID = #{PROCESSDEFID}
	    </if>
	    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
	        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
	    </if>
	    <if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
	        AND A.PROCESSPATHID = #{PROCESSPATHID}
	    </if>
	    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
	        AND A.USERSEQUENCE = #{USERSEQUENCE}
	    </if>
	    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
	        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	    </if>
	    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
	        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
	    </if>
	    <if test="PROCESSSTATE != null and PROCESSSTATE !='' "> 
	        AND A.PROCESSSTATE = #{PROCESSSTATE}
	    </if>
	    <if test="TOPROCESSDEFID != null and TOPROCESSDEFID !='' "> 
	        AND A.TOPROCESSDEFID = #{TOPROCESSDEFID}
	    </if>
	    <if test="TOPROCESSDEFVERSION != null and TOPROCESSDEFVERSION !='' "> 
	        AND A.TOPROCESSDEFVERSION = #{TOPROCESSDEFVERSION}
	    </if>
	    <if test="TOPROCESSPATHID != null and TOPROCESSPATHID !='' "> 
	        AND A.TOPROCESSPATHID = #{TOPROCESSPATHID}
	    </if>
	    <if test="TOPROCESSSEGMENTID != null and TOPROCESSSEGMENTID !='' "> 
	        AND A.TOPROCESSSEGMENTID = #{TOPROCESSSEGMENTID}
	    </if>
	    <if test="TOPROCESSSEGMENTVERSION != null and TOPROCESSSEGMENTVERSION !='' "> 
	        AND A.TOPROCESSSEGMENTVERSION = #{TOPROCESSSEGMENTVERSION}
	    </if>
	    <if test="TOPROCESSSTATE != null and TOPROCESSSTATE !='' "> 
	        AND A.TOPROCESSSTATE = #{TOPROCESSSTATE}
	    </if>
	    <if test="SETTIME != null and SETTIME !='' "> 
	        AND A.SETTIME = #{SETTIME}
	    </if>
	    <if test="OCCURETIME != null and OCCURETIME !='' "> 
	        AND A.OCCURETIME = #{OCCURETIME}
	    </if>
	    <if test="WTIME != null and WTIME !='' "> 
	        AND A.WTIME = #{WTIME}
	    </if>
	    <if test="WTIMETYPE != null and WTIMETYPE !='' "> 
	        AND A.WTIMETYPE = #{WTIMETYPE}
	    </if>
	    <if test="WTIMELIMIT != null and WTIMELIMIT !='' "> 
	        AND A.WTIMELIMIT = #{WTIMELIMIT}
	    </if>
	    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
	        AND A.DESCRIPTION = #{DESCRIPTION}
	    </if>
	    <if test="TXNREASONCODECLASS != null and TXNREASONCODECLASS !='' "> 
	        AND A.TXNREASONCODECLASS = #{TXNREASONCODECLASS}
	    </if>
	    <if test="TXNREASONCODE != null and TXNREASONCODE !='' "> 
	        AND A.TXNREASONCODE = #{TXNREASONCODE}
	    </if>
	    <if test="TXNCOMMENT != null and TXNCOMMENT !='' "> 
	        AND A.TXNCOMMENT = #{TXNCOMMENT}
	    </if>
	</select>	
	<select id="selectBasEquipmentext" parameterType="map" resultType="map">
		/* smh.pcm.dao.PCMCommonDao.selectBasEquipmentext */
	    SELECT A.EQUIPMENTID  
	         , A.ENTERPRISEID  
	         , A.PLANTID  
	         , A.EQUIPMENTCHARACTERISTICS  
	         , A.SEPARATOR  
	         , A.RESOURCEID  
	         , A.PROCESSSEGMENTCLASSID  
	         , A.WORKPLACE  
	         , A.PURCHASETYPE  
	         , A.PRODUCTIONTYPE  
	         , A.EQUIPMENTLEVEL  
	         , A.PURCHASECOST  
	         , A.MANUFACTUREDDATE  
	         , A.INSTALLATIONDATE  
	         , A.MANUFACTURECOUNTRY  
	         , A.MANUFACTURER  
	         , A.TELNO  
	         , A.ISKPI  
	         , A.ISCAPA  
	         , A.LINKTYPE  
	         , A.PREVLINK  
	         , A.AFTERLINK  
	         , A.SPECIFICATION  
	         , A.CALIBRATIONINSTITUTION  
	         , A.DEPARTMENT  
	         , A.MAINADMIN  
	         , A.SUBADMIN  
	         , A.DISPOSAL  
	         , A.DESCRIPTION  
	         , A.CREATOR  
	         , A.CREATEDTIME  
	         , A.MODIFIER  
	         , A.MODIFIEDTIME  
	         , A.LASTTXNHISTKEY  
	         , A.LASTTXNID  
	         , A.LASTTXNUSER  
	         , A.LASTTXNTIME  
	         , A.LASTTXNCOMMENT  
	         , A.VALIDSTATE  
	         , A.MANAGEMENTSTATE  
	         , A.ISCONTINUOUSWORK  
	      FROM BAS_EQUIPMENTEXT A 
	     WHERE A.EQUIPMENTID = #{EQUIPMENTID}
	</select>
    <select id="selectMtmConsumablelot" parameterType="map" resultType="map">
	    SELECT  A.CONSUMABLELOTID	 
	         , A.CONSUMABLELOTGROUPID	 
	         , A.CONSUMABLEDEFID	 
	         , A.CONSUMABLEDEFVERSION	 
	         , A.CONSUMABLELOTNAME	 
	         , A.ENTERPRISEID	 
	         , A.PLANTID	 
	         , A.AREAID	 
	         , A.EQUIPMENTID	 
	         , A.LOCATIONID	 
	         , A.CONSUMABLESTATE	 
	         , A.CREATEDQTY	 
	         , A.CONSUMABLELOTQTY	 
	         , A.EXPIREDDATE	 
	         , A.ISHOLD	 
	         , A.VENDORLOTID	 
	         , A.DESCRIPTION	 
	         , A.CREATOR	 
	         , A.CREATEDTIME	 
	         , A.MODIFIER	 
	         , A.MODIFIEDTIME	 
	         , A.LASTTXNHISTKEY	 
	         , A.LASTTXNID	 
	         , A.LASTTXNUSER	 
	         , A.LASTTXNTIME	 
	         , A.LASTTXNCOMMENT	 
	         , A.LASTTXNGROUPHISTKEY	 
	         , A.WAREHOUSEID	 
	         , A.WAITFORRECEIPTQTY	 
	         , A.CONSUMEDQTY	 
	         , A.PRODUCTDEFID	 
	         , A.PRODUCTDEFVERSION	 
	         , A.PROCESSDEFID	 
	         , A.PROCESSDEFVERSION	 
	         , A.PROCESSPATHID	 
	         , A.USERSEQUENCE	 
	         , A.PROCESSSEGMENTID	 
	         , A.PROCESSSEGMENTVERSION	 
	         , A.TXNGROUPHISTKEY	 
	         , A.TXNUSER	 
	         , A.TXNTIME	 
	         , A.TXNREASONCODECLASS	 
	         , A.TXNREASONCODE	 
	         , A.TXNCOMMENT	 
	         , A.WORKCOUNT	 
	         , A.TRANSACTIONREASONCODE	 
	      FROM	MTM_CONSUMABLELOT A 
	     WHERE A.CONSUMABLELOTID = #{CONSUMABLELOTID}
	       AND	A.WAREHOUSEID     = #{WAREHOUSEID}
	</select>	
	<select id="selectPcmLothistory" parameterType="map" resultType="map">
	    SELECT  A.TXNHISTKEY	 
	         , A.LOTID	 
	         , A.PRODUCTIONORDERID	 
	         , A.LINENO	 
	         , A.LOTGROUPID	 
	         , A.LOTNAME	 
	         , A.ENTERPRISEID	 
	         , A.ORIGINALPLANTID	 
	         , A.PREVPLANTID	 
	         , A.PLANTID	 
	         , A.PREVFACTORYID	 
	         , A.FACTORYID	 
	         , A.PREVAREAID	 
	         , A.AREAID	 
	         , A.PREVEQUIPMENTID	 
	         , A.EQUIPMENTID	 
	         , A.LOCATIONID	 
	         , A.RECIPEDEFID	 
	         , A.RECIPEDEFVERSION	 
	         , A.PREVPRODUCTDEFID	 
	         , A.PREVPRODUCTDEFVERSION	 
	         , A.PRODUCTDEFID	 
	         , A.PRODUCTDEFVERSION	 
	         , A.PREVPROCESSDEFID	 
	         , A.PREVPROCESSDEFVERSION	 
	         , A.PROCESSDEFID	 
	         , A.PROCESSDEFVERSION	 
	         , A.PROCESSPATHSTACK	 
	         , A.PREVUSERSEQUENCE	 
	         , A.USERSEQUENCE	 
	         , A.PREVPROCESSSEGMENTID	 
	         , A.PREVPROCESSSEGMENTVERSION	 
	         , A.PROCESSSEGMENTID	 
	         , A.PROCESSSEGMENTVERSION	 
	         , A.RAWMATERIALID	 
	         , A.ROOTLOTID	 
	         , A.PARENTLOTID	 
	         , A.CHILDLOTID	 
	         , A.CARRIERID	 
	         , A.PREVLOTTYPE	 
	         , A.LOTTYPE	 
	         , A.LOTCREATEDTYPE	 
	         , A.LOTINPUTTYPE	 
	         , A.ISREPRESENTROLLLOT	 
	         , A.HASSUBLOT	 
	         , A.PRIORITY	 
	         , A.DUEDATE	 
	         , A.EXPECTEDCOMPLETEDATE	 
	         , A.ROOTLOTSTARTDATE	 
	         , A.LOTSTARTDATE	 
	         , A.WEEK	 
	         , A.TRACKINUSER	 
	         , A.TRACKINTIME	 
	         , A.TRACKOUTUSER	 
	         , A.TRACKOUTTIME	 
	         , A.PREVLOTSTATE	 
	         , A.LOTSTATE	 
	         , A.PREVPROCESSSTATE	 
	         , A.PROCESSSTATE	 
	         , A.ISHOLD	 
	         , A.ISREWORK	 
	         , A.ISLOCKING	 
	         , A.REWORKTYPE	 
	         , A.REWORKREASONCODE	 
	         , A.ISPRINTLOTCARD	 
	         , A.ISPRINTRCLOTCARD	 
	         , A.LAYER	 
	         , A.CREATEDQTY	 
	         , A.LOTSTDPANELQTY	 
	         , A.UNIT	 
	         , A.DEFECTUNIT	 
	         , A.PREVQTY	 
	         , A.QTY	 
	         , A.PREVDEFECTQTY	 
	         , A.DEFECTQTY	 
	         , A.PREVPSEUDODEFECTQTY	 
	         , A.PSEUDODEFECTQTY	 
	         , A.PREVPCSQTY	 
	         , A.PCSQTY	 
	         , A.PREVARRAYQTY	 
	         , A.ARRAYQTY	 
	         , A.PREVPANELQTY	 
	         , A.PANELQTY	 
	         , A.PANELPERQTY	 
	         , A.REWORKCOUNT	 
	         , A.TOTALREWORKCOUNT	 
	         , A.PUREORDER	 
	         , A.PUREINPUT	 
	         , A.SUBPROCESSDEFID	 
	         , A.SUBPROCESSDEFVERSION	 
	         , A.RECEIVEUSER	 
	         , A.RECEIVETIME	 
	         , A.STARTEDUSER	 
	         , A.STARTEDDATE	 
	         , A.SENDUSER	 
	         , A.SENDTIME	 
	         , A.HANDLETYPE	 
	         , A.ISCANCEL	 
	         , A.CANCELHISTKEY	 
	         , A.DESCRIPTION	 
	         , A.CREATOR	 
	         , A.CREATEDTIME	 
	         , A.MODIFIER	 
	         , A.MODIFIEDTIME	 
	         , A.TXNGROUPHISTKEY	 
	         , A.TXNID	 
	         , A.TXNUSER	 
	         , A.TXNTIME	 
	         , A.TXNREASONCODECLASS	 
	         , A.TXNREASONCODE	 
	         , A.TXNCOMMENT	 
	         , A.ISDEFECTED	 
	         , A.WORKCOUNT	 
	         , A.RESOURCEID	 
	         , A.MKLOTID	 
	         , A.PNLROOTLOTID	 
	         , A.PNLCREATEDQTY	 
	         , A.INPUTCONFIRMDATE	 
	         , A.INPUTCONFIRMUSER	 
	         , A.ISFINALINSPECTPROGESS	 
	         , A.LOTINPUTQTY	 
	         , A.ISFIRSTCREATELOT	 
	         , A.ISOEM	 
	         , A.ISSHRINKTEST	 
	      FROM	PCM_LOTHISTORY A 
	     WHERE A.LOTID      = #{LOTID}
	       AND	A.TXNHISTKEY = #{TXNHISTKEY}
	</select>	
    <select id="selectBasStatetransition" parameterType="map" resultType="hashmap">
	    SELECT A.TRANSITIONID	 
	         , A.STATEMODELID	 
	         , A.TRANSITIONNAME	 
	         , A.DESCRIPTION	 
	         , A.ENTERPRISEID	 
	         , A.PLANTID	 
	         , A.FROMSTATEID	 
	         , A.TOSTATEID	 
	         , A.CREATOR	 
	         , A.CREATEDTIME	 
	         , A.MODIFIER	 
	         , A.MODIFIEDTIME	 
	         , A.LASTTXNHISTKEY	 
	         , A.LASTTXNID	 
	         , A.LASTTXNUSER	 
	         , A.LASTTXNTIME	 
	         , A.LASTTXNCOMMENT	 
	         , A.VALIDSTATE	 
	      FROM	BAS_STATETRANSITION A 
	     WHERE A.FROMSTATEID    = #{FROMSTATEID}
	       AND	A.STATEMODELID  = #{STATEMODELID}
	      AND	A.TRANSITIONID  = #{TRANSITIONID}
    </select>
	<select id="selectPcmReworkreturn" parameterType="map" resultType="hashmap">
	    SELECT A.LOTID  
	         , A.PRODUCTDEFID  
	         , A.PRODUCTDEFVERSION  
	         , A.PROCESSDEFID  
	         , A.PROCESSDEFVERSION  
	         , A.SUBPROCESSDEFID  
	         , A.SUBPROCESSDEFVERSION  
	         , A.FROMPROCESSSEGMENTID  
	         , A.FROMPROCESSSEGMENTVERSION  
	         , A.FROMPROCESSSTATE  
	         , A.FROMAREAID  
	         , A.FROMRESOURCEID  
	         , A.REWORKPROCESSSEGMENTID  
	         , A.REWORKPROCESSSEGMENTVERSION  
	         , A.REWORKAREAID  
	         , A.REWORKRESOURCE  
	         , A.TOPROCESSSEGMENTID  
	         , A.TOPROCESSSEGMENTVERSION  
	         , A.TOPROCESSSTATE  
	         , A.TORESOURCEID  
	         , A.TOAREAID  
	         , A.MOVESTATE  
	         , A.WORKCOUNT  
	         , A.APPLOVEDUSER  
	         , A.APPLOVEDDATE  
	         , A.REWORKQTY  
	         , A.DESCRIPTION  
	         , A.CREATOR  
	         , A.CREATEDTIME  
	         , A.MODIFIER  
	         , A.MODIFIEDTIME  
	         , A.LASTTXNHISTKEY  
	         , A.LASTTXNID  
	         , A.LASTTXNUSER  
	         , A.LASTTXNTIME  
	         , A.LASTTXNCOMMENT  
	         , A.VALIDSTATE  
	      FROM PCM_REWORKRETURN A 
	     WHERE 1= 1
    <if test="LOTID != null and LOTID !='' "> 
        AND A.LOTID = #{LOTID}
    </if>
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="SUBPROCESSDEFID != null and SUBPROCESSDEFID !='' "> 
        AND A.SUBPROCESSDEFID = #{SUBPROCESSDEFID}
    </if>
    <if test="SUBPROCESSDEFVERSION != null and SUBPROCESSDEFVERSION !='' "> 
        AND A.SUBPROCESSDEFVERSION = #{SUBPROCESSDEFVERSION}
    </if>
    <if test="FROMPROCESSSEGMENTID != null and FROMPROCESSSEGMENTID !='' "> 
        AND A.FROMPROCESSSEGMENTID = #{FROMPROCESSSEGMENTID}
    </if>
    <if test="FROMPROCESSSEGMENTVERSION != null and FROMPROCESSSEGMENTVERSION !='' "> 
        AND A.FROMPROCESSSEGMENTVERSION = #{FROMPROCESSSEGMENTVERSION}
    </if>
    <if test="FROMPROCESSSTATE != null and FROMPROCESSSTATE !='' "> 
        AND A.FROMPROCESSSTATE = #{FROMPROCESSSTATE}
    </if>
    <if test="FROMAREAID != null and FROMAREAID !='' "> 
        AND A.FROMAREAID = #{FROMAREAID}
    </if>
    <if test="FROMRESOURCEID != null and FROMRESOURCEID !='' "> 
        AND A.FROMRESOURCEID = #{FROMRESOURCEID}
    </if>
    <if test="REWORKPROCESSSEGMENTID != null and REWORKPROCESSSEGMENTID !='' "> 
        AND A.REWORKPROCESSSEGMENTID = #{REWORKPROCESSSEGMENTID}
    </if>
    <if test="REWORKPROCESSSEGMENTVERSION != null and REWORKPROCESSSEGMENTVERSION !='' "> 
        AND A.REWORKPROCESSSEGMENTVERSION = #{REWORKPROCESSSEGMENTVERSION}
    </if>
    <if test="REWORKAREAID != null and REWORKAREAID !='' "> 
        AND A.REWORKAREAID = #{REWORKAREAID}
    </if>
    <if test="REWORKRESOURCE != null and REWORKRESOURCE !='' "> 
        AND A.REWORKRESOURCE = #{REWORKRESOURCE}
    </if>
    <if test="TOPROCESSSEGMENTID != null and TOPROCESSSEGMENTID !='' "> 
        AND A.TOPROCESSSEGMENTID = #{TOPROCESSSEGMENTID}
    </if>
    <if test="TOPROCESSSEGMENTVERSION != null and TOPROCESSSEGMENTVERSION !='' "> 
        AND A.TOPROCESSSEGMENTVERSION = #{TOPROCESSSEGMENTVERSION}
    </if>
    <if test="TOPROCESSSTATE != null and TOPROCESSSTATE !='' "> 
        AND A.TOPROCESSSTATE = #{TOPROCESSSTATE}
    </if>
    <if test="TORESOURCEID != null and TORESOURCEID !='' "> 
        AND A.TORESOURCEID = #{TORESOURCEID}
    </if>
    <if test="TOAREAID != null and TOAREAID !='' "> 
        AND A.TOAREAID = #{TOAREAID}
    </if>
    <if test="MOVESTATE != null and MOVESTATE !='' "> 
        AND A.MOVESTATE = #{MOVESTATE}
    </if>
    <if test="WORKCOUNT != null and WORKCOUNT !='' "> 
        AND A.WORKCOUNT = #{WORKCOUNT}
    </if>
    <if test="APPLOVEDUSER != null and APPLOVEDUSER !='' "> 
        AND A.APPLOVEDUSER = #{APPLOVEDUSER}
    </if>
    <if test="APPLOVEDDATE != null and APPLOVEDDATE !='' "> 
        AND A.APPLOVEDDATE = #{APPLOVEDDATE}
    </if>
    <if test="REWORKQTY != null and REWORKQTY !='' "> 
        AND A.REWORKQTY = #{REWORKQTY}
    </if>
    <if test="DESCRIPTION != null and DESCRIPTION !='' "> 
        AND A.DESCRIPTION = #{DESCRIPTION}
    </if>
    <if test="LASTTXNCOMMENT != null and LASTTXNCOMMENT !='' "> 
        AND A.LASTTXNCOMMENT = #{LASTTXNCOMMENT}
    </if>
    <if test="VALIDSTATE != null and VALIDSTATE !='' "> 
        AND A.VALIDSTATE = #{VALIDSTATE}
    </if>	     
	</select>
	
	<!-- 코드그룹ID에 속한 코드 정보 리스트를 조회한다.  -->
    <select id="getCodeList" parameterType="map" resultType="hashmap">
				--
				-- Id : GetCodeList
				-- Version : 00001
				SELECT	
						CD.LOOKUP_CODE          AS CODEID
					,	DIC.DICTIONARYNAME		AS CODENAME
				FROM	CMD_LOOKUP_VALUES					CD
				LEFT OUTER JOIN CMD_DICTIONARY	DIC	ON	DIC.DICTIONARYID = CD.DICTIONARYID
													AND	DIC.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	CD.LOOKUP_TYPE = #{CODECLASSID}
				   AND   NVL(CD.ENABLED_FLAG, 'N') = 'Y'
				ORDER BY CD.DISPLAYSEQUENCE ASC	
    </select>
    
    <!-- 공정 4-Step Detail의 AOI 불량 코드 조회  -->
    <select id="getAoiDefectCodeByDefectCodeGroup" parameterType="map" resultType="hashmap">
		--
		-- Id : GetAoiDefectCodeByDefectCodeGroup
		-- Version : 10001
		SELECT
				DC.LOOKUP_CODE  AS CODEID
			,	COALESCE(DCN.DICTIONARYNAME, DC.MEANING)	AS CODENAME
			,	DC.PARENTCODEID			AS DEFECTCODEGROUPID
		FROM	CMD_LOOKUP_VALUES					DC
		LEFT OUTER JOIN CMD_DICTIONARY	DCN	ON	DC.DICTIONARYID = DCN.DICTIONARYID
											AND	DCN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE 	1 = 1
		AND		DC.LOOKUP_TYPE = 'DefectMapDefectGroupSub'		                                     
		AND		DC.ENABLED_FLAG = 'Y'
    </select>    
    <select id="getBasAreaPop" parameterType="map" resultType="hashmap">	
            /* == pcmCommonDao.getBasAreaPop ==*/
             SELECT AREAID
                  , NVL(D.DICTIONARYNAME, A.AREANAME ) AS AREANAME
                  , A.PLANTID
               FROM BAS_AREA       A
    LEFT OUTER JOIN CMD_DICTIONARY D ON A.AREANAME     = D.DICTIONARYID
                                    AND D.LANGUAGETYPE = #{LANGUAGETYPE}
              WHERE 1=1
                AND A.PLANTID = #{PLANTID}
         <if test="AREAIDNAME != null and AREAIDNAME !='' "> 
                AND (    UPPER(AREAID) LIKE UPPER( <![CDATA['%'||]]> #{AREAIDNAME} <![CDATA[||'%']]>)
                      OR UPPER(AREANAME) LIKE UPPER( <![CDATA['%'||]]> #{AREAIDNAME} <![CDATA[||'%']]>)
                      OR UPPER(D.DICTIONARYNAME) LIKE UPPER( <![CDATA['%'||]]> #{AREAIDNAME} <![CDATA[||'%']]>)
                    )
          </if>
                AND AREATYPE     = 'Area'
                AND A.VALIDSTATE = 'Valid'  
    </select>  
    
    <select id="selectMfmProductionorder" parameterType="map" resultType="map">
	    SELECT 
	        A.PRODUCTIONORDERID	 
	        ,A.LINENO	 
	        ,A.PRODUCTDEFID	 
	        ,A.PRODUCTDEFVERSION	 
	        ,A.CUSTOMERID	 
	        ,A.PRODUCTIONORDERNAME	 
	        ,A.ENTERPRISEID	 
	        ,A.PLANTID	 
	        ,A.PLANSTARTTIME	 
	        ,A.PLANENDTIME	 
	        ,A.PLANQTY	 
	        ,A.OWNER	 
	        ,A.STATE	 
	        ,A.STARTQTY	 
	        ,A.COMPLETEQTY	 
	        ,A.SCRAPQTY	 
	        ,A.STARTUSER	 
	        ,A.STARTTIME	 
	        ,A.COMPLETEUSER	 
	        ,A.COMPLETETIME	 
	        ,A.ISSPECAPPROVE	 
	        ,A.ISSPLIT	 
	        ,A.ISSALSECONFIRM	 
	        ,A.SALESPRICE	 
	        ,A.STDINPUTPNLQTY	 
	        ,A.LOTINPUTPNLQTY	 
	        ,A.SALEORDERDATE	 
	        ,A.INPUTSEQUENCE	 
	        ,A.SURPLUSWIP	 
	        ,A.SURPLUSSTOCK	 
	        ,A.UNDERAGE	 
	        ,A.PUREORDER	 
	        ,A.PUREINPUT	 
	        ,A.DESCRIPTION	 
	        ,A.CREATOR	 
	        ,A.CREATEDTIME	 
	        ,A.MODIFIER	 
	        ,A.MODIFIEDTIME	 
	        ,A.LASTTXNHISTKEY	 
	        ,A.LASTTXNID	 
	        ,A.LASTTXNUSER	 
	        ,A.LASTTXNTIME	 
	        ,A.LASTTXNCOMMENT	 
	        ,A.VALIDSTATE	 
	        ,A.ORG_LINENO	 
	    FROM	MFM_PRODUCTIONORDER A 
	    WHERE A.LINENO = #{LINENO}
	    AND	A.PRODUCTIONORDERID = #{PRODUCTIONORDERID}
    </select>
    
    <!-- 공정 4-Step Detail의 AOI Hole불량 코드 조회  -->
    <select id="getAoiHoleDefectCodeByDefectCodeGroup" parameterType="map" resultType="hashmap">
		--
		-- Id : getAoiHoleDefectCodeByDefectCodeGroup
		-- Version : 10001
		SELECT
				DC.LOOKUP_CODE  AS CODEID
			,	COALESCE(DCN.DICTIONARYNAME, DC.MEANING)	AS CODENAME
			,	DC.PARENTCODEID			AS DEFECTCODEGROUPID
		FROM	CMD_LOOKUP_VALUES					DC
		LEFT OUTER JOIN CMD_DICTIONARY	DCN	ON	DC.DICTIONARYID = DCN.DICTIONARYID
											AND	DCN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE 	1 = 1
		AND		DC.LOOKUP_TYPE = 'DefectMapHoleDefectCode'		                                     
		AND		DC.ENABLED_FLAG = 'Y'
    </select>    
    
<!-- 공정 4-Step Detail의 BBT Hole불량 코드 조회  -->
    <select id="getBBTHoleDefectCodeByDefectCodeGroup" parameterType="map" resultType="hashmap">
		--
		-- Id : getBBTHoleDefectCodeByDefectCodeGroup
		-- Version : 10001
		SELECT
				DC.LOOKUP_CODE  AS CODEID
			,	COALESCE(DCN.DICTIONARYNAME, DC.MEANING)	AS CODENAME
			,	'BBT'		AS DEFECTCODEGROUPID
		FROM	CMD_LOOKUP_VALUES					DC
		LEFT OUTER JOIN CMD_DICTIONARY	DCN	ON	DC.DICTIONARYID = DCN.DICTIONARYID
											AND	DCN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE 	1 = 1
		AND		DC.LOOKUP_TYPE = 'DefectMapBBTDefectCode'		                                     
		AND		DC.ENABLED_FLAG = 'Y'
    </select>
    <select id="getSysdate" parameterType="map" resultType="string">
    	SELECT TO_CHAR(sysdate, 'YYYYMMDDHH24MISS') AS TODATE  FROM DUAL
    </select>
    
  <select id="SelectLotHistoryAOIBBTInspectionDefectPop" parameterType="map" resultType="hashmap">
    	/* SelectLotHistoryAOIBBTInspectionDefectPop 10001 */
    			    --
				-- Id : SelectLotHistoryAOIBBTInspectionDefectPop
				-- Version : 10001
                SELECT  WR.LOTID
                    ,   WR.PROCESSDEFID
                    ,   WR.PROCESSDEFVERSION
                    ,   WR.PROCESSSEGMENTID
                    ,   COALESCE(DT3.DICTIONARYNAME, SG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
                    ,   WR.USERSEQUENCE
                    ,   WR.WORKCOUNT
                    ,   WR.AREAID
                    ,   COALESCE(DT4.DICTIONARYNAME, AR.DESCRIPTION)        AS AREANAME
                    ,  IR.INSPECTIONDEFID
                    ,  COALESCE(DC5.DICTIONARYNAME, IDF.INSPECTIONDEFNAME) AS INSPECTIONDEFNAME
                    ,   IR."degree"
                    ,   ID.DEFECTCODE
                    ,   COALESCE(DT1.DICTIONARYNAME, DC.LOOKUP_CODE)           AS DEFECTCODENAME
                    ,   ''                                                  AS QCSEGMENTID
                    ,   ''                                                  AS QCSEGMENTNAME
                    ,   ID.DEFECTCOUNT - COALESCE(ID.REPAIRRESULTQTY, 0)    AS DEFECTQTY
                    ,   ''                                                  AS REASONCONSUMABLEDEFID
                    ,   ''                                                  AS REASONCONSUMABLEDEFNAME
                    ,   ''                                                  AS REASONCONSUMABLELOTID
                    ,   ''                                                  AS REASONSEGMENT
                    ,   ''                                                  AS REASONAREAID
                    ,   ''                                                  AS REASONAREA
                    ,  ''                          AS FILERESOURCEID
                FROM    PCM_LOTWORKRESULT            WR
                INNER JOIN QAM_INSPECTIONRESULT      IR  ON  WR.LOTID = IR.RESOURCEID
                                                        AND WR.PROCESSDEFID = IR.PROCESSDEFID
                                                        AND WR.PROCESSDEFVERSION = IR.PROCESSDEFVERSION
                                                        AND WR.PROCESSSEGMENTID = IR.PROCESSSEGMENTID
                                                        AND WR.WORKCOUNT = COALESCE(IR.WORKCOUNT, 0)
                INNER JOIN PCM_QCAOIBBTWORKCOMPLETE  ID  ON  IR.RESOURCEID = ID.LOTID
                                                        AND IR.INSPECTIONDEFID = ID.SEGMENTTYPE
                                                        AND IR.PROCESSSEGMENTID = ID.PROCESSSEGMENTID
                LEFT  JOIN CMD_LOOKUP_VALUES                  DC  ON  ID.DEFECTCODE = DC.LOOKUP_CODE
                                                        AND DC.LOOKUP_TYPE = 'DefectMapDefectGroupSub'
                LEFT  JOIN CMD_DICTIONARY            DT1 ON  DC.DICTIONARYID = DT1.DICTIONARYID
                                                        AND DT1.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_PROCESSSEGMENT        SG  ON  WR.PROCESSSEGMENTID = SG.PROCESSSEGMENTID
                LEFT  JOIN CMD_DICTIONARY            DT3 ON  SG.PROCESSSEGMENTNAME = DT3.DICTIONARYID
                                                        AND DT3.LANGUAGETYPE = #{LANGUAGETYPE}
                LEFT  JOIN BAS_AREA                  AR  ON  WR.AREAID = AR.AREAID
                LEFT  JOIN CMD_DICTIONARY            DT4 ON  AR.AREANAME = DT4.DICTIONARYID
                                                        AND DT4.LANGUAGETYPE = #{LANGUAGETYPE}
        LEFT JOIN BAS_INSPECTIONDEFINITION   IDF ON  IR.INSPECTIONDEFID = IDF.INSPECTIONDEFID
                LEFT JOIN CMD_DICTIONARY             DC5 ON  IDF.INSPECTIONDEFNAME = DC5.DICTIONARYID
                                                        AND DC5.LANGUAGETYPE = #{LANGUAGETYPE}
                WHERE   WR.LOTID = #{LOTID}
                AND     WR.PROCESSDEFID = #{PROCESSDEFID}
                AND     WR.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
                AND     WR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
                AND     WR.WORKCOUNT = #{WORKCOUNT}
                AND     IR.INSPECTIONDEFID = #{INSPECTIONDEFID}
    </select>
</mapper>
