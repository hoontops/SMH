<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM04900Dao">

	<!-- Rev 콤보 -->
	<select id="selectComboList" parameterType="map" resultType="hashmap">
		SELECT
			 ''     AS CODECOLUMN
			,'전체' AS DATACOLUMN
			,'ALL'  AS CODECOLYPE
		FROM
			DUAL
		UNION  ALL
		-- Site
		-- Rev
		SELECT
			T1.*
		FROM
			(
			SELECT DISTINCT

				 PD.PRODUCTDEFVERSION AS CODECOLUMN
			    ,PD.PRODUCTDEFVERSION AS DATACOLUMN
			    ,'REV'                AS CODECOLYPE
			FROM 
				BAS_PRODUCTDEFINITION PD
			<trim prefix="WHERE" prefixOverrides="AND|OR">
				<if test="P_PLANTID != null and P_PLANTID != ''">
				AND PD.PLANTID = #{P_PLANTID}
				</if>
				<if test="P_PRODUCTDEFID != null and P_PRODUCTDEFID != ''">
				AND	EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFID}, ',')	PMP WHEREPD.PRODUCTDEFID = PMP.VALUE)
				</if>
			</trim>	
			ORDER BY PD.PRODUCTDEFVERSION
			) T1
		--대공정			
		UNION  ALL 
		SELECT
			T2.*
		FROM
			(SELECT 
				 PSC.PROCESSSEGMENTCLASSID                                                                   AS CODECOLUMN
			    ,PSC.PROCESSSEGMENTCLASSID || '_' || COALESCE(D.DICTIONARYNAME, PSC.PROCESSSEGMENTCLASSNAME) AS DATACOLUMN 		
			    ,'TOPPROCESS'                                                                                AS CODECOLYPE		
			FROM 	
				BAS_PROCESSSEGMENTCLASS	       PSC
				LEFT OUTER JOIN CMD_DICTIONARY D ON PSC.PROCESSSEGMENTCLASSNAME = D.DICTIONARYID  AND D.LANGUAGETYPE = #{P_LANGUAGETYPE}
			<trim prefix="WHERE" prefixOverrides="AND|OR">				
				AND PSC.VALIDSTATE = 'Valid'
				AND PSC.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass' 
				-- AND DECODE(PSC.PARENTPROCESSSEGMENTCLASSID, NULL, '', PSC.PARENTPROCESSSEGMENTCLASSID) = ''
				<if test="P_PROCESSSEGMENTCLASSID != null and P_PROCESSSEGMENTCLASSID != ''">
					AND (PSC.PROCESSSEGMENTCLASSID LIKE '%' || LOWER(#{P_PROCESSSEGMENTCLASSID}) || '%' OR PSC.PROCESSSEGMENTCLASSNAME LIKE '%' || LOWER(#{P_PROCESSSEGMENTCLASSID}) || '%' OR D.DICTIONARYNAME LIKE '%' || LOWER({P_PROCESSSEGMENTCLASSID}) || '%')
				</if>
				<if test="P_PROCESSSEGMENTCLASSID_TOP != null and P_PROCESSSEGMENTCLASSID_TOP != ''">
					AND	PSC.PARENTPROCESSSEGMENTCLASSID = #{P_PROCESSSEGMENTCLASSID_TOP}
				</if>
			</trim>				
			ORDER BY PSC.PROCESSSEGMENTCLASSID ASC
			) T2		
		--중공정
		UNION  ALL 				
		SELECT
			T3.*
		FROM
			(SELECT 
				 
				 PSC.PROCESSSEGMENTCLASSID	                                                                 AS CODECOLUMN		
				,PSC.PROCESSSEGMENTCLASSID || '_' || COALESCE(D.DICTIONARYNAME, PSC.PROCESSSEGMENTCLASSNAME) AS DATACOLUMN 	
				,'MIDDLEPROCESS'                                                                             AS CODECOLYPE
			FROM 	
				BAS_PROCESSSEGMENTCLASS	       PSC
				LEFT OUTER JOIN CMD_DICTIONARY   D	ON PSC.PROCESSSEGMENTCLASSNAME = D.DICTIONARYID AND D.LANGUAGETYPE = #{P_LANGUAGETYPE}
			<trim prefix="WHERE" prefixOverrides="AND|OR">				
				AND PSC.VALIDSTATE = 'Valid'
				AND PSC.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass' 
				-- AND DECODE(PSC.PARENTPROCESSSEGMENTCLASSID, NULL, '', PSC.PARENTPROCESSSEGMENTCLASSID) = ''		
				<if test="P_PROCESSSEGMENTCLASSID != null and P_PROCESSSEGMENTCLASSID != ''">
					AND (LOWER(PSC.PROCESSSEGMENTCLASSID) LIKE '%' || LOWER(#{P_PROCESSSEGMENTCLASSID}) || '%' OR LOWER(PSC.PROCESSSEGMENTCLASSNAME) LIKE '%' || LOWER(#{P_PROCESSSEGMENTCLASSID}) || '%' OR LOWER(D.DICTIONARYNAME) LIKE '%' || LOWER({P_PROCESSSEGMENTCLASSID}) || '%')
				</if>
				<if test="P_PROCESSSEGMENTCLASSID_TOP != null and P_PROCESSSEGMENTCLASSID_TOP != ''">
					AND	PSC.PARENTPROCESSSEGMENTCLASSID = #{P_PROCESSSEGMENTCLASSID_TOP}
				</if>
			</trim>				
			ORDER BY PSC.PROCESSSEGMENTCLASSID ASC
			) T3			
		--생산구분
		--제품구분
		-- RTR/SHT			
		UNION  ALL 	
		SELECT 
			T4.*
		FROM
			(SELECT 
				 CD.LOOKUP_CODE     AS CODECOLUMN
				,DIC.DICTIONARYNAME AS DATACOLUMN
				,'RTRSHT'           AS CODECOLYPE
			FROM 
				CMD_LOOKUP_VALUES CD 
				LEFT OUTER JOIN CMD_DICTIONARY DIC	ON	DIC.DICTIONARYID = CD.DICTIONARYID AND DIC.LANGUAGETYPE = #{P_LANGUAGETYPE}
			WHERE CD.LOOKUP_TYPE = 'RTRSHT'
			  AND CD.ENABLED_FLAG = 'Y'
			ORDER BY CD.DISPLAYSEQUENCE ASC
			) T4
		-- 보류 여부
		UNION  ALL 	
		SELECT 
			T5.*
		FROM
			(SELECT 
				 CD.LOOKUP_CODE     AS CODECOLUMN
				,DIC.DICTIONARYNAME AS DATACOLUMN
				,'WHETHER'          AS CODECOLYPE
			FROM 
				CMD_LOOKUP_VALUES CD 
				LEFT OUTER JOIN CMD_DICTIONARY DIC	ON	DIC.DICTIONARYID = CD.DICTIONARYID AND DIC.LANGUAGETYPE = #{P_LANGUAGETYPE}
			WHERE 
				CD.LOOKUP_TYPE = 'YesNo'
			ORDER BY CD.DISPLAYSEQUENCE ASC
			) T5
		-- Locking 여부
		UNION  ALL 	
		SELECT 
			T6.*
		FROM
			(SELECT 
				 CD.LOOKUP_CODE     AS CODECOLUMN
				,DIC.DICTIONARYNAME AS DATACOLUMN
				,'LOCKING'          AS CODECOLYPE
			FROM 
				CMD_LOOKUP_VALUES CD 
				LEFT OUTER JOIN CMD_DICTIONARY DIC	ON	DIC.DICTIONARYID = CD.DICTIONARYID AND DIC.LANGUAGETYPE = #{P_LANGUAGETYPE}
			WHERE 
				CD.LOOKUP_TYPE = 'YesNo'
			ORDER BY CD.DISPLAYSEQUENCE ASC
			) T6
		--작업구분
		-- Locking 사유 (분류/사유)
		UNION  ALL 	
		SELECT 
			T7.*
		FROM
			(SELECT
				 CD.REASONCODECLASSID                               AS CODECOLUMN
				,COALESCE(DC.DICTIONARYNAME, 'REASONCODECLASSNAME')	AS DATACOLUMN
				,CD.PARENTREASONCODECLASSID                         AS CODECOLYPE
			FROM 	
					      BAS_REASONCODECLASS CD
				LEFT JOIN CMD_DICTIONARY      DC ON CD.REASONCODECLASSNAME = DC.DICTIONARYID AND DC.LANGUAGETYPE = #{P_LANGUAGETYPE}
			WHERE 	
					CD.VALIDSTATE              = 'Valid'
				AND	CD.PARENTREASONCODECLASSID = 'LotLockingCode'
				
			UNION  ALL 
			SELECT
				T1.*
			FROM
				(SELECT 
					 CD.REASONCODEID	                           AS CODECOLUMN	
					,COALESCE(DC.DICTIONARYNAME, 'REASONCODENAME') AS DATACOLUMN
					,CD.REASONCODECLASSID                          AS CODECOLYPE
				FROM
						      BAS_REASONCODE CD
					LEFT JOIN CMD_DICTIONARY DC ON CD.REASONCODENAME = DC.DICTIONARYID AND DC.LANGUAGETYPE = #{P_LANGUAGETYPE}
				WHERE 	
						CD.VALIDSTATE        = 'Valid'
					AND EXISTS (
						SELECT 
							'X' 
						FROM
							(SELECT CD.REASONCODECLASSID FROM BAS_REASONCODECLASS CD LEFT JOIN CMD_DICTIONARY DC ON CD.REASONCODECLASSNAME = DC.DICTIONARYID AND DC.LANGUAGETYPE = 'ko-KR' WHERE CD.VALIDSTATE = 'Valid' AND CD.PARENTREASONCODECLASSID = 'LotLockingCode') T
						WHERE 
							CD.REASONCODECLASSID = T.REASONCODECLASSID
						)
				ORDER BY  CD.REASONCODECLASSID, CD.REASONCODEID ASC
				) T1
			) T7
	</select>
	
	<!-- 공정 팝업 -->
	<select id="selectPopupList" parameterType="map" resultType="hashmap">
		SELECT
			*
		FROM
		<if test="P_POPTYPE == 'PRODUCTDEFINITION'">
			(SELECT
				 PD.PRODUCTDEFID
				,PD.PRODUCTDEFNAME
				,PD.PRODUCTDEFVERSION
				,PD.PRODUCTDEFTYPE
				,PD.PRODUCTIONTYPE
				,PD.UNIT
				,PD.PRODUCTDEFID || '|' || PD.PRODUCTDEFVERSION	AS PRODUCTDEF
			FROM	
				BAS_PRODUCTDEFINITION	PD
			<trim prefix="WHERE" prefixOverrides="AND|OR">	
				<if test="P_PRODUCTDEFNAME != null and P_PRODUCTDEFNAME != ''">
					AND (UPPER(PD.PRODUCTDEFID) LIKE '%' || UPPER(#{P_PRODUCTDEFNAME}) || '%' OR UPPER(PD.PRODUCTDEFNAME) LIKE '%' || UPPER(#{P_PRODUCTDEFNAME}) || '%')
				</if>
				<if test="P_PRODUCTDIVISION != null and P_PRODUCTDIVISION != ''">
					AND PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}
				</if>
				<if test="P_PRODUCTDEFTYPE != null and P_PRODUCTDEFTYPE != ''">
					AND	PD.PRODUCTDEFTYPE = #{P_PRODUCTDEFTYPE}
				</if>
				<if test="P_PRODUCTDEFID != null and P_PRODUCTDEFID != ''">
					AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(REPLACE(#{P_PRODUCTDEFID}, ' ', ''), ',') PMP WHERE	PD.PRODUCTDEFID = PMP.VALUE)
				</if>
			</trim>
			ORDER BY PD.PRODUCTDEFID, PD.PRODUCTDEFVERSION
			)
		</if>
		<if test="P_POPTYPE == 'LOTID'">
			(SELECT 	
				 L.LOTID
				,L.PRODUCTDEFID
				,L.PRODUCTDEFVERSION
				,PD.PRODUCTDEFNAME
				,PS1.PROCESSSEGMENTID                                                           AS INPUT_PROCESSSEGMENTID
				,DECODE(DIC1.DICTIONARYNAME, NULL, PS1.PROCESSSEGMENTNAME, DIC1.DICTIONARYNAME) AS INPUTPROCESS
				,PS2.PROCESSSEGMENTID                                                           AS CURRENT_PROCESSSEGMENTID
				,DECODE(DIC2.DICTIONARYNAME, NULL, PS2.PROCESSSEGMENTNAME, DIC2.DICTIONARYNAME) AS CURRENTPROCESS				
			FROM    
				PCM_LOT L
				-- 투입공정 조회 : 첫공정 조회
				INNER JOIN BAS_PROCESSPATH      PP ON PP.PROCESSDEFID        = L.PROCESSDEFID AND PP.PROCESSDEFVERSION           = L.PROCESSDEFVERSION AND PP.PATHTYPE IN ('Start', 'StartEnd')
				LEFT JOIN BAS_PROCESSSEGMENT   PS1 ON PP.PROCESSSEGMENTID    = PS1.PROCESSSEGMENTID AND PP.PROCESSSEGMENTVERSION = PS1.PROCESSSEGMENTVERSION
				LEFT JOIN CMD_DICTIONARY      DIC1 ON PS1.PROCESSSEGMENTNAME = DIC1.DICTIONARYID AND DIC1.LANGUAGETYPE           = #{P_LANGUAGETYPE}
				-- 현재공정 조회
				LEFT JOIN BAS_PROCESSSEGMENT   PS2 ON L.PROCESSSEGMENTID     = PS2.PROCESSSEGMENTID AND L.PROCESSSEGMENTVERSION  = PS1.PROCESSSEGMENTVERSION
				LEFT JOIN CMD_DICTIONARY      DIC2 ON PS2.PROCESSSEGMENTNAME = DIC2.DICTIONARYID AND DIC2.LANGUAGETYPE           = #{P_LANGUAGETYPE}
				LEFT JOIN BAS_PRODUCTDEFINITION PD ON PD.PRODUCTDEFID        = L.PRODUCTDEFID AND PD.PRODUCTDEFVERSION           = L.PRODUCTDEFVERSION  				
			<trim prefix="WHERE" prefixOverrides="AND|OR">	
					L.LOTSTATE IN ('InProduction', 'InTransit')
				AND DECODE(L.ISDEFECTED, NULL, 'N', L.ISDEFECTED) = 'N' 
				<if test="P_LOTID != null and P_LOTID != ''">
					AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID}, ',') PMP WHERE (UPPER(L.LOTID) LIKE '%' || PMP.VALUE || '%'))
				</if>	
			</trim>
			ORDER BY L.LOTID
			)
		</if>
		<if test="P_POPTYPE == 'CUSTOMER'">
			(SELECT 
				 A.CUSTOMERID
				,A.CUSTOMERNAME 
			FROM	
				BAS_CUSTOMER A			    
			<trim prefix="WHERE" prefixOverrides="AND|OR">	
					A.VALIDSTATE = 'Valid'
				<if test="P_ENTERPRISEID != null and P_ENTERPRISEID != ''">
					AND A.ENTERPRISEID = #{P_ENTERPRISEID}
				</if>	
				<if test="P_PLANTID != null and P_PLANTID != ''">
					AND A.PLANTID = #{P_PLANTID}
				</if>
				<if test="P_CUSTOMERNAME != null and P_CUSTOMERNAME != ''">
					AND	UPPER(D.DICTIONARYNAME) LIKE '%' || UPPER(#{P_CUSTOMERNAME}) || '%'
				</if>
				<if test="P_CUSTOMERID != null and P_CUSTOMERID != ''">
					AND	UPPER(A.CUSTOMERID) LIKE '%' || UPPER(#{P_CUSTOMERID}) || '%'
				</if>
				<if test="P_CUSTOMER != null and P_CUSTOMER != ''">
					AND (UPPER(A.CUSTOMERID) LIKE '%' || UPPER(#{P_CUSTOMER}) || '%' OR UPPER(A.CUSTOMERNAME) LIKE '%' || UPPER(#{P_CUSTOMER}) || '%')
				</if>
			</trim>
			ORDER BY A.CUSTOMERID ASC
			)
		</if>
		<if test="P_POPTYPE == 'AREALISTBYAUTHORITY'">
			(SELECT	
				 A.AREAID
				,DECODE(D.DICTIONARYNAME, NULL, A.AREANAME, D.DICTIONARYNAME) AS AREANAME
				,A.PLANTID
			FROM	
				FN_AREA(#{P_USER})              A
				LEFT OUTER JOIN CMD_DICTIONARY D ON	A.AREANAME = D.DICTIONARYID AND	D.LANGUAGETYPE = #{P_LANGUAGETYPE}
			<trim prefix="WHERE" prefixOverrides="AND|OR">		
				A.PLANTID = #{P_PLANTID}
				<if test="P_DICTIONARY != null and P_DICTIONARY != ''">
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_DICTIONARY}, ',') PMP WHERE (UPPER(A.AREAID) LIKE '%' || UPPER(PMP.VALUE) || '%' OR UPPER(A.AREANAME) LIKE '%' || UPPER(PMP.VALUE) || '%' OR UPPER(D.DICTIONARYNAME) LIKE '%' || UPPER(PMP.VALUE) || '%'))
				</if>
			</trim>
            ORDER BY A.AREAID ASC
			)
		</if>
		<if test="P_POPTYPE == 'PROCESSSEGMENT'">
			(SELECT	
				 PS.PROCESSSEGMENTID                                                                                               -- 공정 ID
				,DECODE(D1.DICTIONARYNAME, NULL, PS.PROCESSSEGMENTNAME,       D1.DICTIONARYNAME) AS PROCESSSEGMENTNAME		       -- 공정명
				,DECODE(D2.DICTIONARYNAME, NULL, MPS.PROCESSSEGMENTCLASSNAME, D2.DICTIONARYNAME) AS PROCESSSEGMENTCLASSNAME_MIDDLE -- 중공정	
				,DECODE(D3.DICTIONARYNAME, NULL, TPS.PROCESSSEGMENTCLASSNAME, D3.DICTIONARYNAME) AS PROCESSSEGMENTCLASSNAME_TOP    -- 대공정
			FROM	
				BAS_PROCESSSEGMENT			       PS
				 -- MiddleProcessSegmentClass 중공정 
				INNER JOIN BAS_PROCESSSEGMENTCLASS MPS ON PS.PROCESSSEGMENTCLASSID        = MPS.PROCESSSEGMENTCLASSID AND MPS.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass'
				INNER JOIN BAS_PROCESSSEGMENTCLASS TPS ON MPS.PARENTPROCESSSEGMENTCLASSID = TPS.PROCESSSEGMENTCLASSID AND TPS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
			    LEFT OUTER JOIN CMD_DICTIONARY	    D1 ON PS.PROCESSSEGMENTNAME       = D1.DICTIONARYID AND D1.LANGUAGETYPE = #{P_LANGUAGETYPE}
			    LEFT OUTER JOIN CMD_DICTIONARY      D2 ON MPS.PROCESSSEGMENTCLASSNAME = D2.DICTIONARYID AND D2.LANGUAGETYPE = #{P_LANGUAGETYPE}
			    LEFT OUTER JOIN CMD_DICTIONARY      D3 ON TPS.PROCESSSEGMENTCLASSNAME = D3.DICTIONARYID AND D3.LANGUAGETYPE = #{P_LANGUAGETYPE}
			<trim prefix="WHERE" prefixOverrides="AND|OR">	
				<if test="P_PROCESSSEGMENTCLASSID_MIDDLE != null and P_PROCESSSEGMENTCLASSID_MIDDLE != ''">
					AND PS.PROCESSSEGMENTCLASSID = #{P_PROCESSSEGMENTCLASSID_MIDDLE}
				</if>
				<if test="P_PROCESSSEGMENT != null and P_PROCESSSEGMENT != ''">
					AND (LOWER(PS.PROCESSSEGMENTID) LIKE '%' || LOWER(#{P_PROCESSSEGMENT}) || '%' OR LOWER(PS.PROCESSSEGMENTNAME) LIKE '%' || LOWER(#{P_PROCESSSEGMENT}) || '%' OR LOWER(D1.DICTIONARYNAME) LIKE '%' || LOWER(#{P_PROCESSSEGMENT}) || '%')
				</if>
				<if test="P_PROCESSSEGMENTID != null and P_PROCESSSEGMENTID != ''">
					AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PROCESSSEGMENTID}, ',') PMP WHERE PS.PROCESSSEGMENTID = PMP.VALUE)
				</if>
				<if test="P_PROCESSSEGMENTCLASSID_TOP != null and P_PROCESSSEGMENTCLASSID_TOP != ''">
					AND MPS.PARENTPROCESSSEGMENTCLASSID = #{P_PROCESSSEGMENTCLASSID_TOP}
				</if>
			</trim>
			ORDER BY PS.PROCESSSEGMENTID ASC
			)
		</if>
		<if test="P_POPTYPE == 'PRODUCTIONORDERID'">
			(SELECT
				 PO.PRODUCTDEFID      || '|' || PD.PRODUCTDEFVERSION AS PRODUCTDEF 
				,PO.PRODUCTIONORDERID || '|' || PO.LINENO 		     AS PRODUCTIONORDER
				,PO.PRODUCTIONORDERID
				,PO.LINENO
				,PO.PLANQTY
				,PO.PRODUCTDEFID
				,PD.PRODUCTDEFNAME
				,PD.PRODUCTDEFVERSION
				,D1.DICTIONARYNAME AS PRODUCTDEFTYPE
				,PD.UNIT
			FROM	
				                MFM_PRODUCTIONORDER	  PO
				INNER      JOIN BAS_PRODUCTDEFINITION PD ON PO.PLANTID        = PD.PLANTID      AND PO.PRODUCTDEFID = PD.PRODUCTDEFID AND PO.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT OUTER JOIN CMD_LOOKUP_VALUES     C1 ON PD.PRODUCTDEFTYPE = C1.LOOKUP_CODE  AND C1.LOOKUP_TYPE  = 'ProductDefType'  
				LEFT OUTER JOIN CMD_DICTIONARY	      D1 ON C1.DICTIONARYID   = D1.DICTIONARYID AND D1.LANGUAGETYPE = #{P_LANGUAGETYPE}
			<trim prefix="WHERE" prefixOverrides="AND|OR">
					    PO.STATE IN ('Create', 'LotCreate')
					-- AND PO.ISSPLIT = 'Y' 
					AND EXISTS (SELECT 
						1 
					FROM 
						PCM_LOT X 
					WHERE 
						    PO.PRODUCTDEFID      = X.PRODUCTDEFID 
						AND PO.PRODUCTDEFVERSION = X.PRODUCTDEFVERSION 
						AND PO.PRODUCTIONORDERID = X.PRODUCTIONORDERID
						AND PO.LINENO            = X.LINENO
						AND X.LOTSTATE           = 'Created'	
					)
				<if test="P_PLANTID != null and P_PLANTID != ''">
					AND PO.PLANTID = #{P_PLANTID}
				</if>
				<if test="P_PRODUCTIONORDERID != null and P_PRODUCTIONORDERID != ''">
					AND	(PO.PRODUCTIONORDERID LIKE '%' || UPPER(#{P_PRODUCTIONORDERID}) || '%' OR PO.PRODUCTIONORDERNAME LIKE '%' || UPPER(#{P_PRODUCTIONORDERID}) || '%')
				</if>
				<if test="P_TXTPRODUCTDEFNAME != null and P_TXTPRODUCTDEFNAME != ''">
					AND	(PD.PRODUCTDEFID      LIKE '%' || UPPER(#{P_TXTPRODUCTDEFNAME}) || '%' OR PD.PRODUCTDEFNAME LIKE '%'      || UPPER(#{P_TXTPRODUCTDEFNAME}) || '%')
				</if>
				<if test="P_PRODUCTDIVISION != null and P_PRODUCTDIVISION != ''">
					AND	PD.PRODUCTDEFTYPE = #{P_PRODUCTDIVISION}
				</if>
				<if test="P_PRODUCTIONTYPE == 'Sample'">
					AND	PD.PRODUCTIONTYPE <![CDATA[<>]]> 'Production'
				</if>
			</trim>
			ORDER BY PO.PRODUCTIONORDERID ASC
			)
		</if>
	</select>
	
	<!-- 제공 정보 -->
	<select id="selectWIPList" parameterType="map" resultType="hashmap">
		WITH BASE_LOT AS
		(
			SELECT 
				 L.PLANTID
				,L.LOTID
				,L.ISLOCKING
				,L.ISHOLD
				,L.LOTTYPE
				,L.PRODUCTDEFID
				,L.PRODUCTDEFVERSION
				,PD.PRODUCTDEFNAME
				,PD.PRODUCTDEFTYPE
				,PD.PRODUCTIONTYPE
				,L.PROCESSSEGMENTID
				,L.PROCESSSEGMENTVERSION
				,PS.PROCESSSEGMENTCLASSID
				,PSC.PARENTPROCESSSEGMENTCLASSID   
				,WR.TXNHISTKEY
				,WR.PREVSENDLOTHISTKEY
				,L.PROCESSDEFID
				,L.PROCESSDEFVERSION
				,L.PROCESSPATHSTACK
				,L.ISREWORK	
				,CASE 
					WHEN L.ISREWORK = 'Y' OR L.WORKCOUNT <![CDATA[>]]> 0 THEN 'Rework'
					ELSE 'Normal'   
				END AS REWORKDIVISION
				,CASE 
					WHEN L.ENTERPRISEID = 'SMLINES' THEN   
						CASE 
							WHEN L.ISREWORK = 'Y' OR L.WORKCOUNT <![CDATA[>]]> 0 THEN 'IsRework'
							ELSE 
								CASE 
									WHEN L.LOTCREATEDTYPE = 'Claim' THEN 'Claim'
									ELSE 'Normal'
								END
						END
					ELSE      
						CASE 
							WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
							WHEN L.LOTCREATEDTYPE = 'Repair' THEN 'MRB'
							WHEN L.LOTCREATEDTYPE = 'Claim'  THEN 'Claim'
							ELSE 
								CASE 
									WHEN L.ISREWORK = 'Y' OR L.WORKCOUNT <![CDATA[>]]> 0 THEN 'IsRework' 
									ELSE 'Normal'
								END 
						END 						         
				END AS PROCESSCLASSID_R
				,L.LOTCREATEDTYPE
				,L.USERSEQUENCE
				,L.AREAID
				,L.QTY
				,L.PANELPERQTY
				,L.PROCESSSTATE
				,CASE 
					WHEN L.PROCESSSTATE = 'WaitForReceive' THEN 'WaitForReceive'
					WHEN L.PROCESSSTATE = 'Wait'           THEN 'Receive'
					WHEN L.PROCESSSTATE = 'Run'            THEN 'WorkStart'
					WHEN L.PROCESSSTATE = 'WaitForSend'    THEN 'WorkEnd'
				END AS WIPPROCESSSTATE
				,DECODE(PD.RTRSHT, NULL, 'SHT', PD.RTRSHT) AS RTRSHT    
				,L.PRODUCTIONORDERID
				,L.LINENO
				,PD.PCSMM
				,L.CREATEDQTY
				,L.ROOTLOTSTARTDATE
				,L.SENDTIME
				,L.LOTSTATE
				,WR.SELFSHIPINSPRESULT
				,WR.SELFTAKEINSPRESULT
				,WR.MEASUREINSPRESULT
				,L.EXPECTEDCOMPLETEDATE
				,L.UNIT
				,PS.OSPREQUIRED
				,OS.RECEIPTDATE
				,OS.CHECKDATE
				,OS.SENDDATE
				,QQ.REQUESTDATE
				,QQ.RECEIVINGDATE     	
				,L.ISFINALINSPECTPROGESS
				,PO.PLANQTY
				,L.ENTERPRISEID
				,L.LOTSTARTDATE
				,L.WORKCOUNT
				,L.LASTTXNHISTKEY
				,OS.PCMLASTTXNHISTKEY
			FROM 
				PCM_LOT L
				LEFT JOIN FN_AREA(#{P_USER})         SA ON L.AREAID                 = SA.AREAID
				LEFT JOIN BAS_PRODUCTDEFINITION      PD ON L.PRODUCTDEFID           = PD.PRODUCTDEFID      AND L.PRODUCTDEFVERSION     = PD.PRODUCTDEFVERSION               
				LEFT JOIN BAS_PROCESSSEGMENT_V       PS ON L.PROCESSSEGMENTID       = PS.PROCESSSEGMENTID  AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				LEFT JOIN BAS_PROCESSSEGMENTEXT		 PT ON PS.PROCESSSEGMENTID		= PT.PROCESSSEGMENTID  AND PS.ENTERPRISEID 		   = PT.ENTERPRISEID  
				LEFT JOIN BAS_PROCESSSEGMENTCLASS   PSC ON PS.PROCESSSEGMENTCLASSID = PSC.PROCESSSEGMENTCLASSID        
				LEFT JOIN PCM_LOTWORKRESULT          WR ON L.LOTID                  = WR.LOTID             AND L.PROCESSSEGMENTID      = WR.PROCESSSEGMENTID AND L.USERSEQUENCE   = WR.USERSEQUENCE AND NVL(WR.RESULTTYPE,'NORMAL') = 'NORMAL' AND L.WORKCOUNT = WR.WORKCOUNT	
				LEFT JOIN OSM_OSPRECEIPTSENDLOT      OS ON L.LOTID                  = OS.LOTID             AND WR.TXNHISTKEY           = OS.LOTHISTKEY   AND WR.AREAID = OS.SENDAREAID 	 AND OS.ISLASTRECEIPT = 'Y'
				LEFT JOIN QAM_QCOSPREQUESTINSPECTION QQ ON L.LOTID                  = QQ.LOTID             AND WR.TXNHISTKEY           = QQ.LOTHISTKEY       AND QQ.ISLASTREQUEST = 'Y'
				LEFT JOIN MFM_PRODUCTIONORDER        PO ON L.PRODUCTIONORDERID      = PO.PRODUCTIONORDERID AND L.LINENO                = PO.LINENO
		  	<trim prefix="WHERE" prefixOverrides="AND|OR">
		  			L.LOTSTATE IN ('InProduction', 'InTransit')	
		  		AND L.ISDEFECTED = 'N'
		  		<if test="P_PLANTID != null and P_PLANTID != ''">
		  		-- SITE 
				AND L.PLANTID = #{P_PLANTID}
		   	 	</if> 
		   	 	<if test="P_HOLD != null and P_HOLD != ''">
		   	 	-- HOLD
			    AND  L.ISHOLD = #{P_HOLD}	
				</if>
		   	 	<if test="P_LOCKING != null and P_LOCKING != ''">
		   	 	-- LOCKING
			    AND  L.ISLOCKING = #{P_LOCKING}	
				</if>		   	 	
		    	<if test="P_LOTID != null and P_LOTID != ''">
		   	 	-- LOTID 조회		    	
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID}, ',') LMP WHERE L.LOTID = LMP.VALUE)
		   	 	</if>
		    	<if test="P_PRODUCTDEFTYPE != null and P_PRODUCTDEFTYPE != ''">
		    	-- 품목타입
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFTYPE}, ',') PMP WHERE PD.PRODUCTDEFTYPE = PMP.VALUE)
		   	 	</if>		   	 	
		   	 	<if test="P_PRODUCTDEFID != null and P_PRODUCTDEFID != ''">
		   	 	-- 품목코드
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFID}, ',') PMP WHERE L.PRODUCTDEFID = PMP.VALUE)
		   	 	</if>	
		   	 	<if test="P_PRODUCTDEFVERSION != null and P_PRODUCTDEFVERSION != ''">
		   	    -- 품목리비전
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFVERSION}, ',') SMP WHERE PD.PRODUCTDEFVERSION = SMP.VALUE)
		   	 	</if>
		   	 	<if test="P_PRODUCTNAME != null and P_PRODUCTNAME != ''">
		   	 	-- 품목명
				AND PD.PRODUCTDEFNAME LIKE '%' || #{P_PRODUCTNAME} || '%' 
		   	 	</if>
		   	 	<if test="P_CUSTOMER != null and P_CUSTOMER != ''">
		   	 	-- 고객사
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_CUSTOMER}, ',') SMP WHERE PD.CUSTOMERID = SMP.VALUE)
		   	 	</if>
		   	 	<if test="P_LOTTYPE != null and P_LOTTYPE != ''">
		   	    -- 구분
			    AND L.LOTTYPE = #{P_LOTTYPE}
			    </if>
		   	 	<if test="P_PROCESSSEGMENTCLASSID_TOP != null and P_PROCESSSEGMENTCLASSID_TOP != ''">
		   	 	-- 대공정
			    AND PSC.PARENTPROCESSSEGMENTCLASSID = #{P_PROCESSSEGMENTCLASSID_TOP}
			    </if>	
			    <if test="P_PROCESSSEGMENTCLASSID_MIDDLE != null and P_PROCESSSEGMENTCLASSID_MIDDLE != ''">
			    -- 중공정
			    AND	PSC.PROCESSSEGMENTCLASSID = #{P_PROCESSSEGMENTCLASSID_MIDDLE}
				</if>
			    <if test="P_PROCESSSEGMENTID != null and P_PROCESSSEGMENTID != ''">
			     -- 공정
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_PROCESSSEGMENTID}, ',') SMP WHERE L.PROCESSSEGMENTID = SMP.VALUE)
		   	 	</if>
			    <if test="P_AREAID != null and P_AREAID != ''">
			    -- 작업장
				AND EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_AREAID}, ',') SMP WHERE L.AREAID = SMP.VALUE)
		   	 	</if>			    
			    <if test="P_RTRSHT != null and P_RTRSHT != ''">
			    -- RTR/SHT
			    AND (  (#{P_RTRSHT}='RTR' AND PT.SUBSEGMENTID = 'RTR' )
					OR (#{P_RTRSHT}<![CDATA[<>]]>'RTR' AND PT.SUBSEGMENTID <![CDATA[<>]]> 'RTR' )
					)
				</if>	
				<if test="P_OWNERFACTORY != null and P_OWNERFACTORY != ''">
				-- 담당공장
				AND PD.OWNERFACTORYID = #{P_OWNERFACTORY}
				</if>  	 			   	 	
		  	</trim>	
		)	
		,AOI_BBT_DEFECT AS
		(
			SELECT 
				 X.LOTID
				,CASE 
					WHEN DECODE(SUM(X.BBTDEFECTCOUNT), NULL, 0, SUM(X.BBTDEFECTCOUNT)) = 0 THEN DECODE(SUM(X.AOIDEFECTCOUNT), NULL, 0, SUM(X.AOIDEFECTCOUNT))
					ELSE DECODE(SUM(X.BBTDEFECTCOUNT), NULL, 0, SUM(X.BBTDEFECTCOUNT))
				END AS AOIBBTDEFECT
			FROM
				(SELECT 
				 	 L.LOTID
					,(QW1.DEFECTCOUNT - DECODE(QW1.REPAIRRESULTQTY, NULL, 0, QW1.REPAIRRESULTQTY)) AS AOIDEFECTCOUNT
					,(QW2.DEFECTCOUNT - DECODE(QW2.REPAIRRESULTQTY, NULL, 0, QW2.REPAIRRESULTQTY)) AS BBTDEFECTCOUNT
				FROM	 
					BASE_LOT L
					INNER JOIN PCM_QCAOIBBTWORKCOMPLETE QW1 ON L.LOTID = QW1.LOTID AND QW1.SEGMENTTYPE = 'AOIInspection'
					INNER JOIN PCM_QCAOIBBTWORKCOMPLETE QW2 ON L.LOTID = QW2.LOTID AND QW2.SEGMENTTYPE = 'BBTInspection'                                       
				) X
			GROUP BY X.LOTID
		)
		SELECT
			 X.LOTID
			,X.ISLOCKING
			,X.ISHOLD
			,X.LOTTYPE
			,X.UNIT
			,X.PRODUCTDEFID
			,X.PRODUCTREVISION
			,X.PRODUCTDEFNAME
			,X.PRODUCTDEFTYPE
			,X.PRODUCTIONTYPE
			,X.SALESORDERID
			,X.LINENO
			,X.PROCESSDEFID
			,X.PROCESSSEGMENTID
			,X.PROCESSSEGMENTNAME
			,X.UOM
			,X.USERSEQUENCE
			,X.PLANTID
			,X.AREAID
			,X.AREANAME
			,X.RTRSHT
			,X.WIPTOTALPCS
			,X.PCSQTY
			,X.WIPTOTALPNL
			,X.M2QTY
			,X.RESPECTYIELD
			,TO_CHAR(X.DELIVERYDATE, 'YYYY-MM-DD') AS DELIVERYDATE
			,TO_CHAR(X.SENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS SENDTIME
			,X.SENDTIME
			,X.PROCESSSTATE
			,DECODE(SD1.DICTIONARYNAME, NULL, '', SD1.DICTIONARYNAME) AS TRANSITSTATE
			,TO_CHAR(X.LOTSTARTDATE, 'YYYY-MM-DD HH24:MI:SS')     AS LOTINPUTDATE
			,PROCESSCLASSID_R
			,X.REWORKDIVISION
			,STATE
			,X.SEGMENTINCOMETIME
			,X.LEFTDATE
			,X.SENDPCSQTY
			,X.SENDPANELQTY
			,X.RECEIVEPCSQTY
			,X.RECEIVEPANELQTY
			,X.WORKSTARTPCSQTY
			,X.WORKSTARTPANELQTY
			,X.WORKENDPCSQTY
			,X.WORKENDPANELQTY
			,X.PROCESSSEGMENTLEADTIME
			,X.TOTALLEADTIME
			,X.SELFTAKEINSPRESULT
			,X.SELFSHIPINSPRESULT
			,X.MEASUREINSPRESULT
			,X.EXPECTPRODUCTDATE
			,X.PLANQTY
			,CASE 
				WHEN X.LOTID = X.PROCESSDEFID THEN 'Y'
				ELSE 'N'
			END AS LOTROUTING
		FROM
			(SELECT
				 L.LOTID 
				,L.ISLOCKING
				,L.ISHOLD
				,L.UNIT
				,DECODE(SD1.DICTIONARYNAME, NULL, L.LOTTYPE, SD1.DICTIONARYNAME) AS LOTTYPE
				,L.PRODUCTDEFID       
				,L.PRODUCTDEFVERSION AS PRODUCTREVISION
				,L.PRODUCTDEFNAME
				,L.PRODUCTDEFTYPE
				,L.PRODUCTIONTYPE
				,L.PRODUCTIONORDERID AS SALESORDERID 
				,L.LINENO
				,L.PROCESSSTATE
				,L.PROCESSDEFID
				,L.PROCESSSEGMENTID    
				,DECODE(SD6.DICTIONARYNAME, NULL, L.PROCESSSEGMENTID, SD6.DICTIONARYNAME) AS PROCESSSEGMENTNAME
				,PP.PROCESSUOM UOM
				,CASE 
					WHEN  L.ISREWORK = 'Y' THEN 
						CASE WHEN PP.USERSEQUENCE=L.USERSEQUENCE THEN PP.USERSEQUENCE || '.' || L.WORKCOUNT
						ELSE  PP.USERSEQUENCE || '.' || L.USERSEQUENCE
					 	END
					ELSE L.USERSEQUENCE 
				END AS USERSEQUENCE  
				--,CASE 
				--	WHEN L.ISREWORK = 'Y' THEN PP.USERSEQUENCE || '.' || L.USERSEQUENCE
				--	ELSE L.USERSEQUENCE 
				--END AS USERSEQUENCE       
				,L.PLANTID
				,L.AREAID
				,DECODE(SD5.DICTIONARYNAME, NULL, L.AREAID, SD5.DICTIONARYNAME) AS AREANAME    
				,L.RTRSHT
				,L.QTY WIPTOTALPCS
				,L.QTY PCSQTY    
				,L.REWORKDIVISION
				,DECODE(DC3.DICTIONARYNAME, NULL, PROCESSCLASSID_R, DC3.DICTIONARYNAME) AS PROCESSCLASSID_R					            
				,CEIL(L.QTY / L.PANELPERQTY) AS WIPTOTALPNL   
				,CASE 
					WHEN L.PRODUCTDEFTYPE = 'SubAssembly' THEN ((L.QTY / L.PANELPERQTY * PD.PCSPNL) / PD.PCSMM)
					ELSE (L.QTY / L.PCSMM)					
				END AS M2QTY
				,CASE 
					WHEN L.ISFINALINSPECTPROGESS = 'Y' THEN TO_CHAR((L.QTY ) / DECODE(L.CREATEDQTY, 0, 1) * 100, 'FM9999.00')
					ELSE TO_CHAR((L.QTY - ABD.AOIBBTDEFECT) / DECODE(L.CREATEDQTY, 0, 1) * 100, 'FM9999.00')
				END AS RESPECTYIELD
				,PO.PLANENDTIME AS DELIVERYDATE			
				,CASE 
					WHEN PP.PATHTYPE = 'Start' OR PP.PATHTYPE = 'StartEnd' THEN L.ROOTLOTSTARTDATE 
					ELSE L.SENDTIME 
				END	SENDTIME
				,DECODE(SD4.DICTIONARYNAME, NULL, L.WIPPROCESSSTATE, SD4.DICTIONARYNAME) AS STATE  
				,L.ROOTLOTSTARTDATE
		      --,CASE WHEN SA.OWNTYPE = 'OutsideOSP' THEN
				,	CASE 
						WHEN L.LOTSTATE ='InTransit' AND DECODE(LP.TRANSITSTATUS, NULL, 'InProduction', LP.TRANSITSTATUS) ='InProduction' THEN
						CASE 
						    WHEN L.RECEIPTDATE IS NULL      AND L.SENDDATE IS NULL AND L.LASTTXNHISTKEY = L.PCMLASTTXNHISTKEY THEN 'WaitOHInbound'
						    WHEN L.RECEIPTDATE  IS NOT NULL AND L.SENDDATE IS NULL AND L.LASTTXNHISTKEY = L.PCMLASTTXNHISTKEY THEN 'OHInbound'
							WHEN L.RECEIPTDATE IS NULL      AND L.SENDDATE IS NULL AND L.PCMLASTTXNHISTKEY IS NULL THEN 'WaitOHInbound'
							WHEN L.RECEIPTDATE IS NOT NULL  AND L.SENDDATE IS NULL AND L.PCMLASTTXNHISTKEY IS NULL THEN 'OHInbound'
							ELSE ''
						END   	      
						WHEN SA.OWNTYPE='OutsideOSP' AND L.LOTSTATE <![CDATA[<>]]> 'InTransit' AND L.PROCESSSTATE ='WaitForReceive' THEN 'OHOutBound'
						WHEN SA.OWNTYPE='OutsideOSP' AND L.OSPREQUIRED = 'Y' AND L.PROCESSSTATE= 'WaitForSend' THEN
						CASE 
							WHEN L.REQUESTDATE IS NULL                                     THEN 'InspWaitRequest'
							WHEN L.REQUESTDATE IS NOT NULL AND L.RECEIVINGDATE IS NULL     THEN 'InspRequesting'
							WHEN L.REQUESTDATE IS NOT NULL AND L.RECEIVINGDATE IS NOT NULL THEN 'InspRequest'
							ELSE ''
						END
						ELSE ''
					END  AS TRANSITSTATE
			--		WHEN SA.OWNTYPE <![CDATA[<>]]> 'OutsideOSP' AND L.LOTSTATE ='InTransit' THEN LP.TRANSITSTATUS
			--		ELSE ''
			--	END AS TRANSITSTATE
				,CASE 
					WHEN PP.PATHTYPE = 'Start' OR PP.PATHTYPE = 'StartEnd' THEN TO_CHAR(L.ROOTLOTSTARTDATE,'YYYY-MM-DD HH24:MI:SS')
					ELSE TO_CHAR(L.SENDTIME, 'YYYY-MM-DD HH24:MI:SS')
				END AS SEGMENTINCOMETIME				
				,EXTRACT(DAY FROM (CURRENT_TIMESTAMP - PO.PLANENDTIME)) AS LEFTDATE  	
				,CASE 
					WHEN L.PROCESSSTATE = 'WaitForReceive' THEN  L.QTY 
					ELSE 0 
				END AS SENDPCSQTY
				,CASE 
					WHEN L.PROCESSSTATE = 'WaitForReceive' THEN  CEIL(L.QTY/L.PANELPERQTY) 
					ELSE 0 
				END AS SENDPANELQTY	
				-- 작업시작(인수 완료 수량)						
				,CASE 
					WHEN L.PROCESSSTATE = 'Wait'           THEN  L.QTY 
					ELSE 0 
				END AS RECEIVEPCSQTY
				,CASE 
					WHEN L.PROCESSSTATE = 'Wait'           THEN  CEIL(L.QTY/L.PANELPERQTY) 
					ELSE 0 
				END AS RECEIVEPANELQTY
				-- 작업완료(작업 시작 수량)					
				,CASE 
					WHEN L.PROCESSSTATE = 'Run'            THEN  L.QTY 
					ELSE 0 
				END AS WORKSTARTPCSQTY
				,CASE 
					WHEN L.PROCESSSTATE = 'Run'            THEN  CEIL(L.QTY / L.PANELPERQTY)
					ELSE 0 
				END AS WORKSTARTPANELQTY	
				-- 인계 대기(작업완료 수량)				
				,CASE 
					WHEN L.PROCESSSTATE = 'WaitForSend'    THEN  L.QTY 
					ELSE 0 
				END AS WORKENDPCSQTY
				,CASE 
					WHEN L.PROCESSSTATE = 'WaitForSend'    THEN  CEIL(L.QTY / L.PANELPERQTY) 
					ELSE 0 
				END AS WORKENDPANELQTY 
				,TO_CHAR(((SYSDATE - TO_DATE(TO_CHAR(
				(CASE 
					WHEN PP.PATHTYPE = 'Start' OR PP.PATHTYPE = 'StartEnd' THEN L.ROOTLOTSTARTDATE 
					ELSE L.SENDTIME 
				END), 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')) * 24), 'FM9999999999999.0')                                              AS PROCESSSEGMENTLEADTIME
				,TO_CHAR((SYSDATE - TO_DATE(TO_CHAR(L.ROOTLOTSTARTDATE, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')), 'FM9999999999999.00') AS TOTALLEADTIME
				,L.SELFTAKEINSPRESULT
				,L.SELFSHIPINSPRESULT
				,L.MEASUREINSPRESULT
				,TO_CHAR(L.EXPECTEDCOMPLETEDATE,'YYYY-MM-DD') AS EXPECTPRODUCTDATE
				,L.PLANQTY
				,L.ENTERPRISEID
				,L.LOTSTARTDATE
			FROM
				BASE_LOT L
				INNER JOIN BAS_PROCESSPATH       PP ON SPLIT_PART(L.PROCESSPATHSTACK, '.', 1) = PP.PROCESSPATHID
				LEFT  JOIN AOI_BBT_DEFECT       ABD ON L.LOTID                                = ABD.LOTID
				LEFT  JOIN MTM_LOTPLANTTRANSIT   LP ON L.LOTID                                = LP.LOTID             AND LP.TRANSITSTATUS <![CDATA[<>]]> 'InProduction'
				LEFT  JOIN PCM_LOTHISTORY        LH ON L.PREVSENDLOTHISTKEY                   = LH.TXNHISTKEY        AND L.LOTID                 = LH.LOTID
				LEFT  JOIN CMD_LOOKUP_VALUES    SC1 ON L.LOTTYPE                              = SC1.LOOKUP_CODE      AND SC1.LOOKUP_TYPE         = 'ProductionType'  
				LEFT  JOIN CMD_DICTIONARY       SD1 ON SC1.DICTIONARYID                       = SD1.DICTIONARYID     AND SD1.LANGUAGETYPE        = #{P_LANGUAGETYPE}
				LEFT  JOIN CMD_LOOKUP_VALUES    SC2 ON L.REWORKDIVISION                       = SC2.LOOKUP_CODE      AND SC2.LOOKUP_TYPE         = 'ReworkDivision'     
				LEFT  JOIN CMD_DICTIONARY 	    SD2 ON SC2.DICTIONARYID                       = SD2.DICTIONARYID     AND SD2.LANGUAGETYPE        = #{P_LANGUAGETYPE}
				LEFT  JOIN CMD_LOOKUP_VALUES    CD3 ON L.PROCESSCLASSID_R                     = CD3.LOOKUP_CODE      AND CD3.LOOKUP_TYPE         = 'LotWorkType'
				LEFT  JOIN CMD_DICTIONARY	    DC3 ON CD3.DICTIONARYID                       = DC3.DICTIONARYID     AND DC3.LANGUAGETYPE        = #{P_LANGUAGETYPE}
				LEFT  JOIN CMD_LOOKUP_VALUES    SC4 ON L.WIPPROCESSSTATE                      = SC4.LOOKUP_CODE      AND SC4.LOOKUP_TYPE         = 'WipProcessState'  
				LEFT  JOIN CMD_DICTIONARY 	    SD4 ON SC4.DICTIONARYID                       = SD4.DICTIONARYID     AND SD4.LANGUAGETYPE        = #{P_LANGUAGETYPE}
				LEFT  JOIN BAS_AREA              SA ON L.AREAID                               = SA.AREAID
				LEFT  JOIN CMD_DICTIONARY       SD5 ON SA.AREANAME                            = SD5.DICTIONARYID     AND SD5.LANGUAGETYPE        = #{P_LANGUAGETYPE}
				LEFT  JOIN BAS_PROCESSSEGMENT    PS ON L.PROCESSSEGMENTID                     = PS.PROCESSSEGMENTID  AND L.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				LEFT  JOIN CMD_DICTIONARY       SD6 ON PS.PROCESSSEGMENTNAME                  = SD6.DICTIONARYID     AND SD6.LANGUAGETYPE        = #{P_LANGUAGETYPE}
				LEFT  JOIN MFM_PRODUCTIONORDER   PO ON L.PRODUCTIONORDERID                    = PO.PRODUCTIONORDERID AND L.LINENO                = PO.LINENO
				LEFT  JOIN BAS_PRODUCTDEFINITION PD ON PO.PRODUCTDEFID                        = PD.PRODUCTDEFID      AND PO.PRODUCTDEFVERSION    = PD.PRODUCTDEFVERSION
    		<trim prefix="WHERE" prefixOverrides="AND|OR">
    			<if test="P_WORKTYPE != null and P_WORKTYPE != ''">
    			L.PROCESSCLASSID_R = #{P_WORKTYPE}
    			</if>
   			</trim>    
			) X                      
		LEFT JOIN CMD_LOOKUP_VALUES SC1 ON X.TRANSITSTATE   = SC1.LOOKUP_CODE  AND SC1.LOOKUP_TYPE  = 'WipLogisticStatus'  
		LEFT JOIN CMD_DICTIONARY    SD1 ON SC1.DICTIONARYID = SD1.DICTIONARYID AND SD1.LANGUAGETYPE = 'ko-KR'   
		ORDER BY X.PRODUCTDEFID, TO_NUMBER(X.USERSEQUENCE), X.LOTID	
	</select>
	
</mapper>