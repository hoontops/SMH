<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM01900Dao">


   <!-- 공정 관리 > 4-Step (작업 완료) 설 명 : AOI Repair 공정 작업 완료 화면에서 AOI 
		불량 수기 입력 내역을 조회 한다.  -->
    <select id="selectDefectMapDataByWorkComplete" parameterType="map" resultType="hashmap">
		--
		-- Id : SelectDefectMapDataByWorkComplete
		-- Version : 10001
		SELECT
				DC.PARENTCODEID				AS DEFECTCODEGROUPID
			,	COALESCE(DGN.DICTIONARYNAME, 'NONE')	AS DEFECTCODEGROUPNAME
			,	QC.DEFECTCODE
			,	COALESCE(DCN.DICTIONARYNAME, 'NONE')	AS DEFECTCODENAME
			,	QC.LAYERID					AS LAYER
			,	QC.DEFECTCOUNT				AS PCSQTY
			,	QC.REPAIRTARGETQTY			AS ANALYSISQTY
			,	QC.REPAIRRESULTQTY			AS ANALYSISGOODQTY
			,	QC.REPAIRRESULTPNLQTY		AS ANALYSISGOODPNLQTY
			,	CASE WHEN COALESCE(QC.ISREWORK, 'N') = 'Y' THEN QC.DEFECTCOUNT - COALESCE(QC.REPAIRRESULTQTY, 0)
					 ELSE QC.DEFECTCOUNT
				END							AS FINALDEFECTQTY
			,	'N'							AS ISCHANGE
			,	CASE WHEN COALESCE(QC.ISREWORK, 'N') = 'Y' THEN 1
					 ELSE 11
				END							AS SEQUENCE
		FROM	PCM_LOT						L
		INNER JOIN PCM_LOTWORKRESULT			WR	ON	L.LOTID = WR.LOTID
												AND	L.PRODUCTDEFID = WR.PRODUCTDEFID
												AND	L.PRODUCTDEFVERSION = WR.PRODUCTDEFVERSION
												AND	((L.SUBPROCESSDEFID IS NULL AND L.PROCESSDEFID = WR.PROCESSDEFID) OR (L.SUBPROCESSDEFID IS NOT NULL AND L.SUBPROCESSDEFID = WR.PROCESSDEFID))
												AND	((L.SUBPROCESSDEFID IS NULL AND L.PROCESSDEFVERSION = WR.PROCESSDEFVERSION) OR (L.SUBPROCESSDEFID IS NOT NULL AND L.SUBPROCESSDEFVERSION = WR.PROCESSDEFVERSION))
												AND	L.PROCESSSEGMENTID = WR.PROCESSSEGMENTID
												AND	L.PROCESSSEGMENTVERSION = WR.PROCESSSEGMENTVERSION
												AND	L.WORKCOUNT = WR.WORKCOUNT
		INNER JOIN PCM_LOTHISTORY			LH	ON	WR.PREVSENDLOTHISTKEY = LH.TXNHISTKEY
												AND	WR.LOTID = LH.LOTID
		INNER JOIN PCM_QCAOIBBTWORKCOMPLETE	QC	ON	L.LOTID = QC.LOTID
												AND	L.PRODUCTDEFID = QC.PRODUCTDEFID
												AND	L.PRODUCTDEFVERSION = QC.PRODUCTDEFVERSION
												AND	L.PROCESSDEFID = QC.PROCESSDEFID
												AND	L.PROCESSDEFVERSION = QC.PROCESSDEFVERSION
												AND	LH.PREVPROCESSSEGMENTID = QC.PROCESSSEGMENTID
												AND	LH.PREVPROCESSSEGMENTVERSION = QC.PROCESSSEGMENTVERSION
		LEFT OUTER JOIN CMD_LOOKUP_VALUES				DC	ON	QC.DEFECTCODE = DC.LOOKUP_CODE
												AND	DC.LOOKUP_TYPE = 'DefectMapDefectGroupSub'
		LEFT OUTER JOIN CMD_DICTIONARY		DCN	ON	DC.DICTIONARYID = DCN.DICTIONARYID
												AND	DCN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN CMD_LOOKUP_VALUES				DG	ON	DC.PARENTCODEID = DG.LOOKUP_CODE
												AND	DG.LOOKUP_TYPE = 'DefectMapDefectGroup'
		LEFT OUTER JOIN CMD_DICTIONARY		DGN	ON	DG.DICTIONARYID = DGN.DICTIONARYID
												AND	DGN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE	1 = 1
		AND		L.LOTID = #{LOTID}
		<if test="ISREWORK != null and ISREWORK !=''"> 
			AND		QC.ISREWORK = #{ISREWORK}
		</if>
		ORDER BY COALESCE(QC.ISREWORK, 'N') DESC
				,DC.PARENTCODEID
				,QC.DEFECTCODE
				,QC.LAYERID		
    </select>
                      
   <!-- 작업 시작 시 선택한 작업자를 작업 완료 화면에서 조회한다.  -->
    <select id="getLotWorkerByTrackOut" parameterType="map" resultType="hashmap">
		--
		-- Id : GetLotWorkerByTrackOut
		-- Version : 10001
		SELECT
				COALESCE(LW.USERID, LW.WORKERNAME)	AS WORKERID
			,	COALESCE(U.USER_NM, LW.WORKERNAME)	AS WORKERNAME
		FROM	PCM_LOT			L
		INNER JOIN PCM_LOTWORKER	LW	ON	L.ENTERPRISEID = LW.ENTERPRISEID
									AND	L.PLANTID = LW.PLANTID
									AND	L.LOTID = LW.LOTID
									AND	L.AREAID = LW.AREAID
									AND	L.PRODUCTDEFID = LW.PRODUCTDEFID
									AND	L.PRODUCTDEFVERSION = LW.PRODUCTDEFVERSION
									AND	L.PROCESSSEGMENTID = LW.PROCESSSEGMENTID
									AND	L.PROCESSSEGMENTVERSION = LW.PROCESSSEGMENTVERSION
									AND	COALESCE(L.WORKCOUNT, 0) = COALESCE(LW.WORKCOUNT, 0)
		LEFT OUTER JOIN CMD_USERS	U	ON	LW.USERID = U.USER_ID
		WHERE	1 = 1
		AND		L.ENTERPRISEID = #{ENTERPRISEID}
		AND		L.PLANTID = #{PLANTID}
		AND		L.LOTID = #{LOTID}
    </select>
                   
   <!-- BOR에 등록된 치공구 품목 정보를 가져온다  -->
    <select id="getDurableDEFByBOR" parameterType="map" resultType="hashmap">
	    <choose>
          	<when test="VERSION != null and VERSION =='10001' "> 			
				--
				-- Id : GetDurableDEFByBOR
				-- Version : 10001			
				SELECT	DISTINCT
						DD.DURABLEDEFID
					,	DD.DURABLEDEFVERSION
					,	NVL(DDN.DICTIONARYNAME, DD.DURABLEDEFNAME)		AS DURABLEDEFNAME
					,	DD.DURABLECLASSID
					,	NVL(DCN.DICTIONARYNAME, DC.DURABLECLASSNAME)	AS DURABLECLASSNAME
					,	DD.USEDLIMIT
					,	DD.CLEANLIMIT
				FROM	PCM_LOT							L
				INNER JOIN BAS_BILLOFRESOURCE			BOR	ON	L.ENTERPRISEID = BOR.ENTERPRISEID
															AND	L.PLANTID = BOR.PLANTID
															AND	L.PRODUCTDEFID = BOR.PRODUCTDEFID
															AND	L.PRODUCTDEFVERSION = BOR.PRODUCTDEFVERSION
															AND	L.PROCESSDEFID = BOR.PROCESSDEFID
															AND	L.PROCESSDEFVERSION = BOR.PROCESSDEFVERSION
															AND	L.PROCESSSEGMENTID = BOR.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = BOR.PROCESSSEGMENTVERSION
															AND	BOR.RESOURCETYPE = 'Durable'
				INNER JOIN TOM_DURABLEDEFINITION	        DD	ON	1=1
															AND	BOR.RESOURCEID = DD.DURABLEDEFID
															AND	BOR.RESOURCEVERSION = DD.DURABLEDEFVERSION
				LEFT  JOIN CMD_DICTIONARY                DDN ON  DD.DURABLEDEFNAME = DDN.DICTIONARYID
				                                            AND DDN.LANGUAGETYPE = #{LANGUAGETYPE}
				INNER JOIN TOM_DURABLECLASS              DC  ON  DD.DURABLECLASSID = DC.DURABLECLASSID
				LEFT  JOIN CMD_DICTIONARY                DCN ON  DC.DURABLECLASSNAME = DCN.DICTIONARYID
				                                            AND DCN.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
          	</when>
          	<when test="VERSION != null and VERSION =='10011' "> 
				-- Id : GetDurableDEFByBOR
				-- Version : 10011					
				SELECT	DISTINCT
						DD.DURABLEDEFID
					,	DD.DURABLEDEFVERSION
					,	NVL(DDN.DICTIONARYNAME, DD.DURABLEDEFNAME)		AS DURABLEDEFNAME
					,	DD.DURABLECLASSID
					,	NVL(DCN.DICTIONARYNAME, DC.DURABLECLASSNAME)	AS DURABLECLASSNAME
					,	DD.USEDLIMIT
					,	DD.CLEANLIMIT
				FROM	PCM_LOT							L
				INNER JOIN BAS_BILLOFRESOURCE			BOR	ON	L.ENTERPRISEID = BOR.ENTERPRISEID
															AND	L.PLANTID = BOR.PLANTID
															AND	L.PRODUCTDEFID = BOR.PRODUCTDEFID
															AND	L.PRODUCTDEFVERSION = BOR.PRODUCTDEFVERSION
															AND	L.SUBPROCESSDEFID = BOR.PROCESSDEFID
															AND	L.SUBPROCESSDEFVERSION = BOR.PROCESSDEFVERSION
															AND	L.PROCESSSEGMENTID = BOR.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = BOR.PROCESSSEGMENTVERSION
															AND	BOR.RESOURCETYPE = 'Durable'
				INNER JOIN TOM_DURABLEDEFINITION	        DD	ON	1=1
															AND	BOR.RESOURCEID = DD.DURABLEDEFID
															AND	BOR.RESOURCEVERSION = DD.DURABLEDEFVERSION
				LEFT  JOIN CMD_DICTIONARY                DDN ON  DD.DURABLEDEFNAME = DDN.DICTIONARYID
				                                            AND DDN.LANGUAGETYPE = #{LANGUAGETYPE}
				INNER JOIN TOM_DURABLECLASS              DC  ON  DD.DURABLECLASSID = DC.DURABLECLASSID
				LEFT  JOIN CMD_DICTIONARY                DCN ON  DC.DURABLECLASSNAME = DCN.DICTIONARYID
				                                            AND DCN.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
          	</when>	          	
          	<otherwise>
				
          	</otherwise>
	    </choose>		
    </select>
    
       <!-- 공정 관리 > 4-Step 설 명 : 공정 4-Step 상세 정보 탭의 작업 완료 시 사용 치공구 
		리스트를 조회 한다  -->
    <select id="selectDurableListByProcessWorkComplete" parameterType="map" resultType="hashmap">
	    <choose>
          	<when test="VERSION != null and VERSION =='10001' "> 			
				--
				-- Id : SelectDurableListByProcessWorkComplete
				-- Version : 10001
				SELECT
						DL.DURABLEDEFID
					,	DL.DURABLEDEFVERSION
					,	NVL(DDN.DICTIONARYNAME, DD.DURABLEDEFNAME)	AS DURABLEDEFNAME
					,	CML.MATERIALLOTID				AS DURABLELOTID
					,	''								AS WORKSTARTTIME
					,	''								AS WORKENDTIME
					,	DL.USEDCOUNT
					,	DL.TOTALUSEDCOUNT
					,	DD.USEDLIMIT
					,	DD.CLEANLIMIT
					,	CASE WHEN DD.DURABLECLASSID IN ('ToolType1', 'ToolType5') THEN (CEIL(L.QTY / DD.USEDFACTOR))
							 WHEN DD.DURABLECLASSID IN ('ToolTypeA') THEN L.PANELQTY
							 ELSE 0
						END								AS USINGQTY
					,	CML.EQUIPMENTID
					,	'N'								AS ISLASTDURABLE
				FROM	PCM_LOT							L
				INNER JOIN BAS_BILLOFRESOURCE			BOR	ON	L.ENTERPRISEID = BOR.ENTERPRISEID
															AND	L.PLANTID = BOR.PLANTID
															AND	L.PRODUCTDEFID = BOR.PRODUCTDEFID
															AND	L.PRODUCTDEFVERSION = BOR.PRODUCTDEFVERSION
															AND	L.PROCESSDEFID = BOR.PROCESSDEFID
															AND	L.PROCESSDEFVERSION = BOR.PROCESSDEFVERSION
															AND	L.PROCESSSEGMENTID = BOR.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = BOR.PROCESSSEGMENTVERSION
				INNER JOIN PCM_CONSUMEMATERIALLOT_TEMP	CML	ON	L.ENTERPRISEID = CML.ENTERPRISEID
															AND	L.PLANTID = CML.PLANTID
															AND	L.AREAID = CML.AREAID
															AND	L.LOTID = CML.LOTID
															AND	L.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
															AND	BOR.RESOURCEID = CML.MATERIALDEFID
															AND	CML.MATERIALTYPE = #{MATERIALTYPE}
				INNER JOIN TOM_DURABLELOT				DL	ON	CML.ENTERPRISEID = DL.ENTERPRISEID
															AND	CML.PLANTID = DL.PLANTID
															AND	CML.AREAID = DL.AREAID
															AND	CML.MATERIALLOTID = DL.DURABLELOTID
				LEFT OUTER JOIN TOM_DURABLEDEFINITION	DD	ON	L.ENTERPRISEID = DD.ENTERPRISEID
															AND	BOR.RESOURCEID = DD.DURABLEDEFID
															AND	DL.DURABLEDEFVERSION = DD.DURABLEDEFVERSION
				LEFT OUTER JOIN CMD_DICTIONARY			DDN	ON	DD.DURABLEDEFNAME = DDN.DICTIONARYID
															AND	DDN.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
          	</when>
          	<when test="VERSION != null and VERSION =='10002' "> 
				--
				-- Id : SelectDurableListByProcessWorkComplete
				-- Version : 10002
				WITH LOTDURABLECOUNT AS
				(
					SELECT
							LD.LOTID
						,	DL.DURABLEDEFID
						,	DL.DURABLEDEFVERSION
						,	COUNT(*)			AS LOTDURABLECOUNT
					FROM	PCM_LOTDURABLE		LD
					INNER JOIN TOM_DURABLELOT	DL	ON	LD.DURABLELOTID = DL.DURABLELOTID
					WHERE	LD.LOTID = #{LOTID}
					GROUP BY LD.LOTID
							,DL.DURABLEDEFID
							,DL.DURABLEDEFVERSION
				),	DURABLELIST AS
				(
				SELECT
							LD.TXNHISTKEY
						,	DL.DURABLEDEFID
						,	DL.DURABLEDEFVERSION
						,	NVL(DDN.DICTIONARYNAME, DD.DURABLEDEFNAME)	AS DURABLEDEFNAME
						,	LD.DURABLELOTID
						,	TO_CHAR(LD.WORKSTARTTIME, 'YYYY-MM-DD HH24:MI:SS')	AS WORKSTARTTIME
						,	TO_CHAR(LD.WORKENDTIME, 'YYYY-MM-DD HH24:MI:SS')	AS WORKENDTIME
						,	DL.USEDCOUNT
						,	DL.TOTALUSEDCOUNT
						,	DD.USEDLIMIT
						,	DD.CLEANLIMIT
						-- 2021-07-12 박현우 차장 요청 (치공구 사용타수 계산로직 변경)
 						,CASE  WHEN NVL(DD.HITCOUNT,0) > 0 THEN     --PNL타수기준이 0 보다 크면
                            ROUND(LWR.WORKSTARTPANELQTY * DD.HITCOUNT, 0)
                          ELSE
                            CASE  WHEN NVL(DD.SUMMARY,0) > 0 THEN --합수가 존재하면
                              ROUND(LWR.WORKSTARTPCSQTY / DD.SUMMARY, 0)
                               ELSE
                                 0
                               END
                           END AS USINGQTY
<!-- 						,	CASE WHEN DD.DURABLECLASSID IN ('ToolType1','ToolType5','ToolType7') THEN (CEIL((L.QTY / L.PANELPERQTY) * PD.PCSPNL) / DD.USEDFACTOR)
								 WHEN DD.DURABLECLASSID IN ('ToolTypeA') THEN L.PANELQTY
								 ELSE 0
							END								AS USINGQTY -->
						,	LD.EQUIPMENTID
						,	CASE WHEN LEAD(LD.DURABLELOTID) OVER (PARTITION BY DL.DURABLEDEFID, DL.DURABLEDEFVERSION ORDER BY LD.WORKSTARTTIME) IS NULL THEN 'Y'
								 ELSE 'N'
							END								AS ISLASTDURABLE
						,	LDC.LOTDURABLECOUNT
					FROM	PCM_LOT							L
			          INNER JOIN PCM_LOTWORKRESULT LWR     ON LWR.LOTID = L.LOTID
			                                               AND LWR.PROCESSDEFID = L.PROCESSDEFID
			                                               AND LWR.PROCESSDEFVERSION = L.PROCESSDEFVERSION
			                                               AND LWR.PROCESSSEGMENTID = L.PROCESSSEGMENTID
			                                               AND LWR.PROCESSSEGMENTVERSION = L.PROCESSSEGMENTVERSION
			                                               AND NVL(LWR.WORKCOUNT, 0) = NVL(L.WORKCOUNT, 0)
					INNER JOIN MFM_PRODUCTIONORDER			PO	ON	L.PLANTID = PO.PLANTID
																AND	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
																AND	L.LINENO = PO.LINENO
					INNER JOIN BAS_PRODUCTDEFINITION			PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
																AND	L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
					INNER JOIN PCM_LOTDURABLE				LD	ON	L.LOTID = LD.LOTID
																AND	L.PROCESSSEGMENTID = LD.PROCESSSEGMENTID
																AND	L.WORKCOUNT = LD.WORKCOUNT
					INNER JOIN TOM_DURABLELOT				DL	ON	LD.DURABLELOTID = DL.DURABLELOTID
					INNER JOIN LOTDURABLECOUNT				LDC	ON	L.LOTID = LDC.LOTID
																AND	DL.DURABLEDEFID = LDC.DURABLEDEFID
																AND	DL.DURABLEDEFVERSION = LDC.DURABLEDEFVERSION
					LEFT OUTER JOIN TOM_DURABLEDEFINITION	DD	ON	L.ENTERPRISEID = DD.ENTERPRISEID
																AND	DL.DURABLEDEFID = DD.DURABLEDEFID
																AND	DL.DURABLEDEFVERSION = DD.DURABLEDEFVERSION
					LEFT OUTER JOIN CMD_DICTIONARY			DDN	ON	DD.DURABLEDEFNAME = DDN.DICTIONARYID
																AND	DDN.LANGUAGETYPE = #{LANGUAGETYPE}
					WHERE	1 = 1
					AND		L.ENTERPRISEID = #{ENTERPRISEID}
					AND		L.PLANTID = #{PLANTID}
					AND		L.LOTID = #{LOTID}
				)
				SELECT
						DL.TXNHISTKEY
					,	DL.DURABLEDEFID
					,	DL.DURABLEDEFVERSION
					,	DL.DURABLEDEFNAME
					,	DL.DURABLELOTID
					,	DL.WORKSTARTTIME
					,	DL.WORKENDTIME
					,	DL.USEDCOUNT
					,	DL.TOTALUSEDCOUNT
					,	DL.USEDLIMIT
					,	DL.CLEANLIMIT
					,	CASE WHEN DL.ISLASTDURABLE = 'Y' THEN DL.USINGQTY / DL.LOTDURABLECOUNT + MOD(DL.USINGQTY, DL.LOTDURABLECOUNT)
							 ELSE DL.USINGQTY / DL.LOTDURABLECOUNT
						END				AS USINGQTY
					,	DL.EQUIPMENTID
					,	DL.ISLASTDURABLE
				FROM	DURABLELIST		DL
				ORDER BY DL.DURABLEDEFID
						,DL.DURABLEDEFVERSION
						,DL.WORKSTARTTIME
          	</when>	 
          	<when test="VERSION != null and VERSION =='10011' "> 
				--
				-- Id : SelectDurableListByProcessWorkComplete
				-- Version : 10011
				SELECT
						DL.DURABLEDEFID
					,	DL.DURABLEDEFVERSION
					,	NVL(DDN.DICTIONARYNAME, DD.DURABLEDEFNAME)	AS DURABLEDEFNAME
					,	CML.MATERIALLOTID				AS DURABLELOTID
					,	''								AS WORKSTARTTIME
					,	''								AS WORKENDTIME
					,	DL.USEDCOUNT
					,	DL.TOTALUSEDCOUNT
					,	DD.USEDLIMIT
					,	DD.CLEANLIMIT
					,	CASE WHEN DD.DURABLECLASSID IN ('ToolType1', 'ToolType5') THEN (CEIL(L.QTY / DD.USEDFACTOR))
							 WHEN DD.DURABLECLASSID IN ('ToolTypeA') THEN L.PANELQTY
							 ELSE 0
						END								AS USINGQTY
					,	CML.EQUIPMENTID
					,	'N'								AS ISLASTDURABLE
				FROM	PCM_LOT							L
				INNER JOIN BAS_BILLOFRESOURCE			BOR	ON	L.ENTERPRISEID = BOR.ENTERPRISEID
															AND	L.PLANTID = BOR.PLANTID
															AND	L.PRODUCTDEFID = BOR.PRODUCTDEFID
															AND	L.PRODUCTDEFVERSION = BOR.PRODUCTDEFVERSION
															AND	L.SUBPROCESSDEFID = BOR.PROCESSDEFID
															AND	L.SUBPROCESSDEFVERSION = BOR.PROCESSDEFVERSION
															AND	L.PROCESSSEGMENTID = BOR.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = BOR.PROCESSSEGMENTVERSION
				INNER JOIN PCM_CONSUMEMATERIALLOT_TEMP	CML	ON	L.ENTERPRISEID = CML.ENTERPRISEID
															AND	L.PLANTID = CML.PLANTID
															AND	L.AREAID = CML.AREAID
															AND	L.LOTID = CML.LOTID
															AND	L.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
															AND	BOR.RESOURCEID = CML.MATERIALDEFID
															AND	CML.MATERIALTYPE = #{MATERIALTYPE}
				INNER JOIN TOM_DURABLELOT				DL	ON	CML.ENTERPRISEID = DL.ENTERPRISEID
															AND	CML.PLANTID = DL.PLANTID
															AND	CML.AREAID = DL.AREAID
															AND	CML.MATERIALLOTID = DL.DURABLELOTID
				LEFT OUTER JOIN TOM_DURABLEDEFINITION	DD	ON	L.ENTERPRISEID = DD.ENTERPRISEID
															AND	L.PLANTID = DD.PLANTID
															AND	BOR.RESOURCEID = DD.DURABLEDEFID
															AND	DL.DURABLEDEFVERSION = DD.DURABLEDEFVERSION
				LEFT OUTER JOIN CMD_DICTIONARY			DDN	ON	DD.DURABLEDEFNAME = DDN.DICTIONARYID
															AND	DDN.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
          	</when>	 			
          	<otherwise>
				
          	</otherwise>
	    </choose>		
    </select>
                  
   <!-- 공정 관리 > 4-Step 설 명 : 공정 4-Step 상세 정보 탭의 후공정 설비 재공 리스트를 
		조회 한다. (Resource 변경)  -->
    <select id="selectPostProcessEquipmentWipByArea" parameterType="map" resultType="hashmap">
		--
		-- Id : SelectPostProcessEquipmentWipByArea
		-- Version : 10031
		SELECT
				A.AREAID
			,	NVL(AN.DICTIONARYNAME, A.AREANAME)	AS AREANAME
			,	EQP.EQUIPMENTID
			,	NVL(EN.DICTIONARYNAME, EQP.EQUIPMENTNAME)	AS EQUIPMENTNAME
			,	EQP.STATE
			,	COUNT(LE.LOTID)			AS LOTCNT
		FROM	PCM_LOT					L
		INNER JOIN BAS_BILLOFRESOURCE	BOR	ON	L.ENTERPRISEID = BOR.ENTERPRISEID
											AND	L.PLANTID = BOR.PLANTID
											AND	L.PRODUCTDEFID = BOR.PRODUCTDEFID
											AND	L.PRODUCTDEFVERSION = BOR.PRODUCTDEFVERSION
											AND	((L.SUBPROCESSDEFID IS NULL AND  L.PROCESSDEFID = BOR.PROCESSDEFID) OR (L.SUBPROCESSDEFID IS NOT NULL AND L.SUBPROCESSDEFID = BOR.PROCESSDEFID))
											AND	((L.SUBPROCESSDEFID IS NULL AND  L.PROCESSDEFVERSION = BOR.PROCESSDEFVERSION) OR (L.SUBPROCESSDEFID IS NOT NULL AND L.SUBPROCESSDEFVERSION = BOR.PROCESSDEFVERSION))
											AND	BOR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
											AND	BOR.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
		INNER JOIN BAS_RESOURCE			RC	ON	BOR.ENTERPRISEID = RC.ENTERPRISEID
											AND	BOR.PLANTID = RC.PLANTID
											AND	BOR.RESOURCEID = RC.RESOURCEID
		INNER JOIN BAS_AREA				A	ON	RC.ENTERPRISEID = A.ENTERPRISEID
											AND	RC.PLANTID = A.PLANTID
											AND	RC.AREAID = A.AREAID
											AND	A.AREAID = #{AREAID}
		INNER JOIN BAS_EQUIPMENT			EQP	ON	RC.ENTERPRISEID = EQP.ENTERPRISEID
											AND	RC.PLANTID = EQP.PLANTID
											AND	RC.EQUIPMENTCLASSID = EQP.EQUIPMENTCLASSID
											AND	RC.AREAID = EQP.AREAID
		LEFT OUTER JOIN CMD_DICTIONARY	AN	ON	A.AREANAME = AN.DICTIONARYID
											AND	AN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN CMD_DICTIONARY	EN	ON	EQP.EQUIPMENTNAME = EN.DICTIONARYID
											AND	EN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN PCM_LOTEQUIPMENT	LE	ON	EQP.EQUIPMENTID = LE.EQUIPMENTID
											AND	LE.TRACKOUTTIME IS NULL
		WHERE	1 = 1
		AND		L.ENTERPRISEID = #{ENTERPRISEID}
		AND		L.PLANTID = #{PLANTID}
		AND		L.LOTID = #{LOTID}
		GROUP BY A.AREAID
				,A.AREANAME
				,AN.DICTIONARYNAME
				,EQP.EQUIPMENTID
				,EQP.EQUIPMENTNAME
				,EN.DICTIONARYNAME
				,EQP.STATE	
		ORDER BY EQP.EQUIPMENTID
    </select>
                     
   <!-- Process 4-Step Detail User Control에서 작업 시작 시 선택한 설비 목록을 조회 한다. (Resource 변경)  -->
    <select id="getLotEquipmentByArea" parameterType="map" resultType="hashmap">
		--
		-- Id : GetLotEquipmentByArea
		-- Version : 10031
		WITH USINGEQUIPMENT AS
			(
				SELECT
						E.EQUIPMENTID
					,	COUNT(LE.LOTID)			AS LOTCNT
				FROM	PCM_LOT					L
				INNER JOIN BAS_RESOURCE			RC	ON	L.ENTERPRISEID = RC.ENTERPRISEID
													AND	L.PLANTID = RC.PLANTID
													AND	L.RESOURCEID = RC.RESOURCEID
				INNER JOIN BAS_EQUIPMENT			E	ON	L.ENTERPRISEID = E.ENTERPRISEID
													AND	L.PLANTID = E.PLANTID
													AND	RC.AREAID = E.AREAID
													AND	RC.EQUIPMENTCLASSID = E.EQUIPMENTCLASSID
													AND	E.DETAILEQUIPMENTTYPE = #{DETAILEQUIPMENTTYPE}
				LEFT OUTER JOIN	PCM_LOTEQUIPMENT	LE	ON	E.EQUIPMENTID = LE.EQUIPMENTID
													AND	LE.TRACKINTIME IS NOT NULL
													AND	LE.TRACKOUTTIME IS NULL
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
				AND     E.VALIDSTATE = 'Valid'
				GROUP BY E.EQUIPMENTID
			)
			SELECT
			        '0'                         AS CHK
				,	E.EQUIPMENTCLASSID
				,	E.EQUIPMENTID
				,	NVL(EN.DICTIONARYNAME, E.EQUIPMENTNAME)	AS EQUIPMENTNAME
				,	TO_CHAR(LE.TRACKINTIME, 'YYYY-MM-DD HH24:MI:SS')	AS TRACKINTIME
				,	TO_CHAR(LE.TRACKOUTTIME, 'YYYY-MM-DD HH24:MI:SS')	AS TRACKOUTTIME
				,	0					        AS PCSQTY
				,	0						    AS PNLQTY
				,	''				            AS RECIPEID
				,	''				            AS RECIPEVERSION
				,	''				            AS RECIPETYPE
			FROM	PCM_LOT					L
			INNER JOIN BAS_RESOURCE			RC	ON	L.ENTERPRISEID = RC.ENTERPRISEID
												AND	L.PLANTID = RC.PLANTID
												AND	L.RESOURCEID = RC.RESOURCEID
			INNER JOIN BAS_EQUIPMENT			E	ON	L.ENTERPRISEID = E.ENTERPRISEID
												AND	L.PLANTID = E.PLANTID
												AND	RC.AREAID = E.AREAID
												AND	RC.EQUIPMENTCLASSID = E.EQUIPMENTCLASSID
												AND	E.DETAILEQUIPMENTTYPE = #{DETAILEQUIPMENTTYPE}
												AND	E.STATE NOT IN ('Down')
			/*
			INNER JOIN BAS_EQUIPMENTEXT	EE	ON	E.EQUIPMENTID = EE.EQUIPMENTID
												AND	EE.MANAGEMENTSTATE IN ('Demo', 'Lease', 'Normal')
												AND	EE.EQUIPMENTID IS NOT NULL */
			INNER JOIN PCM_LOTEQUIPMENT	LE	ON	L.LOTID = LE.LOTID
												AND	L.PROCESSSEGMENTID = LE.PROCESSSEGMENTID
												AND	L.PROCESSSEGMENTVERSION = LE.PROCESSSEGMENTVERSION
												AND E.EQUIPMENTID = LE.EQUIPMENTID
			LEFT OUTER JOIN CMD_DICTIONARY	EN	ON	E.EQUIPMENTNAME = EN.DICTIONARYID
												AND	EN.LANGUAGETYPE = #{LANGUAGETYPE}
			WHERE	1 = 1
			AND		L.ENTERPRISEID = #{ENTERPRISEID}
			AND		L.PLANTID = #{PLANTID}
			AND		L.LOTID = #{LOTID}
			AND     E.VALIDSTATE = 'Valid'
			ORDER BY E.EQUIPMENTID		
		<!-- /*	
		SELECT
			    '0'                         AS CHK		
		    ,	E.EQUIPMENTCLASSID
			,	E.EQUIPMENTID
			,	NVL(EN.DICTIONARYNAME, E.EQUIPMENTNAME)		AS EQUIPMENTNAME
			,	TO_CHAR(LE.TRACKINTIME, 'YYYY-MM-DD HH24:MI:SS')	AS TRACKINTIME
			,	TO_CHAR(LE.TRACKOUTTIME, 'YYYY-MM-DD HH24:MI:SS')	AS TRACKOUTTIME
			,	0 					AS PCSQTY
			,	0 					AS PNLQTY
			,	LE.RECIPEID
			,	LE.RECIPEVERSION       	AS RECIPEVERSION
			,	LE.RECIPETYPE
		FROM	PCM_LOT					L
		INNER JOIN BAS_RESOURCE			RC	ON	L.ENTERPRISEID = RC.ENTERPRISEID
											AND	L.PLANTID = RC.PLANTID
											AND	L.RESOURCEID = RC.RESOURCEID
		INNER JOIN BAS_EQUIPMENT			E	ON	L.ENTERPRISEID = E.ENTERPRISEID
											AND	L.PLANTID = E.PLANTID
											AND	RC.AREAID = E.AREAID
											AND	RC.EQUIPMENTCLASSID = E.EQUIPMENTCLASSID
											AND	E.EQUIPMENTTYPE IN ('Production', 'Measure')
											AND	E.DETAILEQUIPMENTTYPE = #{DETAILEQUIPMENTTYPE}
		INNER JOIN PCM_LOTEQUIPMENT		LE	ON	L.LOTID = LE.LOTID
											AND	L.PROCESSSEGMENTID = LE.PROCESSSEGMENTID
											AND	L.WORKCOUNT = LE.WORKCOUNT
											AND	E.EQUIPMENTID = LE.EQUIPMENTID
		LEFT OUTER JOIN CMD_DICTIONARY	EN	ON	E.EQUIPMENTNAME = EN.DICTIONARYID
											AND	EN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE	1 = 1
		AND		L.ENTERPRISEID = #{ENTERPRISEID}
		AND		L.PLANTID = #{PLANTID}
		AND		L.LOTID = #{LOTID}
		*/ -->
    </select>
    
   <!-- 공정 관리 > 공정작업 > 공정 4-Step (작업완료, 인계등록) 설 명 : 공정 4-Step AOI 
		불량, BBT/HOLE 불량 탭의 설비 Defect Data를 조회 한다.  -->
    <select id="selectDefectDataByEquipment" parameterType="map" resultType="hashmap">
		--
		-- id : SelectDefectDataByEquipment
		-- version : 10001
		WITH MAXPANEL AS 
		(
			SELECT 	
					MD.EQUIPMENTTYPE
				,	MD.LOTID
				,	MD.EQUIPMENTID
				,	MD.PRODUCTDEFID
				,	MD.PRODUCTDEFVERSION
				,	MD.LAYERID
				,   MD.PANELID
				,	MD.DEGREE
				,	MP.PANELID					AS MAXPANEL
			FROM	PCM_LOT						L
			INNER JOIN BAS_OPERATION				O	ON	L.PRODUCTDEFID = O.MAINPRODUCTID
													AND	L.PRODUCTDEFVERSION = O.MAINPRODUCTVERSION
													AND	L.PROCESSSEGMENTID = O.PROCESSSEGMENTID
			INNER JOIN BAS_OPERATIONSPECVALUE	SV	ON	O.OPERATIONID = SV.OPERATIONID
			LEFT OUTER JOIN CMD_LOOKUP_VALUES				C1	ON	SV.AOIQCLAYER = C1.LOOKUP_CODE
													AND	C1.LOOKUP_TYPE = 'Layer'
			LEFT OUTER JOIN CMD_DICTIONARY		C1N	ON	C1.DICTIONARYID = C1N.DICTIONARYID
													AND	C1N.LANGUAGETYPE = #{LANGUAGETYPE}
			LEFT OUTER JOIN CMD_LOOKUP_VALUES				C2	ON	SV.AOIQCLAYER2 = C2.LOOKUP_CODE
													AND	C2.LOOKUP_TYPE = 'Layer'
			LEFT OUTER JOIN CMD_DICTIONARY		C2N	ON	C2.DICTIONARYID = C2N.DICTIONARYID
													AND	C2N.LANGUAGETYPE = #{LANGUAGETYPE}
			INNER JOIN QAM_DEFECTMAPMAXDEGREE	MD	ON	L.LOTID = MD.LOTID
													AND	L.PRODUCTDEFID = MD.PRODUCTDEFID
													AND	L.PRODUCTDEFVERSION = MD.PRODUCTDEFVERSION
													AND	(C1N.DICTIONARYNAME = MD.LAYERID
													OR	C2N.DICTIONARYNAME = MD.LAYERID)
													AND	MD.EQUIPMENTTYPE = #{EQUIPMENTTYPE}
			INNER JOIN QAM_DEFECTMAPMAXPANEL		MP	ON	MD.EQUIPMENTTYPE = MP.EQUIPMENTTYPE
													AND	MD.LOTID = MP.LOTID
													AND	MD.EQUIPMENTID = MP.EQUIPMENTID
													AND MD.PRODUCTDEFID = MP.PRODUCTDEFID
													AND	MD.PRODUCTDEFVERSION = MP.PRODUCTDEFVERSION
													AND	MD.LAYERID = MP.LAYERID	
			WHERE	1 = 1
			AND		L.LOTID = #{LOTID}
		), DETAIL AS
		(
			SELECT
					ED.EQUIPMENTTYPE
				,	ED.EQUIPMENTID
				,	ED.LOTID
				,	ED.PRODUCTDEFID
				,	ED.PRODUCTDEFVERSION
				,	ED.LAYERID
				,	ED.PANELID
				,	ED.PCSCOUNT
				,	ED.DEGREE
				,	ED.DEFECTCODE
				,	CASE WHEN ED.EQUIPMENTTYPE = 'AOI' THEN CASE WHEN ED.VRSDEFECTCODE = '0' THEN 'AOI'
																 ELSE 'VRS'
															END
						 ELSE ED.EQUIPMENTTYPE
					END							AS DEFECTTYPE
				,	ED.AOIDEFECTCODE
				,	CASE WHEN ED.EQUIPMENTTYPE = 'AOI' THEN CASE WHEN ED.VRSDEFECTCODE = '0' THEN ED.AOIDEFECTCODE
																 ELSE ED.VRSDEFECTCODE
															END
						 ELSE ED.VRSDEFECTCODE
					END							AS VRSDEFECTCODE
				,	MP.MAXPANEL
			FROM	QAM_DEFECTMAPEQUIPMENTDETAIL	ED
			INNER JOIN MAXPANEL					MP	ON	ED.EQUIPMENTTYPE = MP.EQUIPMENTTYPE
													AND	ED.EQUIPMENTID = MP.EQUIPMENTID
													AND	ED.LOTID = MP.LOTID
													AND	ED.PRODUCTDEFID = MP.PRODUCTDEFID
													AND	ED.PRODUCTDEFVERSION = MP.PRODUCTDEFVERSION
													AND	ED.LAYERID = MP.LAYERID
													AND	ED.PANELID = MP.PANELID
													AND	ED.DEGREE = MP.DEGREE
			WHERE	1 = 1
			AND		ED.VRSDEFECTCODE != '0'
		)
		SELECT	
				NVL(AG.LOOKUP_CODE, '999')				AS DEFECTCODEGROUPID
			,	NVL(NVL(AGN.DICTIONARYNAME, AG.MEANING), 'NONE')	AS DEFECTCODEGROUPNAME
			,	CASE WHEN M.EQUIPMENTTYPE = 'AOI' THEN NVL(AC.LOOKUP_CODE, '9999')
					 WHEN M.EQUIPMENTTYPE = 'HOLE' THEN NVL(HC.LOOKUP_CODE, '9999')
					 ELSE NVL(BC.LOOKUP_CODE, '9999') 
				END 					AS DEFECTCODE
			,	CASE WHEN M.EQUIPMENTTYPE = 'AOI' THEN NVL(NVL(ACN.DICTIONARYNAME, AC.MEANING), 'NONE')
					 WHEN M.EQUIPMENTTYPE = 'HOLE' THEN NVL(NVL(HCN.DICTIONARYNAME, HC.MEANING), 'NONE')
					 ELSE NVL(NVL(BCN.DICTIONARYNAME, BC.MEANING), 'NONE') 
				END						AS DEFECTCODENAME
			,	M.LAYERID
			,	SUM(M.PCSCOUNT * M.MAXPANEL)	AS INSPECTQTY
			,	COUNT(*)				AS DEFECTQTY
			,	COUNT(*) / SUM(M.PCSCOUNT * M.MAXPANEL) * 100	AS DEFECTRATE
		FROM	DETAIL					M
		LEFT OUTER JOIN BAS_EQUIPMENTDEFECTCODE	EAD	ON	M.EQUIPMENTID = EAD.EQUIPMENTID
													AND	M.VRSDEFECTCODE = EAD.DEFECTCODE
		LEFT OUTER JOIN CMD_LOOKUP_VALUES					AG	ON	EAD.DEFECTCODECLASSID = AG.LOOKUP_CODE
													AND	AG.LOOKUP_TYPE = 'DefectMapDefectGroup'
													AND	AG.ENABLED_FLAG = 'Y'
		LEFT OUTER JOIN CMD_DICTIONARY			AGN	ON	AG.DICTIONARYID = AGN.DICTIONARYID
													AND	AGN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN CMD_LOOKUP_VALUES					AC	ON	EAD.DEFECTITEMCODE = AC.LOOKUP_CODE
													AND	AC.LOOKUP_TYPE = 'DefectMapDefectGroupSub'
													AND	AC.ENABLED_FLAG = 'Y'
		LEFT OUTER JOIN CMD_DICTIONARY			ACN	ON	AC.DICTIONARYID = ACN.DICTIONARYID
													AND	ACN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN BAS_EQUIPMENTDEFECTCODE	EBD	ON	M.EQUIPMENTID = EBD.EQUIPMENTID
													AND	M.VRSDEFECTCODE = EBD.DEFECTCODE
													AND	EBD.DEFECTCODECLASSID = 'BBT'
		LEFT OUTER JOIN CMD_LOOKUP_VALUES					BC	ON	EBD.DEFECTITEMCODE = BC.LOOKUP_CODE
													AND	BC.LOOKUP_TYPE = 'DefectMapBBTDefectCode'
													AND	BC.ENABLED_FLAG = 'Y'
		LEFT OUTER JOIN CMD_DICTIONARY			BCN	ON	BC.DICTIONARYID = BCN.DICTIONARYID
													AND	BCN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN BAS_EQUIPMENTDEFECTCODE	EHD	ON	M.EQUIPMENTID = EHD.EQUIPMENTID
													AND	M.VRSDEFECTCODE = EHD.DEFECTCODE
													AND	EHD.DEFECTCODECLASSID = 'HOLE'
		LEFT OUTER JOIN CMD_LOOKUP_VALUES					HC	ON	EHD.DEFECTITEMCODE = HC.LOOKUP_CODE
													AND	HC.LOOKUP_TYPE = 'DefectMapHoleDefectCode'
													AND	HC.ENABLED_FLAG = 'Y'
		LEFT OUTER JOIN CMD_DICTIONARY			HCN	ON	HC.DICTIONARYID = HCN.DICTIONARYID
													AND	HCN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE	1 = 1
		GROUP BY M.EQUIPMENTTYPE
				,AG.LOOKUP_CODE
				,AG.MEANING
				,AG.DISPLAYSEQUENCE
				,AGN.DICTIONARYNAME
				,AC.LOOKUP_CODE
				,AC.MEANING
				,AC.DISPLAYSEQUENCE
				,ACN.DICTIONARYNAME
				,BC.LOOKUP_CODE
				,BC.MEANING
				,BC.DISPLAYSEQUENCE
				,BCN.DICTIONARYNAME
				,HC.LOOKUP_CODE
				,HC.MEANING
				,HC.DISPLAYSEQUENCE
				,HCN.DICTIONARYNAME
				,M.LAYERID
		ORDER BY AG.DISPLAYSEQUENCE
				,AC.DISPLAYSEQUENCE
				,BC.DISPLAYSEQUENCE
				,HC.DISPLAYSEQUENCE
    </select>
        
   <!-- 공정 관리 > 4-Step (인계 등록) 설 명 : AOI 검사 공정 인계 등록 화면에서 AOI 불량 
		수기 입력 내역을 조회 한다.  -->
    <select id="selectDefectMapDataForSend" parameterType="map" resultType="hashmap">
		--
		-- Id : SelectDefectMapDataForSend
		-- Version : 10001
		SELECT
				DC.PARENTCODEID				AS DEFECTCODEGROUPID
			,	NVL(DGN.DICTIONARYNAME, 'NONE')	AS DEFECTCODEGROUPNAME
			,	QC.DEFECTCODE
			,	NVL(DCN.DICTIONARYNAME, 'NONE')	AS DEFECTCODENAME
			,	QC.LAYERID					AS LAYER
			,	QC.DEFECTCOUNT				AS PCSQTY
			,	QC.REPAIRTARGETQTY			AS ANALYSISQTY
			,	CASE WHEN NVL(QC.ISREWORK, 'N') = 'Y' THEN NVL(QC.REPAIRRESULTQTY, 0)
					 ELSE QC.REPAIRRESULTQTY
				END							AS ANALYSISGOODQTY
			,	CASE WHEN NVL(QC.ISREWORK, 'N') = 'Y' THEN NVL(QC.REPAIRRESULTPNLQTY, 0)
					 ELSE QC.REPAIRRESULTPNLQTY
				END							AS ANALYSISGOODPNLQTY
			,	CASE WHEN NVL(QC.ISREWORK, 'N') = 'Y' THEN QC.DEFECTCOUNT - NVL(QC.REPAIRRESULTQTY, 0)
					 ELSE QC.DEFECTCOUNT
				END							AS FINALDEFECTQTY
			,	'N'							AS ISCHANGE
			,	CASE WHEN NVL(QC.ISREWORK, 'N') = 'Y' THEN 1
					 ELSE 11
				END							AS SEQUENCE
		FROM	PCM_LOT					L
		INNER JOIN PCM_QCAOIBBTWORKCOMPLETE	QC	ON	L.LOTID = QC.LOTID
												AND	L.PRODUCTDEFID = QC.PRODUCTDEFID
												AND	L.PRODUCTDEFVERSION = QC.PRODUCTDEFVERSION
												AND	L.PROCESSDEFID = QC.PROCESSDEFID
												AND	L.PROCESSDEFVERSION = QC.PROCESSDEFVERSION
												AND	L.PROCESSSEGMENTID = QC.PROCESSSEGMENTID
												AND	L.PROCESSSEGMENTVERSION = QC.PROCESSSEGMENTVERSION
		LEFT OUTER JOIN CMD_LOOKUP_VALUES				DC	ON	QC.DEFECTCODE = DC.LOOKUP_CODE
												AND	DC.LOOKUP_TYPE = 'DefectMapDefectGroupSub'
		LEFT OUTER JOIN CMD_DICTIONARY		DCN	ON	DC.DICTIONARYID = DCN.DICTIONARYID
												AND	DCN.LANGUAGETYPE = #{LANGUAGETYPE}
		LEFT OUTER JOIN CMD_LOOKUP_VALUES				DG	ON	DC.PARENTCODEID = DG.LOOKUP_CODE
												AND	DG.LOOKUP_TYPE = 'DefectMapDefectGroup'
		LEFT OUTER JOIN CMD_DICTIONARY		DGN	ON	DG.DICTIONARYID = DGN.DICTIONARYID
												AND	DGN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE	1 = 1
		AND		L.LOTID = #{LOTID}
		<if test="ISREWORK != null and ISREWORK !=''"> 
			AND		QC.ISREWORK = #{ISREWORK}
		</if>
		ORDER BY NVL(QC.ISREWORK, 'N') DESC
				,DC.PARENTCODEID
				,QC.DEFECTCODE
				,QC.LAYERID
    </select>
    
   <!-- AOI/BBT 불량 입력 시 Layer 선택 항목을 조회  -->
    <select id="getLayerListForAoiBbtDefect" parameterType="map" resultType="hashmap">
		--
		-- Id : GetLayerListForAoiBbtDefect
		-- Version : 10001
		WITH LAYER AS
		(
			SELECT
					SV.AOIQCLAYER	AS LAYERID
			FROM	PCM_LOT						L
			INNER JOIN BAS_OPERATION				O	ON	L.PRODUCTDEFID = O.MAINPRODUCTID
													AND	L.PRODUCTDEFVERSION = O.MAINPRODUCTVERSION
													AND	L.PROCESSSEGMENTID = O.PROCESSSEGMENTID
			INNER JOIN BAS_OPERATIONSPECVALUE	SV	ON	O.OPERATIONID = SV.OPERATIONID
            WHERE 1 = 1
		       AND L.LOTID = #{LOTID}
               AND SV.AOIQCLAYER IS NOT NULL
            UNION ALL
			SELECT
					SV.AOIQCLAYER2	AS LAYERID
			FROM	PCM_LOT						L
			INNER JOIN BAS_OPERATION				O	ON	L.PRODUCTDEFID = O.MAINPRODUCTID
													AND	L.PRODUCTDEFVERSION = O.MAINPRODUCTVERSION
													AND	L.PROCESSSEGMENTID = O.PROCESSSEGMENTID
			INNER JOIN BAS_OPERATIONSPECVALUE	SV	ON	O.OPERATIONID = SV.OPERATIONID
            WHERE 1 = 1
		      AND	L.LOTID = #{LOTID}   
              AND SV.AOIQCLAYER2 IS NOT NULL
		)
		SELECT
				LY.LAYERID
			,	NVL(CN.DICTIONARYNAME, LY.LAYERID)	AS LAYERNAME
		FROM	LAYER	LY
		LEFT OUTER JOIN CMD_LOOKUP_VALUES			C	ON	LY.LAYERID = C.LOOKUP_CODE
											AND	C.LOOKUP_TYPE = 'Layer'
		LEFT OUTER JOIN CMD_DICTIONARY	CN	ON	C.DICTIONARYID = CN.DICTIONARYID
											AND	CN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE	1 = 1
		AND		LY.LAYERID IS NOT NULL
    </select>
        
   <!-- BBT 불량 리스트 조회  -->
    <select id="getBBTDefectList" parameterType="map" resultType="hashmap">
		--
		-- Id : GetBBTDefectList
		-- Version : 10001
		SELECT
				C.PARENTCODEID						AS DEFECTCODEGROUPID
			,	''						AS DEFECTCODEGROUPNAME
			,	C.LOOKUP_CODE				AS DEFECTCODE
			,	NVL(CN.DICTIONARYNAME, C.MEANING)	AS DEFECTCODENAME
			,	'999'					AS LAYER
			,	0 					    AS PCSQTY
		FROM	CMD_LOOKUP_VALUES					C
		LEFT OUTER JOIN CMD_DICTIONARY	CN	ON	C.DICTIONARYID = CN.DICTIONARYID
											AND	CN.LANGUAGETYPE = #{LANGUAGETYPE}
		WHERE	1 = 1
		AND		C.LOOKUP_TYPE  = #{CODECLASSID}
		<!-- AND		C.LOOKUP_CODE IN ('045','046') -->
		AND		C.ENABLED_FLAG = #{VALIDSTATE}
    </select>

   <!-- 공정코드를 통해 대공정 조회  -->
    <select id="getProcessSegmentClassBySegmentID" parameterType="map" resultType="hashmap">
		--
		-- Id : GetProcessSegmentClassBySegmentID
		-- Version : 10001
	    <choose>
          	<when test="P_PROCESSCLASSTYPE != null and P_PROCESSCLASSTYPE =='TopProcessSegmentClass' "> 
				-- 대공정
				SELECT  TC.PROCESSSEGMENTCLASSID
					,   NVL(DC.DICTIONARYNAME, TC.PROCESSSEGMENTCLASSNAME) AS PROCESSSEGMENTCLASSNAME
				FROM    BAS_PROCESSSEGMENTCLASS      TC
				INNER JOIN BAS_PROCESSSEGMENTCLASS   MC  ON  TC.PROCESSSEGMENTCLASSID = MC.PARENTPROCESSSEGMENTCLASSID
				INNER JOIN BAS_PROCESSSEGMENT        SG  ON  MC.PROCESSSEGMENTCLASSID = SG.PROCESSSEGMENTCLASSID
				LEFT OUTER JOIN CMD_DICTIONARY       DC  ON  TC.PROCESSSEGMENTCLASSNAME = DC.DICTIONARYID
														AND DC.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE   SG.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
          	</when>
          	<otherwise>
				-- 중공정
				SELECT  TC.PROCESSSEGMENTCLASSID
					,   NVL(DC.DICTIONARYNAME, TC.PROCESSSEGMENTCLASSNAME) AS PROCESSSEGMENTCLASSNAME
				FROM    BAS_PROCESSSEGMENTCLASS      TC
				INNER JOIN BAS_PROCESSSEGMENT        SG  ON  TC.PROCESSSEGMENTCLASSID = SG.PROCESSSEGMENTCLASSID
				LEFT OUTER JOIN CMD_DICTIONARY       DC  ON  TC.PROCESSSEGMENTCLASSNAME = DC.DICTIONARYID
														AND DC.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE   SG.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				
          	</otherwise>
		</choose>
    </select>
            
       <!-- 재작업투입  -->
    <select id="selectReworkRouting" parameterType="map" resultType="hashmap">
	    <choose>
          	<when test="VERSION != null and VERSION =='10001' "> 			
				--
				-- Id : SelectReworkRouting
				-- Version : 10001
				WITH ROUTING_PRODUCT_LIST AS 
				(
					SELECT  PD.PROCESSDEFID
					     ,  PD.PROCESSDEFVERSION
					     ,LISTAGG(CONTROLRESOURCEID, ',') WITHIN GROUP(ORDER BY PD.PROCESSDEFID, PD.PROCESSDEFVERSION) PRODUCTLIST    
					FROM 
					(
						SELECT  PD.PROCESSDEFID
						     ,  PD.PROCESSDEFVERSION
						     ,  MC.CONTROLRESOURCEID || MC.CONTROLRESOURCEVERSION  CONTROLRESOURCEID
						FROM BAS_PROCESSDEFINITION  PD
						LEFT JOIN BAS_REWORKCONTROL MC   ON  PD.PROCESSDEFID = MC.PROCESSDEFID
						                                AND PD.PROCESSDEFVERSION = MC.PROCESSDEFVERSION
						                                AND MC.CONTROLTYPE = 'Product'
					 )PD
					GROUP BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION                  
				),ROUTING_AREA_LIST AS
				(
					SELECT  PD.PROCESSDEFID
					     ,  PD.PROCESSDEFVERSION
        				 ,	LISTAGG(CONTROLRESOURCEID, ',') WITHIN GROUP(ORDER BY PD.PROCESSDEFID, PD.PROCESSDEFVERSION) AREALIST     
					FROM 
					(
						SELECT  PD.PROCESSDEFID
						     ,  PD.PROCESSDEFVERSION
						     ,  MC.CONTROLRESOURCEID   CONTROLRESOURCEID
						FROM BAS_PROCESSDEFINITION PD
						LEFT JOIN BAS_REWORKCONTROL MC   ON  PD.PROCESSDEFID = MC.PROCESSDEFID
						                                AND PD.PROCESSDEFVERSION = MC.PROCESSDEFVERSION
						                                AND MC.CONTROLTYPE = 'Area'
					 )PD
					GROUP BY PD.PROCESSDEFID,PD.PROCESSDEFVERSION                  
				)
				SELECT
				      '0'    AS     CHK 
				    ,  Y.PROCESSCLASSTYPE
				    ,  Y.PROCESSCLASSTYPENAME    APPLICATIONTYPE
				    ,  Y.PROCESSCLASSID
				    ,  Y.PROCESSCLASSNAME        REWORKTYPE
				    ,  Y.PROCESSDEFID            REWORKNUMBER
				    ,  Y.PROCESSDEFVERSION       REWORKVERSION
				    ,  Y.PROCESSDEFNAME          REWORKNAME
				    ,  Y.DESCRIPTION
				    ,  Y.TOPPROCESSSEGMENTID
				    ,  Y.TOPPROCESSSEGMENTNAME
				    ,  Y.CREATOR
				FROM
				(
					SELECT X.PROCESSCLASSTYPE       
					    ,  X.PROCESSCLASSTYPENAME   
						,  X.PROCESSCLASSID
						,  X.PROCESSCLASSNAME       
						,  X.PROCESSDEFID           
						,  X.PROCESSDEFVERSION     	
						,  X.PROCESSDEFNAME         
						,  X.DESCRIPTION
						,  X.PRODUCTLIST
						,  X.AREALIST
						,  X.TOPPROCESSSEGMENTID
						,  X.TOPPROCESSSEGMENTNAME
						,  X.REWORKITEMCONTROL
						,  X.REWORKSEGMENTCONTROL
						,  CASE WHEN REWORKITEMCONTROL = 'Y' AND RP_INDEX > 0 THEN 'Y'
						        WHEN REWORKITEMCONTROL = 'Y' AND RP_INDEX = 0 THEN 'N'
						        ELSE 'Y'
						        END  RP_CHECK
						,  CASE WHEN REWORKSEGMENTCONTROL = 'Y' AND RA_INDEX > 0 THEN 'Y'
						        WHEN REWORKSEGMENTCONTROL = 'Y' AND RA_INDEX = 0 THEN 'N'
						        ELSE 'Y'
						        END  RA_CHECK	        
						,  X.CREATOR
					FROM
					(
						SELECT  PC.PROCESSCLASSTYPE 
						     ,  NVL(sd.dictionaryname,PC.PROCESSCLASSTYPE ) PROCESSCLASSTYPENAME
						     ,	PC.PROCESSCLASSID
						     ,  PC.PROCESSCLASSNAME
							 ,	PD.PROCESSDEFID 
							 ,  PD.PROCESSDEFVERSION
							 ,	PD.PROCESSDEFNAME
							 ,  PD.DESCRIPTION
							 ,  RP.PRODUCTLIST
							 ,  RA.AREALIST
							 ,  PD.TOPPROCESSSEGMENTID
							 ,  NVL(SD1.DICTIONARYNAME,PS.PROCESSSEGMENTCLASSID)  TOPPROCESSSEGMENTNAME
							 ,  PD.REWORKITEMCONTROL
							 ,  PD.REWORKSEGMENTCONTROL
							 ,	PD.PLANTID	 
		                      , INSTR(RP.PRODUCTLIST, L.PRODUCTDEFID || PRODUCTDEFVERSION) RP_INDEX
		                      , INSTR(RA.AREALIST, L.AREAID) RA_INDEX
						     ,  NVL(CU.USERNAME, PD.CREATOR)    CREATOR
						FROM BAS_PROCESSDEFINITION PD
						INNER JOIN ROUTING_PRODUCT_LIST    	RP 		ON  	PD.PROCESSDEFID = RP.PROCESSDEFID
						                                      							AND 	PD.PROCESSDEFVERSION = RP.PROCESSDEFVERSION
						INNER JOIN ROUTING_AREA_LIST       		RA 		ON  	PD.PROCESSDEFID = RA.PROCESSDEFID
						                                      							AND 	PD.PROCESSDEFVERSION = RA.PROCESSDEFVERSION  
						LEFT JOIN BAS_PROCESSCLASS          		PC 		ON  	PD.PROCESSCLASSID = PC.PROCESSCLASSID
						INNER JOIN PCM_LOT                   		L 			ON  	L.LOTID = #{P_LOTID}
						LEFT  JOIN CMD_LOOKUP_VALUES         	SC 		ON  	PC.PROCESSCLASSTYPE = SC.LOOKUP_CODE
						                                      							AND 	SC.LOOKUP_TYPE = 'ProcessClassType'
						LEFT  JOIN CMD_DICTIONARY           		SD 		ON  	SC.DICTIONARYID = SD.DICTIONARYID
						                                      							AND 	SD.LANGUAGETYPE = #{LANGUAGETYPE}	
						INNER JOIN BAS_PROCESSSEGMENTCLASS PS 		ON  	PD.TOPPROCESSSEGMENTID = PS.PROCESSSEGMENTCLASSID
						                                     							AND 	PS.PROCESSSEGMENTCLASSTYPE = 'TopProcessSegmentClass'
						LEFT  JOIN CMD_DICTIONARY         		SD1 		ON  	PS.PROCESSSEGMENTCLASSNAME = SD1.DICTIONARYID
						                                     							AND 	SD1.LANGUAGETYPE = #{LANGUAGETYPE}	
						LEFT  JOIN CMD_USER_V                		CU 		ON  	PD.CREATOR = CU.USERID
						WHERE 1=1
						AND   PD.VALIDSTATE = 'Valid'
						AND   PD.PROCESSDEFTYPE = 'Rework'
						AND   PD.PROCESSCLASSID <![CDATA[<>]]> 'Process-ReinspectionShipment'
						<if test="P_FILTERPLANT != null and P_FILTERPLANT !=''  and  P_FILTERPLANT =='Y' "> 
			            AND   EXISTS
			                  (
				                    SELECT  1
				                    FROM    BAS_PROCESSPATH  PP
				                    WHERE   PP.PROCESSDEFID = PD.PROCESSDEFID
				                    AND     PP.PROCESSDEFVERSION = PD.PROCESSDEFVERSION
				                    AND     PP.PLANTID = L.PLANTID
				                    AND		PP.VALIDSTATE = 'Valid'
			                  )
			            </if>
						<if test="P_PROCESSCLASSTYPE != null and P_PROCESSCLASSTYPE != '' and !'*'.equals(P_PROCESSCLASSTYPE) ">						 
							AND		PC.PROCESSCLASSTYPE = #{P_PROCESSCLASSTYPE}	
						</if>
						<if test="TOPPROCESSSEGMENTID != null and TOPPROCESSSEGMENTID !=''  "> 
							AND		PD.TOPPROCESSSEGMENTID = #{TOPPROCESSSEGMENTID}	
						</if>
						<if test="REWORKNUMBER != null and REWORKNUMBER !=''  "> 
							AND		PD.PROCESSDEFID LIKE '%' || #{REWORKNUMBER} || '%'
						</if>
						<if test="REWORKNAME != null and REWORKNAME !=''  ">
							AND		PD.PROCESSDEFNAME LIKE '%' || #{REWORKNAME} || '%'
						</if>
						<if test="P_REWORKIDNAME != null and P_REWORKIDNAME !=''  ">
							AND		(PD.PROCESSDEFID LIKE '%' || UPPER(#{P_REWORKIDNAME}) || '%' OR PD.PROCESSDEFNAME LIKE '%' || UPPER(#{P_REWORKIDNAME}) || '%') 
						</if>
					) X
				) Y
				WHERE Y.RP_CHECK = 'Y'
				AND   Y.RA_CHECK = 'Y'
				ORDER BY PROCESSCLASSID
				      ,  PROCESSCLASSID
				      ,  PROCESSDEFID
				      ,  PROCESSDEFVERSION
          	</when>
          	<when test="VERSION != null and VERSION =='10002' "> 

          	</when>	 			
          	<otherwise>
				
          	</otherwise>
	    </choose>		
    </select>
                
       <!-- AOI Repair 공정 재작업 라우팅 선택 시 인계 자원 정보 조회  -->
    <select id="getTransitResourceForAoiRepair" parameterType="map" resultType="hashmap">
		--
		-- Id : GetTransitResourceForAoiRepair
		-- Version : 10001
		SELECT DISTINCT
				BOR.RESOURCEID
			,	RC.DESCRIPTION		AS RESOURCENAME
			,	RC.AREAID
			,	RC.EQUIPMENTCLASSID
			,	BOR.ISPRIMARYRESOURCE
		FROM	BAS_BILLOFRESOURCE	BOR
		INNER JOIN BAS_RESOURCE		RC	ON	BOR.ENTERPRISEID = RC.ENTERPRISEID
										AND	BOR.PLANTID = RC.PLANTID
										AND	BOR.RESOURCEID = RC.RESOURCEID
                    					AND 	RC.VALIDSTATE = 'Valid'
		WHERE	1 = 1
		AND		BOR.PROCESSDEFID = #{PROCESSDEFID} 
		AND		BOR.PROCESSDEFVERSION = #{PROCESSDEFVERSION} 
		AND		BOR.RESOURCETYPE = 'Resource'		
    	AND   	BOR.VALIDSTATE = 'Valid'
    </select>
    
       <!-- Process Path   -->
    <select id="getProcessPathList" parameterType="map" resultType="hashmap">
		--
		-- Id : GetProcessPathList
		-- Version : 10001
		SELECT 
				TO_NUMBER(PP.USERSEQUENCE) USERSEQUENCE
			,	PP.PROCESSSEGMENTID
			,   DI.DICTIONARYNAME PROCESSSEGMENTNAME
			,   PP.PROCESSSEGMENTVERSION
			,   RES.AREAID 
			,   ADI.DICTIONARYNAME AREANAME
			,   RES.EQUIPMENTCLASSID 
			,   EDI.DICTIONARYNAME EQUIPMENTCLASSNAME
			,   AR.WAREHOUSEID
			,   WH.WAREHOUSENAME
			,   PP.VALIDSTATE
			,   PP.PROCESSPATHID
			,   PP.ENTERPRISEID
			,   PP.PLANTID
			,   PP.PROCESSDEFID
			,	PDF.PROCESSDEFNAME
			,   PP.PROCESSDEFVERSION
			,   PP.PATHSEQUENCE
			,   PP.PATHTYPE
			,   RES.AREAID BF_AREAID
			,   RES.EQUIPMENTCLASSID BF_EQUIPMENTCLASSID
			,	PP.CREATOR
			,	NULL 				AS 	LOTID
			, 	NULL 				AS 	ISSKIP
			,   PP.DESCRIPTION
			,	PP.ALTERNATIVERESOURCE
			,	PP.ASSIGNEQUIPMENT
		FROM    BAS_PROCESSDEFINITION     	PDF 
		INNER JOIN BAS_PROCESSPATH			PP	ON  PDF.PROCESSDEFID = PP.PROCESSDEFID
												AND PDF.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
												AND	PP.VALIDSTATE = 'Valid'
		LEFT JOIN BAS_PROCESSSEGMENT         PG  ON  PP.ENTERPRISEID = PG.ENTERPRISEID        
												AND PP.PROCESSSEGMENTID = PG.PROCESSSEGMENTID
		LEFT JOIN CMD_DICTIONARY 	        DI  ON DI.DICTIONARYID = PG.PROCESSSEGMENTNAME
												AND DI.LANGUAGETYPE = #{LANGUAGETYPE} 
		LEFT JOIN  BAS_BILLOFRESOURCE        BES ON  BES.PROCESSDEFID     = PP.PROCESSDEFID
												AND BES.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
												AND BES.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
												AND BES.ENTERPRISEID = PP.ENTERPRISEID
												AND BES.PLANTID = PP.PLANTID
												AND BES.RESOURCETYPE = 'Resource'	
												AND BES.ISPRIMARYRESOURCE = 'Y'
												AND BES.VALIDSTATE = 'Valid'		
		LEFT JOIN BAS_RESOURCE               RES ON  BES.ENTERPRISEID = RES.ENTERPRISEID
												AND BES.PLANTID 	 = RES.PLANTID
												AND BES.RESOURCEID 	 = RES.RESOURCEID
												AND RES.VALIDSTATE = 'Valid'
		LEFT JOIN BAS_AREA		    		AR  ON RES.ENTERPRISEID = AR.ENTERPRISEID
												AND RES.AREAID = AR.AREAID
												AND AR.VALIDSTATE = 'Valid'
		LEFT JOIN CMD_DICTIONARY 	        ADI ON ADI.DICTIONARYID = AR.AREANAME
												AND ADI.LANGUAGETYPE = #{LANGUAGETYPE} 
																										
		LEFT JOIN BAS_EQUIPMENTCLASS         EC  ON RES.ENTERPRISEID = EC.ENTERPRISEID
												AND RES.EQUIPMENTCLASSID = EC.EQUIPMENTCLASSID
		LEFT JOIN CMD_DICTIONARY 	        EDI ON EDI.DICTIONARYID = EC.EQUIPMENTCLASSNAME
												AND EDI.LANGUAGETYPE = #{LANGUAGETYPE} 
		LEFT JOIN BAS_WAREHOUSE	            WH  ON  WH.ENTERPRISEID = AR.ENTERPRISEID
												AND WH.PLANTID     = AR.PLANTID
												AND WH.WAREHOUSEID = AR.WAREHOUSEID
												AND WH.VALIDSTATE = 'Valid'	
		WHERE	PP.ENTERPRISEID   = #{ENTERPRISEID}
			AND PP.PROCESSDEFID	= #{PROCESSDEFID}
			AND PP.PROCESSDEFVERSION	= #{PROCESSDEFVERSION}
		<if test="P_PRODUCTDEFID != null and P_PRODUCTDEFID !='' "> 
			AND BES.PRODUCTDEFID = #{P_PRODUCTDEFID} 
		</if>
		<if test="P_PRODUCTDEFVERSION != null and P_PRODUCTDEFVERSION !='' "> 
			AND BES.PRODUCTDEFVERSION = #{P_PRODUCTDEFVERSION} 
		</if>
		<if test="PLANTID != null and PLANTID !='' ">
			AND PP.PLANTID	= #{PLANTID} 
		</if>
		<if test="P_REWORKROUTING != null and P_REWORKROUTING !='' ">
			AND PP.PROCESSDEFID	= #{P_REWORKROUTING} 
		</if>
		<if test="P_REWORKROUTINGVERSION != null and P_REWORKROUTINGVERSION !='' ">
			AND PP.PROCESSDEFVERSION	= #{P_REWORKROUTINGVERSION} 
		</if>
		ORDER BY PP.PATHSEQUENCE			
    </select>

   <!-- 공정 관리 > 4-Step 설 명 : 공정 4-Step 상세 정보 탭의 작업 완료 시 사용 자재 리스트를 
		조회 한다  -->
    <select id="selectConsumableListByProcessWorkComplete" parameterType="map" resultType="hashmap">
	    <choose>
          	<when test="VERSION.equals('10001_ASIS') "> 
				--
				-- Id : SelectConsumableListByProcessWorkComplete
				-- Version : 10001 (as-is)
                      WITH P AS 
                       (
                        SELECT
                                L.LOTID
                            ,	PD.PLANTID
                            ,	PD.PRODUCTDEFID
                            ,	PD.PRODUCTDEFVERSION
                            ,	PD.PRODUCTDEFID				AS MATERIALDEFID
                            ,	PD.PRODUCTDEFVERSION		AS MATERIALDEFVERSION
                            ,	PD.PRODUCTDEFNAME			AS MATERIALDEFNAME
                            ,	PD.PROCESSDEFID
                            ,	PD.PROCESSDEFVERSION
                            ,	1           					AS QTY
                            ,	PD.UNIT
                            ,	1               				AS SEQUENCE
                        FROM	PCM_LOT						L
                        INNER JOIN MFM_PRODUCTIONORDER		PO	ON	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
                                                                AND	L.LINENO = PO.LINENO
                        INNER JOIN BAS_PRODUCTDEFINITION		PD	ON	PO.PRODUCTDEFID = PD.PRODUCTDEFID
                                                                AND	PO.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
                                                                AND	PO.PRODUCTDEFID = PD.PROCESSDEFID
                                                                AND	PO.PRODUCTDEFVERSION = PD.PROCESSDEFVERSION
                        WHERE	1 = 1
    					AND		PD.PLANTID = #{PLANTID}
    					AND		L.LOTID = #{LOTID}
                        )
                       , PP AS  
                       (
                        SELECT
                                P.LOTID
                            ,	BOM.PLANTID
                            ,	BOM.PRODUCTDEFID
                            ,	BOM.PRODUCTDEFVERSION
                            ,	PD.PRODUCTDEFID				AS MATERIALDEFID
                            ,	PD.PRODUCTDEFVERSION		AS MATERIALDEFVERSION
                            ,	PD.PRODUCTDEFNAME			AS MATERIALDEFNAME
                            ,	PD.PROCESSDEFID
                            ,	PD.PROCESSDEFVERSION
                            ,	P.QTY * BOM.QTY            AS QTY
                            ,	PD.UNIT
                            ,	BOM."sequence"
                        FROM 
                        (
                        SELECT
                                L.LOTID
                            ,	PD.PLANTID
                            ,	PD.PRODUCTDEFID
                            ,	PD.PRODUCTDEFVERSION
                            ,	PD.PRODUCTDEFID				AS MATERIALDEFID
                            ,	PD.PRODUCTDEFVERSION		AS MATERIALDEFVERSION
                            ,	PD.PRODUCTDEFNAME			AS MATERIALDEFNAME
                            ,	PD.PROCESSDEFID
                            ,	PD.PROCESSDEFVERSION
                            ,	1           					AS QTY
                            ,	PD.UNIT
                            ,	1               				AS SEQUENCE
                        FROM	PCM_LOT						L
                        INNER JOIN MFM_PRODUCTIONORDER		PO	ON	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
                                                                AND	L.LINENO = PO.LINENO
                        INNER JOIN BAS_PRODUCTDEFINITION		PD	ON	PO.PRODUCTDEFID = PD.PRODUCTDEFID
                                                                AND	PO.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
                                                                AND	PO.PRODUCTDEFID = PD.PROCESSDEFID
                                                                AND	PO.PRODUCTDEFVERSION = PD.PROCESSDEFVERSION
                        WHERE	1 = 1
    					AND		PD.PLANTID = #{PLANTID}
    					AND		L.LOTID = #{LOTID}                   
                        ) P
                        INNER JOIN BAS_BILLOFMATERIAL		BOM	ON	P.PLANTID = BOM.PLANTID
                                                                AND	P.MATERIALDEFID = BOM.PRODUCTDEFID
                                                                AND	P.MATERIALDEFVERSION = BOM.PRODUCTDEFVERSION
                                                                AND	P.PROCESSDEFID = BOM.PROCESSDEFID
                                                                AND	P.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
                                                                AND	BOM.MATERIALTYPE = 'Product'
                        INNER JOIN BAS_PRODUCTDEFINITION		PD	ON	BOM.PLANTID = PD.PLANTID
                                                                AND	BOM.MATERIALDEFID = PD.PRODUCTDEFID
                                                                AND	BOM.MATERIALDEFVERSION = PD.PRODUCTDEFVERSION  
                        ) 
    
				SELECT
						CL.AREAID
					,	CL.WAREHOUSEID
					,	(BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION)		AS KEYCOLUMN
					,	CL.CONSUMABLEDEFID
					,	CL.CONSUMABLEDEFVERSION
					,	NVL(AMD.CONSUMABLEDEFNAME, CD.CONSUMABLEDEFNAME)	AS CONSUMABLEDEFNAME
					,	CML.MATERIALLOTID					AS CONSUMABLELOTID
					,	CL.CONSUMABLELOTQTY         	AS STOCKQTY
					,	(CL.CONSUMABLELOTQTY - (NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY))           	AS AVAILABLEQTY
					,	LEAST(CL.CONSUMABLELOTQTY - (NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY),
							  ROUND((L.QTY * BOM.QTY * NVL(P.QTY, 1) *
							  CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN NVL(P.QTY, 1) * BOM.QTY != 1 THEN PD.PCSPNL
							  												   ELSE 1 END
							  	   ELSE 1
							  END),  CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 0 ELSE 5 END),
							  CML.CONSUMEDQTY)                    	AS INPUTQTY
					,	LEAST(CL.CONSUMABLELOTQTY - (NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY),
							  ROUND((L.QTY * BOM.QTY * NVL(P.QTY, 1) *
							  CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN NVL(P.QTY, 1) * BOM.QTY != 1 THEN PD.PCSPNL
							  												   ELSE 1 END
							  	   ELSE 1
							  END), CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 0 ELSE 5 END),
							  CML.CONSUMEDQTY)     	AS ORGINPUTQTY
					,	0                   					AS DEFECTQTY
					,	(NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY)                  AS LOTUSINGQTY
					,	''            							AS CONSUMABLEDEFECT
					,	CL.CONSUMABLESTATE
				FROM	PCM_LOT								L
				INNER JOIN BAS_BILLOFMATERIAL				BOM	ON	L.ENTERPRISEID = BOM.ENTERPRISEID
																AND	L.PLANTID = BOM.PLANTID
																AND	L.PRODUCTDEFID = BOM.PRODUCTDEFID
																AND	L.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
																AND	L.PROCESSDEFID = BOM.PROCESSDEFID
																AND	L.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
																AND	L.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
																AND	L.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
				INNER JOIN PCM_CONSUMEMATERIALLOT_TEMP		CML	ON	L.ENTERPRISEID = CML.ENTERPRISEID
																AND	L.PLANTID = CML.PLANTID
																AND	L.LOTID = CML.LOTID
																AND	L.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
																AND	BOM.MATERIALDEFID = CML.MATERIALDEFID
																AND	CML.MATERIALTYPE = #{MATERIALTYPE}
				INNER JOIN MTM_CONSUMABLELOT					CL	ON	CML.ENTERPRISEID = CL.ENTERPRISEID
																AND	CML.PLANTID = CL.PLANTID
																AND	CML.WAREHOUSEID = CL.WAREHOUSEID
																AND	CML.MATERIALLOTID = CL.CONSUMABLELOTID
				LEFT OUTER JOIN BAS_PRODUCTDEFINITION		PD	ON	BOM.MATERIALDEFID = PD.PRODUCTDEFID
																AND	BOM.MATERIALDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION		CD	ON	BOM.ENTERPRISEID = CD.ENTERPRISEID
																AND	BOM.MATERIALDEFID = CD.CONSUMABLEDEFID
																AND CL.CONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION																	
				LEFT OUTER JOIN BAS_ALTERNATIVEMATERIAL		AM	ON	BOM.ENTERPRISEID = AM.ENTERPRISEID
																AND	BOM.PLANTID = AM.PLANTID
																AND	BOM.MATERIALDEFID = AM.ITEMID
																AND	CL.CONSUMABLEDEFID = AM.ALTERNATIVEITEMID
				LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION		AMD	ON	AM.ENTERPRISEID = AMD.ENTERPRISEID
																AND	AM.ALTERNATIVEITEMID = AMD.CONSUMABLEDEFID
				LEFT OUTER JOIN 		(
				                                         SELECT 
				                                                PP.PLANTID
				                                            ,	PP.PRODUCTDEFID
				                                            ,	PP.PRODUCTDEFVERSION
				                                            ,	PP.MATERIALDEFID
				                                            ,	PP.MATERIALDEFVERSION
				                                            ,	PP.MATERIALDEFNAME
				                                            ,	PP.PROCESSDEFID
				                                            ,	PP.PROCESSDEFVERSION
				                                            ,	PP.QTY
				                                            ,	PP.UNIT
				                                            ,	PP."sequence"                    
				                                        FROM P, PP
				                                        WHERE P.PLANTID = PP.PLANTID
				                                        START WITH  P.PLANTID = #{PLANTID}
				                                                AND P.LOTID = #{LOTID}
				                                        CONNECT BY NOCYCLE  P.PLANTID = PRIOR PP.PLANTID AND P.LOTID = PRIOR PP.LOTID
				                                     )		P	ON	L.PRODUCTDEFID = P.MATERIALDEFID
																AND	L.PRODUCTDEFVERSION = P.MATERIALDEFVERSION
				LEFT OUTER JOIN (
									SELECT
											T.ENTERPRISEID
										,	T.MATERIALLOTID
										,	T.WAREHOUSEID
										,	SUM(T.CONSUMEDQTY)			AS CONSUMEDQTY
									FROM	PCM_CONSUMEMATERIALLOT_TEMP	T
									WHERE	T.MATERIALTYPE = 'Consumable'
									GROUP BY T.ENTERPRISEID
											,T.MATERIALLOTID
											,T.WAREHOUSEID
								)							T	ON	CL.ENTERPRISEID = T.ENTERPRISEID
																AND	CL.CONSUMABLELOTID = T.MATERIALLOTID
																AND	CL.WAREHOUSEID = T.WAREHOUSEID
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID} 
          	</when>	    
          	<when test="VERSION.equals('10001') ">
         	 
            -- Id : SelectConsumableListByProcessWorkComplete
            -- Version : 10001(이명환부장)
            WITH P AS(
              SELECT
                      L.LOTID
                   ,    PD.PLANTID
                   ,    PD.PRODUCTDEFID
                   ,    PD.PRODUCTDEFVERSION
                   ,    PD.PRODUCTDEFID             AS MATERIALDEFID
                   ,    PD.PRODUCTDEFVERSION        AS MATERIALDEFVERSION
                   ,    PD.PRODUCTDEFNAME           AS MATERIALDEFNAME
                   ,    PD.PROCESSDEFID
                   ,    PD.PROCESSDEFVERSION
                   ,    1                               AS QTY
                   ,    PD.UNIT
                   ,    1                               AS SEQUENCE
                FROM    PCM_LOT                     L
               INNER JOIN MFM_PRODUCTIONORDER       PO  ON  L.PRODUCTIONORDERID       = PO.PRODUCTIONORDERID
                                                       AND  L.LINENO                  = PO.LINENO
               INNER JOIN BAS_PRODUCTDEFINITION     PD  ON  PO.PRODUCTDEFID           = PD.PRODUCTDEFID
                                                       AND  PO.PRODUCTDEFVERSION      = PD.PRODUCTDEFVERSION
                                                       AND  PO.PRODUCTDEFID           = PD.PROCESSDEFID
                                                       AND  PO.PRODUCTDEFVERSION      = PD.PROCESSDEFVERSION
               WHERE    1               = 1
                 AND    PD.PLANTID      = #{PLANTID}
                 AND    L.LOTID         = #{LOTID}
            )
            , PP AS(
              SELECT
                       P.LOTID
                   ,   BOM.PLANTID
                   ,   BOM.PRODUCTDEFID
                   ,   BOM.PRODUCTDEFVERSION
                   ,   PD.PRODUCTDEFID              AS MATERIALDEFID
                   ,   PD.PRODUCTDEFVERSION     AS MATERIALDEFVERSION
                   ,   PD.PRODUCTDEFNAME            AS MATERIALDEFNAME
                   ,   PD.PROCESSDEFID
                   ,   PD.PROCESSDEFVERSION
                   ,   P.QTY * BOM.QTY             AS QTY
                   ,   PD.UNIT
                   ,   BOM."sequence"
                FROM(
                      SELECT
                              L.LOTID
                          , PD.PLANTID
                          , PD.PRODUCTDEFID
                          , PD.PRODUCTDEFVERSION
                          , PD.PRODUCTDEFID             AS MATERIALDEFID
                          , PD.PRODUCTDEFVERSION        AS MATERIALDEFVERSION
                          , PD.PRODUCTDEFNAME           AS MATERIALDEFNAME
                          , PD.PROCESSDEFID
                          , PD.PROCESSDEFVERSION
                          , 1                               AS QTY
                          , PD.UNIT
                          , 1                               AS SEQUENCE
                      FROM  PCM_LOT                     L                    
                      INNER JOIN BAS_PRODUCTDEFINITION  PD     ON   L.PRODUCTDEFID            = PD.PRODUCTDEFID
                                                              AND   L.PRODUCTDEFVERSION       = PD.PRODUCTDEFVERSION
                                                              AND   L.PRODUCTDEFID            = PD.PROCESSDEFID
                                                              AND   L.PRODUCTDEFVERSION       = PD.PROCESSDEFVERSION
                      WHERE 1                   = 1
                      AND       PD.PLANTID      = #{PLANTID}
                      AND       L.LOTID         = #{LOTID}
                    ) P
                INNER JOIN BAS_BILLOFMATERIAL   BOM    ON   P.PLANTID                  = BOM.PLANTID
                                                      AND   P.MATERIALDEFID            = BOM.PRODUCTDEFID
                                                      AND   P.MATERIALDEFVERSION       = BOM.PRODUCTDEFVERSION
                                                      AND   P.PROCESSDEFID             = BOM.PROCESSDEFID
                                                      AND   P.PROCESSDEFVERSION        = BOM.PROCESSDEFVERSION
                                                      AND   BOM.MATERIALTYPE           = 'Product'
                INNER JOIN BAS_PRODUCTDEFINITION  PD   ON   BOM.PLANTID                = PD.PLANTID
                                                      AND   BOM.MATERIALDEFID          = PD.PRODUCTDEFID
                                                      AND   BOM.MATERIALDEFVERSION     = PD.PRODUCTDEFVERSION
   
   UNION ALL
                                                      
 SELECT
                       P.LOTID
                   ,   BOM.PLANTID
                   ,   BOM.PRODUCTDEFID
                   ,   BOM.PRODUCTDEFVERSION
                   ,   BOM.ALTITEM              AS MATERIALDEFID
                   ,   BOM.ALTREVISION     AS MATERIALDEFVERSION
                   ,   PD.PRODUCTDEFNAME            AS MATERIALDEFNAME
                   ,   PD.PROCESSDEFID
                   ,   PD.PROCESSDEFVERSION
                   ,   P.QTY * BOM.QTY             AS QTY
                   ,   PD.UNIT
                   ,   BOM."sequence"
                FROM(
                      SELECT
                              L.LOTID
                          , PD.PLANTID
                          , PD.PRODUCTDEFID
                          , PD.PRODUCTDEFVERSION
                          , PD.PRODUCTDEFID             AS MATERIALDEFID
                          , PD.PRODUCTDEFVERSION        AS MATERIALDEFVERSION
                          , PD.PRODUCTDEFNAME           AS MATERIALDEFNAME
                          , PD.PROCESSDEFID
                          , PD.PROCESSDEFVERSION
                          , 1                               AS QTY
                          , PD.UNIT
                          , 1                               AS SEQUENCE
                      FROM  PCM_LOT                     L                    
                      INNER JOIN BAS_PRODUCTDEFINITION  PD     ON   L.PRODUCTDEFID            = PD.PRODUCTDEFID
                                                              AND   L.PRODUCTDEFVERSION       = PD.PRODUCTDEFVERSION
                                                              AND   L.PRODUCTDEFID            = PD.PROCESSDEFID
                                                              AND   L.PRODUCTDEFVERSION       = PD.PROCESSDEFVERSION
                      WHERE 1                   = 1
                      AND       PD.PLANTID      = #{PLANTID}
                      AND       L.LOTID         = #{LOTID}
                    ) P
                INNER JOIN BAS_BILLOFMATERIAL   BOM    ON   P.PLANTID                  = BOM.PLANTID
                                                      AND   P.MATERIALDEFID            = BOM.PRODUCTDEFID
                                                      AND   P.MATERIALDEFVERSION       = BOM.PRODUCTDEFVERSION
                                                      AND   P.PROCESSDEFID             = BOM.PROCESSDEFID
                                                      AND   P.PROCESSDEFVERSION        = BOM.PROCESSDEFVERSION
                                                      AND   BOM.MATERIALTYPE           = 'Product'
                INNER JOIN BAS_PRODUCTDEFINITION  PD   ON   BOM.PLANTID                = PD.PLANTID
                                                      AND   BOM.MATERIALDEFID          = PD.PRODUCTDEFID
                                                      AND   BOM.MATERIALDEFVERSION     = PD.PRODUCTDEFVERSION
            )
            SELECT ARE.AREAID
                 , ARE.WAREHOUSEID
                 , (BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION)         KEYCOLUMN
                 , BOM.MATERIALDEFID                                            CONSUMABLEDEFID
                 , BOM.MATERIALDEFVERSION                                       CONSUMABLEDEFVERSION
                 , NVL(AMD.CONSUMABLEDEFNAME, CD.CONSUMABLEDEFNAME)             CONSUMABLEDEFNAME
                 , CL.ONHAND_QTY                                                STOCKQTY                        -- ERP재고수량
                 , NVL(CL.ONHAND_QTY, 0) - NVL(CON.CONSUMEDQTY, 0)              AVAILABLEQTY                    -- 가용수량(ERP재고수량 - Lot사용수량)
                 , 0                                                         AS DEFECTQTY
                 , Q2.CONSUMEDQTY                                           AS LOTUSINGQTY                     -- Lot사용수량
                 ,  CL.LOT_NUMBER	                                          AS CONSUMABLELOTID
                 --소요량
                 , TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                            ELSE 1 END
                                                ELSE 1 END,
                         CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)                                  QTYOFREQUIREMENT

                , (L.QTY * BOM.QTY * NVL(P.QTY, 1) *
                          CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN NVL(P.QTY, 1) * NVL(BOM.QTY, 0) != 1 THEN NVL(PD.PCSPNL, 0)
                                                                           ELSE 1 END
                               ELSE 1
                          END)                                                                                      TEST1
            --    , LEAST(CL.ONHAND_QTY - NVL(Q2.CONSUMEDQTY, 0),
            --              ROUND((L.QTY * BOM.QTY * NVL(P.QTY, 1) *
            --              CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN NVL(P.QTY, 1) * NVL(BOM.QTY, 0) != 1 THEN NVL(PD.PCSPNL, 0)
            --                                                               ELSE 1 END
            --                   ELSE 1
            --              END),  CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 0 ELSE 5 END),
            --              NVL(Q2.CONSUMEDQTY, 0))                        AS INPUTQTY

                 -- 투입수량(자동계산 해야함)
                   --가용수량 LESS THAN 소요량  이면 가용수량
                 , CASE WHEN ( Q2.CONSUMEDQTY <![CDATA[<]]> TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                                     ELSE 1 END
                                                                         ELSE 1 END,
                                                       CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             ) THEN Q2.CONSUMEDQTY
                   -- 가용수량 LARGER  THAN OR EQUAL 소요량 이면 소요량
                        ELSE (
                               TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                        ELSE 1 END
                                                       ELSE 1 END,
                                     CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             )
                        END                                                         INPUTQTY

                 , CASE WHEN ( Q2.CONSUMEDQTY <![CDATA[<]]> TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                                     ELSE 1 END
                                                                         ELSE 1 END,
                                                       CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             ) THEN Q2.CONSUMEDQTY
                        ELSE (
                               TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                        ELSE 1 END
                                                       ELSE 1 END,
                                     CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             )
                        END                                                         ORGINPUTQTY
                 , ''                                                        AS CONSUMABLEDEFECT
                 -- MHYi 210507 공정관리  작업시작  자재 탭 소스에는 Scrapped 체크 하므로 업무 절차 정해지면 추가 할것
                 ,  CASE WHEN CL.ONHAND_QTY = 0 THEN 'Consumed' ELSE 'Available' END                            CONSUMABLESTATE
                 , L.LOTID
                 , CL.LOT_NUMBER
                 , Q2.MATERIALLOTID
			<if test="WORKCOMPLETE != null and WORKCOMPLETE !=''">      
                ,Q2.CONSUMEDQTY  AS CURRENTLOTQTY
               </if>
              FROM  PCM_LOT                     L
             INNER JOIN BAS_BILLOFMATERIAL      BOM          ON L.ENTERPRISEID            = BOM.ENTERPRISEID
                                                            AND L.PLANTID                 = BOM.PLANTID
                                                            AND L.PRODUCTDEFID            = BOM.PRODUCTDEFID
                                                            AND L.PRODUCTDEFVERSION       = BOM.PRODUCTDEFVERSION
                                                            AND L.PROCESSDEFID            = BOM.PROCESSDEFID
                                                            AND L.PROCESSDEFVERSION       = BOM.PROCESSDEFVERSION
                                                            AND L.PROCESSSEGMENTID        = BOM.PROCESSSEGMENTID
                                                            AND L.PROCESSSEGMENTVERSION   = BOM.PROCESSSEGMENTVERSION
             INNER JOIN BAS_AREA                  ARE        ON ARE.ENTERPRISEID          = L.ENTERPRISEID
                                                            AND ARE.PLANTID               = L.PLANTID
                                                            AND ARE.AREAID                = L.AREAID
              LEFT OUTER JOIN IFC_MES_S_ONHAND_V@ERPPROD CL  ON CL.ENTERPRISEID           = L.ENTERPRISEID
                                                            AND CL.PLANTID                = L.PLANTID
                                                            AND CL.SUBINVENTORY_CODE      = ARE.WAREHOUSEID
                                                            AND CL.ITEM_CODE              = DECODE(SUBSTR(CL.ITEM_CODE, 0, 1), '2', BOM.MATERIALDEFID || BOM.MATERIALDEFVERSION
                                                                                                                                  , BOM.MATERIALDEFID)
                                                            AND CL.BOM_ENABLED_FLAG       = 'Y'
                                                            AND CL.LOT_NUMBER            IS NOT NULL
        LEFT   OUTER JOIN (SELECT MATERIALDEFID
                         ,MATERIALDEFVERSION
                         ,MATERIALLOTID
                         ,SUM(CONSUMEDQTY) AS CONSUMEDQTY
                         ,WAREHOUSEID
                         ,ENTERPRISEID
                         ,PLANTID
                   FROM   MTM_CONSUMEMATERIALLOT_V T2
                   GROUP  BY MATERIALDEFID
                            ,MATERIALDEFVERSION
                            ,MATERIALLOTID
                            ,WAREHOUSEID
                            ,ENTERPRISEID
                            ,PLANTID) CON
ON     CL.ENTERPRISEID = CON.ENTERPRISEID
AND    CL.PLANTID = CON.PLANTID
AND    CL.LOT_NUMBER = CON.MATERIALLOTID
AND    CL.SUBINVENTORY_CODE = CON.WAREHOUSEID

 LEFT OUTER JOIN (
					 SELECT SUM(CONSUMEDQTY) AS CONSUMEDQTY
					                       ,#{LOTID} AS LOTID
					                       ,TV2.ENTERPRISEID
					                      ,TV2.PLANTID
					                      ,TV2.MATERIALLOTID
					                      ,TV2.WAREHOUSEID
					                FROM 
					                (
					                SELECT SUM(CONSUMEDQTY) CONSUMEDQTY
					                      ,TV.LOTID
					                      ,TV.ENTERPRISEID
					                      ,TV.PLANTID
					                      ,TV.MATERIALLOTID
					                      ,TV.WAREHOUSEID
					                FROM   MTM_CONSUMEMATERIALLOT_V TV
					                WHERE  1 = 1
					                AND    TV.LOTID = #{LOTID}
					                GROUP  BY TV.LOTID
					                         ,TV.ENTERPRISEID
					                         ,TV.PLANTID
					                         ,TV.MATERIALLOTID
					                         ,TV.WAREHOUSEID
					
					                UNION ALL
					
					                SELECT SUM(CONSUMEDQTY) CONSUMEDQTY
					                      ,TV.LOTID
					                      ,TV.ENTERPRISEID
					                      ,TV.PLANTID
					                      ,TV.MATERIALLOTID
					                      ,TV.WAREHOUSEID
					                FROM   MTM_CONSUMEMATERIALLOT_V TV
					                WHERE  1 = 1
					                AND    TV.LOTID != #{LOTID}
					                GROUP  BY TV.LOTID
					                         ,TV.ENTERPRISEID
					                         ,TV.PLANTID
					                         ,TV.MATERIALLOTID
					                         ,TV.WAREHOUSEID
					                ) TV2
					                GROUP  BY TV2.ENTERPRISEID
					                         ,TV2.PLANTID
					                         ,TV2.MATERIALLOTID
					                         ,TV2.WAREHOUSEID
                  
                ) Q2 ON  Q2.LOTID = L.LOTID
                AND    CL.ENTERPRISEID = Q2.ENTERPRISEID
                AND    CL.PLANTID = Q2.PLANTID
                AND    CL.LOT_NUMBER = Q2.MATERIALLOTID
                AND    CL.SUBINVENTORY_CODE = Q2.WAREHOUSEID
              LEFT OUTER JOIN BAS_PRODUCTDEFINITION     PD   ON BOM.MATERIALDEFID         = PD.PRODUCTDEFID
                                                            AND BOM.MATERIALDEFVERSION    = PD.PRODUCTDEFVERSION
              LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION  CD   ON BOM.ENTERPRISEID          = CD.ENTERPRISEID
                                                            AND BOM.MATERIALDEFID         = CD.CONSUMABLEDEFID
                                                            AND BOM.MATERIALDEFVERSION    = CD.CONSUMABLEDEFVERSION
              LEFT OUTER JOIN BAS_ALTERNATIVEMATERIAL   AM   ON BOM.ENTERPRISEID          = AM.ENTERPRISEID
                                                            AND BOM.PLANTID               = AM.PLANTID
                                                            AND BOM.MATERIALDEFID         = AM.ITEMID
                                                            AND CL.ITEM_CODE              = AM.ALTERNATIVEITEMID
              LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION  AMD  ON AM.ENTERPRISEID           = AMD.ENTERPRISEID
                                                            AND AM.ALTERNATIVEITEMID      = AMD.CONSUMABLEDEFID
              LEFT OUTER JOIN (
                                     SELECT
                                            PP.PLANTID
                                        ,   PP.PRODUCTDEFID
                                        ,   PP.PRODUCTDEFVERSION
                                        ,   PP.MATERIALDEFID
                                        ,   PP.MATERIALDEFVERSION
                                        ,   PP.MATERIALDEFNAME
                                        ,   PP.PROCESSDEFID
                                        ,   PP.PROCESSDEFVERSION
                                        ,   PP.QTY
                                        ,   PP.UNIT
                                        ,   PP."sequence"
                                    FROM P, PP
                                    WHERE P.PLANTID                               = PP.PLANTID
                                    START WITH  P.PLANTID                         = #{PLANTID}
                                           AND P.LOTID                            = #{LOTID}
                                    CONNECT BY NOCYCLE  P.PLANTID                 = PRIOR PP.PLANTID AND P.LOTID = PRIOR PP.LOTID
                              )     P        ON L.PRODUCTDEFID        = P.MATERIALDEFID
                                            AND L.PRODUCTDEFVERSION   = P.MATERIALDEFVERSION
             WHERE  1                     = 1
               AND      L.ENTERPRISEID = #{ENTERPRISEID}
               AND      L.PLANTID      = #{PLANTID}
               AND      L.LOTID        = #{LOTID}
               <if test="WORKCOMPLETE != null and WORKCOMPLETE !=''">
               	AND CON.MATERIALLOTID IS NOT NULL
				AND EXISTS (SELECT 1
				        FROM   MTM_CONSUMEMATERIALLOT_V TV
				        WHERE  1 = 1
				        AND    CL.ENTERPRISEID = TV.ENTERPRISEID
				        AND    CL.PLANTID = TV.PLANTID
				        AND    CL.LOT_NUMBER = TV.MATERIALLOTID
				        AND    CL.SUBINVENTORY_CODE = TV.WAREHOUSEID
				        AND    TV.LOTID = #{LOTID}				        
				        )
               </if>
               
               UNION ALL
               
                           SELECT ARE.AREAID
                 , ARE.WAREHOUSEID
                 , (BOM.ALTITEM || '|' || BOM.ALTREVISION)         KEYCOLUMN
                 , BOM.ALTITEM                                            CONSUMABLEDEFID
                 , BOM.ALTREVISION                                       CONSUMABLEDEFVERSION
                 , NVL(AMD.CONSUMABLEDEFNAME, CD.CONSUMABLEDEFNAME)             CONSUMABLEDEFNAME
                 , CL.ONHAND_QTY                                                STOCKQTY                        -- ERP재고수량
                 , NVL(CL.ONHAND_QTY, 0) - NVL(CON.CONSUMEDQTY, 0)              AVAILABLEQTY                    -- 가용수량(ERP재고수량 - Lot사용수량)
                 , 0                                                         AS DEFECTQTY
                 , Q2.CONSUMEDQTY                                           AS LOTUSINGQTY                     -- Lot사용수량
                 ,  CL.LOT_NUMBER	                                          AS CONSUMABLELOTID
                 --소요량
                 , TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                            ELSE 1 END
                                                ELSE 1 END,
                         CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)                                  QTYOFREQUIREMENT

                , (L.QTY * BOM.QTY * NVL(P.QTY, 1) *
                          CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN NVL(P.QTY, 1) * NVL(BOM.QTY, 0) != 1 THEN NVL(PD.PCSPNL, 0)
                                                                           ELSE 1 END
                               ELSE 1
                          END)                                                                                      TEST1
            --    , LEAST(CL.ONHAND_QTY - NVL(Q2.CONSUMEDQTY, 0),
            --              ROUND((L.QTY * BOM.QTY * NVL(P.QTY, 1) *
            --              CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN NVL(P.QTY, 1) * NVL(BOM.QTY, 0) != 1 THEN NVL(PD.PCSPNL, 0)
            --                                                               ELSE 1 END
            --                   ELSE 1
            --              END),  CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 0 ELSE 5 END),
            --              NVL(Q2.CONSUMEDQTY, 0))                        AS INPUTQTY

                 -- 투입수량(자동계산 해야함)
                   --가용수량 LESS THAN 소요량  이면 가용수량
                 , CASE WHEN ( Q2.CONSUMEDQTY <![CDATA[<]]> TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                                     ELSE 1 END
                                                                         ELSE 1 END,
                                                       CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             ) THEN Q2.CONSUMEDQTY
                   -- 가용수량 LARGER  THAN OR EQUAL 소요량 이면 소요량
                        ELSE (
                               TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                        ELSE 1 END
                                                       ELSE 1 END,
                                     CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             )
                        END                                                         INPUTQTY

                 , CASE WHEN ( Q2.CONSUMEDQTY <![CDATA[<]]> TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                                     ELSE 1 END
                                                                         ELSE 1 END,
                                                       CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             ) THEN Q2.CONSUMEDQTY
                        ELSE (
                               TRUNC(L.QTY * BOM.QTY * CASE WHEN BOM.MATERIALTYPE = 'Product' THEN CASE WHEN BOM.QTY != 1 THEN NVL(PD.PCSPNL, 1)
                                                                                                        ELSE 1 END
                                                       ELSE 1 END,
                                     CASE WHEN BOM.MATERIALTYPE = 'Product' THEN 5 /*0 2021-06-09 최창선차장 요청, 반제품도 5자리 보여줌 */ ELSE 5 END)
                             )
                        END                                                         ORGINPUTQTY
                 , ''                                                        AS CONSUMABLEDEFECT
                 -- MHYi 210507 공정관리  작업시작  자재 탭 소스에는 Scrapped 체크 하므로 업무 절차 정해지면 추가 할것
                 ,  CASE WHEN CL.ONHAND_QTY = 0 THEN 'Consumed' ELSE 'Available' END                            CONSUMABLESTATE
                 , L.LOTID
                 , CL.LOT_NUMBER
                 , Q2.MATERIALLOTID
			<if test="WORKCOMPLETE != null and WORKCOMPLETE !=''">      
                ,Q2.CONSUMEDQTY  AS CURRENTLOTQTY
               </if>
              FROM  PCM_LOT                     L
             INNER JOIN BAS_BILLOFMATERIAL      BOM          ON L.ENTERPRISEID            = BOM.ENTERPRISEID
                                                            AND L.PLANTID                 = BOM.PLANTID
                                                            AND L.PRODUCTDEFID            = BOM.PRODUCTDEFID
                                                            AND L.PRODUCTDEFVERSION       = BOM.PRODUCTDEFVERSION
                                                            AND L.PROCESSDEFID            = BOM.PROCESSDEFID
                                                            AND L.PROCESSDEFVERSION       = BOM.PROCESSDEFVERSION
                                                            AND L.PROCESSSEGMENTID        = BOM.PROCESSSEGMENTID
                                                            AND L.PROCESSSEGMENTVERSION   = BOM.PROCESSSEGMENTVERSION
             INNER JOIN BAS_AREA                  ARE        ON ARE.ENTERPRISEID          = L.ENTERPRISEID
                                                            AND ARE.PLANTID               = L.PLANTID
                                                            AND ARE.AREAID                = L.AREAID
              LEFT OUTER JOIN IFC_MES_S_ONHAND_V@ERPPROD CL  ON CL.ENTERPRISEID           = L.ENTERPRISEID
                                                            AND CL.PLANTID                = L.PLANTID
                                                            AND CL.SUBINVENTORY_CODE      = ARE.WAREHOUSEID
                                                            AND CL.ITEM_CODE              = DECODE(SUBSTR(CL.ITEM_CODE, 0, 1), '2', BOM.ALTITEM || BOM.ALTREVISION
                                                                                                                                  , BOM.ALTITEM)
                                                            AND CL.BOM_ENABLED_FLAG       = 'Y'
                                                            AND CL.LOT_NUMBER            IS NOT NULL
        LEFT   OUTER JOIN (SELECT MATERIALDEFID
                         ,MATERIALDEFVERSION
                         ,MATERIALLOTID
                         ,SUM(CONSUMEDQTY) AS CONSUMEDQTY
                         ,WAREHOUSEID
                         ,ENTERPRISEID
                         ,PLANTID
                   FROM   MTM_CONSUMEMATERIALLOT_V T2
                   GROUP  BY MATERIALDEFID
                            ,MATERIALDEFVERSION
                            ,MATERIALLOTID
                            ,WAREHOUSEID
                            ,ENTERPRISEID
                            ,PLANTID) CON
ON     CL.ENTERPRISEID = CON.ENTERPRISEID
AND    CL.PLANTID = CON.PLANTID
AND    CL.LOT_NUMBER = CON.MATERIALLOTID
AND    CL.SUBINVENTORY_CODE = CON.WAREHOUSEID

 LEFT OUTER JOIN (					 SELECT SUM(CONSUMEDQTY) AS CONSUMEDQTY
					                       ,#{LOTID} AS LOTID
					                       ,TV2.ENTERPRISEID
					                      ,TV2.PLANTID
					                      ,TV2.MATERIALLOTID
					                      ,TV2.WAREHOUSEID
					                FROM 
					                (
					                SELECT SUM(CONSUMEDQTY) CONSUMEDQTY
					                      ,TV.LOTID
					                      ,TV.ENTERPRISEID
					                      ,TV.PLANTID
					                      ,TV.MATERIALLOTID
					                      ,TV.WAREHOUSEID
					                FROM   MTM_CONSUMEMATERIALLOT_V TV
					                WHERE  1 = 1
					                AND    TV.LOTID = #{LOTID}
					                GROUP  BY TV.LOTID
					                         ,TV.ENTERPRISEID
					                         ,TV.PLANTID
					                         ,TV.MATERIALLOTID
					                         ,TV.WAREHOUSEID
					
					                UNION ALL
					
					                SELECT SUM(CONSUMEDQTY) CONSUMEDQTY
					                      ,TV.LOTID
					                      ,TV.ENTERPRISEID
					                      ,TV.PLANTID
					                      ,TV.MATERIALLOTID
					                      ,TV.WAREHOUSEID
					                FROM   MTM_CONSUMEMATERIALLOT_V TV
					                WHERE  1 = 1
					                AND    TV.LOTID != #{LOTID}
					                GROUP  BY TV.LOTID
					                         ,TV.ENTERPRISEID
					                         ,TV.PLANTID
					                         ,TV.MATERIALLOTID
					                         ,TV.WAREHOUSEID
					                ) TV2
					                GROUP  BY TV2.ENTERPRISEID
					                         ,TV2.PLANTID
					                         ,TV2.MATERIALLOTID
					                         ,TV2.WAREHOUSEID
                ) Q2 ON  Q2.LOTID = L.LOTID
                AND    CL.ENTERPRISEID = Q2.ENTERPRISEID
                AND    CL.PLANTID = Q2.PLANTID
                AND    CL.LOT_NUMBER = Q2.MATERIALLOTID
                AND    CL.SUBINVENTORY_CODE = Q2.WAREHOUSEID
              LEFT OUTER JOIN BAS_PRODUCTDEFINITION     PD   ON BOM.ALTITEM         = PD.PRODUCTDEFID
                                                            AND BOM.ALTREVISION    = PD.PRODUCTDEFVERSION
              LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION  CD   ON BOM.ENTERPRISEID          = CD.ENTERPRISEID
                                                            AND BOM.ALTITEM         = CD.CONSUMABLEDEFID
                                                            AND BOM.ALTREVISION    = CD.CONSUMABLEDEFVERSION
              LEFT OUTER JOIN BAS_ALTERNATIVEMATERIAL   AM   ON BOM.ENTERPRISEID          = AM.ENTERPRISEID
                                                            AND BOM.PLANTID               = AM.PLANTID
                                                            AND BOM.ALTITEM         = AM.ITEMID
                                                            AND CL.ITEM_CODE              = AM.ALTERNATIVEITEMID
              LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION  AMD  ON AM.ENTERPRISEID           = AMD.ENTERPRISEID
                                                            AND AM.ALTERNATIVEITEMID      = AMD.CONSUMABLEDEFID
              LEFT OUTER JOIN (
                                     SELECT
                                            PP.PLANTID
                                        ,   PP.PRODUCTDEFID
                                        ,   PP.PRODUCTDEFVERSION
                                        ,   PP.MATERIALDEFID
                                        ,   PP.MATERIALDEFVERSION
                                        ,   PP.MATERIALDEFNAME
                                        ,   PP.PROCESSDEFID
                                        ,   PP.PROCESSDEFVERSION
                                        ,   PP.QTY
                                        ,   PP.UNIT
                                        ,   PP."sequence"
                                    FROM P, PP
                                    WHERE P.PLANTID                               = PP.PLANTID
                                    START WITH  P.PLANTID                         = #{PLANTID}
                                           AND P.LOTID                            = #{LOTID}
                                    CONNECT BY NOCYCLE  P.PLANTID                 = PRIOR PP.PLANTID AND P.LOTID = PRIOR PP.LOTID
                              )     P        ON L.PRODUCTDEFID        = P.MATERIALDEFID
                                            AND L.PRODUCTDEFVERSION   = P.MATERIALDEFVERSION
             WHERE  1                     = 1
               AND      L.ENTERPRISEID = #{ENTERPRISEID}
               AND      L.PLANTID      = #{PLANTID}
               AND      L.LOTID        = #{LOTID}
               <if test="WORKCOMPLETE != null and WORKCOMPLETE !=''">
               	AND CON.MATERIALLOTID IS NOT NULL
				AND EXISTS (SELECT 1
				        FROM   MTM_CONSUMEMATERIALLOT_V TV
				        WHERE  1 = 1
				        AND    CL.ENTERPRISEID = TV.ENTERPRISEID
				        AND    CL.PLANTID = TV.PLANTID
				        AND    CL.LOT_NUMBER = TV.MATERIALLOTID
				        AND    CL.SUBINVENTORY_CODE = TV.WAREHOUSEID
				        AND    TV.LOTID = #{LOTID}				        
				        )
               </if>
          	</when>
          	<when test="VERSION.equals('10011') "> 
				--
				-- Id : SelectConsumableListByProcessWorkComplete
				-- Version : 10011
				SELECT
						CL.AREAID
					,	CL.WAREHOUSEID
					,	(BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION)    		AS KEYCOLUMN
					,	CL.CONSUMABLEDEFID
					,	CL.CONSUMABLEDEFVERSION
					,	NVL(AMD.CONSUMABLEDEFNAME, CD.CONSUMABLEDEFNAME)	AS CONSUMABLEDEFNAME
					,	CML.MATERIALLOTID					AS CONSUMABLELOTID
					,	CL.CONSUMABLELOTQTY					AS STOCKQTY
					,	CL.CONSUMABLELOTQTY - (NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY)	AS AVAILABLEQTY
					,	LEAST(CL.CONSUMABLELOTQTY - (NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY), L.QTY * BOM.QTY, CML.CONSUMEDQTY)        	AS INPUTQTY
					,	LEAST(CL.CONSUMABLELOTQTY - (NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY), L.QTY * BOM.QTY, CML.CONSUMEDQTY)        	AS ORGINPUTQTY
					,	0           							AS DEFECTQTY
					,	NVL(T.CONSUMEDQTY, 0) - CML.CONSUMEDQTY	AS LOTUSINGQTY
					,	''               						AS CONSUMABLEDEFECT
					,	CL.CONSUMABLESTATE
				FROM	PCM_LOT								L
				INNER JOIN BAS_BILLOFMATERIAL				BOM	ON	L.ENTERPRISEID = BOM.ENTERPRISEID
																AND	L.PLANTID = BOM.PLANTID
																AND	L.SUBPROCESSDEFID = BOM.PROCESSDEFID
																AND	L.SUBPROCESSDEFVERSION = BOM.PROCESSDEFVERSION
																AND	L.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
																AND	L.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
																AND	BOM.MATERIALTYPE = #{MATERIALTYPE}
				INNER JOIN PCM_CONSUMEMATERIALLOT_TEMP		CML	ON	L.ENTERPRISEID = CML.ENTERPRISEID
																AND	L.PLANTID = CML.PLANTID
																AND	L.LOTID = CML.LOTID
																AND	L.PROCESSSEGMENTID = CML.PROCESSSEGMENTID
																AND	BOM.MATERIALDEFID = CML.MATERIALDEFID
																AND	CML.MATERIALTYPE = #{MATERIALTYPE}
				INNER JOIN MTM_CONSUMABLELOT					CL	ON	CML.ENTERPRISEID = CL.ENTERPRISEID
																AND	CML.PLANTID = CL.PLANTID
																AND	CML.WAREHOUSEID = CL.WAREHOUSEID
																AND	CML.MATERIALLOTID = CL.CONSUMABLELOTID
				LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION		CD	ON	BOM.ENTERPRISEID = CD.ENTERPRISEID
																AND	BOM.MATERIALDEFID = CD.CONSUMABLEDEFID
																AND CL.CONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION
				LEFT OUTER JOIN BAS_ALTERNATIVEMATERIAL		AM	ON	BOM.ENTERPRISEID = AM.ENTERPRISEID
																AND	BOM.PLANTID = AM.PLANTID
																AND	BOM.MATERIALDEFID = AM.ITEMID
																AND	CL.CONSUMABLEDEFID = AM.ALTERNATIVEITEMID
				LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION		AMD	ON	AM.ENTERPRISEID = AMD.ENTERPRISEID
																AND	AM.ALTERNATIVEITEMID = AMD.CONSUMABLEDEFID
				LEFT OUTER JOIN (
									SELECT
											T.ENTERPRISEID
										,	T.MATERIALLOTID
										,	T.WAREHOUSEID
										,	SUM(T.CONSUMEDQTY)			AS CONSUMEDQTY
									FROM	PCM_CONSUMEMATERIALLOT_TEMP	T
									WHERE	T.MATERIALTYPE = 'Consumable'
									GROUP BY T.ENTERPRISEID
											,T.MATERIALLOTID
											,T.WAREHOUSEID
								)							T	ON	CL.ENTERPRISEID = T.ENTERPRISEID
																AND	CL.CONSUMABLELOTID = T.MATERIALLOTID
																AND	CL.WAREHOUSEID = T.WAREHOUSEID
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
          	</when>	          	
          	<otherwise>
				
          	</otherwise>
	    </choose>		
    </select>
                      
   <!-- 공정 관리 > 4-Step 설 명 : 공정 4-Step 상세 정보 탭의 자재 BOM 기준 항목 리스트를 
		조회 한다.  -->
    <select id="selectStandardRequirementByProcess" parameterType="map" resultType="hashmap">
	    <choose>
          	<when test="VERSION.equals('10001') "> 
				--
				-- Id : SelectStandardRequirementByProcess
				-- Version : 10001
				SELECT
						BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION	AS KEYCOLUMN
			        ,   BOM.ALTITEM || '|' || BOM.ALTREVISION  AS KEYCOLUMN_ALT
					,	CD.CONSUMABLEDEFID
					,	CD.CONSUMABLEDEFVERSION
					,	CD.CONSUMABLEDEFNAME
					,	BOM.QTY                 			AS STANDARDREQUIREMENTQTY
					,	(L.QTY * BOM.QTY)             	AS REQUIREMENTQTY
				FROM	PCM_LOT						L
				INNER JOIN BAS_BILLOFMATERIAL		BOM	ON	L.ENTERPRISEID = BOM.ENTERPRISEID
														AND	L.PRODUCTDEFID = BOM.PRODUCTDEFID
														AND	L.PRODUCTDEFVERSION = BOM.PRODUCTDEFVERSION
														AND	L.PROCESSDEFID = BOM.PROCESSDEFID
														AND	L.PROCESSDEFVERSION = BOM.PROCESSDEFVERSION
														AND	L.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
														AND	L.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
														AND	BOM.WIPSUPPLYTYPE != 'OperationPull'
														AND  BOM.VALIDSTATE = 'Valid'
				INNER JOIN BAS_AREA					A	ON	L.AREAID = A.AREAID
														AND  NVL(A.ISSUBCONTRACT, 'N') = 'N'
				INNER JOIN BAS_CONSUMABLEDEFINITION	CD	ON	BOM.ENTERPRISEID = CD.ENTERPRISEID
														AND	BOM.MATERIALDEFID = CD.CONSUMABLEDEFID
														AND	BOM.MATERIALDEFVERSION = CD.CONSUMABLEDEFVERSION
														AND	CD.ISLOTMNG = 'Y'
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
				ORDER BY BOM."sequence" ASC
          	</when>
          	<when test="VERSION.equals('10011') "> 
				--
				-- Id : SelectStandardRequirementByProcess
				-- Version : 10011
				SELECT
						BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION	AS KEYCOLUMN
					,	CD.CONSUMABLEDEFID
					,	CD.CONSUMABLEDEFVERSION
					,	CD.CONSUMABLEDEFNAME
					,	BOM.QTY                 			AS STANDARDREQUIREMENTQTY
					,	(L.QTY * BOM.QTY)             	AS REQUIREMENTQTY
				FROM	PCM_LOT						L
				INNER JOIN BAS_BILLOFMATERIAL		BOM	ON	L.ENTERPRISEID = BOM.ENTERPRISEID
														AND	L.SUBPROCESSDEFID = BOM.PROCESSDEFID
														AND	L.SUBPROCESSDEFVERSION = BOM.PROCESSDEFVERSION
														AND	L.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
														AND	L.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
														AND	BOM.WIPSUPPLYTYPE != 'OperationPull'
														AND  BOM.VALIDSTATE = 'Valid'
				INNER JOIN BAS_AREA					A	ON	L.AREAID = A.AREAID
														AND  NVL(A.ISSUBCONTRACT, 'N') = 'N'
				INNER JOIN BAS_CONSUMABLEDEFINITION	CD	ON	BOM.ENTERPRISEID = CD.ENTERPRISEID
														AND	BOM.MATERIALDEFID = CD.CONSUMABLEDEFID
														AND	BOM.MATERIALDEFVERSION = CD.CONSUMABLEDEFVERSION
														AND	CD.ISLOTMNG = 'Y'
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}
				AND		L.PLANTID = #{PLANTID}
				AND		L.LOTID = #{LOTID}
				ORDER BY BOM."sequence" ASC
          	</when>	          	
          	<otherwise>
				
          	</otherwise>
	    </choose>		
    </select>
                           
   <!-- Process 4-Step Detail User Control에서 자재 LOT 정보를 조회 한다.  -->
    <select id="getConsumableLotByProcess" parameterType="map" resultType="hashmap">
	    <choose>
          	<when test="VERSION.equals('10001') ">
         	 
				--
				-- Id : GetConsumableLotByProcess
				-- Version : 10001

/*
--MHYi 2105071054 자재 테이블 변경
--데이터 검증 되면 삭제 해주세요 ============================================================				
*/				

SELECT   ARE.AREAID
          , ARE.WAREHOUSEID
          , BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION    AS KEYCOLUMN
                    ,   BOM.MATERIALDEFID                                            CONSUMABLEDEFID       
                    ,   BOM.MATERIALDEFVERSION                                       CONSUMABLEDEFVERSION 
          , CD.CONSUMABLEDEFNAME
          , CL.LOT_NUMBER
          , CL.LOT_NUMBER AS CONSUMABLELOTID					
		  , CL.LOT_NUMBER AS MATERIALLOTID
          , CL.ONHAND_QTY                                         AS STOCKQTY
          , (CL.ONHAND_QTY - NVL(T.CONSUMEDQTY, 0))               AS AVAILABLEQTY
          , (LEAST(L.QTY * BOM.QTY, GREATEST(CL.ONHAND_QTY - NVL(T.CONSUMEDQTY, 0), 0)))  AS INPUTQTY
          , (LEAST(L.QTY * BOM.QTY, GREATEST(CL.ONHAND_QTY - NVL(T.CONSUMEDQTY, 0), 0)))  AS ORGINPUTQTY
          , 0                       AS DEFECTQTY
          , NVL(T.CONSUMEDQTY, 0)           AS LOTUSINGQTY
          , ''                    AS CONSUMABLEDEFECT
          
                    , CASE WHEN CL.ONHAND_QTY = 0 THEN 'Consumed' ELSE '' END                            CONSUMABLESTATE
        FROM  PCM_LOT   L
        INNER JOIN BAS_AREA           ARE  ON ARE.ENTERPRISEID          = L.ENTERPRISEID 
                                                            AND ARE.PLANTID               = L.PLANTID
                                                            AND ARE.AREAID                = L.AREAID       
        INNER JOIN BAS_BILLOFMATERIAL     BOM  ON L.ENTERPRISEID            = BOM.ENTERPRISEID
                              AND L.PLANTID                 = BOM.PLANTID
                              AND L.PRODUCTDEFID            = BOM.PRODUCTDEFID
                              AND L.PRODUCTDEFVERSION       = BOM.PRODUCTDEFVERSION
                              AND L.PROCESSDEFID            = BOM.PROCESSDEFID
                              AND L.PROCESSDEFVERSION       = BOM.PROCESSDEFVERSION
                              AND L.PROCESSSEGMENTID        = BOM.PROCESSSEGMENTID
                              AND L.PROCESSSEGMENTVERSION   = BOM.PROCESSSEGMENTVERSION
                              AND BOM.WIPSUPPLYTYPE != 'OperationPull'
        INNER JOIN IFC_MES_S_ONHAND_V@ERPPROD CL   
                               ON CL.ENTERPRISEID          = BOM.ENTERPRISEID
                              AND CL.PLANTID               = BOM.PLANTID 
                              AND CL.SUBINVENTORY_CODE     = ARE.WAREHOUSEID
                              AND CL.ITEM_CODE             = DECODE(SUBSTR(CL.ITEM_CODE, 1, 1), '2', BOM.MATERIALDEFID || BOM.MATERIALDEFVERSION
                                                            , BOM.MATERIALDEFID ) 
       INNER JOIN BAS_CONSUMABLEDEFINITION CD  
                ON CD.ENTERPRISEID           = CL.ENTERPRISEID
               AND CD.PLANTID                = CL.PLANTID
               AND CL.ITEM_CODE             = DECODE(SUBSTR(CL.ITEM_CODE, 1, 1), '2', CD.CONSUMABLEDEFID || CD.CONSUMABLEDEFVERSION, CD.CONSUMABLEDEFID)  
                                                                                                                                        
       LEFT OUTER JOIN BAS_ALTERNATIVEMATERIAL    AM   ON BOM.ENTERPRISEID          = AM.ENTERPRISEID
                              AND BOM.PLANTID               = AM.PLANTID
                              AND BOM.MATERIALDEFID         = AM.ITEMID

LEFT   OUTER JOIN (SELECT MATERIALDEFID
                         ,MATERIALDEFVERSION
                         ,MATERIALLOTID
                         ,SUM(CONSUMEDQTY) AS CONSUMEDQTY
                         ,WAREHOUSEID
                         ,ENTERPRISEID
                         ,PLANTID
                   FROM   MTM_CONSUMEMATERIALLOT_V T2
                   GROUP  BY MATERIALDEFID
                            ,MATERIALDEFVERSION
                            ,MATERIALLOTID
                            ,WAREHOUSEID
                            ,ENTERPRISEID
                            ,PLANTID) T
ON     CL.ENTERPRISEID = T.ENTERPRISEID
AND    CL.PLANTID = T.PLANTID
AND    CL.LOT_NUMBER = T.MATERIALLOTID
AND    CL.SUBINVENTORY_CODE = T.WAREHOUSEID
                              
        WHERE 1 = 1
				AND		L.ENTERPRISEID      = #{ENTERPRISEID}
				AND		L.PLANTID           = #{PLANTID}
				AND		L.LOTID             = #{LOTID}
				AND		CL.LOT_NUMBER       = #{CONSUMABLELOTID}
				
UNION ALL

SELECT   ARE.AREAID
          , ARE.WAREHOUSEID
          , BOM.ALTITEM || '|' || BOM.ALTREVISION    AS KEYCOLUMN
                    ,   BOM.ALTITEM                                            CONSUMABLEDEFID       
                    ,   BOM.ALTREVISION                                       CONSUMABLEDEFVERSION 
          , CD.CONSUMABLEDEFNAME
          , CL.LOT_NUMBER
          , CL.LOT_NUMBER AS CONSUMABLELOTID					
		  , CL.LOT_NUMBER AS MATERIALLOTID
          , CL.ONHAND_QTY                                         AS STOCKQTY
          , (CL.ONHAND_QTY - NVL(T.CONSUMEDQTY, 0))               AS AVAILABLEQTY
          , (LEAST(L.QTY * BOM.QTY, GREATEST(CL.ONHAND_QTY - NVL(T.CONSUMEDQTY, 0), 0)))  AS INPUTQTY
          , (LEAST(L.QTY * BOM.QTY, GREATEST(CL.ONHAND_QTY - NVL(T.CONSUMEDQTY, 0), 0)))  AS ORGINPUTQTY
          , 0                       AS DEFECTQTY
          , NVL(T.CONSUMEDQTY, 0)           AS LOTUSINGQTY
          , ''                    AS CONSUMABLEDEFECT
          
                    , CASE WHEN CL.ONHAND_QTY = 0 THEN 'Consumed' ELSE '' END                            CONSUMABLESTATE
        FROM  PCM_LOT   L
        INNER JOIN BAS_AREA           ARE  ON ARE.ENTERPRISEID          = L.ENTERPRISEID 
                                                            AND ARE.PLANTID               = L.PLANTID
                                                            AND ARE.AREAID                = L.AREAID       
        INNER JOIN BAS_BILLOFMATERIAL     BOM  ON L.ENTERPRISEID            = BOM.ENTERPRISEID
                              AND L.PLANTID                 = BOM.PLANTID
                              AND L.PRODUCTDEFID            = BOM.PRODUCTDEFID
                              AND L.PRODUCTDEFVERSION       = BOM.PRODUCTDEFVERSION
                              AND L.PROCESSDEFID            = BOM.PROCESSDEFID
                              AND L.PROCESSDEFVERSION       = BOM.PROCESSDEFVERSION
                              AND L.PROCESSSEGMENTID        = BOM.PROCESSSEGMENTID
                              AND L.PROCESSSEGMENTVERSION   = BOM.PROCESSSEGMENTVERSION
                              AND BOM.WIPSUPPLYTYPE != 'OperationPull'
        INNER JOIN IFC_MES_S_ONHAND_V@ERPPROD CL   
                               ON CL.ENTERPRISEID          = BOM.ENTERPRISEID
                              AND CL.PLANTID               = BOM.PLANTID 
                              AND CL.SUBINVENTORY_CODE     = ARE.WAREHOUSEID
                              AND CL.ITEM_CODE             = DECODE(SUBSTR(CL.ITEM_CODE, 1, 1), '2', BOM.ALTITEM || BOM.ALTREVISION
                                                            , BOM.ALTITEM ) 
       INNER JOIN BAS_CONSUMABLEDEFINITION CD  
                ON CD.ENTERPRISEID           = CL.ENTERPRISEID
               AND CD.PLANTID                = CL.PLANTID
               AND CL.ITEM_CODE             = DECODE(SUBSTR(CL.ITEM_CODE, 1, 1), '2', CD.CONSUMABLEDEFID || CD.CONSUMABLEDEFVERSION, CD.CONSUMABLEDEFID)  
                                                                                                                                        
       LEFT OUTER JOIN BAS_ALTERNATIVEMATERIAL    AM   ON BOM.ENTERPRISEID          = AM.ENTERPRISEID
                              AND BOM.PLANTID               = AM.PLANTID
                              AND BOM.ALTITEM         = AM.ITEMID

LEFT   OUTER JOIN (SELECT MATERIALDEFID
                         ,MATERIALDEFVERSION
                         ,MATERIALLOTID
                         ,SUM(CONSUMEDQTY) AS CONSUMEDQTY
                         ,WAREHOUSEID
                         ,ENTERPRISEID
                         ,PLANTID
                   FROM   MTM_CONSUMEMATERIALLOT_V T2
                   GROUP  BY MATERIALDEFID
                            ,MATERIALDEFVERSION
                            ,MATERIALLOTID
                            ,WAREHOUSEID
                            ,ENTERPRISEID
                            ,PLANTID) T
ON     CL.ENTERPRISEID = T.ENTERPRISEID
AND    CL.PLANTID = T.PLANTID
AND    CL.LOT_NUMBER = T.MATERIALLOTID
AND    CL.SUBINVENTORY_CODE = T.WAREHOUSEID
                              
        WHERE 1 = 1
				AND		L.ENTERPRISEID      = #{ENTERPRISEID}
				AND		L.PLANTID           = #{PLANTID}
				AND		L.LOTID             = #{LOTID}
				AND		CL.LOT_NUMBER       = #{CONSUMABLELOTID}

          	</when>
          	<when test="VERSION.equals('10011') "> 
				--
				-- Id : GetConsumableLotByProcess
				-- Version : 10011
				SELECT
						CL.AREAID
					,	CL.WAREHOUSEID
					,	(BOM.MATERIALDEFID || '|' || BOM.MATERIALDEFVERSION)     	AS KEYCOLUMN
					,	CL.CONSUMABLEDEFID
					,	CL.CONSUMABLEDEFVERSION
					,	CD.CONSUMABLEDEFNAME
					,	CL.CONSUMABLELOTID
					,	CL.CONSUMABLELOTQTY				AS STOCKQTY
					,	CL.CONSUMABLELOTQTY - NVL(T.CONSUMEDQTY, 0)	AS AVAILABLEQTY
					,	LEAST(L.QTY * BOM.QTY, GREATEST(CL.CONSUMABLELOTQTY - NVL(T.CONSUMEDQTY, 0), 0))	    AS INPUTQTY
					,	LEAST(L.QTY * BOM.QTY, GREATEST(CL.CONSUMABLELOTQTY - NVL(T.CONSUMEDQTY, 0), 0))  	AS ORGINPUTQTY
					,	0									AS DEFECTQTY
					,	NVL(T.CONSUMEDQTY, 0)		AS LOTUSINGQTY
					,	''           						AS CONSUMABLEDEFECT
					,	CL.CONSUMABLESTATE
				FROM	PCM_LOT							L
				INNER JOIN BAS_AREA						A	ON	L.AREAID = A.AREAID
				INNER JOIN BAS_BILLOFMATERIAL			BOM	ON	L.ENTERPRISEID = BOM.ENTERPRISEID
															AND	L.SUBPROCESSDEFID = BOM.PROCESSDEFID
															AND	L.SUBPROCESSDEFVERSION = BOM.PROCESSDEFVERSION
															AND	L.PROCESSSEGMENTID = BOM.PROCESSSEGMENTID
															AND	L.PROCESSSEGMENTVERSION = BOM.PROCESSSEGMENTVERSION
				INNER JOIN MTM_CONSUMABLELOT				CL	ON	L.ENTERPRISEID = CL.ENTERPRISEID
															AND	A.WAREHOUSEID = CL.WAREHOUSEID
															AND	BOM.MATERIALDEFID = CL.CONSUMABLEDEFID
															AND	BOM.MATERIALDEFVERSION = CL.CONSUMABLEDEFVERSION
				LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION	CD	ON	CL.ENTERPRISEID = CD.ENTERPRISEID
															AND	CL.CONSUMABLEDEFID = CD.CONSUMABLEDEFID
															AND	CL.CONSUMABLEDEFVERSION = CD.CONSUMABLEDEFVERSION
				LEFT OUTER JOIN (
									SELECT
											T.ENTERPRISEID
										,	T.MATERIALLOTID
										,	T.WAREHOUSEID
										,	SUM(T.CONSUMEDQTY)			AS CONSUMEDQTY
									FROM	PCM_CONSUMEMATERIALLOT_TEMP	T
									WHERE	T.MATERIALTYPE = 'Consumable'
									GROUP BY T.ENTERPRISEID
											,T.MATERIALLOTID
											,T.WAREHOUSEID
								)						T	ON	CL.ENTERPRISEID = T.ENTERPRISEID
															AND	CL.CONSUMABLELOTID = T.MATERIALLOTID
															AND	CL.WAREHOUSEID = T.WAREHOUSEID
				WHERE	1 = 1
				AND		L.ENTERPRISEID = #{ENTERPRISEID}	
				AND		L.PLANTID = #{PLANTID}	
				AND		L.LOTID = #{LOTID}	
				AND		CL.CONSUMABLELOTID = #{CONSUMABLELOTID}				
          	</when>	          	
          	<otherwise>
				
          	</otherwise>
	    </choose>		
    </select>
                       
                                                                         
</mapper>
