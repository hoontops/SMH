<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM00600Dao">
	
	<!-- LOT CARD 출력 -->
	<select id="selectPrintLotCardList" parameterType="map" resultType="hashmap">
		SELECT 
			 X.WORKTYPE
			,X.PLANTID                                                                        -- Site ID
			,DECODE(SD1.DICTIONARYNAME, NULL, X.WORKTYPE, SD1.DICTIONARYNAME) AS WORKTYPENAME -- 작업구분
			,X.PRODUCTDEFID                                                                   -- 품목코드
			,X.PRODUCTDEFVERSION                                                              -- Rev.
			,X.PRODUCTDEFNAME                                                                 -- 품목명
			,X.AREANAME
			,X.LOTID                                                                          -- Lot No
			,X.USERSEQUENCE                                                                   -- 공정수순
			,X.PROCESSSEGMENTNAME                                                             -- 작업장
			,X.UOM                                                                            -- UOM
			-- ,X.PNL
			,TO_CHAR(X.PNL, 'FM999999')  AS PNL                                               -- PNL
			--,X.PCS                                                                          -- PCS
			,TO_CHAR(X.PCS, 'FM999999')  AS PCS                                               -- PNL
			-- ,X.MM                                                                          -- MM
			,TO_CHAR(X.MM, 'FM9990.00')  AS MM                                                -- PNL
			,X.INPUTDATE                                                                      -- 투입일자
			,X.PRODUCTIONORDERID                                                              -- S/O번호
			,X.LOTCARDTYPE
			,X.LOTTYPE
		FROM
			(SELECT	
				 DECODE(SD.DICTIONARYNAME, NULL, AR.AREANAME, SD.DICTIONARYNAME) AS AREANAME
			    ,CASE 
					WHEN L.LOTCREATEDTYPE = 'Return'                                 THEN 'Return'
					WHEN DECODE(L.SUBPROCESSDEFID, NULL, ' ', L.SUBPROCESSDEFID) = ' ' THEN 'Normal'
					ELSE 'Rework'
				END AS LOTCARDTYPE
			    ,CASE 
			    	WHEN DECODE(L.SUBPROCESSDEFID, NULL, ' ', L.SUBPROCESSDEFID) = ' ' THEN L.ROOTLOTSTARTDATE
			        ELSE RWT.CREATEDTIME
			    END AS SEARCHDATE   					         
			    ,L.PLANTID     
				,L.PRODUCTDEFID
				,L.PRODUCTDEFVERSION
				,PD.PRODUCTDEFNAME
				,L.LOTID
				,L.USERSEQUENCE
				,DECODE(DC1.DICTIONARYNAME, NULL, L.PROCESSSEGMENTID, DC1.DICTIONARYNAME) AS PROCESSSEGMENTNAME
				,L.UNIT								AS UOM
				,L.PANELQTY							AS PNL
				,L.QTY								AS PCS
				,CASE 
					WHEN PD.PCSMM = 0 THEN NULL 
					ELSE (L.QTY / PD.PCSMM)  
				END MM
				,TO_CHAR(L.STARTEDDATE, 'YYYY-MM-DD HH24:MI:SS')                   AS INPUTDATE
				,DECODE(DC.DICTIONARYNAME, NULL, C.LOOKUP_CODE, DC.DICTIONARYNAME) AS LOTCREATETYPE
				,L.PRODUCTIONORDERID
			    , CASE 
					WHEN L.LOTCREATEDTYPE = 'Return' THEN 'Return'
					WHEN L.LOTCREATEDTYPE = 'Repair' THEN 'MRB'
					WHEN L.LOTCREATEDTYPE = 'Claim'  THEN 'Claim'
					ELSE 
						CASE 
							WHEN L.ISREWORK = 'Y' OR L.WORKCOUNT <![CDATA[>]]> 0 THEN 'IsRework' 
			            ELSE 'Normal'
					END
				END AS WORKTYPE,
				L.LOTTYPE							
			FROM	
				PCM_LOT L
				INNER JOIN BAS_PROCESSSEGMENT		  P ON L.PROCESSSEGMENTID                     = P.PROCESSSEGMENTID         AND L.PROCESSSEGMENTVERSION = P.PROCESSSEGMENTVERSION
				INNER JOIN BAS_PROCESSPATH		     PP ON SPLIT_PART(L.PROCESSPATHSTACK, '.', 1) = PP.PROCESSPATHID
				LEFT  JOIN BAS_PROCESSSEGMENTCLASS PSC2 ON P.PROCESSSEGMENTCLASSID                = PSC2.PROCESSSEGMENTCLASSID AND PSC2.PROCESSSEGMENTCLASSTYPE = 'MiddleProcessSegmentClass'
				LEFT  JOIN BAS_PROCESSSEGMENTCLASS  PSC ON PSC2.PARENTPROCESSSEGMENTCLASSID       = PSC.PROCESSSEGMENTCLASSID  AND PSC.PROCESSSEGMENTCLASSTYPE  = 'TopProcessSegmentClass'
				LEFT  JOIN BAS_AREA				     AR ON L.AREAID                               = AR.AREAID                  AND AR.AREATYPE                  = 'Area'
				LEFT  JOIN CMD_DICTIONARY            SD ON AR.AREANAME                            = SD.DICTIONARYID            AND SD.LANGUAGETYPE              = #{P_LANGUAGETYPE}														
				INNER JOIN BAS_PRODUCTDEFINITION	 PD ON L.PRODUCTDEFID                         = PD.PRODUCTDEFID            AND L.PRODUCTDEFVERSION          = PD.PRODUCTDEFVERSION
				LEFT  JOIN CMD_LOOKUP_VALUES		  C ON L.LOTCREATEDTYPE                       = C.LOOKUP_CODE              AND C.LOOKUP_TYPE                = 'LotCreateType'
				LEFT  JOIN CMD_DICTIONARY		     DC ON C.DICTIONARYID                         = DC.DICTIONARYID            AND DC.LANGUAGETYPE              = #{P_LANGUAGETYPE}
				LEFT  JOIN CMD_DICTIONARY           DC1 ON P.PROCESSSEGMENTNAME                   = DC1.DICTIONARYID           AND DC1.LANGUAGETYPE             = #{P_LANGUAGETYPE}
				LEFT  JOIN PCM_REWORKRETURN         RWT ON L.LOTID = RWT.LOTID
			<if test="P_LOTID != null and P_LOTID != ''">
				INNER JOIN UFN_SELECTSTRINGTOSPLIT(#{P_LOTID}, ',')	MAP ON L.LOTID = MAP.VALUE
			</if>
			<if test="P_USER != null and P_USER != ''">	
				INNER JOIN FN_AREA(#{P_USER}) FA ON L.AREAID = FA.AREAID
			</if>	
			<if test="P_PRODUCTDEFID != null and P_PRODUCTDEFID != ''">	
				INNER JOIN UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFID},        ',') T ON L.PRODUCTDEFID      = T.VALUE
			</if>	
			<if test="P_PRODUCTDEFVERSION_T != null and P_PRODUCTDEFVERSION_T != ''">	
				INNER JOIN UFN_SELECTSTRINGTOSPLIT(#{P_PRODUCTDEFVERSION_T}, ',') T ON L.PRODUCTDEFVERSION = T.VALUE
			</if>
			WHERE
				DECODE(L.ISDEFECTED, NULL, 'N', L.ISDEFECTED) = 'N'
			<choose>
				<when test="P_WIPSTATE != null and P_WIPSTATE != ''">
					<choose>
						<when test="P_WIPSTATE == 'Finished'">
							AND L.LOTSTATE = #{P_WIPSTATE}
						</when>
						<when test="P_WIPSTATE == 'InProduction'">
							AND	L.LOTSTATE IN ('InProduction', 'InTransit')
						</when>
						<otherwise></otherwise>
					</choose>
				</when>
				<otherwise>
					AND	L.LOTSTATE <![CDATA[<>]]> 'Terminated'	
				</otherwise>
			</choose>
			<if test="P_PLANTID != null and P_PLANTID != ''">
				AND L.PLANTID = #{P_PLANTID}
			</if>	
			<if test="P_PRODUCTIONORDERID != null and P_PRODUCTIONORDERID != ''">
				AND L.PRODUCTIONORDERID = #{P_PRODUCTIONORDERID}
			</if>
			<if test="P_PRODUCTDEFTYPE != null and P_PRODUCTDEFTYPE != ''">
				AND	PD.PRODUCTDEFTYPE = #{P_PRODUCTDEFTYPE}
			</if>	
			<if test="P_AREAID != null and P_AREAID != ''">
				AND	L.AREAID = #{P_AREAID}
			</if>	
			<if test="P_LOTTYPE != null and P_LOTTYPE != ''">
				AND	L.LOTTYPE = #{P_LOTTYPE}
			</if>
			<if test="P_PRODUCTIONTYPE != null and P_PRODUCTIONTYPE != ''">
				AND	L.LOTTYPE = #{P_PRODUCTIONTYPE}
			</if>
			<if test="P_PRODUCTDEFVERSION != null and P_PRODUCTDEFVERSION != ''">
				AND	L.PRODUCTDEFVERSION = #{P_PRODUCTDEFVERSION}
			</if>
			) X
			LEFT JOIN CMD_LOOKUP_VALUES SC1 ON X.WORKTYPE        = SC1.LOOKUP_CODE  AND SC1.LOOKUP_TYPE  = 'LotWorkType'
			LEFT JOIN CMD_DICTIONARY    SD1 ON  SC1.DICTIONARYID = SD1.DICTIONARYID AND SD1.LANGUAGETYPE = #{P_LANGUAGETYPE}
		<trim prefix="WHERE" prefixOverrides="AND|OR">	
			<if test="(P_INPUTDATE_S != null and P_INPUTDATE_S != '') and (P_INPUTDATE_E != null and P_INPUTDATE_E != '')">
				AND X.SEARCHDATE BETWEEN TO_TIMESTAMP(#{P_INPUTDATE_S}, 'YYYY-MM-DD HH24:MI:SS') AND TO_TIMESTAMP(#{P_INPUTDATE_E}, 'YYYY-MM-DD HH24:MI:SS')
			</if>
			<if test="P_WORKTYPE != null and P_WORKTYPE != ''">
				AND X.WORKTYPE = #{P_WORKTYPE}
			</if>
		</trim>
	</select>
	
	<select id="selectLotInfoOnPrintLotCard" parameterType="map" resultType="hashmap">
		WITH LOT AS 
		(
			SELECT 
				L.*
			FROM  
				           PCM_LOT                                    L
				INNER JOIN UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',') T ON L.LOTID  = T.VALUE
		),				
		CONSUMABLELIST AS
		(
			SELECT  
				 X.LOTID
				,LISTAGG((X.MATERIALDEFID || '|' || X.MATERIALDEFVERSION), ',') WITHIN GROUP (ORDER BY X.LOTID) AS CONSUMABLEIDVERSION	
			FROM
				(SELECT
					 L.LOTID
					,BF.MATERIALDEFID
					,BF.MATERIALDEFVERSION
					,ROW_NUMBER() OVER(PARTITION BY L.LOTID ORDER BY CASE WHEN BF.ISREQUIRED = 'Y' THEN 1 ELSE 100 END, BF."sequence", BF.MATERIALDEFID) RN
				FROM	
					           LOT                 L
					INNER JOIN PCM_LOT			  RL ON	 L.PLANTID       = RL.PLANTID      AND L.ROOTLOTID          = RL.LOTID
					INNER JOIN BAS_PROCESSPATH	  PP ON	 RL.PROCESSDEFID = PP.PROCESSDEFID AND RL.PROCESSDEFVERSION = PP.PROCESSDEFVERSION AND PP.PATHSEQUENCE      = 1
					INNER JOIN BAS_BILLOFMATERIAL BF ON	 RL.PLANTID      = BF.PLANTID      AND RL.PRODUCTDEFID      = BF.PRODUCTDEFID      AND RL.PRODUCTDEFVERSION = BF.PRODUCTDEFVERSION 
				                                     AND RL.PROCESSDEFID = BF.PROCESSDEFID AND RL.PROCESSDEFVERSION = BF.PROCESSDEFVERSION AND PP.PROCESSSEGMENTID  = BF.PROCESSSEGMENTID  
				                                     AND BF.MATERIALTYPE = 'Consumable'    AND BF.WIPSUPPLYTYPE     = 'Push'
					INNER JOIN UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',') T  ON L.LOTID = T.VALUE																
				) X
			WHERE 
				RN <![CDATA[<]]> 3
			GROUP BY X.LOTID
		)
		SELECT DISTINCT
			 PTD.DICTIONARYNAME	AS PRODUCTIONTYPE
			,PD.PRODUCTDEFNAME
			,L.LOTID
			,L.LOTID            AS LOTIDWITHMKLOTID
			,   '[' 														-- 시작 괄호
			 ||	'E' 														-- 버전
			 || ',' 														-- 구분									
			 || CASE 
					WHEN L.PRODUCTDEFVERSION = '*' THEN SUBSTR(REPLACE(L.PRODUCTDEFID, '-', ''), 9)
					ELSE SUBSTR(REPLACE(L.PRODUCTDEFID, '-', '')         || L.PRODUCTDEFVERSION, 9)
			    END 														-- 품목코드
			 ||	',' 														-- 구분													
			 ||	CASE 
					WHEN PS.QRDIVISION IN ('SDD', '1') THEN 'D'
					WHEN PS.QRDIVISION IN ('SDT', '2') THEN 'T'
					WHEN PS.QRDIVISION IN ('SDC', '3') THEN 'C'
					WHEN PS.QRDIVISION IN ('SDV', '4') THEN 'V'
					ELSE NULL
				END															-- QR 사업부 정보
			  || PS.CUSTOMERITEMNAME                                        -- 고객품번
			  || TO_CHAR(L.LOTSTARTDATE, 'YYYY')                            -- 생산년
			  || DECODE(TO_CHAR(L.LOTSTARTDATE, 'MM'), NULL, '', FN_BASE32_CHAR(TO_NUMBER(TO_CHAR(L.LOTSTARTDATE, 'MM')), 1)) 	    	-- 생산월
			  || DECODE(TO_CHAR(L.LOTSTARTDATE, 'DD'), NULL, '', FN_BASE32_CHAR(TO_NUMBER(TO_CHAR(L.LOTSTARTDATE, 'DD')), 1)) 	    	-- 생산일
			  || CASE WHEN PS.QRSUBDIVISION IN ('Main', 'A') THEN 'M'
					 WHEN PS.QRSUBDIVISION IN ('TSP',  'B') THEN 'T'
					 WHEN PS.QRSUBDIVISION IN ('DGT',  'C') THEN 'D'
					 ELSE NULL
				END 														-- QR 사업부 Sub
			  || 'Y' 														-- YP
			  || CASE 
					WHEN L1.DESCRIPTION = 'MIG' OR L.DESCRIPTION = 'MIG' THEN REPLACE(L1.LOTNAME, '-', '')
				    ELSE SUBSTR (L.LOTID, 9, 2) || SUBSTR (L.LOTID, 19, 3) || SUBSTR(L.LOTID, -1)
				END 														-- Lot No.
			  || ',' 														-- 구분
			  || '0001' 													-- 시작번호
			  || ',' 														-- 구분
			  || FN_BASE32_CHAR(L.QTY, 4) 								 	-- 최종번호
			  || ',' 														-- 구분
			  || CASE 
					WHEN L.LOTTYPE = 'Production' THEN 'M'
				    WHEN L.LOTTYPE = 'Sample'     THEN 'S'
				    ELSE NULL
				END 														-- Lot Type
			  || PS.QRMATERIALVERSION 										-- QR 자재 Rev.
			  || ',' 														-- 구분
			  || '26' 														-- 자리수
			  || ']' AS CUSTOMERQR											-- 종료 괄호 
			,E.ENTERPRISEID								 AS ENTERPRISENAME
			,TO_CHAR(L.LOTSTARTDATE, 'YYYY-MM-DD')		 AS LOTSTARTDATE
			,TO_CHAR(L.DUEDATE,      'YYYY-MM-DD')		 AS DUEDATE
			,L.PRODUCTDEFID
			,PO.PLANQTY
			,DECODE(LCN.DICTIONARYNAME, NULL, PD.LAYER, LCN.DICTIONARYNAME) AS LAYER
			,PD.PRODUCTDEFVERSION
			,PD.PRODUCTDEFID || PD.PRODUCTDEFVERSION	 		 AS PRODUCTDEFIDVERSION
			,PD.PNLSIZEXAXIS || ' × ' || PD.PNLSIZEYAXIS 		 AS PANELSIZE
			,PD.PCSPNL								 	 		 AS ARRAY
			,PO.CUSTOMERID
			,PS.PRODUCTRATING
			,PD.PCSARY								 	 		 AS ARRAYPANEL
			,PD.PCSMM								 	 		 AS PCSMM
			,L.ROOTLOTID
			,L.QTY									 	 		 AS QTY
			,L.PANELQTY							 	     		 AS PANELQTY
			,DECODE(PD.PCSMM, 0, 0, NULL, 0, (L.QTY / PD.PCSMM)) AS PCSSIZE	             
			,RM1.CONSUMABLEDEFNAME						 		 AS MATERIALDEFNAME1
			,RM2.CONSUMABLEDEFNAME						 		 AS MATERIALDEFNAME2
			,L.SUBPROCESSDEFID
			,SPD.PROCESSDEFNAME
			,DECODE(SU.USER_NM, NULL, SPD.CREATOR, SU.USER_NM) 	 AS OWNER	
			,CASE 
				WHEN CR.LOTID IS NULL THEN 'N'
			    ELSE 'Y'
			 END										 AS ISRCLOT
			,CASE 
				WHEN L.LOTCREATEDTYPE = 'Return' THEN L.DESCRIPTION
				ELSE PIC.CHANGENOTE1
			 END                                         AS DESCRIPTION
			,DECODE(SO.FORAPPROVAL,        NULL, 'N',        SO.FORAPPROVAL) AS FORAPPROVAL
			,DECODE(SO.FORFIRSTPRODUCTION, NULL,  '', SO.FORFIRSTPRODUCTION) AS FORFIRSTPRODUCTION	
			,CASE 
				WHEN DECODE(SO.SPECCHANGEFLAG, NULL, '', SO.SPECCHANGEFLAG) = 'Y' THEN TO_CHAR(SPECCHANGETIME, 'YYYY/MM/DD')
				ELSE ''
			 END AS SPECCHANGETIME
			,SO.ERPSALESORDERNO	
			,CASE 
				WHEN L.ISREWORK = 'Y' OR L.WORKCOUNT > 0 THEN 'Y'
				ELSE 'N'
			 END										 AS ISREWORK
			,CASE 
				WHEN DECODE(SPD.PROCESSCLASSID, NULL, '', SPD.PROCESSCLASSID) = 'Process-MRB' THEN 'Y' 
				ELSE 'N'
			 END										 AS ISMRB
		FROM	
			                LOT	                         L
			INNER      JOIN PCM_LOT                     L1 ON L.PARENTLOTID        = L1.LOTID
			LEFT OUTER JOIN BAS_PRODUCTDEFINITION	    PD ON L.PRODUCTDEFID       = PD.PRODUCTDEFID  AND L.PRODUCTDEFVERSION    = PD.PRODUCTDEFVERSION
			LEFT OUTER JOIN BAS_PRODUCTITEMSPECCOMMENT PIC ON PD.PRODUCTDEFID      = PIC.ITEMID       AND PD.PRODUCTDEFVERSION   = PIC.ITEMVERSION
			LEFT OUTER JOIN CMD_LOOKUP_VALUES          PTC ON PD.PRODUCTIONTYPE    = PTC.LOOKUP_CODE  AND PTC.LOOKUP_TYPE        = 'ProductionType' 
			LEFT OUTER JOIN CMD_DICTIONARY			   PTD ON PTC.DICTIONARYID     = PTD.DICTIONARYID AND PTD.LANGUAGETYPE       = #{P_LANGUAGETYPE}
			LEFT OUTER JOIN CMD_LOOKUP_VALUES		    LC ON PD.LAYER             = LC.LOOKUP_CODE   AND LC.LOOKUP_TYPE         = 'Layer'
			LEFT OUTER JOIN CMD_DICTIONARY			   LCN ON LC.DICTIONARYID      = LCN.DICTIONARYID AND LCN.LANGUAGETYPE       = #{P_LANGUAGETYPE}
			LEFT OUTER JOIN BAS_ENTERPRISE				 E ON L.ENTERPRISEID       = E.ENTERPRISEID		 
			LEFT OUTER JOIN MFM_PRODUCTIONORDER		    PO ON L.PLANTID            = PO.PLANTID       AND L.PRODUCTIONORDERID    = PO.PRODUCTIONORDERID  AND	L.LINENO = PO.LINENO
			LEFT OUTER JOIN BAS_SALEORDERAPPROVAL       SO ON PO.PRODUCTIONORDERID = SO.SALESORDERID  AND PO.LINENO              = SO.LINENO	
			LEFT OUTER JOIN BAS_PRODUCTITEMSPEC		    PS ON L.PRODUCTDEFID       = PS.ITEMID        AND L.PRODUCTDEFVERSION    = PS.ITEMVERSION
			LEFT OUTER JOIN CONSUMABLELIST			    CL ON L.LOTID              = CL.LOTID
			LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION   RM1 ON SPLIT_PART(SPLIT_PART(CL.CONSUMABLEIDVERSION, ',', 1), '|', 1)     = RM1.CONSUMABLEDEFID   AND	SPLIT_PART(SPLIT_PART(CL.CONSUMABLEIDVERSION, ',', 1), '|', 2) = RM1.CONSUMABLEDEFVERSION
			LEFT OUTER JOIN BAS_CONSUMABLEDEFINITION   RM2 ON SPLIT_PART(SPLIT_PART(CL.CONSUMABLEIDVERSION, ',', 2), '|', 1)     = RM2.CONSUMABLEDEFID   AND	SPLIT_PART(SPLIT_PART(CL.CONSUMABLEIDVERSION, ',', 2), '|', 2) = RM2.CONSUMABLEDEFVERSION
			LEFT OUTER JOIN BAS_PROCESSDEFINITION	   SPD ON L.SUBPROCESSDEFID    = SPD.PROCESSDEFID AND L.SUBPROCESSDEFVERSION = SPD.PROCESSDEFVERSION AND	SPD.PROCESSDEFTYPE  = 'Rework'
			LEFT OUTER JOIN CMD_USERS					SU ON SPD.CREATOR          = SU.USER_ID
			LEFT OUTER JOIN PCM_RUNNINGCHANGEINFO	    CR ON L.LOTID              = CR.LOTID         AND L.PRODUCTDEFID         = CR.TOPRODUCTDEFID     AND	L.PRODUCTDEFVERSION = CR.TOPRODUCTDEFVERSION
			LEFT OUTER JOIN PCM_RETURNLOT			    RL ON L.LOTID              = RL.LOTID
		WHERE
			EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',')	T WHERE	L.LOTID = T.VALUE)
		ORDER BY L.LOTID	
	</select>
	
	<select id="selectProcessResultAndRoutingForLotCardNormal" parameterType="map" resultType="hashmap">
		WITH CONTINUOUS 
		(   
			 PLANTID
            ,PRODUCTDEFID
            ,PRODUCTDEFVERSION
            ,MATERIALDEFID
            ,MATERIALDEFVERSION
            ,MATERIALDEFNAME
            ,PROCESSDEFID
            ,PROCESSDEFVERSION
            ,PROCESSSEGMENTID
            ,RTRSHT
            ,QTY
            ,JOINTQTY     
            ,UNIT  
            ,ACTUALINPUTLOSS
            ,PUREORDERLOSS      
            ,SEQUENCET 
        ) AS (
			SELECT
				 PD.PLANTID
				,PD.PRODUCTDEFID
				,PD.PRODUCTDEFVERSION
				,PD.PRODUCTDEFID		AS MATERIALDEFID
				,PD.PRODUCTDEFVERSION	AS MATERIALDEFVERSION
				,PD.PRODUCTDEFNAME		AS MATERIALDEFNAME
				,PD.PROCESSDEFID
				,PD.PROCESSDEFVERSION
				,L.PROCESSSEGMENTID
				,PD.RTRSHT
				,0				AS QTY
				,1				AS JOINTQTY
				,PD.UNIT
				,0				AS ACTUALINPUTLOSS
				,0				AS PUREORDERLOSS
				,0				AS SEQUENCET
			FROM	
				           PCM_LOT				  L
				INNER JOIN MFM_PRODUCTIONORDER	 PO ON L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID AND L.LINENO             = PO.LINENO
				INNER JOIN BAS_PRODUCTDEFINITION PD ON PO.PRODUCTDEFID     = PD.PRODUCTDEFID      AND PO.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
			WHERE
				EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',') T WHERE L.LOTID = T.VALUE)
		) 
		,BILLOFMATERIAL AS	
		(
			SELECT
				*
			FROM
				CONTINUOUS
			UNION ALL	
			SELECT
				 P.PLANTID
				,BOM.PRODUCTDEFID
				,BOM.PRODUCTDEFVERSION
				,BOM.MATERIALDEFID
				,BOM.MATERIALDEFVERSION
				,PD.PRODUCTDEFNAME		AS MATERIALDEFNAME
				,PD.PROCESSDEFID
				,PD.PROCESSDEFVERSION
				,BOM.PROCESSSEGMENTID
				,PD.RTRSHT
				,0						AS QTY
				,BOM.QTY				AS JOINTQTY
				,PD.UNIT
				,0						AS ACTUALINPUTLOSS
				,0						AS PUREORDERLOSS
				,BOM."sequence"         AS SEQUENCET
			FROM	
						   CONTINUOUS		       P
				INNER JOIN BAS_BILLOFMATERIAL    BOM ON P.PLANTID  = BOM.PLANTID AND P.MATERIALDEFID   = BOM.PRODUCTDEFID AND P.MATERIALDEFVERSION   = BOM.PRODUCTDEFVERSION
												                                 AND P.PROCESSDEFID    = BOM.PROCESSDEFID AND P.PROCESSDEFVERSION    = BOM.PROCESSDEFVERSION AND BOM.MATERIALTYPE = 'Product'
				INNER JOIN BAS_PRODUCTDEFINITION PD ON BOM.PLANTID = PD.PLANTID  AND BOM.MATERIALDEFID = PD.PRODUCTDEFID  AND BOM.MATERIALDEFVERSION = PD.PRODUCTDEFVERSION
		)
		,LOT_USERSEQUENCE AS
		(
			SELECT  
				 Y.LOTID
				,CASE 
					WHEN DECODE(Y.SUBPROCESSDEFID, NULL, '', Y.SUBPROCESSDEFID) = '' THEN LOTUSERSEQUENCE
					ELSE RESULTUSERSEQUENCE
				END AS USERSEQUENCE
			FROM
				(SELECT 
					 X.*
				    ,ROW_NUMBER() OVER(PARTITION BY X.LOTID ORDER BY X.CREATEDTIME DESC) RN
				FROM
					(SELECT  
						 L.SUBPROCESSDEFID
						,L.USERSEQUENCE LOTUSERSEQUENCE
						,CW.LOTID
						,CW.USERSEQUENCE RESULTUSERSEQUENCE
					    ,CW.ISREWORK
					    ,CASE 
					    	WHEN L.SUBPROCESSDEFID = CW.PROCESSDEFID THEN 'Y'
					        ELSE 'N'
					     END AS REWORK
					    ,CW.CREATEDTIME        
					FROM 
						           PCM_LOT            L
						INNER JOIN PCM_LOTWORKRESULT CW ON L.LOTID = CW.LOTID
					WHERE 
						EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',') LOT WHERE CW.LOTID = LOT.VALUE)
				    ) X
				WHERE 
					X.REWORK = 'N' 
				) Y
			WHERE 
				RN = 1			
		)
		,LOTCARDLIST AS	
		(SELECT    
			 V.LOTID
			,V.USERSEQUENCE
			,CASE 
				WHEN LG.LOTID IS NOT NULL AND PP.PATHSEQUENCE <![CDATA[<>]]> 1 THEN '*'
				ELSE ''
			END AS DIVISION
			,V.PROCESSSEGMENTNAME
			,V.PROCESSSEGMENTID
			,V.SENDTIME
			,V.SENDQTY
			,V.SENDUSER
			,V.SEQUENCET  
			,V.LLEVEL 
			,MOD(           ((ROW_NUMBER() OVER (ORDER BY  V.LOTID, V.USERSEQUENCE)) - 1),  25) AS ROWKEY
		    ,MOD(FLOOR(((ROW_NUMBER() OVER (ORDER BY  V.LOTID, V.USERSEQUENCE)) - 1) / 25),  2) AS ROWVLE
		FROM
			(SELECT  
				 W.*
				,ROW_NUMBER() OVER (PARTITION BY W.LOTID, W.PROCESSSEGMENTNAME ORDER BY W.ISRESULT) AS RN3
			FROM
				(SELECT   
					 Z.ORIGINALLOTID AS LOTID
					,Z.USERSEQUENCE
					,Z.DIVISION
					,Z.PROCESSSEGMENTNAME
					,Z.PROCESSSEGMENTID
					,Z.SENDTIME
					,Z.SENDPANELQTY || '/' || DECODE(SUM(CEIL(Z.DEFECTQTY / Z.PANELPERQTY)), NULL, 0, SUM(CEIL(Z.DEFECTQTY / Z.PANELPERQTY))) AS SENDQTY
					,Z.SENDUSER
					,Z.SEQUENCET 
					,Z.LLEVEL  
					,'Y' AS ISRESULT 
				FROM
					(SELECT  
						 '' AS  DIVISION
						,Y.ORIGINALLOTID
						,Y.LOTID
						,Y.USERSEQUENCE
						,Y.PROCESSSEGMENTNAME
						,Y.PROCESSSEGMENTID
						,LD.LOTID DEFECTLOT
						,DF.DEFECTCODE
						,DF.DEFECTQTY
						,Y.SENDTIME
						,Y.SENDPANELQTY
						,Y.PANELPERQTY
						,Y.AREANAME || '/' || Y.SENDUSER AS SENDUSER
						,Y.USERSEQUENCE AS SEQUENCET
						,Y.LLEVEL
						,ROW_NUMBER() OVER (PARTITION BY Y.ORIGINALLOTID, Y.USERSEQUENCE, Y.PROCESSSEGMENTNAME ORDER BY CASE WHEN Y.ORIGINALLOTID = Y.LOTID THEN 10 ELSE 100 END, Y.LLEVEL) AS RN2	     
					FROM
						(SELECT 
							X.*
						FROM
							(SELECT 
								 L.ORIGINALLOTID
								,LW.USERSEQUENCE
								,L2.USERSEQUENCE AS ORIGINEUSERSEQUENCE
								,LW.LOTID
								,LW.PROCESSSEGMENTID
								,L1.PANELPERQTY
								,DECODE(SD1.DICTIONARYNAME, NULL, PS.PROCESSSEGMENTNAME, SD1.DICTIONARYNAME) AS PROCESSSEGMENTNAME
								,TO_CHAR(LW.SENDTIME, 'MM/DD HH24:MI:SS') AS SENDTIME
								,SENDPANELQTY
								,DECODE(SD2.DICTIONARYNAME, NULL, SA.AREANAME, SD2.DICTIONARYNAME) AS AREANAME
								,CASE 
									WHEN PS.PROCESSSEGMENTCLASSID = '1020' THEN NVL(DECODE(DU.USER_NM, NULL, LW.SENDUSER, DU.USER_NM), '')
									ELSE NVL(DECODE(SU.USER_NM, NULL, LW.WORKENDUSER, SU.USER_NM), '') 
								END AS SENDUSER
								,L.LLEVEL
								,DENSE_RANK() OVER (PARTITION BY L.ORIGINALLOTID ORDER BY CASE WHEN LU.USERSEQUENCE <![CDATA[>=]]> LW.USERSEQUENCE THEN 10 ELSE 200 END) AS RN
							FROM 
										   PCM_LOTWORKRESULT                          LW
								INNER JOIN FN_LOTGENEAL_BOTTOMUP_MULTI(#{P_LOTID_T})   L ON LW.LOTID = L.LOTID
								INNER JOIN PCM_LOT                                    L1 ON L.LOTID  = L1.LOTID
								INNER JOIN BAS_PROCESSSEGMENT                         PS ON LW.PROCESSSEGMENTID   = PS.PROCESSSEGMENTID AND LW.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
								LEFT  JOIN CMD_DICTIONARY                            SD1 ON PS.PROCESSSEGMENTNAME = SD1.DICTIONARYID    AND SD1.LANGUAGETYPE         = #{P_LANGUAGETYPE}
								INNER JOIN BAS_AREA                                   SA ON LW.AREAID             = SA.AREAID
								LEFT  JOIN CMD_DICTIONARY                            SD2 ON SA.AREANAME           = SD2.DICTIONARYID    AND SD2.LANGUAGETYPE         = #{P_LANGUAGETYPE}
								LEFT  JOIN CMD_USERS                                  SU ON LW.WORKENDUSER        = SU.USER_ID 
								LEFT  JOIN CMD_USERS                                  DU ON LW.SENDUSER           = DU.USER_ID
								INNER JOIN PCM_LOT                                    L2 ON L.ORIGINALLOTID       = L2.LOTID
								INNER JOIN LOT_USERSEQUENCE                           LU ON L2.LOTID              = LU.LOTID			
							WHERE
								LW.RESULTTYPE = 'NORMAL'
							) X
						WHERE 
							X.RN = 1
						) Y
						LEFT JOIN PCM_LOT       LD ON Y.LOTID  = LD.PARENTLOTID AND LD.ISDEFECTED      = 'Y'    
						LEFT JOIN PCM_LOTDEFECT DF ON LD.LOTID = DF.LOTID       AND Y.PROCESSSEGMENTID = DF.PROCESSSEGMENTID   
					) Z
				WHERE 
					Z.RN2 = 1
				GROUP BY Z.ORIGINALLOTID, Z.DIVISION, Z.PROCESSSEGMENTNAME, Z.USERSEQUENCE, Z.SENDTIME, Z.SENDPANELQTY, Z.SENDUSER, Z.SEQUENCET, Z.LLEVEL, Z.PROCESSSEGMENTID
				UNION
				SELECT  
					 L2.LOTID
					,PP.USERSEQUENCE
					,'' AS DIVISION
					,DECODE(SD1.DICTIONARYNAME, NULL, PS.PROCESSSEGMENTNAME, SD1.DICTIONARYNAME) AS PROCESSSEGMENTNAME
					,PS.PROCESSSEGMENTID
					,'' AS SENDTIME
					,'' AS SENDQTY
					,'' AS SENDUSER
					,PP.USERSEQUENCE AS SEQUENCET 
					,0.1 AS LLEVEL
					,'N' AS ISRESULT
				FROM	
					UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',')  L1
					INNER JOIN PCM_LOT             L2 ON L1.VALUE              = L2.LOTID
					INNER JOIN LOT_USERSEQUENCE    LU ON L2.LOTID              = LU.LOTID
					INNER JOIN BAS_PROCESSPATH     PP ON L2.PROCESSDEFID       = PP.PROCESSDEFID     AND L2.PROCESSDEFVERSION = PP.PROCESSDEFVERSION AND LU.USERSEQUENCE <![CDATA[<=]]> PP.USERSEQUENCE
					INNER JOIN BAS_PROCESSSEGMENT  PS ON PP.PROCESSSEGMENTID   = PS.PROCESSSEGMENTID                              
					LEFT  JOIN CMD_DICTIONARY     SD1 ON PS.PROCESSSEGMENTNAME = SD1.DICTIONARYID    AND SD1.LANGUAGETYPE = #{P_LANGUAGETYPE}
					LEFT  JOIN PCM_LOTWORKRESULT   LW ON L2.LOTID              = LW.LOTID            AND PP.PROCESSDEFID  = LW.PROCESSDEFID          AND PP.PROCESSDEFVERSION = LW.PROCESSDEFVERSION AND PP.PROCESSSEGMENTID = LW.PROCESSSEGMENTID    
				UNION
				SELECT  
					 L.LOTID
					,''   AS USERSEQUENCE
					,''   AS DIVISION
					,DECODE(PSN.DICTIONARYNAME, NULL, PS.PROCESSSEGMENTNAME, PSN.DICTIONARYNAME) AS PROCESSSEGMENTNAME
					,PS.PROCESSSEGMENTID
					,''   AS SENDTIME
					,''   AS SENDQTY
					,''   AS SENDUSER
					,''   AS SEQUENCET
					,0.1  AS LLEVEL
					,'N'  AS ISRESULT
				FROM    
					           PCM_LOT                 L
					INNER JOIN BAS_PRODUCTDEFINITION  PD ON L.PRODUCTDEFID        = PD.PRODUCTDEFID     AND L.PRODUCTDEFVERSION   = PD.PRODUCTDEFVERSION
					INNER JOIN BILLOFMATERIAL        BOM ON L.PRODUCTDEFID        = BOM.MATERIALDEFID   AND L.PRODUCTDEFVERSION   = BOM.MATERIALDEFVERSION
					INNER JOIN BAS_PROCESSPATH        PP ON BOM.PRODUCTDEFID      = PP.PROCESSDEFID     AND BOM.PRODUCTDEFVERSION = PP.PROCESSDEFVERSION   AND BOM.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
					INNER JOIN BAS_PROCESSSEGMENT     PS ON PP.PROCESSSEGMENTID   = PS.PROCESSSEGMENTID
					LEFT  JOIN CMD_DICTIONARY        PSN ON PS.PROCESSSEGMENTNAME = PSN.DICTIONARYID    AND PSN.LANGUAGETYPE      = #{P_LANGUAGETYPE}
				WHERE 
					EXISTS (SELECT 1 FROM UFN_SELECTSTRINGTOSPLIT(#{P_LOTID_T}, ',')	T WHERE	L.LOTID = T.VALUE) AND PD.PRODUCTDEFTYPE = 'SubAssembly'
				) W
			) V
			LEFT JOIN PCM_LOTGENEAL   LG ON V.LOTID         = LG.LOTID        AND V.PROCESSSEGMENTID   = LG.PROCESSSEGMENTID  AND DECODE(LG.DESTINATIONLOTID, NULL, '', LG.DESTINATIONLOTID) = '' 	
			LEFT JOIN BAS_PROCESSPATH PP ON LG.PROCESSDEFID = PP.PROCESSDEFID AND LG.PROCESSDEFVERSION = PP.PROCESSDEFVERSION AND LG.PROCESSPATHID                                           = PP.PROCESSPATHID 
			                                                                  AND LG.PROCESSSEGMENTID  = PP.PROCESSSEGMENTID  AND PP.PROCESSSEGMENTVERSION                                   = '*'  
		WHERE 
			RN3 = 1
		ORDER BY V.LOTID, V.USERSEQUENCE
		)
		SELECT 
			 T1.LOTID				AS LOTID1
			,T1.USERSEQUENCE		AS USERSEQUENCE1
			,T1.DIVISION			AS DIVISION1
			,T1.PROCESSSEGMENTNAME	AS PROCESSSEGMENTNAME1
			,T1.PROCESSSEGMENTID	AS PROCESSSEGMENTID1
			,T1.SENDTIME			AS SENDTIME1
			,T1.SENDQTY				AS SENDQTY1
			,T1.SENDUSER			AS SENDUSER1
			,T1.SEQUENCET			AS SEQUENCET1
			,T1.LLEVEL				AS LLEVEL1
			,T2.LOTID				AS LOTID2
			,T2.USERSEQUENCE		AS USERSEQUENCE2
			,T2.DIVISION			AS DIVISION2
			,T2.PROCESSSEGMENTNAME	AS PROCESSSEGMENTNAME2
			,T2.PROCESSSEGMENTID	AS PROCESSSEGMENTID2
			,T2.SENDTIME			AS SENDTIME2
			,T2.SENDQTY				AS SENDQTY2
			,T2.SENDUSER			AS SENDUSER2
			,T2.SEQUENCET			AS SEQUENCET2
			,T2.LLEVEL				AS LLEVEL2
		FROM
			(SELECT 
				 T.*
				,ROW_NUMBER() OVER (ORDER BY T.LOTID, T.USERSEQUENCE) AS ROWLEVEL
			FROM 
				 LOTCARDLIST T
			WHERE
				T.ROWVLE = 0
			) T1
			,
			(SELECT 
				 T.*
				,ROW_NUMBER() OVER (ORDER BY T.LOTID, T.USERSEQUENCE) AS ROWLEVEL
			FROM 
				 LOTCARDLIST T
			WHERE
				ROWVLE = 1
			) T2
		WHERE 
			T1.ROWLEVEL = T2.ROWLEVEL(+)
	</select>
</mapper>