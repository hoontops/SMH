<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    파일명       : Lot Routing
    설명          : 
    작성자       : 김애리
    최초작성일 : 2021.04.26
<< 개정이력(Modification Information) >>
      수정일              수정자      수정내용
     2021.04.26      김애리     최초  생성
-->

<mapper namespace="smh.pcm.dao.PCM04800Dao">

	<!-- 상단 Lot 정보 -->
	<select id="selectLotInfoBylotID" parameterType="map" resultType="hashmap">
		/* SelectLotInfoBylotID 10004 */
		
				WITH PROCESSSEGMENT AS
				(
					SELECT
							L.LOTID
						,	L.ENTERPRISEID
						,	L.PLANTID
						,	PP.PROCESSPATHID
						,	LAG(PP.PROCESSSEGMENTID) OVER (ORDER BY PP.PATHSEQUENCE ASC)		AS PREVPROCESSSEGMENTID
						,	LAG(PP.PROCESSSEGMENTVERSION) OVER (ORDER BY PP.PATHSEQUENCE ASC)	AS PREVPROCESSSEGMENTVERSION
						,	PP.PROCESSSEGMENTID
						,	PP.PROCESSSEGMENTVERSION
						,	LEAD(PP.PROCESSSEGMENTID) OVER (ORDER BY PP.PATHSEQUENCE ASC)		AS NEXTPROCESSSEGMENTID
						,	LEAD(PP.PROCESSSEGMENTVERSION) OVER (ORDER BY PP.PATHSEQUENCE ASC)	AS NEXTPROCESSSEGMENTVERSION
					FROM	PCM_LOT						L
					LEFT OUTER JOIN BAS_PROCESSPATH		PP	ON	L.ENTERPRISEID = PP.ENTERPRISEID
															--AND	L.PLANTID = PP.PLANTID
															AND	L.PROCESSDEFID = PP.PROCESSDEFID
															AND L.PROCESSDEFVERSION = PP.PROCESSDEFVERSION
					WHERE	1=1
										AND     L.ENTERPRISEID = #{ENTERPRISEID}
															AND		L.PLANTID = #{PLANTID}
										AND		L.LOTID = #{LOTID}
				)
				SELECT	L.LOTID
					,	PP.PROCESSPATHID
					,	NVL(DC1.DICTIONARYNAME, PSP.PROCESSSEGMENTNAME)			AS PREVPROCESSSEGMENTNAME
					,	PS.PROCESSSEGMENTID
					,	NVL(DC2.DICTIONARYNAME, PS.PROCESSSEGMENTNAME)			AS PROCESSSEGMENTNAME
					,	PS.PROCESSSEGMENTVERSION
					,	NVL(DC3.DICTIONARYNAME, PSN.PROCESSSEGMENTNAME)			AS NEXTPROCESSSEGMENTNAME
					,	L.USERSEQUENCE
					,	L.PRODUCTDEFID
					,	L.PRODUCTDEFVERSION
					,	PD.PRODUCTDEFNAME
					,	'Main'													AS PRODUCTTYPE
					,	TO_CHAR(L.STARTEDDATE, 'YYYY-MM-DD')					AS INPUTDATE
					,	L.PRODUCTIONORDERID
					,	TO_CHAR(L.DUEDATE, 'YYYY-MM-DD')						AS DUEDATE
					,	DTD.DICTIONARYNAME										AS PRODUCTDEFTYPE
					,	OTD.DICTIONARYNAME										AS PRODUCTIONTYPE
					,	NVL(L.ISLOCKING, 'N')									AS ISLOCKING
					,	NVL(DC4.DICTIONARYNAME, A.AREANAME)						AS AREANAME
					,	C.CUSTOMERNAME
					,	L.UNIT
					,	L.DEFECTUNIT
					,	L.PANELQTY                      						AS PNLQTY
					,	L.PANELPERQTY											AS PANELPERQTY
					,	L.QTY                           						AS PCSQTY
					,	ROUND((L.QTY / PD.PCSMM),2)   							AS MM
					,	PD.PCSPNL												AS PCSPNL
					,	PS.PROCESSSEGMENTTYPE
					,	NVL(ST2.STEPTYPE, ST1.STEPTYPE)							AS STEPTYPE	
					,	NVL(L.ISREWORK, 'N')									AS ISREWORK
					,	L.PROCESSSTATE
					,	L.ISLOCKING
					,	L.ISHOLD
					,	L.RESOURCEID
					,	L.LOTTYPE
					,	PD.PRODUCTIONTYPE										AS PRODUCTIONTYPECODE
					,   L.DESCRIPTION
					,	L.PROCESSDEFID
					,	L.PROCESSDEFVERSION
				FROM PCM_LOT								L					
				LEFT OUTER JOIN	PROCESSSEGMENT			PP	ON	PP.ENTERPRISEID = L.ENTERPRISEID
															--AND	PP.PLANTID = L.PLANTID
															AND	PP.LOTID = L.LOTID
															AND	PP.PROCESSSEGMENTID = L.PROCESSSEGMENTID
															AND PP.PROCESSSEGMENTVERSION = L.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN BAS_PROCESSSEGMENT		PSP	ON	PP.PREVPROCESSSEGMENTID = PSP.PROCESSSEGMENTID
															AND	PP.PREVPROCESSSEGMENTVERSION = PSP.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY			DC1 ON  PSP.PROCESSSEGMENTNAME = DC1.DICTIONARYID
															AND DC1.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN BAS_PROCESSSEGMENT		PS	ON	PP.PROCESSSEGMENTID = PS.PROCESSSEGMENTID
															AND	PP.PROCESSSEGMENTVERSION = PS.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN FN_GETSTEPTYPE() 		ST1 ON PS.STEPCLASS=ST1.CODE
				LEFT OUTER JOIN BAS_RESOURCE				RC	ON	L.ENTERPRISEID = RC.ENTERPRISEID
															AND	L.PLANTID = RC.PLANTID
															AND	L.RESOURCEID = RC.RESOURCEID
				LEFT OUTER JOIN FN_GETSTEPTYPE() 		ST2 ON RC.STEPCLASS=ST2.CODE																					
				LEFT OUTER JOIN CMD_DICTIONARY			DC2 ON  PS.PROCESSSEGMENTNAME = DC2.DICTIONARYID
															AND DC2.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN BAS_PROCESSSEGMENT		PSN	ON	PP.NEXTPROCESSSEGMENTID = PSN.PROCESSSEGMENTID
															AND	PP.NEXTPROCESSSEGMENTVERSION = PSN.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY           DC3 ON  PSN.PROCESSSEGMENTNAME = DC3.DICTIONARYID
															AND DC3.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN BAS_PRODUCTDEFINITION	PD	ON	L.PRODUCTDEFID = PD.PRODUCTDEFID
															AND	L.PRODUCTDEFVERSION = PD.PRODUCTDEFVERSION
				LEFT OUTER JOIN MFM_PRODUCTIONORDER		PO	ON	L.ENTERPRISEID = PO.ENTERPRISEID
															AND	L.ORIGINALPLANTID = PO.PLANTID
															AND	L.PRODUCTIONORDERID = PO.PRODUCTIONORDERID
															AND	L.LINENO = PO.LINENO
				LEFT OUTER JOIN CMD_LOOKUP_VALUES		DT	ON	PD.PRODUCTDEFTYPE = DT.LOOKUP_CODE
															AND	DT.LOOKUP_TYPE = 'ProductDefType'
				LEFT OUTER JOIN CMD_DICTIONARY			DTD	ON	DT.DICTIONARYID = DTD.DICTIONARYID
															AND	DTD.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN CMD_LOOKUP_VALUES		OT	ON	L.LOTTYPE = OT.LOOKUP_CODE
															AND	OT.LOOKUP_TYPE = 'ProductionType'
				LEFT OUTER JOIN CMD_DICTIONARY			OTD	ON	OT.DICTIONARYID = OTD.DICTIONARYID
															AND	OTD.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN BAS_AREA					A	ON	L.ENTERPRISEID = A.ENTERPRISEID
															AND	L.PLANTID = A.PLANTID
															AND L.AREAID = A.AREAID
				LEFT OUTER JOIN CMD_DICTIONARY			DC4 ON  A.AREANAME = DC4.DICTIONARYID
															AND DC4.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN BAS_CUSTOMER				C	ON	PO.ENTERPRISEID = C.ENTERPRISEID
															AND	PO.PLANTID = C.PLANTID
															AND	PO.CUSTOMERID = C.CUSTOMERID
				WHERE L.LOTID = #{LOTID}
				
	</select>

	<!-- 제품 Rev 조회 -->
    <select id="selectProductVersion" parameterType="map" resultType="hashmap">
    		SELECT PRD.PRODUCTDEFVERSION        AS PRODUCTDEFVERSIONCODE
				,	PRD.PRODUCTDEFVERSION        AS PRODUCTDEFVERSIONNAME
				,   PD.PROCESSDEFVERSION 		 AS ROUTING_VERSION  		--새 Routing 에 대한 Rev 이 있는지 확인
			FROM PCM_LOT LOT
			INNER JOIN BAS_PRODUCTDEFINITION PRD ON LOT.PRODUCTDEFID = PRD.PRODUCTDEFID 
			LEFT JOIN BAS_PROCESSDEFINITION PD ON LOT.PROCESSDEFID = PD.PROCESSDEFID AND PRD.PROCESSDEFVERSION = PD.PROCESSDEFVERSION --Lot Routing 에 해당하는 버전들이 제품만큼 만들어짐. 
			WHERE LOT.LOTID = #{LOTID}
    </select>

	<!-- 좌측 Routing 그리드 -->
	<select id="selectLotRouting" parameterType="map" resultType="hashmap">
		/* SelectLotRouting 10001 */
				              
			SELECT * FROM 
			(
			   SELECT
						PP.ENTERPRISEID
					,	PP.PLANTID
					,   LOT.PRODUCTDEFID 
					,	PP.PROCESSSEGMENTID
					,	PP.PROCESSSEGMENTVERSION
					,	COALESCE(PSD.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
					,	NVL(TO_NUMBER(PP.USERSEQUENCE),0) AS USERSEQUENCE
					,	NVL(TO_NUMBER(PP.USERSEQUENCE),0) AS OLDUSERSEQUENCE
					,	CASE WHEN TO_NUMBER(CPP.PATHSEQUENCE) > TO_NUMBER(PP.PATHSEQUENCE) THEN 'PAST'
							WHEN TO_NUMBER(CPP.PATHSEQUENCE) = TO_NUMBER(PP.PATHSEQUENCE) THEN 'CURRENT'
							--WHEN TO_NUMBER(CPP.PATHSEQUENCE) <![CDATA[<]]> TO_NUMBER(PP.PATHSEQUENCE) THEN 'FUTURE'
						END AS PROCESSTYPE
					,	PP.PATHSEQUENCE
					,	CASE WHEN PS.PROCESSSEGMENTCLASSID IN ('7026','7534','7532','3524') THEN 'Y' ELSE 'N' END AS ISFINALTEST	-- 강유라 공정 추가
				FROM		PCM_LOT				LOT
				INNER JOIN	BAS_PROCESSPATH		CPP	ON	CPP.PROCESSPATHID = (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(LOT.PROCESSPATHSTACK, '.')  WHERE ROWNUM=1)
				INNER JOIN	BAS_PROCESSPATH		PP	ON	PP.PROCESSDEFID = LOT.PROCESSDEFID
													AND	PP.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
				INNER JOIN 	BAS_PROCESSSEGMENT	PS	ON	PS.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
													AND	PS.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY	PSD	ON	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
													AND	PSD.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND		LOT.LOTID = #{LOTID}
				AND 	TO_NUMBER(CPP.PATHSEQUENCE) >= TO_NUMBER(PP.PATHSEQUENCE)
				AND 	PP.VALIDSTATE = 'Valid'
				UNION ALL 
				SELECT
						PP.ENTERPRISEID
					,	PP.PLANTID
					,   LOT.PRODUCTDEFID 
					,	PP.PROCESSSEGMENTID
					,	PP.PROCESSSEGMENTVERSION
					,	COALESCE(PSD.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
					,	TO_NUMBER(PP.USERSEQUENCE) AS USERSEQUENCE
					,	TO_NUMBER(PP.USERSEQUENCE) AS OLDUSERSEQUENCE
					,	'FUTURE' AS PROCESSTYPE
					,	PP.PATHSEQUENCE
					,	CASE WHEN PS.PROCESSSEGMENTCLASSID IN ('7026','7534','7532','3524') THEN 'Y' ELSE 'N' END AS ISFINALTEST	-- 강유라 공정 추가
				FROM		PCM_LOT				LOT
				INNER JOIN	BAS_PROCESSPATH		CPP	ON	CPP.PROCESSPATHID = (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(LOT.PROCESSPATHSTACK, '.')  WHERE ROWNUM=1)
				INNER JOIN	BAS_PROCESSPATH		PP	ON	PP.PROCESSDEFID = LOT.PROCESSDEFID 
													AND	PP.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
				INNER JOIN 	BAS_PROCESSSEGMENT	PS	ON	PS.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
													AND	PS.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
				LEFT OUTER JOIN CMD_DICTIONARY	PSD	ON	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
													AND	PSD.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND		LOT.LOTID = #{LOTID}
				AND 	TO_NUMBER(CPP.PATHSEQUENCE) <![CDATA[<]]> TO_NUMBER(PP.PATHSEQUENCE)
				AND 	PP.VALIDSTATE = 'Valid'
			)
			ORDER BY PATHSEQUENCE
				
	</select>
	
	<!-- 자원 탭 그리드 -->
	<select id="selectLotRoutingResource" parameterType="map" resultType="hashmap">
		/* SelectLotRoutingResource 10001 */
				SELECT
						PP.ENTERPRISEID
					,	PP.PLANTID
					,	PP.PROCESSSEGMENTID
					,	PP.PROCESSSEGMENTVERSION
					,	NVL(PSD.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME					
					,	TO_NUMBER(PP.USERSEQUENCE) AS USERSEQUENCE
					,	CASE WHEN CPP.PATHSEQUENCE > PP.PATHSEQUENCE THEN 'PAST'
							 WHEN CPP.PATHSEQUENCE = PP.PATHSEQUENCE THEN 'CURRENT'
							 WHEN CPP.PATHSEQUENCE <![CDATA[<]]> PP.PATHSEQUENCE THEN 'FUTURE'
						END AS PROCESSTYPE
					,	NVL(BOR.ISPRIMARYRESOURCE, 'N') AS ISPRIMARYRESOURCE
					,	BOR.RESOURCETYPE
					,	BOR.RESOURCEID
					,	BOR.RESOURCEVERSION
					,	AR.AREAID
					,	NVL(ARD.DICTIONARYNAME, AR.AREANAME) AS AREANAME
					,	EC.EQUIPMENTCLASSID
					,	NVL(ECD.DICTIONARYNAME, EC.EQUIPMENTCLASSNAME) AS EQUIPMENTCLASSNAME
					,	CASE WHEN PS.PROCESSSEGMENTCLASSID = '7026' THEN 'Y' ELSE 'N' END AS ISFINALTEST	-- 최종검사 공정 여부(최종검사는 과거 공정이더라도 자원 추가 가능)			
					,	LOT.PROCESSSTATE		
				FROM		PCM_LOT						LOT
				INNER JOIN	BAS_PROCESSPATH				CPP	ON	CPP.PROCESSPATHID = (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(LOT.PROCESSPATHSTACK, '.')  WHERE ROWNUM=1)
				INNER JOIN	BAS_PROCESSPATH				PP	ON	PP.PROCESSDEFID = LOT.PROCESSDEFID
															AND	PP.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
				INNER JOIN 	BAS_PROCESSSEGMENT			PS	ON	PS.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	PS.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
				INNER JOIN 	BAS_BILLOFRESOURCE			BOR	ON	BOR.PRODUCTDEFID = LOT.PRODUCTDEFID
															AND	BOR.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION
															AND	BOR.PROCESSDEFID = LOT.PROCESSDEFID
															AND BOR.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
															AND	BOR.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	BOR.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
															AND	BOR.ENTERPRISEID = PP.ENTERPRISEID
															AND BOR.PLANTID = PP.PLANTID
															AND	BOR.RESOURCETYPE = 'Resource'
															AND	BOR.VALIDSTATE = 'Valid'
				LEFT OUTER JOIN BAS_RESOURCE				RES	ON	RES.RESOURCEID = BOR.RESOURCEID
															AND	RES.ENTERPRISEID = BOR.ENTERPRISEID
															AND	RES.PLANTID = BOR.PLANTID
				LEFT OUTER JOIN BAS_AREA					AR	ON 	AR.AREAID = RES.AREAID
				LEFT OUTER JOIN BAS_EQUIPMENTCLASS		EC	ON	EC.EQUIPMENTCLASSID = RES.EQUIPMENTCLASSID
				LEFT OUTER JOIN CMD_DICTIONARY			PSD	ON	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
															AND	PSD.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN CMD_DICTIONARY			ARD	ON	ARD.DICTIONARYID = AR.AREANAME
															AND	ARD.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN CMD_DICTIONARY			ECD	ON	ECD.DICTIONARYID = EC.EQUIPMENTCLASSNAME
															AND	ECD.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE LOT.LOTID = #{LOTID}
				AND PP.VALIDSTATE = 'Valid'
				ORDER BY PP.PATHSEQUENCE 
	</select>
	
	<!-- 자재 탭 그리드 -->
	<select id="selectLotRoutingMaterial" parameterType="map" resultType="hashmap">
		/* SelectLotRoutingMaterial 10001 */
				SELECT
						PP.ENTERPRISEID
					,	PP.PLANTID
					,	PP.PROCESSSEGMENTID
					,	PP.PROCESSSEGMENTVERSION
					,	COALESCE(PSD.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME					
					,	TO_NUMBER(PP.USERSEQUENCE) AS USERSEQUENCE
					,	CASE WHEN CPP.PATHSEQUENCE > PP.PATHSEQUENCE THEN 'PAST'
							 WHEN CPP.PATHSEQUENCE = PP.PATHSEQUENCE THEN 'CURRENT'							
							 WHEN CPP.PATHSEQUENCE <![CDATA[<]]> PP.PATHSEQUENCE THEN 'FUTURE'
						END AS PROCESSTYPE
					,	BOM.MATERIALTYPE
					,	BOM.MATERIALDEFVERSION
					,	BOM.MATERIALDEFID
					,	CD.CONSUMABLEDEFNAME
					,	BOM.QTY
					,	BOM.UNIT
					,	BOM.ISREQUIRED
					,	BOM.WIPSUPPLYTYPE
					,	LOT.PROCESSSTATE
				FROM		PCM_LOT						LOT
				INNER JOIN	BAS_PROCESSPATH				CPP	ON	CPP.PROCESSPATHID = (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(LOT.PROCESSPATHSTACK, '.')  WHERE ROWNUM=1)
				INNER JOIN	BAS_PROCESSPATH				PP	ON	PP.PROCESSDEFID = LOT.PROCESSDEFID
															AND	PP.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
				INNER JOIN 	BAS_PROCESSSEGMENT			PS	ON	PS.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	PS.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
				INNER JOIN	BAS_BILLOFMATERIAL			BOM	ON	BOM.PRODUCTDEFID = LOT.PRODUCTDEFID
															AND	BOM.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION
															AND	BOM.PROCESSDEFID = LOT.PROCESSDEFID
															AND BOM.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
															AND	BOM.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	BOM.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
															AND	BOM.MATERIALTYPE IN ('Product', 'Consumable')
															AND	BOM.ENTERPRISEID = PP.ENTERPRISEID
															AND BOM.PLANTID = PP.PLANTID
				INNER JOIN BAS_CONSUMABLEDEFINITION		CD	ON	CD.CONSUMABLEDEFID = BOM.MATERIALDEFID
															AND	CD.CONSUMABLEDEFVERSION = BOM.MATERIALDEFVERSION
				LEFT OUTER JOIN CMD_DICTIONARY			PSD	ON	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
															AND	PSD.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE LOT.LOTID = #{LOTID}
				AND PP.VALIDSTATE = 'Valid'
				ORDER BY PP.PATHSEQUENCE, BOM."sequence" 
	</select>
	
	<!-- 치공구 탭 그리드 -->
	<select id="selectLotRoutingDurable" parameterType="map" resultType="hashmap">
		/* SelectLotRoutingDurable 10001 */
			SELECT
						PP.ENTERPRISEID
					,	PP.PLANTID
					,	PP.PROCESSSEGMENTID
					,	PP.PROCESSSEGMENTVERSION
					,	NVL(PSD.DICTIONARYNAME, PS.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME					
					,	TO_NUMBER(PP.USERSEQUENCE) AS USERSEQUENCE
					,	CASE WHEN CPP.PATHSEQUENCE > PP.PATHSEQUENCE THEN 'PAST'
							 WHEN CPP.PATHSEQUENCE = PP.PATHSEQUENCE THEN 'CURRENT'
							 WHEN CPP.PATHSEQUENCE <![CDATA[<]]> PP.PATHSEQUENCE THEN 'FUTURE'
						END AS PROCESSTYPE
					,	NVL(BOR.ISPRIMARYRESOURCE, 'N') AS ISPRIMARYRESOURCE
					,	DD.DURABLETYPE
					,	DD.DURABLEDEFID
					,	DD.DURABLEDEFVERSION
					, DD.DURABLECLASSID
					,	NVL(DDD.DICTIONARYNAME, DD.DURABLEDEFNAME) AS DURABLEDEFNAME 
					,	LOT.PROCESSSTATE
					,	DD.PRODUCTDEFID				/* 품목 코드 */
                    ,	DD.PRODUCTDEFVERSION			/* 품목 버전 */
                    ,	IM.ITEMNAME                    AS PRODUCTDEFNAME		/* 품목 명 */
				FROM		PCM_LOT						LOT
				INNER JOIN BAS_PRODUCTDEFINITION        PRD ON  PRD.PRODUCTDEFID = LOT.PRODUCTDEFID 
														    AND PRD.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION 
				INNER JOIN	BAS_PROCESSPATH				CPP	ON	CPP.PROCESSPATHID = (SELECT VALUE FROM UFN_SELECTSTRINGTOSPLIT(LOT.PROCESSPATHSTACK, '.')  WHERE ROWNUM=1)
				INNER JOIN	BAS_PROCESSPATH				PP	ON	PP.PROCESSDEFID = LOT.PROCESSDEFID
															AND	PP.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
				INNER JOIN 	BAS_PROCESSSEGMENT			PS	ON	PS.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	PS.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
				INNER JOIN 	BAS_BILLOFRESOURCE			BOR	ON	BOR.PRODUCTDEFID = LOT.PRODUCTDEFID
															AND	BOR.PRODUCTDEFVERSION = LOT.PRODUCTDEFVERSION
															AND	BOR.PROCESSDEFID = LOT.PROCESSDEFID
															AND BOR.PROCESSDEFVERSION = LOT.PROCESSDEFVERSION
															AND	BOR.PROCESSSEGMENTID = PP.PROCESSSEGMENTID
															AND	BOR.PROCESSSEGMENTVERSION = PP.PROCESSSEGMENTVERSION
															AND	BOR.ENTERPRISEID = PP.ENTERPRISEID
															AND BOR.PLANTID = PP.PLANTID
															AND	BOR.RESOURCETYPE in ('Durable', 'Tool')
															AND	BOR.VALIDSTATE = 'Valid'
				LEFT OUTER JOIN TOM_DURABLEDEFINITION	DD	ON	DD.DURABLEDEFID = BOR.RESOURCEID
															AND DD.DURABLEDEFVERSION = BOR.RESOURCEVERSION
				INNER JOIN BAS_ITEMMASTER               IM  ON  DD.PRODUCTDEFID         = IM.ITEMID
				                                            AND DD.PRODUCTDEFVERSION    = IM.ITEMVERSION
				                                            AND BOR.ENTERPRISEID         = IM.ENTERPRISEID     
				LEFT OUTER JOIN CMD_DICTIONARY			PSD	ON	PSD.DICTIONARYID = PS.PROCESSSEGMENTNAME
															AND	PSD.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN CMD_DICTIONARY			DDD	ON	DDD.DICTIONARYID = DD.DURABLEDEFNAME
															AND	DDD.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE LOT.LOTID = #{LOTID}
				AND PP.VALIDSTATE = 'Valid'
				ORDER BY PP.PATHSEQUENCE
	</select>
	
	<!-- 자원 팝업  -->
	<select id="selectLotResource" parameterType="map" resultType="hashmap">
		/* GetLotResource 10001*/
				SELECT	DISTINCT
						RES.RESOURCEID
					,	'*' AS RESOURCEVERSION
					,	AR.AREAID
					,	NVL(ARD.DICTIONARYNAME, AR.AREANAME) AS AREANAME
					,	EC.EQUIPMENTCLASSID
					,	NVL(ECD.DICTIONARYNAME, EC.EQUIPMENTCLASSNAME) AS EQUIPMENTCLASSNAME
				FROM			BAS_PROCESSSEGMENTEQPTCLASS	PEC	
				INNER JOIN		BAS_RESOURCE					RES ON	RES.EQUIPMENTCLASSID = PEC.EQUIPMENTCLASSID
																AND RES.ENTERPRISEID = PEC.ENTERPRISEID
																AND RES.VALIDSTATE = 'Valid'
																AND RES.PLANTID = 'IFC'
				INNER JOIN 		BAS_AREA						AR	ON 	AR.AREAID = RES.AREAID
				INNER JOIN 		BAS_EQUIPMENTCLASS			EC	ON	EC.EQUIPMENTCLASSID = PEC.EQUIPMENTCLASSID
				LEFT OUTER JOIN CMD_DICTIONARY				ARD	ON	ARD.DICTIONARYID = AR.AREANAME
																AND	ARD.LANGUAGETYPE = #{LANGUAGETYPE}
				LEFT OUTER JOIN CMD_DICTIONARY				ECD	ON	ECD.DICTIONARYID = EC.EQUIPMENTCLASSNAME
																AND	ECD.LANGUAGETYPE = #{LANGUAGETYPE}
				WHERE	1 = 1
				AND	PEC.ENTERPRISEID = #{ENTERPRISEID}
				AND PEC.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
				AND	PEC.VALIDSTATE = 'Valid'
				<if test="RESOURCEID != null and RESOURCEID !=''">
					AND		UPPER(RES.RESOURCEID) LIKE UPPER( <![CDATA['%' ||]]> #{RESOURCEID} <![CDATA[|| '%']]> )
				</if>
	        	<if test="AREA != null and AREA !=''">
					AND		(
								AR.AREAID LIKE <![CDATA['%' ||]]> #{AREA} <![CDATA[|| '%']]>
							OR 
								UPPER(NVL(ARD.DICTIONARYNAME, AR.AREANAME)) LIKE UPPER( <![CDATA['%' ||]]> #{AREA} <![CDATA[|| '%']]> )
							)
				</if>
	        	<if test="EQUIPMENTCLASS != null and EQUIPMENTCLASS !=''">
					AND		(
								UPPER(EC.EQUIPMENTCLASSID) LIKE UPPER(<![CDATA['%' ||]]> #{EQUIPMENTCLASS} <![CDATA[|| '%']]>)
								OR 
								UPPER(NVL(ECD.DICTIONARYNAME, EC.EQUIPMENTCLASSNAME)) LIKE UPPER(<![CDATA['%' ||]]> #{EQUIPMENTCLASS} <![CDATA[|| '%']]> )
							)
				</if>
				ORDER BY RESOURCEID
	</select>



    <delete id="deleteProcessDefinition" parameterType="map" > 
		    DELETE FROM BAS_PROCESSDEFINITION 
		    WHERE PROCESSDEFID = #{PROCESSDEFID}
		<if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !=''">
		    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		</if>
    </delete>
    
    <delete id="deleteProcesspath" parameterType="map" > 
		    DELETE FROM BAS_PROCESSPATH 
		    WHERE PROCESSDEFID = #{PROCESSDEFID}
		<if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !=''">
		    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		</if>
	    <if test="LASTPATHSEQUENCE != null and LASTPATHSEQUENCE !=''">
	    	AND PATHSEQUENCE > #{LASTPATHSEQUENCE}
	    </if>
    </delete>
    
    <delete id="deleteBillofmaterial" parameterType="map" > 
		    DELETE FROM BAS_BILLOFMATERIAL 
		    WHERE PROCESSDEFID = #{PROCESSDEFID}
		<if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !=''">
		    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		</if>
		<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
		    AND PRODUCTDEFID = #{PRODUCTDEFID}
		</if>
		<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
		    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
		</if>
		<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
	        AND PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	    </if>
    </delete>
    
    <delete id="deleteBillofresource" parameterType="map" > 
		    DELETE FROM BAS_BILLOFRESOURCE 
		    WHERE PROCESSDEFID = #{PROCESSDEFID}
		<if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !=''">
		    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		</if>
		<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">
		    AND PRODUCTDEFID = #{PRODUCTDEFID}
		</if>
		<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">
		    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
		</if>
		<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
	        AND PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	    </if>
	    <if test="RESOURCETYPE != null and RESOURCETYPE !='' "> 
	        AND RESOURCETYPE = #{RESOURCETYPE}
	    </if>
    </delete>
    
    <select id="selectBasProcesspathList" parameterType="map" resultType="hashmap">
    			SELECT 
			        A.PROCESSPATHID	
			        ,A.ENTERPRISEID	
			        ,A.PLANTID	
			        ,A.PROCESSDEFID	
			        ,A.PROCESSDEFVERSION	
			        ,A.PROCESSSEGMENTID	
			        ,A.PROCESSSEGMENTVERSION	
			        ,A.PATHSEQUENCE	
			        ,A.USERSEQUENCE	
			        ,A.PATHTYPE	
			        ,A.ALTERNATETYPE	
			        ,A.ALTERNATEPROCESSCLASSID	
			        ,A.REWORKPROCESSDEFID	
			        ,A.REWORKPROCESSDEFVERSION	
			        ,A.REWORKRETURNPATHID	
			        ,A.DESCRIPTION	
			        ,A.VALIDSTATE	
			        ,A.PROCESSUOM	
			        ,A.ALTERNATIVERESOURCE	
			        ,A.ASSIGNEQUIPMENT	
			        ,A.ISWEEKMNG	
			    FROM	BAS_PROCESSPATH A 
				WHERE	1 = 1
			<if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
		        AND A.PROCESSPATHID = #{PROCESSPATHID}
		    </if>
		    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
		        AND A.ENTERPRISEID = #{ENTERPRISEID}
		    </if>
		    <if test="PLANTID != null and PLANTID !='' "> 
		        AND A.PLANTID = #{PLANTID}
		    </if>
		    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
		        AND A.PROCESSDEFID = #{PROCESSDEFID}
		    </if>
		    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
		        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		    </if>
		    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
		        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
		    </if>
		    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
		        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
		    </if>
		    <if test="PATHSEQUENCE != null and PATHSEQUENCE !='' "> 
		        AND A.PATHSEQUENCE = #{PATHSEQUENCE}
		    </if>
		    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
		        AND A.USERSEQUENCE = #{USERSEQUENCE}
		    </if>
		    <if test="PATHTYPE != null and PATHTYPE !='' "> 
		        AND A.PATHTYPE = #{PATHTYPE}
		    </if>
		    <if test="ALTERNATETYPE != null and ALTERNATETYPE !='' "> 
		        AND A.ALTERNATETYPE = #{ALTERNATETYPE}
		    </if>
		    <if test="ALTERNATEPROCESSCLASSID != null and ALTERNATEPROCESSCLASSID !='' "> 
		        AND A.ALTERNATEPROCESSCLASSID = #{ALTERNATEPROCESSCLASSID}
		    </if>
		    <if test="REWORKPROCESSDEFID != null and REWORKPROCESSDEFID !='' "> 
		        AND A.REWORKPROCESSDEFID = #{REWORKPROCESSDEFID}
		    </if>
		    <if test="REWORKPROCESSDEFVERSION != null and REWORKPROCESSDEFVERSION !='' "> 
		        AND A.REWORKPROCESSDEFVERSION = #{REWORKPROCESSDEFVERSION}
		    </if>
		    <if test="REWORKRETURNPATHID != null and REWORKRETURNPATHID !='' "> 
		        AND A.REWORKRETURNPATHID = #{REWORKRETURNPATHID}
		    </if>
			<if test="VALIDSTATE != null and VALIDSTATE !='' "> 
		        AND A.VALIDSTATE = #{VALIDSTATE}
		    </if>
		    <if test="PROCESSUOM != null and PROCESSUOM !='' "> 
		        AND A.PROCESSUOM = #{PROCESSUOM}
		    </if>
		    <if test="ALTERNATIVERESOURCE != null and ALTERNATIVERESOURCE !='' "> 
		        AND A.ALTERNATIVERESOURCE = #{ALTERNATIVERESOURCE}
		    </if>
		    <if test="ASSIGNEQUIPMENT != null and ASSIGNEQUIPMENT !='' "> 
		        AND A.ASSIGNEQUIPMENT = #{ASSIGNEQUIPMENT}
		    </if>
		    <if test="ISWEEKMNG != null and ISWEEKMNG !='' "> 
		        AND A.ISWEEKMNG = #{ISWEEKMNG}
		    </if>
		    <if test="GTUSERSEQUENCE != null and GTUSERSEQUENCE !=''">
				AND		TO_NUMBER(A.USERSEQUENCE) <![CDATA[<]]>  #{GTUSERSEQUENCE}
			</if>
				ORDER BY PATHSEQUENCE
    </select>
    
        <!-- 라우팅 상세 정의 등록 -->
    <insert id="insertBasProcesspath" parameterType="map">
	    INSERT INTO BAS_PROCESSPATH( 
	        PROCESSPATHID  
	        ,ENTERPRISEID  
	        ,PLANTID  
	        ,PROCESSDEFID  
	        ,PROCESSDEFVERSION  
	        ,PROCESSSEGMENTID  
	        ,PROCESSSEGMENTVERSION  
	        ,PATHSEQUENCE  
	        ,USERSEQUENCE  
	        ,PATHTYPE  
	        ,CREATOR  
	        ,CREATEDTIME  
	        ,MODIFIER  
	        ,MODIFIEDTIME  
	        ,LASTTXNHISTKEY  
	        ,LASTTXNID  
	        ,LASTTXNUSER  
	        ,LASTTXNTIME  
	        ,LASTTXNCOMMENT  
	        ,VALIDSTATE  
	        ,PROCESSUOM  
	        ,ALTERNATIVERESOURCE  
	        ,ASSIGNEQUIPMENT  
	        ,ISWEEKMNG        ) 
	    VALUES( 
	        #{PROCESSPATHID}  
	        ,#{ENTERPRISEID}  
	        ,#{PLANTID}  
	        ,#{PROCESSDEFID}  
	        ,#{PROCESSDEFVERSION}  
	        ,#{PROCESSSEGMENTID}  
	        ,#{PROCESSSEGMENTVERSION}  
	        ,#{PATHSEQUENCE}  
	        ,#{USERSEQUENCE}  
	        ,#{PATHTYPE}  
	        ,#{CREATOR}  
	        ,SYSDATE  
	        ,#{MODIFIER}  
	        ,SYSDATE  
	        ,#{LASTTXNHISTKEY}  
	        ,#{LASTTXNID}  
	        ,#{LASTTXNUSER}  
	        ,#{LASTTXNTIME}  
	        ,#{LASTTXNCOMMENT}  
	        ,#{VALIDSTATE}  
	        ,#{PROCESSUOM}  
	        ,#{ALTERNATIVERESOURCE}  
	        ,#{ASSIGNEQUIPMENT}  
	        ,#{ISWEEKMNG}    )
    </insert>
    
    <!-- 라우팅 상세 정의 변경 -->
    <update id="updateBasProcesspath" parameterType="map" >
		    UPDATE BAS_PROCESSPATH 
		    SET 
		        ENTERPRISEID = #{ENTERPRISEID}     
		        ,PLANTID = #{PLANTID}     
		        ,PROCESSDEFID = #{PROCESSDEFID}     
		        ,PROCESSDEFVERSION = #{PROCESSDEFVERSION}     
		        ,PROCESSSEGMENTID = #{PROCESSSEGMENTID}     
		        ,PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}     
		        ,PATHSEQUENCE = #{PATHSEQUENCE}     
		        ,USERSEQUENCE = #{USERSEQUENCE}     
		        ,PATHTYPE = #{PATHTYPE}     
		        ,ALTERNATETYPE = #{ALTERNATETYPE}     
		        ,ALTERNATEPROCESSCLASSID = #{ALTERNATEPROCESSCLASSID}     
		        ,REWORKPROCESSDEFID = #{REWORKPROCESSDEFID}     
		        ,REWORKPROCESSDEFVERSION = #{REWORKPROCESSDEFVERSION}     
		        ,REWORKRETURNPATHID = #{REWORKRETURNPATHID}     
		        ,DESCRIPTION = #{DESCRIPTION}                     
		        ,MODIFIER = #{MODIFIER}     
		        ,MODIFIEDTIME = SYSDATE     
		        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
		        ,LASTTXNID = #{LASTTXNID}     
		        ,LASTTXNUSER = #{LASTTXNUSER}     
		        ,LASTTXNTIME = SYSDATE   
		        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
		        ,VALIDSTATE = #{VALIDSTATE}     
		        ,PROCESSUOM = #{PROCESSUOM}     
		        ,ALTERNATIVERESOURCE = #{ALTERNATIVERESOURCE}     
		        ,ASSIGNEQUIPMENT = #{ASSIGNEQUIPMENT}     
		        ,ISWEEKMNG = #{ISWEEKMNG}
		    WHERE PROCESSPATHID = #{PROCESSPATHID}
		    <if test="PROCESSPATHID != null and PROCESSPATHID !='' "> 
		        AND PROCESSPATHID = #{PROCESSPATHID}
		    </if>
		    <if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
		        AND ENTERPRISEID = #{ENTERPRISEID}
		    </if>
		    <if test="PLANTID != null and PLANTID !='' "> 
		        AND PLANTID = #{PLANTID}
		    </if>
		    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
		        AND PROCESSDEFID = #{PROCESSDEFID}
		    </if>
		    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
		        AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
		    </if>
		    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
		        AND PROCESSSEGMENTID = #{PROCESSSEGMENTID}
		    </if>
		    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
		        AND PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
		    </if>
		    <if test="PATHSEQUENCE != null and PATHSEQUENCE !='' "> 
		        AND PATHSEQUENCE = #{PATHSEQUENCE}
		    </if>
		    <if test="USERSEQUENCE != null and USERSEQUENCE !='' "> 
		        AND USERSEQUENCE = #{USERSEQUENCE}
		    </if>
    </update>
    
    
    <!-- 라우팅 정의 등록 -->
    <insert id="insertBasProcessdefinition" parameterType="map">
	    INSERT INTO BAS_PROCESSDEFINITION( 
	        PROCESSDEFID  
	        ,PROCESSDEFVERSION  
	        ,PROCESSCLASSID  
	        ,PROCESSDEFNAME  
	        ,ENTERPRISEID  
	        ,PLANTID  
	        ,PROCESSDEFTYPE  
	        ,LEADTIME  
	        ,VERSIONSTATE  
	        ,REWORKITEMCONTROL  
	        ,REWORKSEGMENTCONTROL  
	        ,DESCRIPTION  
	        ,CREATOR  
	        ,CREATEDTIME  
	        ,MODIFIER  
	        ,MODIFIEDTIME  
	        ,LASTTXNHISTKEY  
	        ,LASTTXNID  
	        ,LASTTXNUSER  
	        ,LASTTXNTIME  
	        ,LASTTXNCOMMENT  
	        ,VALIDSTATE  
	        ,TOPPROCESSSEGMENTID        ) 
	    VALUES( 
	        #{PROCESSDEFID}  
	        ,#{PROCESSDEFVERSION}  
	        ,#{PROCESSCLASSID}  
	        ,#{PROCESSDEFNAME}  
	        ,#{ENTERPRISEID}  
	        ,#{PLANTID}  
	        ,#{PROCESSDEFTYPE}  
	        ,#{LEADTIME}  
	        ,#{VERSIONSTATE}  
	        ,#{REWORKITEMCONTROL}  
	        ,#{REWORKSEGMENTCONTROL}  
	        ,#{DESCRIPTION}  
	        ,#{CREATOR}  
	        ,SYSDATE  
	        ,#{MODIFIER}  
	        ,SYSDATE  
	        ,#{LASTTXNHISTKEY}  
	        ,#{LASTTXNID}  
	        ,#{LASTTXNUSER}  
	        ,#{LASTTXNTIME}  
	        ,#{LASTTXNCOMMENT}  
	        ,#{VALIDSTATE}  
	        ,#{TOPPROCESSSEGMENTID}    )
    </insert>

	
    <!-- 자원 정보 조회-->
    <select id="selectBasBillofresourceList" parameterType="map" resultType="hashmap">
    SELECT 
        A.PRODUCTDEFID	
        ,A.PRODUCTDEFVERSION	
        ,A.PROCESSDEFID	
        ,A.PROCESSDEFVERSION	
        ,A.PROCESSSEGMENTID	
        ,A.PROCESSSEGMENTVERSION	
        ,A.RESOURCETYPE	
        ,A."sequence"	
        ,A.EQUIPMENTID	
        ,A.RESOURCECLASSID	
        ,A.RESOURCEID	
        ,A.ISPRIMARYRESOURCE	
        ,A.ENTERPRISEID	
        ,A.PLANTID	
        ,A.DESCRIPTION	
        ,A.CREATOR	
        ,A.CREATEDTIME	
        ,A.MODIFIER	
        ,A.MODIFIEDTIME	
        ,A.VALIDSTATE	
        ,A.RESOURCEVERSION	
    FROM	BAS_BILLOFRESOURCE A 
    WHERE 1=1 
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    </if>
    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </if>
    <if test="RESOURCETYPE != null and RESOURCETYPE !='' "> 
        AND A.RESOURCETYPE = #{RESOURCETYPE}
    </if>
    <if test="SEQUENCE != null and SEQUENCE !='' "> 
        AND A."sequence" = #{sequence}
    </if>
    <if test="EQUIPMENTID != null and EQUIPMENTID !='' "> 
        AND A.EQUIPMENTID = #{EQUIPMENTID}
    </if>
    <if test="RESOURCECLASSID != null and RESOURCECLASSID !='' "> 
        AND A.RESOURCECLASSID = #{RESOURCECLASSID}
    </if>
    <if test="RESOURCEID != null and RESOURCEID !='' "> 
        AND A.RESOURCEID = #{RESOURCEID}
    </if>
    
    </select>
    
        <!-- 자원 정보 등록 -->
    <insert id="insertBasBillofresource" parameterType="map">
	    INSERT INTO BAS_BILLOFRESOURCE( 
	        PRODUCTDEFID  
	        ,PRODUCTDEFVERSION  
	        ,PROCESSDEFID  
	        ,PROCESSDEFVERSION  
	        ,PROCESSSEGMENTID  
	        ,PROCESSSEGMENTVERSION  
	        ,RESOURCETYPE  
	        ,"sequence"  
	        ,EQUIPMENTID  
	        ,RESOURCECLASSID  
	        ,RESOURCEID  
	        ,ISPRIMARYRESOURCE  
	        ,ENTERPRISEID  
	        ,PLANTID  
	        ,DESCRIPTION  
	        ,CREATOR  
	        ,CREATEDTIME  
	        ,MODIFIER  
	        ,MODIFIEDTIME  
	        ,LASTTXNHISTKEY  
	        ,LASTTXNID  
	        ,LASTTXNUSER  
	        ,LASTTXNTIME  
	        ,LASTTXNCOMMENT  
	        ,VALIDSTATE  
	        ,RESOURCEVERSION        ) 
	    VALUES( 
	        #{PRODUCTDEFID}  
	        ,#{PRODUCTDEFVERSION}  
	        ,#{PROCESSDEFID}  
	        ,#{PROCESSDEFVERSION}  
	        ,#{PROCESSSEGMENTID}  
	        ,#{PROCESSSEGMENTVERSION}  
	        ,#{RESOURCETYPE}  
	        ,#{SEQUENCE}  
	        ,#{EQUIPMENTID}  
	        ,#{RESOURCECLASSID}  
	        ,#{RESOURCEID}  
	        ,#{ISPRIMARYRESOURCE}  
	        ,#{ENTERPRISEID}  
	        ,#{PLANTID}  
	        ,#{DESCRIPTION}  
	        ,#{CREATOR}  
	        ,SYSDATE  
	        ,#{MODIFIER}  
	        ,SYSDATE  
	        ,#{LASTTXNHISTKEY}  
	        ,#{LASTTXNID}  
	        ,#{LASTTXNUSER}  
	        ,#{LASTTXNTIME}  
	        ,#{LASTTXNCOMMENT}  
	        ,#{VALIDSTATE}  
	        ,#{RESOURCEVERSION}    )
    </insert>
    
        <!-- BOM 정보 조회-->
    <select id="selectBasBillofmaterialList" parameterType="map" resultType="hashmap">
	    SELECT 
	        A.PRODUCTDEFID	
	        ,A.PRODUCTDEFVERSION	
	        ,A.PROCESSDEFID	
	        ,A.PROCESSDEFVERSION	
	        ,A.PROCESSSEGMENTID	
	        ,A.PROCESSSEGMENTVERSION	
	        ,A.MATERIALTYPE	
	        ,A.MATERIALDEFID	
	        ,A.MATERIALDEFVERSION	
	        ,A."sequence"	
	        ,A.ENTERPRISEID	
	        ,A.PLANTID	
	        ,A.UNIT	
	        ,A.QTY	
	        ,A.ISALTERABLE	
	        ,A.ISREQUIRED	
	        ,A.MAINMATERIALDEFID	
	        ,A.MAINMATERIALDEFVERSION	
	        ,A.DESCRIPTION	
	        ,A.CREATOR	
	        ,A.CREATEDTIME	
	        ,A.MODIFIER	
	        ,A.MODIFIEDTIME	
	        ,A.VALIDSTATE	
	        ,A.WIPSUPPLYTYPE	
	        ,A.MULTIPLE	
	    FROM	BAS_BILLOFMATERIAL A 
	    WHERE 1=1 
    <if test="PRODUCTDEFID != null and PRODUCTDEFID !='' "> 
        AND A.PRODUCTDEFID = #{PRODUCTDEFID}
    </if>
    <if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !='' "> 
        AND A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </if>
    <if test="PROCESSDEFID != null and PROCESSDEFID !='' "> 
        AND A.PROCESSDEFID = #{PROCESSDEFID}
    </if>
    <if test="PROCESSDEFVERSION != null and PROCESSDEFVERSION !='' "> 
        AND A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    </if>
    <if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' "> 
        AND A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    </if>
    <if test="PROCESSSEGMENTVERSION != null and PROCESSSEGMENTVERSION !='' "> 
        AND A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    </if>

    </select>
    
        <!-- BOM 정보 등록 -->
    <insert id="insertBasBillofmaterial" parameterType="map">
	    INSERT INTO BAS_BILLOFMATERIAL( 
	        PRODUCTDEFID  
	        ,PRODUCTDEFVERSION  
	        ,PROCESSDEFID  
	        ,PROCESSDEFVERSION  
	        ,PROCESSSEGMENTID  
	        ,PROCESSSEGMENTVERSION  
	        ,MATERIALTYPE  
	        ,MATERIALDEFID  
	        ,MATERIALDEFVERSION  
	        ,"sequence"  
	        ,ENTERPRISEID  
	        ,PLANTID  
	        ,UNIT  
	        ,QTY  
	        ,ISALTERABLE  
	        ,ISREQUIRED  
	        ,MAINMATERIALDEFID  
	        ,MAINMATERIALDEFVERSION  
	        ,DESCRIPTION  
	        ,CREATOR  
	        ,CREATEDTIME  
	        ,MODIFIER  
	        ,MODIFIEDTIME  
	        ,LASTTXNHISTKEY  
	        ,LASTTXNID  
	        ,LASTTXNUSER  
	        ,LASTTXNTIME  
	        ,LASTTXNCOMMENT  
	        ,VALIDSTATE  
	        ,WIPSUPPLYTYPE  
	        ,MULTIPLE        ) 
	    VALUES( 
	        #{PRODUCTDEFID}  
	        ,#{PRODUCTDEFVERSION}  
	        ,#{PROCESSDEFID}  
	        ,#{PROCESSDEFVERSION}  
	        ,#{PROCESSSEGMENTID}  
	        ,#{PROCESSSEGMENTVERSION}  
	        ,#{MATERIALTYPE}  
	        ,#{MATERIALDEFID}  
	        ,#{MATERIALDEFVERSION}  
	        ,#{SEQUENCE}  
	        ,#{ENTERPRISEID}  
	        ,#{PLANTID}  
	        ,#{UNIT}  
	        ,#{QTY}  
	        ,#{ISALTERABLE}  
	        ,#{ISREQUIRED}  
	        ,#{MAINMATERIALDEFID}  
	        ,#{MAINMATERIALDEFVERSION}  
	        ,#{DESCRIPTION}  
	        ,#{CREATOR}  
	        ,SYSDATE  
	        ,#{MODIFIER}  
	        ,SYSDATE  
	        ,#{LASTTXNHISTKEY}  
	        ,#{LASTTXNID}  
	        ,#{LASTTXNUSER}  
	        ,#{LASTTXNTIME}  
	        ,#{LASTTXNCOMMENT}  
	        ,#{VALIDSTATE}  
	        ,#{WIPSUPPLYTYPE}  
	        ,#{MULTIPLE}    )
    </insert>
    
    
    <!-- LOT 작업실적 update  -->    
    <update id="updateLotworkresult" parameterType="map">
		 UPDATE PCM_LOTWORKRESULT
		        SET 
					  MODIFIER = #{MODIFIER}
					, MODIFIEDTIME = SYSDATE									
			    	, PROCESSDEFID = #{PROCESSDEFID}						
			   		, PROCESSDEFVERSION = #{PROCESSDEFVERSION}					
				    , USERSEQUENCE = #{USERSEQUENCE}	
			    	, PROCESSPATHID = #{PROCESSPATHID}																					
			    	, PROCESSPATHSTACK = #{PROCESSPATHSTACK}															
			WHERE 1 = 1
			  AND LOTID	      		= #{LOTID}
			  AND PROCESSSEGMENTID 	= #{PROCESSSEGMENTID}
			  AND WORKCOUNT 		= #{WORKCOUNT}
    </update>
    
    <insert id="insertLotReservedLocking" parameterType="map">
    	INSERT INTO PCM_LOTRESERVELOCKING(TXNHISTKEY
			,LOTID
			,ENTERPRISEID
			,PLANTID
			,PROCESSDEFID
			,PROCESSDEFVERSION
			,PROCESSSEGMENTID
			,PROCESSSEGMENTVERSION
			,LOCKINGTYPE
			,LOCKINGCODE
			,COMMENTS
			,LOCKINGSTATUS
			,CREATOR
			,CREATEDTIME
			,TXNUSER
			,TXNTIME
			,LOCKING_PROCESSSTATE
			)
		VALUES(	
				#{TXNHISTKEY}
				, #{LOTID}  -- LOTID
				, #{ENTERPRISEID}  --ENTERPRISEID
				, #{PLANTID} --PLANTID
				, #{LOTID} --PROCESSDEFID
				, #{PROCESSDEFVERSION}   --PROCESSDEFVERSION
				, #{PROCESSSEGMENTID} --PROCESSSEGMENTID
				, #{PROCESSSEGMENTVERSION} --PROCESSSEGMENTVERSION
				, #{LOCKINGTYPE} --LOCKINGTYPE
				, #{LOCKINGCODE} --LOCKINGCODE
				, #{COMMENTS} --COMMENTS
				, 'Created' --LOCKINGSTATUS
				, 'MES807'  
				, SYSDATE
				, 'MES807'  
				, SYSDATE
				, #{LOCKING_PROCESSSTATE} --LOCKING_PROCESSSTATE
			)
			
    </insert>
    
    <select id="selectLotReservedLocking" parameterType="map" resultType="hashmap">
    	SELECT   LOTID
				,ENTERPRISEID
				,PLANTID
				,LOTID
				,#{PROCESSDEFVERSION}
				,PROCESSSEGMENTID
				,PROCESSSEGMENTVERSION
				,LOCKINGTYPE
				,LOCKINGCODE
				,COMMENTS
				,LOCKINGSTATUS
				,LOCKING_PROCESSSTATE
				FROM PCM_LOTRESERVELOCKING 
				WHERE LOTID = #{LOTID}
				AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
				AND LOCKINGSTATUS = 'Created'
				
    </select>

	<insert id="insertBasBillofresourceCopy" parameterType="map">
		INSERT INTO BAS_BILLOFRESOURCE (PRODUCTDEFID,
										PRODUCTDEFVERSION,
										PROCESSDEFID,
										PROCESSDEFVERSION,
										PROCESSSEGMENTID,
										PROCESSSEGMENTVERSION,
										RESOURCETYPE,
										"sequence",
										EQUIPMENTID,
										RESOURCECLASSID,
										RESOURCEID,
										ISPRIMARYRESOURCE,
										ENTERPRISEID,
										PLANTID,
										DESCRIPTION,
										CREATOR,
										CREATEDTIME,
										MODIFIER,
										MODIFIEDTIME,
										LASTTXNHISTKEY,
										LASTTXNID,
										LASTTXNUSER,
										LASTTXNTIME,
										VALIDSTATE,
										RESOURCEVERSION
										)
					SELECT A.PRODUCTDEFID	
					        , A.PRODUCTDEFVERSION	
					        , A.PROCESSDEFID	
					        , #{RCPROCESSDEFVERSION}
					        , A.PROCESSSEGMENTID	
					        , A.PROCESSSEGMENTVERSION	
					        , A.RESOURCETYPE	
					        , A."sequence"	
					        , A.EQUIPMENTID	
					        , A.RESOURCECLASSID	
					        , A.RESOURCEID	
					        , A.ISPRIMARYRESOURCE	
					        , A.ENTERPRISEID	
					        , A.PLANTID	
					        , A.DESCRIPTION	
					        , #{LASTTXNUSER}  
					        , SYSDATE 
					        , #{LASTTXNUSER}  
					        , SYSDATE 
					        , #{LASTTXNHISTKEY}  
					        , #{LASTTXNID}  
					        , #{LASTTXNUSER}  
					        , SYSDATE
					        , A.VALIDSTATE	
					        , A.RESOURCEVERSION
					  FROM	BAS_BILLOFRESOURCE A 
					 WHERE  PRODUCTDEFID = #{PRODUCTDEFID}
					   AND  PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
					   AND  PROCESSDEFID = #{PROCESSDEFID}
					   AND  PROCESSDEFVERSION = #{PROCESSDEFVERSION}
	</insert>
	
	<insert id="insertBasBillofmaterialCopy" parameterType="map">
		INSERT INTO BAS_BILLOFMATERIAL (PRODUCTDEFID
									, PRODUCTDEFVERSION
									, PROCESSDEFID
									, PROCESSDEFVERSION
									, PROCESSSEGMENTID
									, PROCESSSEGMENTVERSION
									, MATERIALTYPE
									, MATERIALDEFID
									, MATERIALDEFVERSION
									, "sequence"
									, ENTERPRISEID
									, PLANTID
									, UNIT
									, QTY
									, ISALTERABLE
									, ISREQUIRED
									, MAINMATERIALDEFID
									, MAINMATERIALDEFVERSION
									, DESCRIPTION
									, CREATOR
									, CREATEDTIME
									, MODIFIER
									, MODIFIEDTIME
									, LASTTXNHISTKEY
									, LASTTXNID
									, LASTTXNUSER
									, LASTTXNTIME
									, LASTTXNCOMMENT
									, VALIDSTATE
									, WIPSUPPLYTYPE
									, MULTIPLE
									, ALTITEM
									, ALTREVISION
									, VARIABLE1
									, VARIABLE2
									, VARIABLE3
									, VARIABLE4
									, VARIABLE5
										)
							SELECT PRODUCTDEFID
									, PRODUCTDEFVERSION
									, PROCESSDEFID
									, #{RCPROCESSDEFVERSION}
									, PROCESSSEGMENTID
									, PROCESSSEGMENTVERSION
									, MATERIALTYPE
									, MATERIALDEFID
									, MATERIALDEFVERSION
									, "sequence"
									, ENTERPRISEID
									, PLANTID
									, UNIT
									, QTY
									, ISALTERABLE
									, ISREQUIRED
									, MAINMATERIALDEFID
									, MAINMATERIALDEFVERSION
									, DESCRIPTION
									, #{LASTTXNUSER}  
							        , SYSDATE 
							        , #{LASTTXNUSER}  
							        , SYSDATE 
							        , #{LASTTXNHISTKEY}  
							        , #{LASTTXNID}  
							        , #{LASTTXNUSER}  
							        , SYSDATE
									, LASTTXNCOMMENT
									, VALIDSTATE
									, WIPSUPPLYTYPE
									, MULTIPLE
									, ALTITEM
									, ALTREVISION
									, VARIABLE1
									, VARIABLE2
									, VARIABLE3
									, VARIABLE4
									, VARIABLE5
					  FROM	BAS_BILLOFMATERIAL 
					 WHERE  PRODUCTDEFID = #{PRODUCTDEFID}
					   AND  PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
					   AND  PROCESSDEFID = #{PROCESSDEFID}
					   AND  PROCESSDEFVERSION = #{PROCESSDEFVERSION}
	</insert>
	
</mapper>
