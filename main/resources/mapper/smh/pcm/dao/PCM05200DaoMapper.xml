<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCM05200Dao">

	
	<select id="selectProcessSegmentClassByType" parameterType="map" resultType="hashmap">
	/* "GetProcessSegmentClassByType" 10001 */
	--id : selectProcessSegmentClassByType
		
SELECT 
				PSC.PROCESSSEGMENTCLASSID		
			,	PSC.PROCESSSEGMENTCLASSID || '_' || COALESCE(D.DICTIONARYNAME, PSC.PROCESSSEGMENTCLASSNAME) AS PROCESSSEGMENTCLASSNAME 			
		
		FROM 	BAS_PROCESSSEGMENTCLASS		PSC
		LEFT OUTER JOIN CMD_DICTIONARY		D	ON	PSC.PROCESSSEGMENTCLASSNAME = D.DICTIONARYID
												AND D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}	
		
		WHERE 	1 = 1
		<if test="PROCESSSEGMENTCLASSTYPE != null and PROCESSSEGMENTCLASSTYPE !=''">
			AND		PSC.PROCESSSEGMENTCLASSTYPE = #{PROCESSSEGMENTCLASSTYPE}
			<if test='PROCESSSEGMENTCLASSTYPE == "TopProcessSegmentClass"'>
				AND		COALESCE(PSC.PARENTPROCESSSEGMENTCLASSID, ' ') = ' '
			</if>
			<if test='PROCESSSEGMENTCLASSTYPE == "MiddleProcessSegmentClass"'>
				AND	NOT	COALESCE(PSC.PARENTPROCESSSEGMENTCLASSID, ' ') = ' '
			</if>
		</if>
		<if test="PROCESSSEGMENTCLASSID != null and PROCESSSEGMENTCLASSID !=''">
			AND ( PSC.PROCESSSEGMENTCLASSID LIKE '%' || #{PROCESSSEGMENTCLASSTYPE}
			OR	  PSC.PROCESSSEGMENTCLASSNAME LIKE '%' || #{PROCESSSEGMENTCLASSTYPE}
			OR	  D.DICTIONARYNAME LIKE '%' || #{PROCESSSEGMENTCLASSTYPE} )
		</if>
		<if test="PARENTPROCESSSEGMENTCLASSID != null and PARENTPROCESSSEGMENTCLASSID !=''">
			AND		PSC.PARENTPROCESSSEGMENTCLASSID = #{PARENTPROCESSSEGMENTCLASSID}
		</if>
		AND 	PSC.VALIDSTATE = 'Valid'
		ORDER BY PSC.PROCESSSEGMENTCLASSID ASC
	</select>
	<select id="selectStockbyprocessSearchList" parameterType="map" resultType="hashmap">
	--id : selectStockbyprocessSearchList
		SELECT 
		'NVL("''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_RSLT_PCS", 0) AS RSLT_PCS_' || TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYYMMDD')
		||', NVL("''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_RSLT_PNL", 0) AS RSLT_PNL_' || TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYYMMDD')
		||', NVL("''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_STOCK_PCS", 0) AS STOCK_PCS_' || TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYYMMDD')
		||', NVL("''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_STOCK_PNL", 0) AS STOCK_PNL_' || TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYYMMDD')		AS COLUMNS_SELECT,
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')										AS COLUMNS,
		'"''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_RSLT_PCS"' 
		||', "''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_RSLT_PNL"' 
		||', "''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_STOCK_PCS"' 
		||', "''' ||
		TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+LEVEL-1, 'YYYY-MM-DD')  
		|| '''_STOCK_PNL"' 																								AS COLUMNS_GROUP
		
		FROM DUAL 
		CONNECT BY LEVEL <![CDATA[<]]> (TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8), 'YYYYMMDD')-TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8), 'YYYYMMDD')+1)
	</select>
	<select id="selectStockbyprocessList" parameterType="map" resultType="hashmap">
	/* "usp_wip_selectdailyresultandstockbyprocess" */
	--id : selectStockbyprocessList
		SELECT 
                        P.PROCESSSEGMENTID
                    ,   P.AREAID 
                    ,   COALESCE(SGD.DICTIONARYNAME, SEG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
                    ,   COALESCE(ARD.DICTIONARYNAME, ARE.AREANAME) AS AREANAME
                    ,	${COLUMNS_SELECT}
                    ,       NVL("'TOTAL'_RSLT_PCS", 0) AS TOTAL_RSLT_PCS, NVL("'TOTAL'_RSLT_PNL", 0) AS TOTAL_RSLT_PNL, NVL("'TOTAL'_STOCK_PCS", 0) AS TOTAL_STOCK_PCS, NVL("'TOTAL'_STOCK_PNL", 0) AS TOTAL_STOCK_PNL 
            	,       NVL("'TOTAL'_RSLT_PCS_AVG", 0) AS TOTAL_RSLT_PCS_AVG, NVL("'TOTAL'_RSLT_PNL_AVG", 0) AS TOTAL_RSLT_PNL_AVG, NVL("'TOTAL'_STOCK_PCS_AVG", 0) AS TOTAL_STOCK_PCS_AVG, NVL("'TOTAL'_STOCK_PNL_AVG", 0) AS TOTAL_STOCK_PNL_AVG
        FROM 
        (
        	SELECT * FROM
        	(
                WITH RESULTS AS
                    (
                        SELECT
                                COALESCE(LWR.PROCESSSEGMENTID, '') || ',' || COALESCE(LWR.AREAID, '') AS ROW_NAME
                            ,   LWR.PROCESSSEGMENTID
                            ,   LWR.AREAID
                            ,   TO_CHAR(CASE WHEN TO_CHAR(LWR.SENDTIME, 'HH24:MI:SS') <![CDATA[<]]> PLT.WORKTIME THEN LWR.SENDTIME - (INTERVAL '1' DAY) ELSE LWR.SENDTIME END, 'YYYY-MM-DD') AS WORKDATE
                            ,   LWR.SENDPCSQTY
                            ,   LWR.SENDPANELQTY
                            ,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' THEN 'IsRework'
			                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR NVL(LOT.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
			                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
			                    END 						AS WORKTYPE
                        FROM
                            PCM_LOTWORKRESULT                LWR
                            INNER JOIN BAS_PLANT             PLT     ON  PLT.PLANTID = LWR.PLANTID
                            INNER JOIN BAS_PRODUCTDEFINITION PD      ON  PD.PRODUCTDEFID = LWR.PRODUCTDEFID
                                                                    AND PD.PRODUCTDEFVERSION = LWR.PRODUCTDEFVERSION
                            INNER JOIN PCM_LOT               LOT     ON  LOT.LOTID = LWR.LOTID
                            INNER JOIN FN_AREA(#{MODIFIER})   	A       ON  A.AREAID = LWR.AREAID
                            INNER JOIN BAS_PROCESSSEGMENT    SEG     ON  SEG.PROCESSSEGMENTID = LWR.PROCESSSEGMENTID
                        WHERE   1 = 1
                        AND     LWR.SENDTIME IS NOT NULL
                        AND     COALESCE(LWR.RESULTTYPE, ' ') <![CDATA[<>]]> 'SKIP' 
                        <if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
							AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}						--제품구분
						</if>
						<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">				
							AND		LOT.LOTTYPE = #{PRODUCTIONTYPE}								-- 생산구분
						</if>
						<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">				
							AND		LOT.PRODUCTDEFID = #{PRODUCTDEFID}							-- 품목코드
						</if>
						<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">				
							AND		LOT.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}				-- 품목버전
						</if>
						<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">				
							AND		PD.PRODUCTDEFNAME LIKE '%' || #{PRODUCTDEFNAME} || '%'		-- 품목명
						</if>
						<if test="AREANAME != null and AREANAME !=''">				
							AND		(A.AREAID LIKE '%' || #{AREAID} || '%' OR A.AREANAME LIKE '%' || #{AREANAME} || '%')		-- 작업장
						</if>
						<if test="MIDDLEPROCESSSEGMENT != null and MIDDLEPROCESSSEGMENT !=''">				
							AND		SEG.PROCESSSEGMENTCLASSID = #{MIDDLEPROCESSSEGMENT}				-- 중공정
						</if>
						<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">				
							AND		LWR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				-- 공정
						</if>
						<if test="OWNERFACTORYID != null and OWNERFACTORYID !=''">				
							AND		PD.OWNERFACTORYID = #{OWNERFACTORYID}				-- 담당공장
						</if>

                       ) 
                    , RESULTS_SUM AS
                    (
                        SELECT
                                ROW_NAME
                            ,   MAX(PROCESSSEGMENTID) AS PROCESSSEGMENTID
                            ,   MAX(AREAID) AS AREAID
                            ,   CASE WHEN WORKDATE IS NULL THEN 'TOTAL' ELSE WORKDATE END AS WORKDATE
                            ,   SUM(COALESCE(SENDPCSQTY, 0)) AS RSLT_PCSQTY
                            ,   SUM(COALESCE(SENDPANELQTY, 0)) AS RSLT_PANELQTY
                            ,   SUM(COALESCE(SENDPCSQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS RSLT_PCSQTY_AVG
                            ,   SUM(COALESCE(SENDPANELQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS RSLT_PANELQTY_AVG
                        FROM    RESULTS
                        WHERE   WORKDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
                        <if test="WORKTYPE != null and WORKTYPE !=''">				
							AND RESULTS.WORKTYPE = #{WORKTYPE}				-- 작업구분
						</if>
                        GROUP BY ROLLUP(ROW_NAME, WORKDATE)
                        HAVING GROUPING(ROW_NAME) = 0
                    )
                    , STOCK_TODAY AS
                    (
                        SELECT
                                COALESCE(L.PROCESSSEGMENTID, '') || ',' || COALESCE(L.AREAID, '') AS ROW_NAME
                            ,   L.PROCESSSEGMENTID
                            ,   L.AREAID
                            ,   TO_CHAR(SYSDATE , 'YYYY-MM-DD') AS WORKDATE
                            ,   SUM(L.PCSQTY) AS PCSQTY
                            ,   SUM(CEIL(L.PCSQTY/L.PANELPERQTY)) AS PANELQTY
                            -- ,    SUM(L.PANELQTY) AS PANELQTY
                        FROM    PCM_LOT L
                        INNER JOIN BAS_PRODUCTDEFINITION PD      ON  PD.PRODUCTDEFID = L.PRODUCTDEFID
                                                                AND PD.PRODUCTDEFVERSION = L.PRODUCTDEFVERSION
                        INNER JOIN FN_AREA(#{MODIFIER})   	A       ON  A.AREAID = L.AREAID
                        INNER JOIN BAS_PROCESSSEGMENT    SEG     ON  SEG.PROCESSSEGMENTID = L.PROCESSSEGMENTID
                        WHERE   1 = 1
                        AND     COALESCE(L.ISDEFECTED, 'N') = 'N'
                        AND     COALESCE(L.ISHOLD, 'N') = 'N'
                        AND     L.LOTSTATE IN ('InProduction', 'InTransit')
                        AND     L.QTY > 0
                        <if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
							AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}						--제품구분
						</if>
						<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">				
							AND		L.LOTTYPE = #{PRODUCTIONTYPE}								-- 생산구분
						</if>
						<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">				
							AND		L.PRODUCTDEFID = #{PRODUCTDEFID}							-- 품목코드
						</if>
						<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">				
							AND		L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}				-- 품목버전
						</if>
						<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">				
							AND		PD.PRODUCTDEFNAME LIKE '%' || #{PRODUCTDEFNAME} || '%'		-- 품목명
						</if>
						<if test="AREANAME != null and AREANAME !=''">				
							AND		(A.AREAID LIKE '%' || #{AREAID} || '%' OR A.AREANAME LIKE '%' || #{AREANAME} || '%')		-- 작업장
						</if>
						<if test="MIDDLEPROCESSSEGMENT != null and MIDDLEPROCESSSEGMENT !=''">				
							AND		SEG.PROCESSSEGMENTCLASSID = #{MIDDLEPROCESSSEGMENT}				-- 중공정
						</if>
						<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">				
							AND		L.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				-- 공정
						</if>
						<if test="OWNERFACTORYID != null and OWNERFACTORYID !=''">				
							AND		PD.OWNERFACTORYID = #{OWNERFACTORYID}				-- 담당공장
						</if>
                        GROUP BY L.PROCESSSEGMENTID, L.AREAID --, ROW_NAME
                    )
                    , STOCK_TODAY_SUM AS 
                    (
                        SELECT
                                ROW_NAME
                            ,   MAX(PROCESSSEGMENTID) AS PROCESSSEGMENTID
                            ,   MAX(AREAID) AS AREAID
                            ,   CASE WHEN WORKDATE IS NULL THEN 'TOTAL' ELSE WORKDATE END AS WORKDATE
                            ,   SUM(COALESCE(PCSQTY, 0)) AS STOCK_PCSQTY
                            ,   SUM(COALESCE(PANELQTY, 0)) AS STOCK_PANELQTY
                            ,   SUM(COALESCE(PCSQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PCSQTY_AVG
                            ,   SUM(COALESCE(PANELQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PANELQTY_AVG
                        FROM    STOCK_TODAY
                        WHERE   WORKDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
                        GROUP BY ROLLUP(ROW_NAME, WORKDATE)
                        HAVING GROUPING(ROW_NAME) = 0
                    )
                    , STOCK AS
                    (
                        SELECT
                                COALESCE(WSD.PROCESSSEGMENTID, '') || ',' || COALESCE(WSD.AREAID, '') AS ROW_NAME
                            ,   WSD.PROCESSSEGMENTID
                            ,   WSD.AREAID
                            ,   WSD.TXNTIME AS WORKDATE
                            ,   PCSQTY
                            ,   PANELQTY
                        FROM    PCM_WIPSUMMARYPERDAILY           WSD
                                INNER JOIN BAS_PRODUCTDEFINITION PD      ON  PD.PRODUCTDEFID = WSD.PRODUCTDEFID
                                                                        AND PD.PRODUCTDEFVERSION = WSD.PRODUCTDEFVERSION
                                INNER JOIN FN_AREA(#{MODIFIER})   A       ON  A.AREAID = WSD.AREAID
                                INNER JOIN BAS_PROCESSSEGMENT    SEG     ON  SEG.PROCESSSEGMENTID = WSD.PROCESSSEGMENTID 
                        WHERE   WSD.TXNTIME BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
                        <if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
							AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}						--제품구분
						</if>
						<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">				
							AND		WSD.LOTTYPE = #{PRODUCTIONTYPE}								-- 생산구분
						</if>
						<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">				
							AND		WSD.PRODUCTDEFID = #{PRODUCTDEFID}							-- 품목코드
						</if>
						<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">				
							AND		WSD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}				-- 품목버전
						</if>
						<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">				
							AND		PD.PRODUCTDEFNAME LIKE '%' || #{PRODUCTDEFNAME} || '%'		-- 품목명
						</if>
						<if test="AREANAME != null and AREANAME !=''">				
							AND		(A.AREAID LIKE '%' || #{AREAID} || '%' OR A.AREANAME LIKE '%' || #{AREANAME} || '%')		-- 작업장
						</if>
						<if test="MIDDLEPROCESSSEGMENT != null and MIDDLEPROCESSSEGMENT !=''">				
							AND		SEG.PROCESSSEGMENTCLASSID = #{MIDDLEPROCESSSEGMENT}				-- 중공정
						</if>
						<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">				
							AND		WSD.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				-- 공정
						</if>
						<if test="OWNERFACTORYID != null and OWNERFACTORYID !=''">				
							AND		PD.OWNERFACTORYID = #{OWNERFACTORYID}				-- 담당공장
						</if>
                        )
                    , STOCK_TEMP AS
                    (
                        SELECT
                                COALESCE(STOCK.ROW_NAME, STOCK_TODAY_SUM.ROW_NAME) AS ROW_NAME
                            ,   COALESCE(STOCK.PROCESSSEGMENTID, STOCK_TODAY_SUM.PROCESSSEGMENTID) AS PROCESSSEGMENTID
                            ,   COALESCE(STOCK.AREAID, STOCK_TODAY_SUM.AREAID) AS AREAID
                            ,   COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) AS WORKDATE
                            ,   CASE WHEN COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) = TO_CHAR(SYSDATE , 'YYYY-MM-DD') THEN STOCK_TODAY_SUM.STOCK_PCSQTY ELSE COALESCE(STOCK.PCSQTY, 0) END AS PCSQTY
                            ,   CASE WHEN COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) = TO_CHAR(SYSDATE , 'YYYY-MM-DD') THEN STOCK_TODAY_SUM.STOCK_PANELQTY ELSE COALESCE(STOCK.PANELQTY, 0) END AS PANELQTY
                        FROM            STOCK
                        FULL OUTER JOIN STOCK_TODAY_SUM ON  STOCK_TODAY_SUM.ROW_NAME = STOCK.ROW_NAME
                                                        AND STOCK_TODAY_SUM.WORKDATE = STOCK.WORKDATE
                        WHERE   COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
                    )
                    , STOCK_SUM AS
                    (
                        SELECT
                                ROW_NAME
                            ,   MAX(PROCESSSEGMENTID) AS PROCESSSEGMENTID
                            ,   MAX(AREAID) AS AREAID
                            ,   CASE WHEN WORKDATE IS NULL THEN 'TOTAL' ELSE WORKDATE END AS WORKDATE
                            ,   SUM(COALESCE(PCSQTY, 0)) AS STOCK_PCSQTY
                            ,   SUM(COALESCE(PANELQTY, 0)) AS STOCK_PANELQTY
                            ,   SUM(COALESCE(PCSQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PCSQTY_AVG
                            ,   SUM(COALESCE(PANELQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PANELQTY_AVG
                        FROM    STOCK_TEMP
                        WHERE   WORKDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
                        GROUP BY ROLLUP(ROW_NAME, WORKDATE)
                        HAVING GROUPING(ROW_NAME) = 0
                    )
                    SELECT
                            COALESCE(STOCK_SUM.ROW_NAME, RESULTS_SUM.ROW_NAME)                          AS ROW_NAME
                        ,   COALESCE(STOCK_SUM.PROCESSSEGMENTID, RESULTS_SUM.PROCESSSEGMENTID)          AS PROCESSSEGMENTID
                        ,   COALESCE(STOCK_SUM.AREAID, RESULTS_SUM.AREAID)                              AS AREAID
                        ,   COALESCE(STOCK_SUM.WORKDATE, RESULTS_SUM.WORKDATE)                          AS WORKDATE
                        ,	RESULTS_SUM.RSLT_PCSQTY														AS RSLT_PCS
                        ,	RESULTS_SUM.RSLT_PANELQTY													AS RSLT_PNL
                        ,	STOCK_SUM.STOCK_PCSQTY														AS STOCK_PCS
                        ,	STOCK_SUM.STOCK_PANELQTY													AS STOCK_PNL
                        ,	RESULTS_SUM.RSLT_PCSQTY_AVG													AS RSLT_PCS_AVG
                        ,	RESULTS_SUM.RSLT_PANELQTY_AVG												AS RSLT_PNL_AVG
                        ,	STOCK_SUM.STOCK_PCSQTY_AVG													AS STOCK_PCS_AVG
                        ,	STOCK_SUM.STOCK_PANELQTY_AVG												AS STOCK_PNL_AVG
                        --,   (RESULTS_SUM.RSLT_PCSQTY, RESULTS_SUM.RSLT_PANELQTY, STOCK_SUM.STOCK_PCSQTY, STOCK_SUM.STOCK_PANELQTY
                        --        , RESULTS_SUM.RSLT_PCSQTY_AVG, RESULTS_SUM.RSLT_PANELQTY_AVG, STOCK_SUM.STOCK_PCSQTY_AVG, STOCK_SUM.STOCK_PANELQTY_AVG)::i2
                    FROM        RESULTS_SUM
                    FULL OUTER JOIN STOCK_SUM       ON  RESULTS_SUM.ROW_NAME = STOCK_SUM.ROW_NAME 
                                                    AND RESULTS_SUM.WORKDATE = STOCK_SUM.WORKDATE
                    ORDER BY ROW_NAME, WORKDATE, ${ORDERBY_COLUMNS}
                )
	            PIVOT
	        	(	
	        		SUM(RSLT_PCS) AS RSLT_PCS, 
	        		SUM(RSLT_PNL)  AS RSLT_PNL,
	        		SUM(STOCK_PCS)  AS STOCK_PCS,
	        		SUM(STOCK_PNL)  AS STOCK_PNL,
	        		SUM(RSLT_PCS_AVG)  AS RSLT_PCS_AVG,
	        		SUM(RSLT_PNL_AVG)  AS RSLT_PNL_AVG,
	        		SUM(STOCK_PCS_AVG)  AS STOCK_PCS_AVG,
	        		SUM(STOCK_PNL_AVG)  AS STOCK_PNL_AVG
	        		FOR WORKDATE in(${COLUMNS})
	        	)
            )  P --(ROW_NAME TEXT, PROCESSSEGMENTID TEXT, AREAID TEXT, ' || v_columns || ', TOTAL i2)
            
        INNER JOIN BAS_PROCESSSEGMENT    SEG     ON SEG.PROCESSSEGMENTID = P.PROCESSSEGMENTID
        LEFT OUTER JOIN CMD_DICTIONARY   SGD     ON SGD.DICTIONARYID = SEG.PROCESSSEGMENTNAME AND SGD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
        INNER JOIN BAS_AREA              ARE     ON ARE.AREAID = P.AREAID
        LEFT OUTER JOIN CMD_DICTIONARY   ARD     ON ARD.DICTIONARYID = ARE.AREANAME AND ARD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
        ORDER BY P.PROCESSSEGMENTID, P.AREAID
	</select>
	<select id="selectStockbyProductList" parameterType="map" resultType="hashmap">
	/* "usp_wip_selectdailyresultandstockbyproduct" */
	--id : selectStockbyProductList
		SELECT
		<if test='INNERREVISIONTOTAL == "Y"'>	
				P.PRODUCTDEFID
				,	P.PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME
				,	PP.USERSEQUENCE
				,	P.PROCESSSEGMENTID
				, 	P.AREAID 
				,	COALESCE(SGD.DICTIONARYNAME, SEG.PROCESSSEGMENTNAME) AS PROCESSSEGMENTNAME
				,	COALESCE(ARD.DICTIONARYNAME, ARE.AREANAME) AS AREANAME
				, 	${COLUMNS_SELECT}
				,	NVL("'TOTAL'_RSLT_PCS", 0) AS TOTAL_RSLT_PCS, NVL("'TOTAL'_RSLT_PNL", 0) AS TOTAL_RSLT_PNL, NVL("'TOTAL'_STOCK_PCS", 0) AS TOTAL_STOCK_PCS, NVL("'TOTAL'_STOCK_PNL", 0) AS TOTAL_STOCK_PNL 
	           	,   NVL("'TOTAL'_RSLT_PCS_AVG", 0) AS TOTAL_RSLT_PCS_AVG, NVL("'TOTAL'_RSLT_PNL_AVG", 0) AS TOTAL_RSLT_PNL_AVG, NVL("'TOTAL'_STOCK_PCS_AVG", 0) AS TOTAL_STOCK_PCS_AVG, NVL("'TOTAL'_STOCK_PNL_AVG", 0) AS TOTAL_STOCK_PNL_AVG			
		</if>
		<if test='INNERREVISIONTOTAL == "N"'>
				P.PRODUCTDEFID AS PRODUCTDEFID
				,	'' AS PRODUCTDEFVERSION
				,	PD.PRODUCTDEFNAME AS PRODUCTDEFNAME 
				,	PP.USERSEQUENCE AS USERSEQUENCE
				,	P.PROCESSSEGMENTID AS PROCESSSEGMENTID
				, 	P.AREAID AS AREAID 
				,	MAX(COALESCE(SGD.DICTIONARYNAME, SEG.PROCESSSEGMENTNAME)) AS PROCESSSEGMENTNAME
				,	MAX(COALESCE(ARD.DICTIONARYNAME, ARE.AREANAME)) AS AREANAME
				, 	${COLUMNS_SELECT}
				,	NVL("'TOTAL'_RSLT_PCS", 0) AS TOTAL_RSLT_PCS, NVL("'TOTAL'_RSLT_PNL", 0) AS TOTAL_RSLT_PNL, NVL("'TOTAL'_STOCK_PCS", 0) AS TOTAL_STOCK_PCS, NVL("'TOTAL'_STOCK_PNL", 0) AS TOTAL_STOCK_PNL 
	           	,   NVL("'TOTAL'_RSLT_PCS_AVG", 0) AS TOTAL_RSLT_PCS_AVG, NVL("'TOTAL'_RSLT_PNL_AVG", 0) AS TOTAL_RSLT_PNL_AVG, NVL("'TOTAL'_STOCK_PCS_AVG", 0) AS TOTAL_STOCK_PCS_AVG, NVL("'TOTAL'_STOCK_PNL_AVG", 0) AS TOTAL_STOCK_PNL_AVG
		</if>
	FROM 
		(		
			SELECT * FROM
	    	(
				WITH RESULTS AS
				(
					SELECT 
							COALESCE(LWR.PRODUCTDEFID, '') || ',' || COALESCE(LWR.PRODUCTDEFVERSION, '') || ',' || COALESCE(LWR.PROCESSSEGMENTID, '') || ',' || COALESCE(LWR.AREAID, '') AS ROW_NAME
						,	LWR.PRODUCTDEFID
						,	LWR.PRODUCTDEFVERSION
						,	LWR.PROCESSSEGMENTID
						,	LWR.AREAID
						,	TO_CHAR(CASE WHEN TO_CHAR(LWR.SENDTIME, 'HH24:MI:SS') <![CDATA[<]]> PLT.WORKTIME THEN LWR.SENDTIME - (INTERVAL '1' DAY) ELSE LWR.SENDTIME END, 'YYYY-MM-DD') AS WORKDATE
						, 	LWR.SENDPCSQTY
						,	LWR.SENDPANELQTY
						,   CASE WHEN NVL(LWR.ISREWORK,'N') = 'Y' THEN 'IsRework'
			                         WHEN LOT.LOTCREATEDTYPE = 'SplitRoll' OR LOT.LOTCREATEDTYPE = 'FinalInspect' OR NVL(LOT.LOTCREATEDTYPE, 'Normal') = 'Normal' THEN 'Normal'
			                         WHEN LOT.LOTCREATEDTYPE = 'Return' THEN 'Return'
			                    END 						AS WORKTYPE
					FROM
						PCM_LOTWORKRESULT 					LWR
						INNER JOIN BAS_PLANT				PLT 	ON	PLT.PLANTID = LWR.PLANTID
						INNER JOIN BAS_PRODUCTDEFINITION	PD		ON	PD.PRODUCTDEFID = LWR.PRODUCTDEFID
																	AND	PD.PRODUCTDEFVERSION = LWR.PRODUCTDEFVERSION
						INNER JOIN PCM_LOT					LOT		ON	LOT.LOTID = LWR.LOTID
						INNER JOIN FN_AREA(#{MODIFIER}) 	A 		ON A.AREAID = LWR.AREAID
						INNER JOIN BAS_PROCESSSEGMENT		SEG		ON	SEG.PROCESSSEGMENTID = LWR.PROCESSSEGMENTID
					WHERE	1 = 1
					AND		LWR.SENDTIME IS NOT NULL
					AND		COALESCE(LWR.RESULTTYPE, ' ')<![CDATA[<>]]> 'SKIP' 
					<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
						AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}						--제품구분
					</if>
					<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">				
						AND		LOT.LOTTYPE = #{PRODUCTIONTYPE}								-- 생산구분
					</if>
					<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">				
						AND		LOT.PRODUCTDEFID = #{PRODUCTDEFID}							-- 품목코드
					</if>
					<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">				
						AND		LOT.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}				-- 품목버전
					</if>
					<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">				
						AND		PD.PRODUCTDEFNAME LIKE '%' || #{PRODUCTDEFNAME} || '%'		-- 품목명
					</if>
					<if test="AREANAME != null and AREANAME !=''">				
						AND		(A.AREAID LIKE '%' || #{AREAID} || '%' OR A.AREANAME LIKE '%' || #{AREANAME} || '%')		-- 작업장
					</if>
					<if test="MIDDLEPROCESSSEGMENT != null and MIDDLEPROCESSSEGMENT !=''">				
						AND		SEG.PROCESSSEGMENTCLASSID = #{MIDDLEPROCESSSEGMENT}				-- 중공정
					</if>
					<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">				
						AND		LWR.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				-- 공정
					</if>
					<if test="OWNERFACTORYID != null and OWNERFACTORYID !=''">				
						AND		PD.OWNERFACTORYID = #{OWNERFACTORYID}				-- 담당공장
					</if>
				)
				, RESULTS_SUM AS
				(
					SELECT
							ROW_NAME
						,	MAX(PRODUCTDEFID) AS PRODUCTDEFID
						,	MAX(PRODUCTDEFVERSION) AS PRODUCTDEFVERSION
						,	MAX(PROCESSSEGMENTID) AS PROCESSSEGMENTID
						,	MAX(AREAID) AS AREAID
						, 	CASE WHEN WORKDATE IS NULL THEN 'TOTAL' ELSE WORKDATE END AS WORKDATE
						,	SUM(COALESCE(SENDPCSQTY, 0)) AS RSLT_PCSQTY
						,	SUM(COALESCE(SENDPANELQTY, 0)) AS RSLT_PANELQTY
						,	SUM(COALESCE(SENDPCSQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS RSLT_PCSQTY_AVG
						,	SUM(COALESCE(SENDPANELQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS RSLT_PANELQTY_AVG
					FROM 	RESULTS
					WHERE	WORKDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')
					<if test="WORKTYPE != null and WORKTYPE !=''">				
						AND RESULTS.WORKTYPE = #{WORKTYPE}				-- 작업구분
					</if>
					GROUP BY ROLLUP(ROW_NAME, WORKDATE)
					HAVING GROUPING(ROW_NAME) = 0
				)
				, STOCK_TODAY AS
				(
					SELECT
							COALESCE(L.PRODUCTDEFID, '') || ',' || COALESCE(L.PRODUCTDEFVERSION, '') || ',' || COALESCE(L.PROCESSSEGMENTID, '') || ',' || COALESCE(L.AREAID, '') AS ROW_NAME
						,	L.PRODUCTDEFID
						,	L.PRODUCTDEFVERSION
						,	L.PROCESSSEGMENTID
						,	L.AREAID
						,	TO_CHAR(SYSDATE , 'YYYY-MM-DD') AS WORKDATE
						,	SUM(L.PCSQTY) AS PCSQTY
						,	SUM(CEIL(L.PCSQTY/L.PANELPERQTY)) AS PANELQTY
						-- ,	SUM(L.PANELQTY) AS PANELQTY
					FROM	PCM_LOT L
					INNER JOIN BAS_PRODUCTDEFINITION	PD		ON	PD.PRODUCTDEFID = L.PRODUCTDEFID
																AND	PD.PRODUCTDEFVERSION = L.PRODUCTDEFVERSION
					INNER JOIN FN_AREA(#{MODIFIER}) 	A 		ON A.AREAID = L.AREAID
					INNER JOIN BAS_PROCESSSEGMENT		SEG		ON	SEG.PROCESSSEGMENTID = L.PROCESSSEGMENTID 
					WHERE	1 = 1
					AND		COALESCE(L.ISDEFECTED, 'N') = 'N'
					AND		COALESCE(L.ISHOLD, 'N') = 'N'
					AND		L.LOTSTATE IN ('InProduction', 'InTransit')
					AND		L.QTY > 0
					<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
						AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}						--제품구분
					</if>
					<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">				
						AND		L.LOTTYPE = #{PRODUCTIONTYPE}								-- 생산구분
					</if>
					<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">				
						AND		L.PRODUCTDEFID = #{PRODUCTDEFID}							-- 품목코드
					</if>
					<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">				
						AND		L.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}				-- 품목버전
					</if>
					<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">				
						AND		PD.PRODUCTDEFNAME LIKE '%' || #{PRODUCTDEFNAME} || '%'		-- 품목명
					</if>
					<if test="AREANAME != null and AREANAME !=''">				
						AND		(A.AREAID LIKE '%' || #{AREAID} || '%' OR A.AREANAME LIKE '%' || #{AREANAME} || '%')		-- 작업장
					</if>
					<if test="MIDDLEPROCESSSEGMENT != null and MIDDLEPROCESSSEGMENT !=''">				
						AND		SEG.PROCESSSEGMENTCLASSID = #{MIDDLEPROCESSSEGMENT}				-- 중공정
					</if>
					<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">				
						AND		L.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				-- 공정
					</if>
					<if test="OWNERFACTORYID != null and OWNERFACTORYID !=''">				
						AND		PD.OWNERFACTORYID = #{OWNERFACTORYID}				-- 담당공장
					</if>
					GROUP BY L.PRODUCTDEFID, L.PRODUCTDEFVERSION, L.PROCESSSEGMENTID, L.AREAID --ROW_NAME, 
				)
				, STOCK_TODAY_SUM AS 
				(
					SELECT
							ROW_NAME
						,	MAX(PRODUCTDEFID) AS PRODUCTDEFID
						,	MAX(PRODUCTDEFVERSION) AS PRODUCTDEFVERSION
						,	MAX(PROCESSSEGMENTID) AS PROCESSSEGMENTID
						,	MAX(AREAID) AS AREAID
						, 	CASE WHEN WORKDATE IS NULL THEN 'TOTAL' ELSE WORKDATE END AS WORKDATE
						,	SUM(COALESCE(PCSQTY, 0)) AS STOCK_PCSQTY
						,	SUM(COALESCE(PANELQTY, 0)) AS STOCK_PANELQTY
						,	SUM(COALESCE(PCSQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PCSQTY_AVG
						,	SUM(COALESCE(PANELQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PANELQTY_AVG
					FROM 	STOCK_TODAY
					WHERE	WORKDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD') 
					GROUP BY ROLLUP(ROW_NAME, WORKDATE)
					HAVING GROUPING(ROW_NAME) = 0
				)
				, STOCK AS
				(
					SELECT
							COALESCE(WSD.PRODUCTDEFID, '') || ',' || COALESCE(WSD.PRODUCTDEFVERSION, '') || ',' || COALESCE(WSD.PROCESSSEGMENTID, '') || ',' || COALESCE(WSD.AREAID, '') AS ROW_NAME
						,	WSD.PRODUCTDEFID
						,	WSD.PRODUCTDEFVERSION
						,	WSD.PROCESSSEGMENTID
						,	WSD.AREAID
						,	WSD.TXNTIME AS WORKDATE
						, 	PCSQTY
						, 	PANELQTY
					FROM	PCM_WIPSUMMARYPERDAILY				WSD
							INNER JOIN BAS_PRODUCTDEFINITION	PD		ON	PD.PRODUCTDEFID = WSD.PRODUCTDEFID
																		AND PD.PRODUCTDEFVERSION = WSD.PRODUCTDEFVERSION
							INNER JOIN FN_AREA(#{MODIFIER}) 	A 		ON A.AREAID = WSD.AREAID
							INNER JOIN BAS_PROCESSSEGMENT		SEG		ON	SEG.PROCESSSEGMENTID = WSD.PROCESSSEGMENTID
					WHERE	WSD.TXNTIME BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD') 
					<if test="PRODUCTDIVISION != null and PRODUCTDIVISION !=''">
						AND		PD.PRODUCTDEFTYPE = #{PRODUCTDIVISION}						--제품구분
					</if>
					<if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !=''">				
						AND		WSD.LOTTYPE = #{PRODUCTIONTYPE}								-- 생산구분
					</if>
					<if test="PRODUCTDEFID != null and PRODUCTDEFID !=''">				
						AND		WSD.PRODUCTDEFID = #{PRODUCTDEFID}							-- 품목코드
					</if>
					<if test="PRODUCTDEFVERSION != null and PRODUCTDEFVERSION !=''">				
						AND		WSD.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}				-- 품목버전
					</if>
					<if test="PRODUCTDEFNAME != null and PRODUCTDEFNAME !=''">				
						AND		PD.PRODUCTDEFNAME LIKE '%' || #{PRODUCTDEFNAME} || '%'		-- 품목명
					</if>
					<if test="AREANAME != null and AREANAME !=''">				
						AND		(A.AREAID LIKE '%' || #{AREAID} || '%' OR A.AREANAME LIKE '%' || #{AREANAME} || '%')		-- 작업장
					</if>
					<if test="MIDDLEPROCESSSEGMENT != null and MIDDLEPROCESSSEGMENT !=''">				
						AND		SEG.PROCESSSEGMENTCLASSID = #{MIDDLEPROCESSSEGMENT}				-- 중공정
					</if>
					<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !=''">				
						AND		WSD.PROCESSSEGMENTID = #{PROCESSSEGMENTID}				-- 공정
					</if>
					<if test="OWNERFACTORYID != null and OWNERFACTORYID !=''">				
						AND		PD.OWNERFACTORYID = #{OWNERFACTORYID}				-- 담당공장
					</if>
				)
				, STOCK_TEMP AS
				(
					SELECT
							COALESCE(STOCK.ROW_NAME, STOCK_TODAY_SUM.ROW_NAME) AS ROW_NAME
						,	COALESCE(STOCK.PRODUCTDEFID, STOCK_TODAY_SUM.PRODUCTDEFID) AS PRODUCTDEFID
						,	COALESCE(STOCK.PRODUCTDEFVERSION, STOCK_TODAY_SUM.PRODUCTDEFVERSION) AS PRODUCTDEFVERSION
						,	COALESCE(STOCK.PROCESSSEGMENTID, STOCK_TODAY_SUM.PROCESSSEGMENTID) AS PROCESSSEGMENTID
						,	COALESCE(STOCK.AREAID, STOCK_TODAY_SUM.AREAID) AS AREAID
						, 	COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) AS WORKDATE
						,	CASE WHEN COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) = TO_CHAR(SYSDATE , 'YYYY-MM-DD') THEN STOCK_TODAY_SUM.STOCK_PCSQTY ELSE COALESCE(STOCK.PCSQTY, 0) END AS PCSQTY
						,	CASE WHEN COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) = TO_CHAR(SYSDATE , 'YYYY-MM-DD') THEN STOCK_TODAY_SUM.STOCK_PANELQTY ELSE COALESCE(STOCK.PANELQTY, 0) END AS PANELQTY
					FROM 			STOCK
					FULL OUTER JOIN STOCK_TODAY_SUM	ON	STOCK_TODAY_SUM.ROW_NAME = STOCK.ROW_NAME
													AND STOCK_TODAY_SUM.WORKDATE = STOCK.WORKDATE
					WHERE	COALESCE(STOCK.WORKDATE, STOCK_TODAY_SUM.WORKDATE) BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD')  
				)
				, STOCK_SUM AS
				(
					SELECT
							ROW_NAME
						,	MAX(PRODUCTDEFID) AS PRODUCTDEFID
						,	MAX(PRODUCTDEFVERSION) AS PRODUCTDEFVERSION
						,	MAX(PROCESSSEGMENTID) AS PROCESSSEGMENTID
						,	MAX(AREAID) AS AREAID
						, 	CASE WHEN WORKDATE IS NULL THEN 'TOTAL' ELSE WORKDATE END AS WORKDATE
						,	SUM(COALESCE(PCSQTY, 0)) AS STOCK_PCSQTY
						,	SUM(COALESCE(PANELQTY, 0)) AS STOCK_PANELQTY
						,	SUM(COALESCE(PCSQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PCSQTY_AVG
						,	SUM(COALESCE(PANELQTY, 0)) / ((TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD') - TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD')) + 1) AS STOCK_PANELQTY_AVG
					FROM 	STOCK_TEMP
					WHERE	WORKDATE BETWEEN TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODFR},1,8),'YYYYMMDD'), 'YYYY-MM-DD') AND TO_CHAR(TO_DATE(SUBSTR(#{PERIOD_PERIODTO},1,8),'YYYYMMDD'), 'YYYY-MM-DD') 
					GROUP BY ROLLUP(ROW_NAME, WORKDATE)
					HAVING GROUPING(ROW_NAME) = 0
				)
				SELECT
						COALESCE(STOCK_SUM.ROW_NAME, RESULTS_SUM.ROW_NAME)							AS ROW_NAME
					,	COALESCE(STOCK_SUM.PRODUCTDEFID, RESULTS_SUM.PRODUCTDEFID)					AS PRODUCTDEFID
					,	COALESCE(STOCK_SUM.PRODUCTDEFVERSION, RESULTS_SUM.PRODUCTDEFVERSION)		AS PRODUCTDEFVERSION
					,	COALESCE(STOCK_SUM.PROCESSSEGMENTID, RESULTS_SUM.PROCESSSEGMENTID)			AS PROCESSSEGMENTID
					,	COALESCE(STOCK_SUM.AREAID, RESULTS_SUM.AREAID)								AS AREAID
					, 	COALESCE(STOCK_SUM.WORKDATE, RESULTS_SUM.WORKDATE)			 				AS WORKDATE
					,	RESULTS_SUM.RSLT_PCSQTY														AS RSLT_PCS
	                ,	RESULTS_SUM.RSLT_PANELQTY													AS RSLT_PNL
	                ,	STOCK_SUM.STOCK_PCSQTY														AS STOCK_PCS
	                ,	STOCK_SUM.STOCK_PANELQTY													AS STOCK_PNL
	                ,	RESULTS_SUM.RSLT_PCSQTY_AVG													AS RSLT_PCS_AVG
	                ,	RESULTS_SUM.RSLT_PANELQTY_AVG												AS RSLT_PNL_AVG
	                ,	STOCK_SUM.STOCK_PCSQTY_AVG													AS STOCK_PCS_AVG
	                ,	STOCK_SUM.STOCK_PANELQTY_AVG												AS STOCK_PNL_AVG
					--,	(RESULTS_SUM.RSLT_PCSQTY, RESULTS_SUM.RSLT_PANELQTY, STOCK_SUM.STOCK_PCSQTY, STOCK_SUM.STOCK_PANELQTY
					--			,	RESULTS_SUM.RSLT_PCSQTY_AVG, RESULTS_SUM.RSLT_PANELQTY_AVG, STOCK_SUM.STOCK_PCSQTY_AVG, STOCK_SUM.STOCK_PANELQTY_AVG)::i2
				FROM 		RESULTS_SUM
				FULL OUTER JOIN	STOCK_SUM 		ON 	RESULTS_SUM.ROW_NAME = STOCK_SUM.ROW_NAME 
												AND RESULTS_SUM.WORKDATE = STOCK_SUM.WORKDATE
				ORDER BY ROW_NAME, WORKDATE , ${ORDERBY_COLUMNS}
				--SELECT TO_CHAR(I::DATE, ''''yyyy-MM-dd'''') FROM GENERATE_SERIES(''''' || p_period_periodfr || ''''', ''''' || p_period_periodto || ''''', ''''1 DAY''''::INTERVAL) I UNION ALL SELECT ''''TOTAL'''' ''
			)
	        PIVOT
	    	(	
	    		SUM(RSLT_PCS) AS RSLT_PCS, 
	    		SUM(RSLT_PNL)  AS RSLT_PNL,
	    		SUM(STOCK_PCS)  AS STOCK_PCS,
	    		SUM(STOCK_PNL)  AS STOCK_PNL,
	    		SUM(RSLT_PCS_AVG)  AS RSLT_PCS_AVG,
	    		SUM(RSLT_PNL_AVG)  AS RSLT_PNL_AVG,
	    		SUM(STOCK_PCS_AVG)  AS STOCK_PCS_AVG,
	    		SUM(STOCK_PNL_AVG)  AS STOCK_PNL_AVG
	    		FOR WORKDATE in(${COLUMNS})
	    	)
		) P --(ROW_NAME TEXT, PRODUCTDEFID TEXT, PRODUCTDEFVERSION TEXT, PROCESSSEGMENTID TEXT, AREAID TEXT, ' || v_columns || ', TOTAL i2)
		INNER JOIN BAS_PRODUCTDEFINITION PD		ON	PD.PRODUCTDEFID = P.PRODUCTDEFID
												AND PD.PRODUCTDEFVERSION = P.PRODUCTDEFVERSION
		LEFT OUTER JOIN BAS_PROCESSPATH	PP		ON 	PP.PROCESSDEFID = PD.PROCESSDEFID
												AND	PP.PROCESSDEFVERSION = PD.PROCESSDEFVERSION
												AND PP.PROCESSSEGMENTID = P.PROCESSSEGMENTID
		INNER JOIN BAS_PROCESSSEGMENT	SEG		ON	SEG.PROCESSSEGMENTID = P.PROCESSSEGMENTID
		LEFT OUTER JOIN CMD_DICTIONARY	SGD		ON	SGD.DICTIONARYID = SEG.PROCESSSEGMENTNAME AND SGD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		INNER JOIN BAS_AREA				ARE		ON	ARE.AREAID = P.AREAID
		LEFT OUTER JOIN CMD_DICTIONARY	ARD		ON	ARD.DICTIONARYID = ARE.AREANAME AND ARD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		<if test='INNERREVISIONTOTAL == "N"'>
				GROUP BY
						P.PRODUCTDEFID
					,	PD.PRODUCTDEFNAME
					,	PP.USERSEQUENCE
					,	P.PROCESSSEGMENTID
					, 	P.AREAID 
					,	${COLUMNS_GROUP}
					,	"'TOTAL'_RSLT_PCS", "'TOTAL'_RSLT_PNL", "'TOTAL'_STOCK_PCS", "'TOTAL'_STOCK_PNL" 
	           		,   "'TOTAL'_RSLT_PCS_AVG", "'TOTAL'_RSLT_PNL_AVG", "'TOTAL'_STOCK_PCS_AVG", "'TOTAL'_STOCK_PNL_AVG"
				ORDER BY P.PRODUCTDEFID, ROUND(PP.USERSEQUENCE)
		</if>
		<if test='INNERREVISIONTOTAL == "Y"'>		
				ORDER BY P.PRODUCTDEFID, P.PRODUCTDEFVERSION, ROUND(PP.USERSEQUENCE)
		</if>
	</select>
</mapper>