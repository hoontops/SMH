<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.pcm.dao.PCMOspDao">


     <select id="GetlotidInformatByOsp" parameterType="map" resultType="hashmap">
	    --
		-- GetlotidInformatByOsp
		-- Version:10001
			SELECT
				SRD.PRODUCTDEFID
			,	SRD.PRODUCTDEFVERSION
			,	SRD.PRODUCTIONTYPE
			,	SPL.WORKTIME
			,	SAR.VENDORID
			,	SAR.OWNTYPE
			,	COALESCE(SRD.PCSMM ,0) AS PCSMM 
			,	COALESCE(SRD.PCSPNL,0) AS PCSPNL 
			,	TO_CHAR(TO_DATE(#{SENDTIME}	,'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME,'YYYY-MM-DD') AS OSPPRICEDATE
		FROM	       SF_PRODUCTDEFINITION SRD
		INNER JOIN SF_PLANT               SPL  ON	SPL.PLANTID      = #{PLANTID}
		INNER JOIN   SF_AREA              SAR  ON	SAR.PLANTID      = #{PLANTID}
							                   AND	SAR.AREAID       = #{AREAID}	
		WHERE 1=1
		AND		SRD.PRODUCTDEFID            = #{PRODUCTDEFID}
		AND		SRD.PRODUCTDEFVERSION       = #{PRODUCTDEFVERSION}
    </select>
    <!-- Site 정보 상세조회-->
    <select id="selectBasPlant" parameterType="map" resultType="hashmap">
    SELECT 
        A.PLANTID	 
        ,A.ENTERPRISEID	 
        ,A.PLANTNAME	 
        ,A.ADDRESS	 
        ,A.PHONE	 
        ,A.FAXNO	 
        ,A.LANGUAGE	 
        ,A.ISOSPBUDGETCONTROL	 
        ,A.ISOSPETCBUDGETCONTROL	 
        ,A.WORKTIME	 
        ,A.TIMEZONE	 
        ,A.SETHOLDDATE	 
        ,A.ISOTIMEZONE	 
        ,A.ISAUDIT	 
        ,A.ISOSPWAREHOUSEOPERATE	 
        ,A.ISWIPSURVEY	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
    FROM	BAS_PLANT A 
    WHERE A.PLANTID = #{PLANTID}
    </select>
       
    <!-- 외주실적 상세조회-->
    <select id="selectOsmOspactual" parameterType="map" resultType="hashmap">
    SELECT 
        A.LOTID	 
        ,A.LOTHISTKEY	 
        ,A.SENDTIME	 
        ,A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.PROCESSSEGMENTID	 
        ,A.AREAID	 
        ,A.VENDORID	 
        ,A.LOTTYPE	 
        ,A.ISREWORK	 
        ,A.OWNTYPE	 
        ,A.PROCESSPRICETYPE	 
        ,A.PCSPNL	 
        ,A.PCSMM	 
        ,A.SENDPCSQTY	 
        ,A.SENDPANELQTY	 
        ,A.SENDM2QTY	 
        ,A.DEFECTQTY	 
        ,A.PANELDEFECTQTY	 
        ,A.PSEUDODEFECTQTY	 
        ,A.PANELPSEUDODEFECTQTY	 
        ,A.PCSQTY	 
        ,A.PANELQTY	 
        ,A.M2QTY	 
        ,A.PRICE	 
        ,A.AMOUNT	 
        ,A.ISERROR	 
        ,A.REDUCEAMOUNT	 
        ,A.SETTLEAMOUNT	 
        ,A.ISMAJORCLOSE	 
        ,A.ISEXCEPT	 
        ,A.EXCEPTUSER	 
        ,A.EXCEPTTIME	 
        ,A.PLANTID	 
        ,A.ENTERPRISEID	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
    FROM	OSM_OSPACTUAL A 
    WHERE A.LOTHISTKEY = #{LOTHISTKEY}
    AND	A.LOTID = #{LOTID}
    </select>

    <!-- 외주실적 변경 -->
    <update id="updateOsmOspactual" parameterType="map" >
    UPDATE OSM_OSPACTUAL 
    SET 
        MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE LOTHISTKEY = #{LOTHISTKEY}
    AND LOTID = #{LOTID}
    </update>	
    
    <!-- 외주실적내역 변경 -->
    <update id="updateOsmOspactualdetail" parameterType="map" >
    UPDATE OSM_OSPACTUALDETAIL 
    SET 
        MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE LOTHISTKEY = #{LOTHISTKEY}
    AND LOTID = #{LOTID}
    AND PRICECOMBINATIONID = #{PRICECOMBINATIONID}
    </update>

    <!-- 외주실적내역 상세조회-->
    <select id="selectOsmOspactualdetail" parameterType="map" resultType="hashmap">
    SELECT 
        A.LOTID	 
        ,A.LOTHISTKEY	 
        ,A.OSPPRICECODE	 
        ,A.SPECUNIT	 
        ,A.SPECVALUE	 
        ,A.CALCULATEUNIT	 
        ,A.CALCULATEQTY	 
        ,A.PRICECOMBINATIONID	 
        ,A.STARTDATE	 
        ,A.PRICE	 
        ,A.AMOUNT	 
        ,A.ISERROR	 
        ,A.ERRORID	 
        ,A.ERRORCOMMENT	 
        ,A.PLANTID	 
        ,A.ENTERPRISEID	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
    FROM	OSM_OSPACTUALDETAIL A 
    WHERE A.LOTHISTKEY = #{LOTHISTKEY}
    AND	A.LOTID = #{LOTID}
    AND	A.PRICECOMBINATIONID = #{PRICECOMBINATIONID}
    </select>  
    
    
    <select id="GetOspProcessAttributeValue" parameterType="map" resultType="hashmap">
		-- GetOspProcessAttributeValue
		-- Version:10001
		SELECT
				MPV.ITEMID
			,	MPV.ITEMVERSION
			,	MPV.ENTERPRISEID
			,	MPV.PLANTID
			,	MPV.PROCESSSEGMENTID
			,	COALESCE(MPV.OSPPRICECODE,'') AS  OSPPRICECODE		
			,	MPV.ATTRIBUTECODE
			,	(CASE WHEN MPV.ATTRIBUTECODE = OPC.SPECUNIT THEN	COALESCE(MPV.ATTRIBUTEVALUE,1) 
				      ELSE 1  END ) AS  ATTRIBUTEVALUE	
			,	OPC.CALCULATEUNIT
			,	CASE WHEN OPC.SPECUNIT > '' THEN
						CASE WHEN  COALESCE(MPV.ATTRIBUTECODE,'') != OPC.SPECUNIT THEN 'ERRORCODE'  --사양단위 다름
						     WHEN  COALESCE(MPV.ATTRIBUTEVALUE,0) = 0             THEN 'ERRORVALUE'
						     ELSE  'SUCCESS' 
						END 
					ELSE  'SUCCESS'
				END                 AS ATTRIBUTEVALUECHECK
		FROM         MM_PROCESSATTRIBUTEVALUE   MPV
		INNER   JOIN CT_OSPPRICECODE            OPC  ON  OPC.OSPPRICECODE     = MPV.OSPPRICECODE
		                                             AND OPC.PLANTID          = MPV.PLANTID
		                                             AND OPC.ENTERPRISEID     = MPV.ENTERPRISEID
		WHERE	MPV.VALIDSTATE        =  'Valid'
		AND		MPV.ENTERPRISEID      = #{ENTERPRISEID}
		AND		MPV.PLANTID           = #{PLANTID} 
		AND		MPV.ITEMID            = #{ITEMID}
		AND		MPV.ITEMVERSION       = #{ITEMVERSION} 
		AND		MPV.PROCESSSEGMENTID  = #{PROCESSSEGMENTID}
		AND		MPV.ATTRIBUTECLASS    =  'OSP'    
	</select>
	
    <select id="GetlotDefectqtyByOsp" parameterType="map" resultType="hashmap">
		-- GetlotDefectqtyByOsp
		-- Version:10001
		SELECT 
				COALESCE(SUM(LDF.DEFECTQTY),0) AS DEFECTQTY
		FROM       CT_LOTWORKRESULT    LWR
		INNER JOIN SF_LOT              SLT     ON  SLT.PARENTLOTID           = LWR.LOTID
		INNER JOIN CT_LOTWORKRESULT    LW      ON  LW.LOTID                  = SLT.LOTID
		                                       AND LW.PROCESSDEFID           = LWR.PROCESSDEFID
		                                       AND LW.PROCESSDEFVERSION      = LWR.PROCESSDEFVERSION
		                                       AND LW.PROCESSSEGMENTID       = LWR.PROCESSSEGMENTID
		                                       AND LW.PROCESSSEGMENTVERSION	 = LWR.PROCESSSEGMENTVERSION
		INNER JOIN SF_LOTDEFECT        LDF     ON  LDF.LOTID                 = LW.LOTID
		                                       AND LDF.PROCESSDEFID          = LW.PROCESSDEFID
		                                       AND LDF.PROCESSDEFVERSION     = LW.PROCESSDEFVERSION
		                                       AND LDF.PROCESSSEGMENTID      = LW.PROCESSSEGMENTID
		                                       AND LDF.PROCESSSEGMENTVERSION = LW.PROCESSSEGMENTVERSION
		                                       AND COALESCE(LDF.WORKCOUNT,0) = COALESCE(LW.WORKCOUNT,0)
		WHERE	LWR.LOTID      = #{P_LOTID}
		AND		LWR.TXNHISTKEY = #{P_TXNHISTKEY} 	
	</select>
	
    <select id="GetlotPseudodefectqtyByOsp" parameterType="map" resultType="hashmap">
		-- GetlotPseudodefectqtyByOsp
		-- Version:10001
		SELECT 
				COALESCE( SUM(SPECOUTQTY),0) AS PSEUDODEFECTQTY
		FROM 
			(
				SELECT
						LWR.LOTID
					,	LWR.TXNHISTKEY
					,	IRT.SPECOUTQTY
					,	RANK() OVER (PARTITION BY IRT.RESOURCEID, IRT.INSPECTIONDEFID, IRT.PROCESSSEGMENTID ORDER BY IRT.DEGREE DESC) AS RN
				FROM       CT_LOTWORKRESULT    LWR
				INNER JOIN SF_INSPECTIONRESULT IRT  ON  IRT.RESOURCEID            = LWR.LOTID
				                                    AND IRT.PRODUCTDEFID          = LWR.PRODUCTDEFID
				                                    AND IRT.PRODUCTDEFVERSION     = LWR.PRODUCTDEFVERSION
				                                    AND IRT.PROCESSDEFID          = LWR.PROCESSDEFID
				                                    AND IRT.PROCESSDEFVERSION     = LWR.PROCESSDEFVERSION
				                                    AND IRT.PROCESSSEGMENTID      = LWR.PROCESSSEGMENTID
				                                    AND IRT.PROCESSSEGMENTVERSION = LWR.PROCESSSEGMENTVERSION
				                                    AND COALESCE(IRT.WORKCOUNT,0) = COALESCE(LWR.WORKCOUNT,0)
				                                  --AND COALESCE(IRT.WORKCOUNT,0) = COALESCE(LWR.WORKCOUNT,0)
				WHERE	LWR.TXNHISTKEY = #{TXNHISTKEY}
				AND		LWR.LOTID      = #{LOTID}
				                 
			) MTR
	WHERE	MTR.RN = 1 

	</select>

    <select id="GetInvalidOspActualReduceDetail" parameterType="map" resultType="hashmap">
		-- GetInvalidOspActualReduceDetail
		-- Version:10001
		SELECT
				OAD.LOTID
			,	OAD.LOTHISTKEY
			,	OAD.ENTERPRISEID
			,	OAD.PLANTID
			,	OAD.PROCESSSEGMENTID
			,	OAD.PRODUCTDEFID
			,	OAD.PRODUCTDEFVERSION
			,	OAD.AREAID
			,	OAD.STARTDATE
		FROM 	CT_OSPACTUALREDUCEDETAIL    OAD
		WHERE	OAD.VALIDSTATE        =  'Valid'
		AND		OAD.LOTID             = #{LOTID}
		AND		OAD.LOTHISTKEY        = #{LOTHISTKEY} 
	</select>
	
    <select id="GetInvalidOspActualDetail" parameterType="map" resultType="hashmap">
		-- GetInvalidOspActualDetail
		-- Version:10001
		SELECT
				OAD.LOTID
			,	OAD.LOTHISTKEY
			,	OAD.OSPPRICECODE
			,	OAD.ENTERPRISEID
			,	OAD.PLANTID
			, 	OAD.PRICECOMBINATIONID
		FROM 	CT_OSPACTUALDETAIL    OAD
		WHERE	OAD.VALIDSTATE        =  'Valid'
		AND		OAD.LOTID             = '#{LOTID}
		AND		OAD.LOTHISTKEY        = '#{LOTHISTKEY}
	</select>	
	
    <select id="GetOspProcessOspActualCntCheck" parameterType="map" resultType="hashmap">
	    --
		-- GetOspProcessOspActualCntCheck
		-- Version:10001
		SELECT 
			 COUNT(*) AS CNTACTUAL 
		FROM	CT_OSPACTUAL  OAL
		WHERE	LOTHISTKEY  =#{LOTHISTKEY}
		AND		LOTID      = #{LOTID}
		AND     VALIDSTATE    = 'Valid'	
	</select>	
	
    <select id="GetOspProcessIsbudgetexcept" parameterType="map" resultType="hashmap">
		-- GetOspProcessIsbudgetexcept
		-- Version:10001
		SELECT
				OBE.EXCEPTVERSION
			,	OBE.EXCEPTID
			,	OBE.PLANTID
			,	OBE.ENTERPRISEID
			,	OBE.EXCEPTTYPE
			,	OBE.STARTDATE
			,	OBE.ENDDATE
		FROM       CT_OSPBUDGETEXCEPT  OBE 
		INNER JOIN SF_PLANT            SPL ON   SPL.PLANTID  =OBE.PLANTID 
		WHERE	OBE.PLANTID      =  #{PLANTID}
		AND		OBE.EXCEPTTYPE     = 'Product'
		AND		OBE.EXCEPTID       = #{PRODUCTDEFID}
		AND		OBE.EXCEPTVERSION  = #{PRODUCTDEFVERSION}
		AND		OBE.STARTDATE     <![CDATA[<=]]> (TO_DATE( #{SENDTIME},'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME )
		AND		OBE.ENDDATE       <![CDATA[>=]]> (TO_DATE( #{SENDTIME},'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME )
		AND		OBE.VALIDSTATE    ='Valid'
		UNION ALL
		SELECT 
		 		OBE.EXCEPTVERSION
			,	OBE.EXCEPTID
			,	OBE.PLANTID
			,	OBE.ENTERPRISEID
			,	OBE.EXCEPTTYPE
			,	OBE.STARTDATE
			,	OBE.ENDDATE
		FROM       CT_OSPBUDGETEXCEPT OBE 
		INNER JOIN SF_PLANT           SPL ON   SPL.PLANTID  = OBE.PLANTID 
		WHERE	OBE.PLANTID   =  #{PLANTID}
		AND		OBE.EXCEPTTYPE  = 'Process'
		AND		OBE.EXCEPTID    = #{PROCESSSEGMENTID}
		AND		OBE.STARTDATE   <![CDATA[<=]]>(TO_DATE( #{SENDTIME},'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME )
		AND		OBE.ENDDATE    <![CDATA[>=]]> (TO_DATE( #{SENDTIME},'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME )
		AND		OBE.VALIDSTATE ='Valid'   	
	</select>	

    <select id="GetOspProcessBudgetAmount" parameterType="map" resultType="hashmap">
		-- GetOspProcessBudgetAmount
		-- Version:10001
		SELECT
				COALESCE(SUM(BUDGETAMOUNT),0) AS BUDGETAMOUNT
		FROM       CT_OSPBUDGET      OBG 
		INNER JOIN SF_PLANT          SPL ON   SPL.PLANTID  = OBG.PLANTID 
		WHERE	OBG.PLANTID        =  #{PLANTID}
		AND		OBG.BUDGETDATE     = (TO_DATE( #{SENDTIME},'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME)
		AND		OBG.VALIDSTATE     = 'Valid'
	</select>	
	
    <select id="GetOspProcessOspActualAmount" parameterType="map" resultType="hashmap">
		-- GetOspProcessOspActualAmount
		-- Version:10001
		SELECT 
			 	COALESCE(AMOUNT,0) AS AMOUNT
		FROM  CT_OSPDAILYSUMMARY ODS
		INNER JOIN SF_PLANT          SPL ON   SPL.PLANTID  = ODS.PLANTID 
		WHERE	ODS.PLANTID     =  #{PLANTID}
		AND		ODS.SUMDATE     = (TO_TIMESTAMP( #{SENDTIME},'YYYY-MM-DD HH24:MI:SS') -SPL.WORKTIME )		
	</select>
	
    <select id="GetOutsourcedWarehouseWear" parameterType="map" resultType="hashmap">
		/* smh.pcm.dao.PCMOspDao.GetOutsourcedWarehouseWear */ 
		-- GetOutsourcedWarehouseWear
		-- Version:10001
        WITH ATC AS 
        (
            SELECT 
                SLT.LOTID
                ,    SLT.PLANTID
                ,    SLT.AREAID
                ,    SLT.LOTTYPE
                ,    PPH.PATHSEQUENCE AS PATHSEQUENCESTART
                ,    to_number(PPH.USERSEQUENCE) AS USERSEQUENCE
                ,    UFN_OSP_SELECTSAMEAREASEQ(SLT.LOTID,'PRIMARY')   AS PATHSEQUENCEEND
                ,    UFN_OSP_SELECTSAMEAREASEQ(SLT.LOTID,'ALTERNATE') AS PATHSEQUENCEEND_ALT
            FROM PCM_LOT SLT
            LEFT OUTER JOIN PCM_LOTWORKRESULT  LWR   ON  LWR.LOTID                  = SLT.LOTID
                                      AND LWR.PROCESSSEGMENTID       = SLT.PROCESSSEGMENTID
                                      AND LWR.PROCESSSEGMENTVERSION  = SLT.PROCESSSEGMENTVERSION
                                      AND LWR.WORKCOUNT              = SLT.WORKCOUNT
            LEFT OUTER JOIN BAS_PROCESSPATH    CPP   ON   CPP.PROCESSDEFID          = LWR.PROCESSDEFID
                                      AND  CPP.PROCESSDEFVERSION     = LWR.PROCESSDEFVERSION
                                      AND  CPP.PROCESSSEGMENTID      = LWR.PROCESSSEGMENTID
                                      AND  CPP.PROCESSSEGMENTVERSION = LWR.PROCESSSEGMENTVERSION
            INNER JOIN      BAS_PROCESSPATH    PPH   ON   PPH.PROCESSDEFID          = LWR.PROCESSDEFID
                                                    AND  PPH.PROCESSDEFVERSION     = LWR.PROCESSDEFVERSION
                                                    AND  PPH.PATHSEQUENCE          = CPP.PATHSEQUENCE
                
            WHERE  1=1 
            AND    SLT.LOTID   = #{LOTID}
        )  
    
        SELECT * FROM(
        SELECT
            SLT.ENTERPRISEID
          ,  SLT.PLANTID
          ,  SLH.TXNHISTKEY                           AS LOTHISTKEY
          ,  SLT.LOTID
          ,  SLT.LOTTYPE
          ,  SLT.PRODUCTDEFID
          ,  SLT.PRODUCTDEFVERSION
          ,  PRD.PRODUCTDEFNAME
          ,  SLT.PROCESSSEGMENTID
          ,  DIC.DICTIONARYNAME                       AS   PROCESSSEGMENTNAME
          ,  HST.PREVPROCESSSEGMENTID                 AS   PREVPROCESSSEGMENTID
          ,  DCC.DICTIONARYNAME                       AS   PREVPROCESSSEGMENTNAME
          ,  SLH.USERSEQUENCE
          ,  SLH.AREAID
          ,  DAC.DICTIONARYNAME                       AS AREANAME
          ,  HST.PREVAREAID                           AS PREVAREAID
          ,  DAP.DICTIONARYNAME                       AS PREVAREANAME
          ,  HST.PCSQTY                               AS PCSQTY
          ,  HST.ARRAYQTY                             AS ARRAYQTY
          ,  HST.PANELQTY                             AS PANELQTY
          ,  CASE WHEN PRD.PCSMM =0        THEN 0
                  WHEN HST.PCSQTY  IS NULL THEN 0
                  ELSE HST.PCSQTY / PRD.PCSMM
             END                                       AS  OSPMM
          ,  SLT.LOTSTATE
          ,  SLT.PROCESSSTATE
          ,  NVL(SLT.ISHOLD,'N')     AS ISHOLD
          ,  NVL(SLT.ISLOCKING,'N')  AS ISLOCKING 
          ,  SAC.OWNTYPE
          ,  ATC.PATHSEQUENCESTART   AS  PATHSEQUENCESTART
          ,  ATC.PATHSEQUENCEEND   AS  PATHSEQUENCEEND
          --,  ATC.USERMIN
          --,  ATC.USERMAX
          ,  CASE WHEN OLT.LOTHISTKEY IS NOT NULL  THEN 'RECEIPT'
                   ELSE 'OK' END          AS WEAROKCHECK
          ,  NVL(OLT.LOTHISTKEY,'') AS LOTHISTKEYOLT
          ,  NVL(SLH.WORKCOUNT,0)   AS WORKCOUNT
          ,  SLT.LASTTXNHISTKEY     AS PCMLASTTXNHISTKEY <!-- 2021.08.02 Add 공정에서 작업요청시점 LOT의 정보를 찾기위해 추가요청 -->
        FROM  PCM_LOT                              SLT
        JOIN    PCM_LOTWORKRESULT                    SLH   ON    SLH.LOTID                 = SLT.LOTID  
                                                          AND   SLH.PROCESSSEGMENTID      = SLT.PROCESSSEGMENTID 
                                                          AND   NVL(SLH.WORKCOUNT,0) = NVL(SLT.WORKCOUNT,0)
                                                          AND   NVL(SLH.RESULTTYPE,'@') <![CDATA[<>]]> 'SKIP'
        INNER JOIN ATC                                    ON    ATC.LOTID                 = SLH.LOTID
        LEFT OUTER JOIN PCM_LOTHISTORY               HST   ON    HST.LOTID                 = SLH.LOTID
                                                          AND   HST.TXNHISTKEY            = SLH.PREVSENDLOTHISTKEY
        LEFT OUTER JOIN BAS_PRODUCTDEFINITION      PRD    ON  PRD.PRODUCTDEFID          = SLT.PRODUCTDEFID          --제품
                                                          AND  PRD.PRODUCTDEFVERSION     = SLT.PRODUCTDEFVERSION
        LEFT OUTER JOIN BAS_PROCESSSEGMENT           PRS   ON    PRS.PROCESSSEGMENTID      = SLT.PROCESSSEGMENTID
                                                          AND   PRS.PROCESSSEGMENTVERSION = SLT.PROCESSSEGMENTVERSION
        LEFT OUTER JOIN CMD_DICTIONARY              DIC    ON  DIC.DICTIONARYID          = PRS.PROCESSSEGMENTNAME
                                                          AND  DIC.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE}      
        LEFT OUTER JOIN BAS_PROCESSSEGMENT           PSP   ON    PSP.PROCESSSEGMENTID      = HST.PREVPROCESSSEGMENTID
                                                          AND   PSP.PROCESSSEGMENTVERSION = HST.PREVPROCESSSEGMENTVERSION
        LEFT OUTER JOIN CMD_DICTIONARY              DCC    ON  DCC.DICTIONARYID          = PSP.PROCESSSEGMENTNAME
                                                          AND  DCC.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE}       
        LEFT OUTER JOIN BAS_AREA                     SAC    ON  SAC.AREAID                = SLT.AREAID
        LEFT OUTER JOIN CMD_DICTIONARY              DAC    ON  DAC.DICTIONARYID          = SAC.AREANAME
                                                          AND   DAC.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE}  
        LEFT OUTER JOIN BAS_AREA                     SAP    ON  SAP.AREAID                = HST.PREVAREAID     
        LEFT OUTER JOIN CMD_DICTIONARY              DAP    ON  DAP.DICTIONARYID          = SAP.AREANAME
                                                          AND  DAP.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE} 
        LEFT OUTER JOIN OSM_OSPRECEIPTSENDLOT        OLT    ON    OLT.LOTHISTKEY            = SLH.TXNHISTKEY   
                                                          AND   OLT.LOTID                 = SLH.LOTID 
                                                          AND   OLT.SENDDATE              IS  NULL
        WHERE  1=1
        AND    SLT.LOTID          = #{LOTID}
        AND    SLT.PLANTID        = #{PLANTID}
        --AND     OLT.LOTHISTKEY      IS NULL
        <if test="LOTHISTKEY != null and LOTHISTKEY !=''"> 
          AND  SLH.TXNHISTKEY = #{LOTHISTKEY}
        </if>
        AND    SLT.LOTSTATE                      = 'InTransit'
        AND    SLT.PROCESSSTATE                  = 'WaitForReceive'
        AND    NVL(SLT.ISHOLD,'N')         != 'Y'
        AND    NVL(SLT.ISLOCKING,'N')      != 'Y'
        AND    NOT EXISTS ( SELECT 'X'
                             FROM   MTM_LOTPLANTTRANSIT LPT
                             WHERE  LPT.LOTID = SLH.LOTID
                             AND    LPT.TRANSITSTATUS != 'InProduction')
        ORDER BY SLT.LOTID ,SLH.TXNHISTKEY DESC
        )WHERE ROWNUM=1
	</select>

    <!-- 외주창고입출고 등록 -->
    <insert id="insertOsmOspreceiptsendlot" parameterType="map">
    INSERT INTO OSM_OSPRECEIPTSENDLOT( 
        LOTHISTKEY  
        ,LOTID  
        ,RECEIPTSEQUENCE  
        ,PLANTID  
        ,ENTERPRISEID  
        ,RECEIPTDATE  
        ,RECEIPTUSER  
        ,CHECKDATE  
        ,CHECKUSER  
        ,SENDDATE  
        ,SENDUSER  
        ,SENDAREAID  
        ,PRINTDATE  
        ,PRINTUSER  
        ,PRINTCOUNT  
        ,PRINTNO  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE  
        ,ISLASTRECEIPT    
        ,PCMLASTTXNHISTKEY <!-- 2021.08.02 Add 공정에서 작업요청시점 LOT의 정보를 찾기위해 추가요청 --> 
        ) 
    VALUES( 
        #{LOTHISTKEY}  
        ,#{LOTID}  
        ,#{RECEIPTSEQUENCE}  
        ,#{PLANTID}  
        ,#{ENTERPRISEID}  
        ,#{RECEIPTDATE}  
        ,#{RECEIPTUSER}  
        ,#{CHECKDATE}  
        ,#{CHECKUSER}  
        ,#{SENDDATE}  
        ,#{SENDUSER}  
        ,#{SENDAREAID}  
        ,#{PRINTDATE}  
        ,#{PRINTUSER}  
        ,#{PRINTCOUNT}  
        ,#{PRINTNO}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}  
        ,#{ISLASTRECEIPT}    
        ,#{PCMLASTTXNHISTKEY}
        )
    </insert>	

    <select id="GetOutsourcedWarehouseWearReceiptsequence" parameterType="map" resultType="hashmap">
		-- GetOutsourcedWarehouseWearReceiptsequence
		-- Version:10001
		SELECT
				NVL(MAX(RECEIPTSEQUENCE),0)+1 AS RECEIPTSEQUENCE
		FROM	OSM_OSPRECEIPTSENDLOT        OLT	 
		WHERE	1=1
		AND		OLT.LOTID          = #{LOTID}
		AND		OLT.PLANTID        = #{PLANTID}
		AND		OLT.LOTHISTKEY     = #{LOTHISTKEY}
	</select>

    <select id="GetOutsourcedWarehouseWearSegment" parameterType="map" resultType="hashmap">
		-- GetOutsourcedWarehouseWearSegment
		-- Version:10001
		SELECT
			 	LWR.PROCESSDEFID
			,	LWR.PROCESSDEFVERSION
			,	PPH.PROCESSSEGMENTID
			,	PPH.PROCESSSEGMENTVERSION
			,	PPH.PATHSEQUENCE 
			,	PPH.USERSEQUENCE
			,	CASE WHEN PPH.PATHSEQUENCE =#{PATHSEQUENCESTART} THEN LWR.RESOURCEID
			         ELSE COALESCE(CLA.RESOURCEID,SBR.RESOURCEID)  END  AS RESOURCEID
			,	CASE WHEN PPH.PATHSEQUENCE =#{PATHSEQUENCESTART} THEN LWR.AREAID
			         ELSE COALESCE(RSL.AREAID,MRS.AREAID)  END	   AREAID
			,	LWR.PLANTID
			,	LWR.ENTERPRISEID
			,   LWR.LOTID
			,   LWR.TXNHISTKEY AS LOTHISTKEY
		FROM  PCM_LOTWORKRESULT LWR   
		LEFT OUTER JOIN BAS_PROCESSPATH         CPP   ON   CPP.PROCESSDEFID          = LWR.PROCESSDEFID
								                     AND  CPP.PROCESSDEFVERSION     = LWR.PROCESSDEFVERSION
								                     AND  CPP.PROCESSSEGMENTID      = LWR.PROCESSSEGMENTID
								                     AND  CPP.PROCESSSEGMENTVERSION = LWR.PROCESSSEGMENTVERSION
		INNER      JOIN BAS_PROCESSPATH         PPH   ON   PPH.PROCESSDEFID          = LWR.PROCESSDEFID
		                                             AND  PPH.PROCESSDEFVERSION     = LWR.PROCESSDEFVERSION
		                                             AND  PPH.PATHSEQUENCE          <![CDATA[>=]]>#{PATHSEQUENCESTART} 
		                                             AND  PPH.PATHSEQUENCE          <![CDATA[<=]]>#{PATHSEQUENCEEND}
		LEFT OUTER JOIN PCM_LOTAREA            CLA   ON   CLA.LOTID                 = LWR.LOTID
		                                             AND  CLA.PROCESSDEFID          = PPH.PROCESSDEFID
		                                             AND  CLA.PROCESSDEFVERSION     = PPH.PROCESSDEFVERSION
		                                             AND  CLA.PROCESSSEGMENTID      = PPH.PROCESSSEGMENTID
		                                             AND  CLA.PROCESSSEGMENTVERSION = PPH.PROCESSSEGMENTVERSION
		                                             AND  CLA.WORKCOUNT             = LWR.WORKCOUNT
		LEFT OUTER JOIN BAS_RESOURCE           RSL   ON   RSL.RESOURCEID            = CLA.RESOURCEID
		                                             AND  RSL.PLANTID               = LWR.PLANTID
		                                             AND  RSL.ENTERPRISEID          = LWR.ENTERPRISEID
		LEFT OUTER JOIN BAS_BILLOFRESOURCE     SBR   ON   SBR.PRODUCTDEFID          = LWR.PRODUCTDEFID
		                                             AND  SBR.PRODUCTDEFVERSION     = LWR.PRODUCTDEFVERSION
		                                             AND  SBR.PROCESSDEFID          = PPH.PROCESSDEFID
		                                             AND  SBR.PROCESSDEFVERSION     = PPH.PROCESSDEFVERSION
		                                             AND  SBR.PROCESSSEGMENTID      = PPH.PROCESSSEGMENTID
		                                             AND  SBR.PROCESSSEGMENTVERSION = PPH.PROCESSSEGMENTVERSION
		                                             AND  SBR.PLANTID               = LWR.PLANTID
		                                             AND  SBR.RESOURCETYPE          = 'Resource'
		                                             AND  SBR.ISPRIMARYRESOURCE     = 'Y'
		                                             AND  SBR.VALIDSTATE            = 'Valid'
		LEFT OUTER JOIN BAS_RESOURCE           MRS   ON   MRS.RESOURCEID            = SBR.RESOURCEID
		                                             AND  MRS.PLANTID               = SBR.PLANTID
		                                             AND  MRS.ENTERPRISEID          = SBR.ENTERPRISEID
		WHERE	1=1 
		AND		LWR.LOTID      = #{LOTID}
		AND		LWR.TXNHISTKEY = #{LOTHISTKEY}
	</select>

    <!-- 외주창고입출고공정 등록 -->
    <insert id="insertOsmOspreceiptsendlotsegment" parameterType="map">
    INSERT INTO OSM_OSPRECEIPTSENDLOTSEGMENT( 
        LOTHISTKEY  
        ,LOTID  
        ,RECEIPTSEQUENCE  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,PROCESSSEGMENTID  
        ,PROCESSSEGMENTVERSION  
        ,PATHSEQUENCE  
        ,USERSEQUENCE  
        ,RESOURCEID  
        ,AREAID  
        ,PREVRESOURCEID  
        ,PREVAREAID  
        ,PLANTID  
        ,ENTERPRISEID  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{LOTHISTKEY}  
        ,#{LOTID}  
        ,#{RECEIPTSEQUENCE}  
        ,#{PROCESSDEFID}  
        ,#{PROCESSDEFVERSION}  
        ,#{PROCESSSEGMENTID}  
        ,#{PROCESSSEGMENTVERSION}  
        ,#{PATHSEQUENCE}  
        ,#{USERSEQUENCE}  
        ,#{RESOURCEID}  
        ,#{AREAID}  
        ,#{PREVRESOURCEID}  
        ,#{PREVAREAID}  
        ,#{PLANTID}  
        ,#{ENTERPRISEID}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>

    <select id="OspPriceInValidCheck" parameterType="map" resultType="hashmap">
		-- Id : OspPriceInValidCheck
		-- Version : 10001
		
		SELECT ufn_osp_batchrecalculationstep01_invalid
		( 
		  #{ENTERPRISEID} 
		, #{PLANTID}
		, #{LOTID}
		, #{LOTHISTKEY}
		, #{USERID}
		) 
		from dual
	</select>	
	
    <select id="GetAreaidOwntypeInformatByOsp" parameterType="map" resultType="hashmap">
		-- GetAreaidOwntypeInformatByOsp
		-- Version:10001
		SELECT
				SAR.OWNTYPE
			,	
		FROM	   SF_AREA              SAR 
		INNER JOIN   SF_PLANT             SPL  ON	SPL.PLANTID      =SAR.PLANTID
		WHERE 	SAR.AREAID       = #{P_AREAID}		       				
	</select>

    <!-- 외주실적할인내역 상세조회-->
    <select id="selectOsmOspactualreducedetail" parameterType="map" resultType="hashmap">
    SELECT 
        A.LOTID	 
        ,A.LOTHISTKEY	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.PROCESSSEGMENTID	 
        ,A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.VENDORID	 
        ,A.STARTDATE	 
        ,A.ENDDATE	 
        ,A.AMOUNT	 
        ,A.REDUCERATE	 
        ,A.REDUCEAMOUNT	 
        ,A.SETTLEAMOUNT	 
        ,A.DESCRIPTION	 
        ,A.VALIDSTATE	 
    FROM	OSM_OSPACTUALREDUCEDETAIL A 
    WHERE A.ENTERPRISEID = #{ENTERPRISEID}
    AND	A.LOTHISTKEY = #{LOTHISTKEY}
    AND	A.LOTID = #{LOTID}
    AND	A.PLANTID = #{PLANTID}
    AND	A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND	A.PRODUCTDEFID = #{PRODUCTDEFID}
    AND	A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    AND	A.STARTDATE = #{STARTDATE}
    AND	A.VENDORID = #{VENDORID}
    </select>
    
   <!-- 외주실적할인내역 변경 -->
    <update id="updateOsmOspactualreducedetail" parameterType="map" >
    UPDATE OSM_OSPACTUALREDUCEDETAIL 
    SET 
        MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE ENTERPRISEID = #{ENTERPRISEID}
    AND LOTHISTKEY = #{LOTHISTKEY}
    AND LOTID = #{LOTID}
    AND PLANTID = #{PLANTID}
    AND PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    AND STARTDATE = #{STARTDATE}
    AND VENDORID = #{VENDORID}
    </update>  
    
    <select id="GetOspActualDetailMain" parameterType="map" resultType="hashmap">
		-- GetOspActualDetailMain
		-- Version:10001
		SELECT
				OPM.PRICECOMBINATIONID
			,	OPM.OWNTYPE
			,	OPM.PROCESSPRICETYPE
			,	OPM.AREAID
			,	OPM.PRODUCTDEFID
			,	OPM.PRODUCTDEFVERSION
			,	COALESCE(OPC.SPECUNIT,' ') AS  SPECUNIT
			,	OPC.CALCULATEUNIT
			,	OPR.STARTDATE
			,	OPR.PRICE
			,	OPM.OSPPRICECODE  
		FROM 	        CT_OSPPRICECOMBINATION  OPM
		INNER	JOIN 	CT_OSPPRICECODE         OPC   ON   OPC.ENTERPRISEID         = OPM.ENTERPRISEID
		                                              AND  OPC.OSPPRICECODE         = OPM.OSPPRICECODE
		                                              AND  OPC.PLANTID              = OPM.PLANTID
		INNER	JOIN	 CT_OSPPRICE            OPR   ON   OPR.ENTERPRISEID         = OPM.ENTERPRISEID
		                                              AND  OPR.PRICECOMBINATIONID   = OPM.PRICECOMBINATIONID
		                                              AND  OPR.PLANTID              = OPM.PLANTID
		                                              AND  OPR.VALIDSTATE           = 'Valid'
		                                              AND  OPR.STARTDATE           <![CDATA[<=]]> TO_DATE(#{OSPPRICEDATE},'YYYY-MM-DD')
		                                              AND  OPR.ENDDATE             <![CDATA[>=]]> TO_DATE(#{OSPPRICEDATE},'YYYY-MM-DD')
		WHERE 1=1
		AND		OPM.VALIDSTATE        = 'Valid'
		AND		OPM.ENTERPRISEID      = #{ENTERPRISEID}
		AND		OPM.PLANTID           = #{PLANTID} 
		AND		OPM.OSPPRICECODE      = #{OSPPRICECODE}
		ORDER BY 	OPM.PRODUCTDEFID DESC
				,	OPM.PRODUCTDEFVERSION DESC 
				,	OPM.AREAID DESC
				,	OPM.PROCESSPRICETYPE DESC 
				,	OPM.OWNTYPE DESC
	</select>	

    <select id="GetInvalidOspActualSummary" parameterType="map" resultType="hashmap">
	    --
		-- GetInvalidOspActualSummary
		-- Version:10001
		SELECT
				
				COALESCE(SUM(AMOUNT),0) AS  AMOUNT
			,	COALESCE(SUM(CASE WHEN ISERROR ='Y' THEN 1
				             ELSE 0 END ),0) AS CNTERROR	
		FROM 	OSM_OSPACTUALDETAIL    OAD
		WHERE	OAD.VALIDSTATE        =  'Valid'
		AND		OAD.LOTID             = #{LOTID}
		AND		OAD.LOTHISTKEY        = #{LOTHISTKEY} 

	</select>
	
    <select id="GetOspActualOspSpecialReduce" parameterType="map" resultType="hashmap">
			    --
				-- GetOspActualOspSpecialReduce
				-- Version:10001
				SELECT
						ENTERPRISEID
					,	PLANTID
					,	PROCESSSEGMENTID
					,	PRODUCTDEFID
					,	PRODUCTDEFVERSION
					,	AREAID
					,	VENDORID
					,	MODELID
					,	STARTDATE
					,	ENDDATE
					,	COALESCE(REDUCERATE,0) AS REDUCERATE
				FROM	OSM_OSPSPECIALREDUCE   OSR
				WHERE	OSR.ENTERPRISEID   = #{ENTERPRISEID}
				AND		OSR.PLANTID        = #{PLANTID}
				AND		OSR.VALIDSTATE     = 'Valid'
				AND		OSR.PROCESSSEGMENTID  IN ('*',#{PROCESSSEGMENTID})
				AND		OSR.PRODUCTDEFID      IN ('*',#{PRODUCTDEFID})
				AND		OSR.PRODUCTDEFVERSION IN ('*',#{PRODUCTDEFVERSION})
				AND		OSR.AREAID            IN ('*',#{AREAID})
				AND		OSR.VENDORID          IN ('*',#{VENDORID})
				AND		OSR.STARTDATE        <![CDATA[<=]]> TO_DATE(#{STARTDATE},'YYYY-MM-DD')
				AND		OSR.ENDDATE          <![CDATA[>=]]> TO_DATE(#{STARTDATE},'YYYY-MM-DD')
				ORDER BY  OSR.REDUCERATE DESC
	</select>
	
    <select id="CheckEtcClaimAmountCreateOsp" parameterType="map" resultType="hashmap">
		    --
		-- CheckEtcClaimAmountCreateOsp
		-- Version:10001
		SELECT
				TO_CHAR(CLAIMDATE,'YYYY-MM-DD') AS CLAIMDATE
			,	CLAIMSEQUENCE 
			,	COALESCE(PERIODID,'') AS PERIODID
		FROM    OSM_OSPETCCLAIMAMOUNT OAD
		WHERE	OAD.VALIDSTATE     =  'Valid'
		AND		OAD.RELKEYNO       = #{P_RELKEYNO}
	</select>
			
    <!-- 외주기타Claim비용 등록 -->
    <insert id="insertOsmOspetcclaimamount" parameterType="map">
    INSERT INTO OSM_OSPETCCLAIMAMOUNT( 
        ENTERPRISEID  
        ,PLANTID  
        ,CLAIMDATE  
        ,CLAIMSEQUENCE  
        ,CLAIMTYPE  
        ,CLAIMDEPARTMENT  
        ,CLAIMUSER  
        ,AREAID  
        ,VENDORID  
        ,PRODUCTDEFID  
        ,PRODUCTDEFVERSION  
        ,ETCLOTID  
        ,AMOUNT  
        ,PERIODID  
        ,RELKEYNO  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE  
        ,CLOSEUSER  
        ,CLOSEDATE        ) 
    VALUES( 
        #{ENTERPRISEID}  
        ,#{PLANTID}  
        ,#{CLAIMDATE}  
        ,#{CLAIMSEQUENCE}  
        ,#{CLAIMTYPE}  
        ,#{CLAIMDEPARTMENT}  
        ,#{CLAIMUSER}  
        ,#{AREAID}  
        ,#{VENDORID}  
        ,#{PRODUCTDEFID}  
        ,#{PRODUCTDEFVERSION}  
        ,#{ETCLOTID}  
        ,#{AMOUNT}  
        ,#{PERIODID}  
        ,#{RELKEYNO}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}  
        ,#{CLOSEUSER}  
        ,#{CLOSEDATE}    )
    </insert>

    <!-- 외주기타Claim비용 변경 -->
    <update id="updateOsmOspetcclaimamount" parameterType="map" >
    UPDATE OSM_OSPETCCLAIMAMOUNT 
    SET 
        CLAIMTYPE = #{CLAIMTYPE}     
        ,CLAIMDEPARTMENT = #{CLAIMDEPARTMENT}     
        ,CLAIMUSER = #{CLAIMUSER}     
        ,AREAID = #{AREAID}     
        ,VENDORID = #{VENDORID}     
        ,PRODUCTDEFID = #{PRODUCTDEFID}     
        ,PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}     
        ,ETCLOTID = #{ETCLOTID}     
        ,AMOUNT = #{AMOUNT}     
        ,PERIODID = #{PERIODID}     
        ,RELKEYNO = #{RELKEYNO}     
        ,DESCRIPTION = #{DESCRIPTION}             
        ,CREATEDTIME = #{CREATEDTIME}     
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}     
        ,CLOSEUSER = #{CLOSEUSER}     
        ,CLOSEDATE = #{CLOSEDATE}
    WHERE CLAIMDATE = #{CLAIMDATE}
    AND CLAIMSEQUENCE = #{CLAIMSEQUENCE}
    AND ENTERPRISEID = #{ENTERPRISEID}
    AND PLANTID = #{PLANTID}
    </update>
    
    <!-- 외주기타Claim비용 상세조회-->
    <select id="selectOsmOspetcclaimamount" parameterType="map" resultType="hashmap">
    SELECT 
        A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.CLAIMDATE	 
        ,A.CLAIMSEQUENCE	 
        ,A.CLAIMTYPE	 
        ,A.CLAIMDEPARTMENT	 
        ,A.CLAIMUSER	 
        ,A.AREAID	 
        ,A.VENDORID	 
        ,A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.ETCLOTID	 
        ,A.AMOUNT	 
        ,A.PERIODID	 
        ,A.RELKEYNO	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
        ,A.CLOSEUSER	 
        ,A.CLOSEDATE	 
    FROM	OSM_OSPETCCLAIMAMOUNT A 
    WHERE A.CLAIMDATE = #{CLAIMDATE}
    AND	A.CLAIMSEQUENCE = #{CLAIMSEQUENCE}
    AND	A.ENTERPRISEID = #{ENTERPRISEID}
    AND	A.PLANTID = #{PLANTID}
    </select>

    <select id="OspClaimamountsequence" parameterType="map" resultType="Integer">
    SELECT 
        NVL(MAX(CLAIMSEQUENCE),0)+1 AS CLAIMSEQUENCE
    FROM	OSM_OSPETCCLAIMAMOUNT A 
    WHERE trunc(A.CLAIMDATE) = to_date(#{CLAIMDATE}','yyyymmdd')
    AND A.ENTERPRISEID = #{SESSION_ENTERPRISEID}
    AND	A.PLANTID = #{PLANTID}
    </select>    	
</mapper>
