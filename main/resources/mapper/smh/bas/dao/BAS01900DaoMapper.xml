<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.bas.dao.BAS01900Dao">
    
    <select id="selectCamRequestList" parameterType="map" resultType="hashmap">   		
			 /* smh.bas.dao.BAS01900Dao.selectCamRequestList */
	    SELECT    CR.CAMREQUESTID
				    ,   CR.PLANTID																		--SITE 
				    ,   CR.CUSTOMERID																	--고객
           			,   CM.CUSTOMERNAME
				    ,	  CR.ITEMID																		--품목코드
				    ,   I.ITEMNAME 		AS ITEMNAME 					--품목이름	
				    ,	  CR.ITEMVERSION																	--품목버전
				    ,	  CR.RCITEMID																		--변경후품목코드
				    ,	  RI.ITEMNAME 		AS RCITEMNAME					--변경후품목이름
				    ,   CR.RCITEMVERSION																--변경후품목버전
				    ,	  CR.SPECOWNER																	--사양담당자
				    ,	  CR.CAMOWNER																		--캠담당자
				    ,	  CR.MODELDELIVERYDATE AS 				MODELDELIVERYDATE											--모델납기일
				    ,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},JC.DICTIONARYID) FROM DUAL)								AS JOBTYPENAME						--작업구분
            ,   CR.JOBTYPE
				    ,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},C.DICTIONARYID) FROM DUAL) 							AS PROCESSTYPENAME					--진행구분
            ,   CR.PROCESSTYPE
				    ,	  CR.PANELSIZE_Y																	--PNL SIZE Y
				  	,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},PC.DICTIONARYID) FROM DUAL) 							AS PRODUCTTYPENAME					--제품 타입
            ,   CR.PRODUCTTYPE
				  	,	  CR.PREVCUSTOMERVERSION															--기존 고객사REV
				  	,	  CR.APPLYCUSTOMERVERSION															--적용 고객사REV
				  	,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},IC.DICTIONARYID) FROM DUAL) 						AS INNERLAYERCORRECTIONNAME			--회로보정치-내층
            ,   CR.INNERLAYERCORRECTION
				  	,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},OC.DICTIONARYID) FROM DUAL) 					AS OUTERLAYERCORRECTIONNAME			--회로보정치-외층
            ,   CR.OUTERLAYERCORRECTION
				  	,	  CR.OLBCORRECTION																--OLB보정치
				  	,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},FC.DICTIONARYID) FROM DUAL) 							AS APPLYCOPPERFOILNAME				--쏠림동박적용
            ,   CR.APPLYCOPPERFOIL
				  	,	  CR.APPLYLAYER																	--적용층
				  	,	  (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},AC.DICTIONARYID) FROM DUAL)								AS APPLYLAYERCORRECTIONNAME      --적용층보정
            ,   CR.APPLYLAYERCORRECTION
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},ZC.DICTIONARYID) FROM DUAL)               AS ZIPTERMINALNAME          --ZIP 단자보정
            ,   CR.ZIPTERMINAL
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},DC.DICTIONARYID) FROM DUAL)                AS PADCORRECTIONNAME        --PAD 보정
            ,   CR.PADCORRECTION                  
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},SC.DICTIONARYID) FROM DUAL)                AS BBTSTANDARDNAME          --BBT 기준
            ,   CR.BBTSTANDARD
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},MC.DICTIONARYID) FROM DUAL)              AS MANUFACTURERNAME          --제작처
            ,   CR.MANUFACTURER
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},VC.DICTIONARYID) FROM DUAL)               AS RECEIVERNAME
            ,   Cr.RECEIVER
            ,    CR.APPLYLAYERCORRECTION           AS APPLYLAYERCORRECTION_KEY
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},EC.DICTIONARYID) FROM DUAL)                AS ELONGATIONNAME          --연신율
            ,   CR.ELONGATION
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},YC.DICTIONARYID) FROM DUAL)                AS BBTTYPENAME            --BBT 구분
            ,   CR.BBTTYPE
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},NC.DICTIONARYID) FROM DUAL)               AS JIGPRODUCTIONNAME        --JIG 제작
            ,   CR.JIGPRODUCTION                     
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},LC.DICTIONARYID) FROM DUAL)               AS TERMINALTYPENAME          --터미널타입
            ,   CR.TERMINALTYPE
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},HC.DICTIONARYID) FROM DUAL)               AS BBTMETHODNAME          --BBT 방법
            ,   CR.BBTMETHOD
            ,   CR.BBTDELIVERYDATE                                --BBT 납기일
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},C4.DICTIONARYID) FROM DUAL)               AS MICROSHORTREQUESTNAME      --MicroShort
            ,   CR.MICROSHORTREQUEST
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},C1.DICTIONARYID) FROM DUAL)               AS SURFACEPLATING1NAME        --표면도금1
            ,   CR.SURFACEPLATING1
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},C2.DICTIONARYID) FROM DUAL)                AS SURFACEPLATING2NAME        --표면도금2
            ,   CR.SURFACEPLATING2
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},C3.DICTIONARYID) FROM DUAL)                AS SURFACEPLATING3NAME        --표면도금3
            ,   CR.SURFACEPLATING3
            ,   CR.MKNOTATION                                  --M/K표기
            ,   CR.SPECWEEK                                    --사양 주차표기
            ,   CR.CAMWEEK                                    --CAM 주차표기
            ,   CR.GUIDESTANDARD                                --Guide 기준
            ,   CR.PLATINGCONNECTINGLAYER                            --도금선 연결층
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},GC.DICTIONARYID) FROM DUAL)                AS OUTERGUIDENAME          --외곽 GUIDE
            ,   CR.OUTERGUIDE
            ,   CR.VISIONPRESS                                  --VISION PRESS 기준
            ,   (SELECT BAS_COMMON_PKG.GET_DICTIONARY2(#{SESSION_LANGUAGETYPE},TC.DICTIONARYID) FROM DUAL)                AS TRIMMINGMARKNAME          --Trimming 인식마크
            ,   CR.TRIMMINGMARK
            ,   CR.DRILLSPEC                                  --Drill Spec
            ,   CR.OUTERLAYERSPEC                                --외층 SPEC
            ,   CR.INNERLAYERSPEC                                --내층 SPEC
            ,   CR.COVERLAYSPEC                                  --COVERLAY SPEC
            ,   CR.PSRSPEC                                    --PSRSPEC
            ,   CR.LAYERADHESION        
            ,   CR.CUTLASERSPEC                                  --CUT-LASER Spec
            ,   CR.PEELRSTSPEC                                  --PEEL RST SPEC
            ,   CR.ROUTERSPEC                                  --ROUTER SPEC
            ,   CR.SILKSPEC                                    --SILKSPEC
            ,   CR.TOOLSPEC                                    --TOOLSPEC
            ,   CR.PANELGUIDESPEC                                --PANEL GUIDE SPEC
            ,   CR.ETCSPEC                                    --ETCSPEC
            ,   CR.COMMENT1
            ,   TO_CHAR(CR.CREATEDTIME, 'YYYY-MM-DD') AS CREATEDTIME
			,   NVL(U1.USERNAME, CR.SPECOWNER)            AS SPECOWNERNAME
            ,   NVL(U2.USERNAME, CR.CAMOWNER)             AS CAMOWNERNAME
          <!--   ,   G.CAMWORKSTATE
            ,   CASE WHEN NVL(GQ.ISLOTCREATE, 'N') = 'Y' THEN 'Input' ELSE G.STATUS END GOVERNANCESTATE
      		,NVL(GQ.ISLOTCREATE, 'N') AS ISLOTCREATE -->
 			,-- R/C 인경우 처리로직 추가 2021-07-29 사양팀 요청
            CASE WHEN RC.Toproductdefversion IS NOT NULL THEN
              'Complete'
            ELSE
               G.CAMWORKSTATE
            END CAMWORKSTATE
            ,-- R/C 인경우 처리로직 추가 2021-07-29 사양팀 요청
            CASE WHEN RC.Toproductdefversion IS NOT NULL THEN
              'Input'
            ELSE
               CASE WHEN NVL(GQ.ISLOTCREATE, 'N') = 'Y' THEN 'Input' ELSE G.STATUS END
            END GOVERNANCESTATE
            ,-- R/C 인경우 처리로직 추가 2021-07-29 사양팀 요청
            CASE WHEN RC.Toproductdefversion IS NOT NULL THEN
              'Y'
            ELSE
               NVL(GQ.ISLOTCREATE, 'N')
            END ISLOTCREATE
            FROM   PCM_CAMREQUEST    CR    
		     LEFT JOIN (SELECT PR.PRODUCTDEFID, PR.PRODUCTDEFVERSION, PR.TOPRODUCTDEFID, PR.TOPRODUCTDEFVERSION 
		                                 FROM PCM_RUNNINGCHANGEINFO PR 
		                                WHERE PR.CHANGESTATE = 'PASS' 
		                                GROUP BY PR.PRODUCTDEFID, PR.PRODUCTDEFVERSION, PR.TOPRODUCTDEFID, PR.TOPRODUCTDEFVERSION ) RC ON RC.TOPRODUCTDEFID = CR.RCITEMID
		                                         AND RC.TOPRODUCTDEFVERSION = CR.RCITEMVERSION
				LEFT   JOIN (SELECT CASE
				                              WHEN MAX(MP.STATE) IN ('LotCreate', 'LotInput') THEN
				                               'Y'
				                              ELSE
				                               'N'
				                          END ISLOTCREATE
				                         ,MP.PRODUCTDEFID
				                         ,MP.PRODUCTDEFVERSION
				                   FROM   MFM_PRODUCTIONORDER MP
				                   WHERE  MP.ENTERPRISEID = 'SMLINES'
				                   GROUP  BY MP.PRODUCTDEFID
				                            ,MP.PRODUCTDEFVERSION) GQ
				ON     GQ.PRODUCTDEFID = CR.RCITEMID
				AND    GQ.PRODUCTDEFVERSION = CR.RCITEMVERSION
             LEFT JOIN BAS_GOVERNANCE     G        ON G.PRODUCTDEFID = CR.RCITEMID
                                                  AND G.PRODUCTDEFVERSION = CR.RCITEMVERSION--G.CAMREQUESTID = CR.CAMREQUESTID
                                                  AND G.WORKCLASS != 'Same'
             LEFT JOIN BAS_CUSTOMER       CM      ON  CR.CUSTOMERID = CM.CUSTOMERID
                                                     AND CM.ENTERPRISEID = #{SESSION_ENTERPRISEID}
                                                     AND CR.PLANTID = CM.PLANTID 
            LEFT JOIN BAS_ITEMMASTER   I   			ON  	I.ITEMID = CR.ITEMID
                            									AND 	I.ITEMVERSION = CR.ITEMVERSION
			LEFT JOIN CMD_USER_V           U1      	ON  	CR.SPECOWNER = U1.USERID
            LEFT JOIN CMD_USER_V           U2     	ON  	CR.CAMOWNER = U2.USERID
          LEFT JOIN BAS_ITEMMASTER   RI   			ON  	RI.ITEMID = CR.RCITEMID
                          										AND 	RI.ITEMVERSION = CR.RCITEMVERSION
          LEFT JOIN CMD_LOOKUP_VALUES      PC  	ON  	CR.PRODUCTTYPE  = PC.LOOKUP_CODE
                          										AND  	PC.LOOKUP_TYPE  = 'ProductType'
          LEFT JOIN CMD_LOOKUP_VALUES      JC  	ON  	CR.JOBTYPE  = JC.LOOKUP_CODE
                          										AND  	JC.LOOKUP_TYPE  = 'JobType'
          LEFT JOIN CMD_LOOKUP_VALUES      C  	ON  	CR.PROCESSTYPE  = C.LOOKUP_CODE
                          										AND  	C.LOOKUP_TYPE  = 'ProcessType'
          LEFT JOIN CMD_LOOKUP_VALUES      IC  	ON  	CR.INNERLAYERCORRECTION  = IC.LOOKUP_CODE
                          										AND  	IC.LOOKUP_TYPE  = 'InnerLayerCorrection'
          LEFT JOIN CMD_LOOKUP_VALUES      OC  	ON  	CR.OUTERLAYERCORRECTION  = OC.LOOKUP_CODE
                          										AND  	OC.LOOKUP_TYPE  = 'OuterLayerCorrection'
          LEFT JOIN CMD_LOOKUP_VALUES      AC  	ON  	CR.APPLYLAYERCORRECTION  = AC.LOOKUP_CODE
                          										AND  	AC.LOOKUP_TYPE  = 'ApplyLayer'
          LEFT JOIN CMD_LOOKUP_VALUES      GC  	ON  	CR.OUTERGUIDE  = GC.LOOKUP_CODE
                          										AND  	GC.LOOKUP_TYPE  = 'OuterGuide'
          LEFT JOIN CMD_LOOKUP_VALUES      TC  	ON  	CR.TRIMMINGMARK  = TC.LOOKUP_CODE
                          										AND  	TC.LOOKUP_TYPE  = 'TrimmingMark'
          LEFT JOIN CMD_LOOKUP_VALUES      FC  	ON  	CR.APPLYCOPPERFOIL  = FC.LOOKUP_CODE
                          										AND  	FC.LOOKUP_TYPE  = 'CopperFoil'
          LEFT JOIN CMD_LOOKUP_VALUES      ZC  	ON  	CR.ZIPTERMINAL  = ZC.LOOKUP_CODE
                          										AND  	ZC.LOOKUP_TYPE  = 'ZipTerminal'
          LEFT JOIN CMD_LOOKUP_VALUES      DC 	ON  	CR.PADCORRECTION  = DC.LOOKUP_CODE
                          										AND  	DC.LOOKUP_TYPE  = 'PadCorrection'
          LEFT JOIN CMD_LOOKUP_VALUES      SC  	ON  	CR.BBTSTANDARD  = SC.LOOKUP_CODE
                          										AND  	SC.LOOKUP_TYPE  = 'BBTStandard'
          LEFT JOIN CMD_LOOKUP_VALUES      MC  	ON  	CR.MANUFACTURER  = MC.LOOKUP_CODE
                          										AND  	MC.LOOKUP_TYPE  = 'ManuFacturer'
          LEFT JOIN CMD_LOOKUP_VALUES      VC  	ON  	CR.RECEIVER  = VC.LOOKUP_CODE
                          										AND  	VC.LOOKUP_TYPE  = 'Receiver'
          LEFT JOIN CMD_LOOKUP_VALUES      EC  	ON  	CR.ELONGATION  = EC.LOOKUP_CODE
                          										AND  	EC.LOOKUP_TYPE  = 'Elongation'
          LEFT JOIN CMD_LOOKUP_VALUES      YC  	ON  	CR.BBTTYPE  = YC.LOOKUP_CODE
                          										AND  	YC.LOOKUP_TYPE  = 'BBTType'
          LEFT JOIN CMD_LOOKUP_VALUES      NC  	ON  	CR.JIGPRODUCTION  = NC.LOOKUP_CODE
                          										AND  	NC.LOOKUP_TYPE  = 'JigProduction'
          LEFT JOIN CMD_LOOKUP_VALUES      LC  	ON  	CR.TERMINALTYPE  = LC.LOOKUP_CODE
                          										AND  	LC.LOOKUP_TYPE  = 'TerminalType'
          LEFT JOIN CMD_LOOKUP_VALUES      HC  	ON  	CR.BBTMETHOD  = HC.LOOKUP_CODE
                          										AND  	HC.LOOKUP_TYPE  = 'BBTMethod'
          LEFT JOIN CMD_LOOKUP_VALUES      C4  	ON  	CR.MICROSHORTREQUEST  = C4.LOOKUP_CODE
                          										AND  	C4.LOOKUP_TYPE  = 'Microshort'
          LEFT JOIN CMD_LOOKUP_VALUES      C1  	ON  	CR.SURFACEPLATING1  = C1.LOOKUP_CODE
                          										AND  	C1.LOOKUP_TYPE  = 'Surfaceplating1'
          LEFT JOIN CMD_LOOKUP_VALUES      C2  	ON  	CR.SURFACEPLATING2  = C2.LOOKUP_CODE
                          										AND  	C2.LOOKUP_TYPE  = 'Surfaceplating2'
          LEFT JOIN CMD_LOOKUP_VALUES      C3  	ON  	CR.SURFACEPLATING3  = C3.LOOKUP_CODE
                          										AND  	C3.LOOKUP_TYPE  = 'Surfaceplating3'                      
          WHERE 1=1
	    <if test="PLANTID != null and PLANTID !='' "> 
	        AND CR.PLANTID = #{PLANTID}
	    </if>
		<if test="P_PERIOD_PERIODFR != null and P_PERIOD_PERIODFR !='' ">
			<![CDATA[
				AND	CR.CREATEDTIME >= to_timestamp( #{P_PERIOD_PERIODFR} || ' 00:00:00','YYYY-MM-DD HH24:MI:SS')
			]]>
		</if>
		<if test="P_PERIOD_PERIODTO != null and P_PERIOD_PERIODTO !='' ">
			<![CDATA[
				AND	CR.CREATEDTIME <= to_timestamp( #{P_PERIOD_PERIODTO} || ' 23:59:59','YYYY-MM-DD HH24:MI:SS')
			]]>
		</if>

	    <if test="CUSTOMER_ID != null and CUSTOMER_ID !='' "> 
	      AND EXISTS
                                        (
                                            SELECT  1
                                            FROM    UFN_SELECTSTRINGTOSPLIT(#{CUSTOMER_ID}, ',')      LMP
                                            WHERE   CR.CUSTOMERID = LMP.VALUE                                            
                                        )
	    </if>
	    <if test="GOVERNANCESTATE != null and GOVERNANCESTATE !='' "> 
	        AND CR.PROCESSTYPE = #{GOVERNANCESTATE}
	    </if>
	    <if test="PRODUCTIONTYPE != null and PRODUCTIONTYPE !='' "> 
	        AND CR.PRODUCTTYPE = #{PRODUCTIONTYPE}
	    </if>
	    <if test="JOBTYPE != null and JOBTYPE !='' "> 
	        AND CR.JOBTYPE = #{JOBTYPE}
	    </if>
	    <if test="ITEMID != null and ITEMID !='' "> 
	          AND EXISTS
                                        (
                                            SELECT  1
                                            FROM    UFN_SELECTSTRINGTOSPLIT(#{ITEMID}, ',')      LMP
                                            WHERE   CR.RCITEMID = LMP.VALUE                                            
                                        )
	    </if>
	    <if test="ITEMVERSION != null and ITEMVERSION !='' "> 
	          AND EXISTS
                                        (
                                            SELECT  1
                                            FROM    UFN_SELECTSTRINGTOSPLIT(#{ITEMVERSION}, ',')      LMP
                                            WHERE   CR.RCITEMVERSION = LMP.VALUE                                            
                                        )
	    </if>
	    <if test="CAMOWNER != null and CAMOWNER !='' ">
	       	          AND EXISTS
	                                      (
	                                          SELECT  1
	                                          FROM    UFN_SELECTSTRINGTOSPLIT(#{CAMOWNER}, ',')      LMP
	                                          WHERE   CR.CAMOWNER = LMP.VALUE                                            
	                                      )
	    </if>	    
	    <if test="SPECOWNER != null and SPECOWNER !='' "> 
	        	          AND EXISTS
                               (
                                   SELECT  1
                                   FROM    UFN_SELECTSTRINGTOSPLIT(#{SPECOWNER}, ',')      LMP
                                   WHERE   CR.SPECOWNER = LMP.VALUE                                            
                               )
	    </if>
	    <if test="CAMREQUESTID != null and CAMREQUESTID !='' "> 
	        AND CR.CAMREQUESTID = #{CAMREQUESTID}
	    </if>
	    
		ORDER BY CR.CAMREQUESTID DESC
    </select>     

    <delete id="deleteCamRequest" parameterType="map" > 
	     /* smh.bas.dao.BAS01900Dao.deleteCamRequest */ 
	     DELETE FROM PCM_CAMREQUEST	WHERE CAMREQUESTID = #{CAMREQUESTID}	    
    </delete>

    <update id="updateCamRequest" parameterType="map" > 
	     /* smh.bas.dao.BAS01900Dao.updateCamRequest */ 
	     UPDATE PCM_CAMREQUEST  SET
					 CUSTOMERID                = #{CUSTOMERID}            
					,ITEMID                    = #{ITEMID}                
					,ITEMVERSION               = #{ITEMVERSION}           
					,RCITEMID                  = #{RCITEMID}              
					,RCITEMVERSION             = #{RCITEMVERSION}         
					,SPECOWNER                 = #{SPECOWNER}             
					,CAMOWNER                  = #{CAMOWNER}              
					,MODELDELIVERYDATE         = #{MODELDELIVERYDATE}     
					,JOBTYPE                   = #{JOBTYPE}               
					,PROCESSTYPE               = #{PROCESSTYPE}           
					,PANELSIZE_Y               = #{PANELSIZE_Y}           
					,PRODUCTTYPE               = #{PRODUCTTYPE}           
					,PREVCUSTOMERVERSION       = #{PREVCUSTOMERVERSION}   
					,APPLYCUSTOMERVERSION      = #{APPLYCUSTOMERVERSION}  
					,INNERLAYERCORRECTION      = #{INNERLAYERCORRECTION}  
					,OUTERLAYERCORRECTION      = #{OUTERLAYERCORRECTION}  
					,OLBCORRECTION             = #{OLBCORRECTION}         
					,APPLYCOPPERFOIL           = #{APPLYCOPPERFOIL}       
					,APPLYLAYER                = #{APPLYLAYER}            
					,APPLYLAYERCORRECTION      = #{APPLYLAYERCORRECTION}  
					,ZIPTERMINAL               = #{ZIPTERMINAL}           
					,PADCORRECTION             = #{PADCORRECTION}         
					,BBTSTANDARD               = #{BBTSTANDARD}           
					,MANUFACTURER              = #{MANUFACTURER}          
					,RECEIVER                  = #{RECEIVER}              
					,ELONGATION                = #{ELONGATION}            
					,BBTTYPE                   = #{BBTTYPE}               
					,JIGPRODUCTION             = #{JIGPRODUCTION}         
					,TERMINALTYPE              = #{TERMINALTYPE}          
					,BBTMETHOD                 = #{BBTMETHOD}             
					,BBTDELIVERYDATE           = #{BBTDELIVERYDATE}       
					,MICROSHORTREQUEST         = #{MICROSHORTREQUEST}     
					,SURFACEPLATING1           = #{SURFACEPLATING1}       
					,SURFACEPLATING2           = #{SURFACEPLATING2}       
					,SURFACEPLATING3           = #{SURFACEPLATING3}       
					,MKNOTATION                = #{MKNOTATION}            
					,SPECWEEK                  = #{SPECWEEK}              
					,CAMWEEK                   = #{CAMWEEK}               
					,GUIDESTANDARD             = #{GUIDESTANDARD}         
					,PLATINGCONNECTINGLAYER    = #{PLATINGCONNECTINGLAYER}
					,OUTERGUIDE                = #{OUTERGUIDE}            
					,VISIONPRESS               = #{VISIONPRESS}           
					,TRIMMINGMARK              = #{TRIMMINGMARK}          
					,DRILLSPEC                 = #{DRILLSPEC}             
					,OUTERLAYERSPEC            = #{OUTERLAYERSPEC}        
					,INNERLAYERSPEC            = #{INNERLAYERSPEC}        
					,COVERLAYSPEC              = #{COVERLAYSPEC}          
					,PSRSPEC                   = #{PSRSPEC}               
					,LAYERADHESION             = #{LAYERADHESION}         
					,CUTLASERSPEC              = #{CUTLASERSPEC}          
					,PEELRSTSPEC               = #{PEELRSTSPEC}           
					,ROUTERSPEC                = #{ROUTERSPEC}            
					,SILKSPEC                  = #{SILKSPEC}              
					,TOOLSPEC                  = #{TOOLSPEC}              
					,PANELGUIDESPEC            = #{PANELGUIDESPEC}        
					,ETCSPEC                   = #{ETCSPEC}               
					,COMMENT1                  = #{COMMENT1}              
					,MODIFIER                  = #{MODIFIER}              
					,MODIFIEDTIME              = SYSDATE          
					,LASTTXNHISTKEY            = #{LASTTXNHISTKEY}        
					,LASTTXNID                 = #{LASTTXNID}             
					,LASTTXNUSER               = #{LASTTXNUSER}           
					,LASTTXNTIME               = SYSDATE           
					,LASTTXNCOMMENT        = #{LASTTXNCOMMENT}
	     	WHERE CAMREQUESTID = #{CAMREQUESTID}	    
    </update>
    
     <update id="updateCamState" parameterType="map" > 
	     /* smh.bas.dao.BAS01900Dao.updateCamState */ 
	     UPDATE BAS_GOVERNANCE  SET
					 CAMWORKSTATE = 'Accept'         
					,CAMREQUESTID  = #{CAMREQUESTID}
					,SPECPERSON                 = #{SPECOWNER}             
					,CAMPERSON                  = #{CAMOWNER}
					,MODIFIER                  = #{MODIFIER}              
					,MODIFIEDTIME              = SYSDATE          
					,LASTTXNHISTKEY            = #{LASTTXNHISTKEY}        
					,LASTTXNID                 = #{LASTTXNID}             
					,LASTTXNUSER               = #{LASTTXNUSER}           
					,LASTTXNTIME               = SYSDATE           
					,LASTTXNCOMMENT        = #{LASTTXNCOMMENT}
	     	WHERE ENTERPRISEID	= #{SESSION_ENTERPRISEID}
	     		AND PLANTID	 = #{SESSION_SITETYPE}
	     		AND PRODUCTDEFID	 = #{RCITEMID}
	     		AND PRODUCTDEFVERSION	 = #{RCITEMVERSION}
                AND GOVERNANCETYPE ='NewRequest'
                AND WORKCLASS != 'Same'
    </update>

 	<insert id="insertCamRequest" parameterType="map" > 
	     /* smh.bas.dao.BAS01900Dao.insertCamRequest */ 
	     INSERT INTO PCM_CAMREQUEST  
	     (CAMREQUESTID              
		,PLANTID                   
		,CUSTOMERID                
		,ITEMID                    
		,ITEMVERSION               
		,RCITEMID                  
		,RCITEMVERSION             
		,SPECOWNER                 
		,CAMOWNER                  
		,MODELDELIVERYDATE         
		,JOBTYPE                   
		,PROCESSTYPE               
		,PANELSIZE_Y               
		,PRODUCTTYPE               
		,PREVCUSTOMERVERSION       
		,APPLYCUSTOMERVERSION      
		,INNERLAYERCORRECTION      
		,OUTERLAYERCORRECTION      
		,OLBCORRECTION             
		,APPLYCOPPERFOIL           
		,APPLYLAYER                
		,APPLYLAYERCORRECTION      
		,ZIPTERMINAL               
		,PADCORRECTION             
		,BBTSTANDARD               
		,MANUFACTURER              
		,RECEIVER                  
		,ELONGATION                
		,BBTTYPE                   
		,JIGPRODUCTION             
		,TERMINALTYPE              
		,BBTMETHOD                 
		,BBTDELIVERYDATE           
		,MICROSHORTREQUEST         
		,SURFACEPLATING1           
		,SURFACEPLATING2           
		,SURFACEPLATING3           
		,MKNOTATION                
		,SPECWEEK                  
		,CAMWEEK                   
		,GUIDESTANDARD             
		,PLATINGCONNECTINGLAYER    
		,OUTERGUIDE                
		,VISIONPRESS               
		,TRIMMINGMARK              
		,DRILLSPEC                 
		,OUTERLAYERSPEC            
		,INNERLAYERSPEC            
		,COVERLAYSPEC              
		,PSRSPEC                   
		,LAYERADHESION             
		,CUTLASERSPEC              
		,PEELRSTSPEC               
		,ROUTERSPEC                
		,SILKSPEC                  
		,TOOLSPEC                  
		,PANELGUIDESPEC            
		,ETCSPEC                   
		,COMMENT1                  
		,COMMENT2                  
		,COMMENT3                  
		,COMMENT4                  
		,COMMENT5                  
		,DESCRIPTION               
		,CREATOR                   
		,CREATEDTIME               
		,MODIFIER                  
		,MODIFIEDTIME              
		,LASTTXNHISTKEY            
		,LASTTXNID                 
		,LASTTXNUSER               
		,LASTTXNTIME               
		,LASTTXNCOMMENT            
		,VALIDSTATE)               
		VALUES
		(
		#{CAMREQUESTID}
		,#{SESSION_SITETYPE}
		,#{CUSTOMERID}
		,#{ITEMID}
		,#{ITEMVERSION}
		,#{RCITEMID}
		,#{RCITEMVERSION}
		,#{SPECOWNER}
		,#{CAMOWNER}
		,#{MODELDELIVERYDATE}
		,#{JOBTYPE}
		,#{PROCESSTYPE}
		,#{PANELSIZE_Y}
		,#{PRODUCTTYPE}
		,#{PREVCUSTOMERVERSION}
		,#{APPLYCUSTOMERVERSION}
		,#{INNERLAYERCORRECTION}
		,#{OUTERLAYERCORRECTION}
		,#{OLBCORRECTION}
		,#{APPLYCOPPERFOIL}
		,#{APPLYLAYER}
		,#{APPLYLAYERCORRECTION}
		,#{ZIPTERMINAL}
		,#{PADCORRECTION}
		,#{BBTSTANDARD}
		,#{MANUFACTURER}
		,#{RECEIVER}
		,#{ELONGATION}
		,#{BBTTYPE}
		,#{JIGPRODUCTION}
		,#{TERMINALTYPE}
		,#{BBTMETHOD}
		,#{BBTDELIVERYDATE}
		,#{MICROSHORTREQUEST}
		,#{SURFACEPLATING1}
		,#{SURFACEPLATING2}
		,#{SURFACEPLATING3}
		,#{MKNOTATION}
		,#{SPECWEEK}
		,#{CAMWEEK}
		,#{GUIDESTANDARD}
		,#{PLATINGCONNECTINGLAYER}
		,#{OUTERGUIDE}
		,#{VISIONPRESS}
		,#{TRIMMINGMARK}
		,#{DRILLSPEC}
		,#{OUTERLAYERSPEC}
		,#{INNERLAYERSPEC}
		,#{COVERLAYSPEC}
		,#{PSRSPEC}
		,#{LAYERADHESION}
		,#{CUTLASERSPEC}
		,#{PEELRSTSPEC}
		,#{ROUTERSPEC}
		,#{SILKSPEC}
		,#{TOOLSPEC}
		,#{PANELGUIDESPEC}
		,#{ETCSPEC}
		,#{COMMENT1}
		,#{COMMENT2}
		,#{COMMENT3}
		,#{COMMENT4}
		,#{COMMENT5}
		,#{DESCRIPTION}
		,#{CREATOR}
		,SYSDATE
		,#{MODIFIER}
		,SYSDATE
		,#{LASTTXNHISTKEY}
		,#{LASTTXNID}
		,#{LASTTXNUSER}
		,SYSDATE
		,#{LASTTXNCOMMENT}
		,'Valid'
		)
    </insert>

    <select id="selectItemDetail" parameterType="map" resultType="hashmap">   		
			 /* smh.bas.dao.BAS01900Dao.selectItemDetail */
			 SELECT S.CUSTOMERID
				       ,CM.CUSTOMERNAME
				       ,S.CUSTOMERREV
				       ,CASE
				            WHEN NVL(SOA.ISAPPROVAL, 'N') = 'Y' THEN
				             'Input'
				            ELSE
				             S.STATUS
				        END SPECWORKTYPE
				       ,S.CAMWORKSTATE
				       ,NVL(D3.DICTIONARYNAME, S.CAMWORKSTATE) AS CAMWORKSTATENAME
	                ,   S.SPECPERSON AS SPECOWNER
	                ,   NVL(U1.USERNAME, S.SPECPERSON)            AS SPECOWNERNAME
	                ,   S.CAMPERSON  AS CAMOWNER
	                ,   NVL(U2.USERNAME, S.CAMPERSON)             AS CAMOWNERNAME
				 FROM   BAS_GOVERNANCE S
         		LEFT JOIN CMD_USER_V           U1      ON  S.SPECPERSON = U1.USERID
         		LEFT JOIN CMD_USER_V           U2      ON  S.CAMPERSON = U2.USERID
				LEFT JOIN CMD_LOOKUP_VALUES           C3      ON  S.CAMWORKSTATE = C3.lookup_code
				                                    AND C3.lookup_type = 'CAMState'                                            
				LEFT JOIN CMD_DICTIONARY     D3      ON  C3.DICTIONARYID = D3.DICTIONARYID
				                                    AND D3.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
				LEFT JOIN BAS_CUSTOMER       CM      ON  S.CUSTOMERID = CM.CUSTOMERID
				                                    AND S.ENTERPRISEID = CM.ENTERPRISEID
				                                    AND S.PLANTID = CM.PLANTID
				                                    LEFT JOIN   BAS_SALEORDERAPPROVAL       SOA ON  S.PRODUCTDEFID = SOA.PRODUCTDEFID
				                                          AND S.PRODUCTDEFVERSION = SOA.PRODUCTDEFVERSION
				                                          AND S.ENTERPRISEID = SOA.ENTERPRISEID
				                                          AND S.PLANTID = SOA.PLANTID
				                                          AND NVL(SOA.ISAPPROVAL, 'N') = 'Y'
				WHERE ROWNUM = 1
				  AND	 S.GOVERNANCETYPE = 'NewRequest'
				  AND S.PRODUCTDEFID =			#{ITEMID}
				  AND S.PRODUCTDEFVERSION = 	#{ITEMVERSION}
	</select>    
    <!-- ID 신규채번 -->
	<select id="selectNewItemID"  statementType="CALLABLE" parameterType="map">
		/* smh.bas.dao.BAS01900Dao.selectNewItemID */
		{#{O_NEWID,mode=OUT,jdbcType=VARCHAR ,javaType=string} = call BAS_COMMON_PKG.FN_GET_ID(
										   #{CLASSID}
										  ,#{PREFIX}
				 						  ,#{CREATOR}
				 						  ,'4'
										)
	     }
    </select>

</mapper>
