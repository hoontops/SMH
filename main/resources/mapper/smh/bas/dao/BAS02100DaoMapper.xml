<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.bas.dao.BAS02100Dao">
	<sql id="whoCreate">
	TO_CHAR(${PARAM}), 'YYYY-MM-DD HH24:MI:SS') AS ${PARAM}
	</sql>
	
    <!-- BOM Tree 조회-->
    <select id="selectTreeList" parameterType="map" resultType="hashmap">
    /* smh.bas.dao.BAS02100Dao."selectTreeList" */
    SELECT PLANTID
			,BOMID
			,PARENTBOMID
			,ASSEMBLYITEMID
			,ASSEMBLYITEMNAME
			,ASSEMBLYITEMVERSION
			,ASSEMBLYSEQUENCE
			,ASSEMBLYQTY
			,ASSEMBLYTYPE
			,USERSEQUENCE
			,DISPLAYNAME
			,MASTERDATACLASSID
			,PARENTBOMSEQUENCE
			,BOMSEQUENCE
			,OPERSEQ
			,BOMLEVEL
    FROM( 
    WITH BOMTREE 
             ( 
                         PARENTS_ASSEMBLYITEMID
                        ,PARENTS_ASSEMBLYITEMVERSION
                        ,PARENTBOMID
                        ,PLANTID
                        ,ASSEMBLYITEMID
                        ,ASSEMBLYITEMVERSION
                        ,ASSEMBLYITEMBOMID_HALF
                        ,ASSEMBLYITEMBOMID
                        ,ASSEMBLYSEQUENCE
                        ,ASSEMBLYQTY
                        ,ASSEMBLYTYPE
                        ,USERSEQUENCE
					    ,PARENTBOMSEQUENCE
					    ,BOMSEQUENCE   
					    ,OPERSEQ
					    ,BOMLEVEL					    
                ) AS 
                  (
                   SELECT  *
                    from (
                            SELECT
                                     P.ASSEMBLYITEMID       PARENTS_ASSEMBLYITEMID
                                    ,P.ASSEMBLYITEMVERSION  PARENTS_ASSEMBLYITEMVERSION
                                    ,'0' PARENTBOMID
                                    ,A.PLANTID
                                    ,P.ASSEMBLYITEMID       ASSEMBLYITEMID
                                    ,P.ASSEMBLYITEMVERSION  ASSEMBLYITEMVERSION
                                    ,A.ASSEMBLYBOMID        ASSEMBLYITEMBOMID_HALF
                                    ,A.COMPONENTBOMID       ASSEMBLYITEMBOMID
                                    ,A.COMPONENTSEQUENCE    ASSEMBLYSEQUENCE
                                    ,A.COMPONENTQTY         ASSEMBLYQTY
                                    ,A.WIPSUPPLYTYPE        ASSEMBLYTYPE
                                    ,'0'					USERSEQUENCE
						       		,'-1'                     PARENTBOMSEQUENCE
						       		,'0' 					BOMSEQUENCE      
						       		, '0' OPERSEQ
						       		, 0 BOMLEVEL
                                 FROM
                                    BAS_BOMCOMPONENT               A
                                 INNER JOIN BAS_ASSEMBLYBILLOFMATERIAL P   ON  P.ASSEMBLYBOMID = A.ASSEMBLYBOMID
                                                                         AND  P.ENTERPRISEID  = A.ENTERPRISEID
                                 WHERE P.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
                                   AND P.ASSEMBLYITEMID = #{PRODUCTDEFID} 
                                   AND P.ASSEMBLYITEMVERSION = #{PRODUCTDEFVERSION}
                                   AND ROWNUM = 1
                        ) A
                        UNION all  
                        SELECT
                            P.ASSEMBLYITEMID       PARENTS_ASSEMBLYITEMID
                           ,P.ASSEMBLYITEMVERSION  PARENTS_ASSEMBLYITEMVERSION
                           ,TO_CHAR(P.ASSEMBLYBOMID)  PARENTBOMID
                           ,A.PLANTID
                           ,A.COMPONENTITEMID      ASSEMBLYITEMID
                           ,A.COMPONENTITEMVERSION ASSEMBLYITEMVERSION
                           ,C.ASSEMBLYBOMID        ASSEMBLYITEMBOMID_HALF
                           ,A.COMPONENTBOMID       ASSEMBLYITEMBOMID
                           ,A.COMPONENTSEQUENCE    ASSEMBLYSEQUENCE
                           ,A.COMPONENTQTY         ASSEMBLYQTY
                           ,A.WIPSUPPLYTYPE        ASSEMBLYTYPE
                           ,TO_CHAR(OP.USERSEQUENCE) USERSEQUENCE
				       	   ,BG.OPERSEQ AS PARENTBOMSEQUENCE
				       		,CASE WHEN BG.BOMSEQUENCE != '' THEN BG.BOMSEQUENCE || '.' || LPAD(TO_CHAR(OP.USERSEQUENCE), 4, '0') || '.' || LPAD(ROW_NUMBER() OVER(PARTITION BY BG.BOMSEQUENCE ORDER BY A.COMPONENTSEQUENCE), 4, '0') 
					              ELSE LPAD(TO_CHAR(OP.USERSEQUENCE), 4, '0') || '.' || LPAD(ROW_NUMBER() OVER(PARTITION BY BG.BOMSEQUENCE ORDER BY A.COMPONENTSEQUENCE), 4, '0')  
				            END	AS	BOMSEQUENCE	
<!-- 					        ,BG.OPERSEQ ||
					         TO_CHAR(RANK() OVER(ORDER BY TO_NUMBER(OP.USERSEQUENCE)
					         ,TO_NUMBER(A.COMPONENTSEQUENCE))) OPERSEQ -->
        				,BG.OPERSEQ || OP.USERSEQUENCE || A.COMPONENTSEQUENCE AS OPERSEQ
				           , BOMLEVEL + 1 AS BOMLEVEL
                        FROM
                           BAS_BOMCOMPONENT A
                        INNER JOIN BAS_ASSEMBLYBILLOFMATERIAL P ON P.ASSEMBLYBOMID = A.ASSEMBLYBOMID
						                        							<if test="VALIDSTATE != null and VALIDSTATE !='' ">
																				AND P.VALIDSTATE = #{VALIDSTATE}
																			</if>
              	        INNER JOIN BAS_OPERATION	OP	ON	A.OPERATIONID = OP.OPERATIONID
						                        							<if test="VALIDSTATE != null and VALIDSTATE !='' ">
																				AND OP.VALIDSTATE = #{VALIDSTATE}
																			</if>
              	        INNER JOIN BOMTREE BG
                            ON P.ASSEMBLYITEMID      = BG.ASSEMBLYITEMID  --1025362J1
                           AND P.ASSEMBLYITEMVERSION = BG.ASSEMBLYITEMVERSION  --FA1
                        LEFT OUTER JOIN BAS_ASSEMBLYBILLOFMATERIAL C ON C.ASSEMBLYITEMID = A.COMPONENTITEMID
                           																AND C.ASSEMBLYITEMVERSION = A.COMPONENTITEMVERSION
						                        							<if test="VALIDSTATE != null and VALIDSTATE !='' ">
																				AND C.VALIDSTATE = #{VALIDSTATE}
																			</if>
						<if test="VALIDSTATE != null and VALIDSTATE !='' ">
							WHERE A.VALIDSTATE = #{VALIDSTATE}
						</if>
				)
              SELECT
                    BT.PLANTID
                   ,NVL(BT.ASSEMBLYITEMBOMID_HALF,BT.ASSEMBLYITEMBOMID) AS BOMID
                   ,BT.PARENTBOMID
                   ,BT.ASSEMBLYITEMID
                   ,NVL(IM.ITEMNAME,'-') ASSEMBLYITEMNAME
                   ,BT.ASSEMBLYITEMVERSION
                   ,BT.ASSEMBLYSEQUENCE
                   ,BT.ASSEMBLYQTY
                   ,BT.ASSEMBLYTYPE
                   ,TO_NUMBER(BT.USERSEQUENCE) AS USERSEQUENCE
                   ,CASE WHEN TO_CHAR(BT.USERSEQUENCE) = '0' THEN BT.ASSEMBLYITEMID 	
                   		 ELSE TO_CHAR(BT.USERSEQUENCE)  ||'      '|| BT.ASSEMBLYITEMID 		
         				 END AS DISPLAYNAME
         		   ,IM.MASTERDATACLASSID
         		   ,BT.PARENTBOMSEQUENCE
         		   ,BT.BOMSEQUENCE
				   , OPERSEQ
             	   ,BOMLEVEL
             FROM  BOMTREE BT
             LEFT OUTER JOIN BAS_ITEMMASTER IM  ON  BT.ASSEMBLYITEMID = IM.ITEMID
                                       AND BT.ASSEMBLYITEMVERSION = IM.ITEMVERSION           	
           	) TV
WHERE 1=1
START WITH TV.PARENTBOMSEQUENCE = '-1'
CONNECT BY NOCYCLE PRIOR TV.OPERSEQ = TV.PARENTBOMSEQUENCE
ORDER SIBLINGS BY BOMSEQUENCE
    </select>    
    
	<!-- Product Info 조회-->
    <select id="selectProductDEFInfo" parameterType="map" resultType="hashmap">
    	/* smh.bas.dao.BAS02100Dao."selectProductDEFInfo" */
				SELECT  MS.CUSTOMERNAME           								-- 고객사
				       ,MA.ITEMID               	  	as PRODUCTDEFID			-- 품목코드
				       ,MA.ITEMVERSION            		as PRODUCTDEFVERSION	-- 품목버전
				       ,MA.MASTERDATACLASSID			as PRODUCTDEFCLASSID	-- 품목구분
				       ,RT.COMPLETIONWAREHOUSEID  								-- 완료창고
				       ,WH.WAREHOUSENAME										-- 완료창고명
				       ,MA.ITEMNAME               		as PRODUCTDEFNAME		-- 품목명
				       ,MA.UOMDEFID												-- UOM
				       ,MS.JOBTYPE                								-- 작업구분
				       ,JT.JOBTYPENAME											-- 작업구분명
				       ,MA.PRODUCTIONTYPE										-- 생산구분
				       ,B.PRODUCTIONTYPENAME       								-- 생산구분명
				       ,MS.RTRSHT
				       ,MS.PNLSIZEXAXIS
				       ,MS.PNLSIZEYAXIS
				       ,MS.PCSPNL												--배열수
				       ,MS.PCSMM												--산출수
				       ,MS.USELAYER												--사용층
				       ,PISC.CHANGENOTE1				as REMARK				--비고
				FROM BAS_ITEMMASTER MA
				INNER JOIN BAS_PRODUCTITEMSPEC MS 				ON 	MS.ENTERPRISEID 		= MA.ENTERPRISEID
				                                 				AND MS.ITEMID 				= MA.ITEMID
				                                 				AND MS.ITEMVERSION 			= MA.ITEMVERSION
				LEFT OUTER JOIN BAS_ROUTING    RT 				ON 	RT.ENTERPRISEID 		= MA.ENTERPRISEID
				                                 				AND RT.ASSEMBLYITEMID 		= MA.ITEMID
				                                 				AND RT.ASSEMBLYITEMVERSION	= MA.ITEMVERSION
				LEFT OUTER JOIN BAS_WAREHOUSE  WH				ON 	WH.ENTERPRISEID 		= MA.ENTERPRISEID
																AND WH.PLANTID				= #{PLANTID}
				                                 				AND WH.WAREHOUSEID 			= RT.COMPLETIONWAREHOUSEID         
				LEFT OUTER JOIN BAS_PRODUCTITEMSPECCOMMENT  PISC	ON 	PISC.ITEMID 			= MA.ITEMID
																AND PISC.ITEMVERSION			= MA.ITEMVERSION                                 	                        	
				LEFT JOIN 	(	
								SELECT	C.LOOKUP_CODE CODEID
						              , D.DICTIONARYNAME	AS PRODUCTIONTYPENAME
								FROM CMD_LOOKUP_VALUES	C
								LEFT OUTER JOIN	CMD_DICTIONARY	D	ON	C.DICTIONARYID = D.DICTIONARYID
								WHERE	1=1
									AND		C.LOOKUP_TYPE = 'ProductionType'
									AND		C.ENABLED_FLAG = 'Y'
									AND		D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE} 
								) B										ON MA.PRODUCTIONTYPE = B.CODEID
				LEFT JOIN 	(	
								SELECT	C.LOOKUP_CODE CODEID
						              , F.DICTIONARYNAME	AS JOBTYPENAME
								FROM CMD_LOOKUP_VALUES	C
								LEFT OUTER JOIN	CMD_DICTIONARY	F	ON	C.DICTIONARYID = F.DICTIONARYID
								WHERE	1=1
									AND		C.LOOKUP_TYPE = 'JobType'
									AND		C.ENABLED_FLAG = 'Y'
									AND		F.LANGUAGETYPE =#{SESSION_LANGUAGETYPE} 
							) JT									ON 	MS.JOBTYPE =JT.CODEID   				
				WHERE 1=1
					AND MA.ENTERPRISEID 	= #{SESSION_ENTERPRISEID}
					AND MA.ITEMID 			= #{ITEMID}
					AND MA.ITEMVERSION 		= #{ITEMVERSION}
					AND MA.VALIDSTATE = 'Valid' 
	</select>
	
	<!-- Product Oper Resource 조회-->
    <select id="selectOperationResource" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02100Dao."selectOperationResource" */
			SELECT PLANTID
			      ,OPERATIONID
			      ,OPERATIONSEQUENCE
			      ,ORIUSERSEQUENCE
			      ,USERSEQUENCE
			      ,PROCESSSEGMENTID
			      ,PROCESSSEGMENTVERSION
			      ,PROCESSUOM
			      ,PROCESSSEGMENTNAME
			      ,PROCESSSEGMENTCLASSID
			      ,DESCRIPTION
			      ,CASE
			           WHEN ROWNUM = 1 THEN
			            'Y'
			           ELSE
			            ISREQUIREDMATERIAL
			       END AS ISREQUIREDMATERIAL
			      ,ISREQUIREDOPERATIONSPEC
			      ,ISREQUIREDTOOL
			      ,VALIDSTATE
			      ,CREATEDTIME
			      ,CREATOR			      
			      ,MODIFIEDTIME
			      ,MODIFIER
			      ,ISWEEKMNG
			      ,MAINPRODUCTID
			      ,MAINPRODUCTVERSION
			      ,SUBSEGMENTID
			      ,ASSEMBLYROUTINGID
			      ,PATHTYPE
            		,PROCESSSEGMENTTYPE
			FROM (      SELECT OP.PLANTID
			                        ,OP.OPERATIONID
			                        ,OP.OPERATIONSEQUENCE
			                        ,OP.USERSEQUENCE AS ORIUSERSEQUENCE
			                        ,OP.USERSEQUENCE
			                        ,OP.PROCESSSEGMENTID
			                        ,PP.PROCESSSEGMENTVERSION
			                        ,OP.PROCESSUOM
			                        ,PN.DICTIONARYNAME AS PROCESSSEGMENTNAME
			                        ,PG.PROCESSSEGMENTCLASSID
			                        ,OP.DESCRIPTION
			                        ,PG.ISREQUIREDMATERIAL
			                        ,PG.ISREQUIREDOPERATIONSPEC
			                        ,PG.ISREQUIREDTOOL
			                        ,PP.VALIDSTATE
			                        , TO_CHAR(OP.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
			                        ,CU.USER_NM AS CREATOR
			                        , TO_CHAR(OP.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
			                        ,MU.USER_NM AS MODIFIER
			                        ,REPLACE(NVL(PP.ISWEEKMNG, ''), 'N', '') AS ISWEEKMNG
								      ,RT.MAINPRODUCTID
								      ,RT.MAINPRODUCTVERSION
								      ,PG.SUBSEGMENTID AS SUBSEGMENTID
								      ,RT.ASSEMBLYROUTINGID
								      ,PP.PATHTYPE
                  				    ,PS.PROCESSSEGMENTTYPE
			                  FROM   BAS_OPERATION OP
			              INNER JOIN BAS_ROUTING                  RT  ON OP.ENTERPRISEID        = RT.ENTERPRISEID
			                                                         AND OP.ASSEMBLYROUTINGID   = RT.ASSEMBLYROUTINGID
			              INNER JOIN BAS_PROCESSPATH               PP  ON  RT.MAINPRODUCTID        = PP.PROCESSDEFID
			                                                            AND RT.MAINPRODUCTVERSION   = PP.PROCESSDEFVERSION
			                                                            AND OP.PROCESSSEGMENTID     = PP.PROCESSSEGMENTID
			                                                            AND PP.VALIDSTATE = OP.VALIDSTATE
                                                                  		AND OP.USERSEQUENCE = PP.USERSEQUENCE
                    	LEFT OUTER JOIN BAS_PROCESSSEGMENT    PS  ON PS.PROCESSSEGMENTID    = OP.PROCESSSEGMENTID 
                                                          AND PS.ENTERPRISEID        = OP.ENTERPRISEID
			              LEFT OUTER JOIN BAS_PROCESSSEGMENTEXT    PG  ON PG.PROCESSSEGMENTID    = OP.PROCESSSEGMENTID 
			                                                    AND PG.ENTERPRISEID        = OP.ENTERPRISEID
			               LEFT OUTER JOIN CMD_DICTIONARY           PN  ON PN.DICTIONARYID        = PG.PROCESSSEGMENTNAME
			                                                           AND PN.LANGUAGETYPE        = #{SESSION_LANGUAGETYPE} 
			              LEFT OUTER JOIN CMD_USERS                 CU  ON CU.USER_ID            = OP.CREATOR
			              LEFT OUTER JOIN CMD_USERS                 MU  ON MU.USER_ID            = OP.MODIFIER				
							WHERE RT.ENTERPRISEID  =#{SESSION_ENTERPRISEID}
							AND RT.MAINPRODUCTID  = #{ITEMID}
							AND RT.MAINPRODUCTVERSION  = #{ITEMVERSION}
				<if test="VALIDSTATE != null and VALIDSTATE !='' ">
					AND	OP.VALIDSTATE = #{VALIDSTATE}
					AND	PP.VALIDSTATE = #{VALIDSTATE}
				</if>
		<choose>
	          <when test="ISUPDATE eq 'Y'.toString()">
				ORDER BY TO_NUMBER(OP.USERSEQUENCE) ASC
	          </when>
	          <otherwise>
	          		<!-- ORDER BY OP.OPERATIONSEQUENCE ASC -->
	          		ORDER BY TO_NUMBER(OP.USERSEQUENCE) ASC	          	    
	          </otherwise>
          </choose>
		
		)
    </select>
    
	<!-- 자재 조회-->
    <select id="selectConsumableList" parameterType="map" resultType="hashmap">
				/* smh.bas.dao.BAS02100Dao."selectConsumableList" */
				<![CDATA[
               SELECT BO.PLANTID
                   	    ,BC.COMPONENTITEMID 												/* 자재코드 */
                    	,BC.COMPONENTITEMVERSION	 									/* 자재버전 */
                    	,IM.ITEMNAME AS COMPONENTITEMNAME 						/* 자재명 */
                    	,NVL(U.UOMDEFNAME, U.UOMDEFID) AS COMPONENTUOM 	/* UOM */
                    	,0 AS SUMQTY 															/* 합수 (계산로직확인필요) */
                    	,BC.COMPONENTQTY -- 소요량
                    	,BC.WIPSUPPLYTYPE -- 공급유형
                    	,BC.USERLAYER -- 사용층
                    	,SBM.ISREQUIRED AS ISREQUIREDMATERIAL -- 투입자재제한
                    	,SBM.ISALTERABLE -- 대체자재사용여부 (필드확인필요)
                    	,SBM.MATERIALTYPE
                    	,SBM."sequence" AS SEQ -- SF JOIN 용도
                    	,SBM.ALTITEM
                    	,SBM.ALTREVISION
                     	,NVL(CU.USER_NM, SBM.CREATOR) AS CREATOR                     
                     	, TO_CHAR(SBM.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
                     	,NVL(MU.USER_NM, SBM.MODIFIER) AS MODIFIER
                     	, TO_CHAR(SBM.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
                     	,'' AS BOMFORMULAID
						/*
                     	,CASE BC.ENTERPRISEID 	WHEN 'INETERFLEX' THEN
                          NULL
                         ELSE
                          BC.PNLSIZEXAXIS
                     	END VARIABLE1
                     	,CASE BC.ENTERPRISEID	WHEN 'INETERFLEX' THEN
                          NULL
                         ELSE
                          BC.PNLSIZEYAXIS
                     	END VARIABLE2
                     	,'' AS VARIABLE3
                     	,'' AS VARIABLE4
                     	,'' AS VARIABLE5
                     	*/
                     	,SBM.VARIABLE1
                     	,SBM.VARIABLE2
                     	,SBM.VARIABLE3
                     	,SBM.VARIABLE4
                     	,SBM.VARIABLE5
                     	
                     	
                     	,MIS.MAKER --제조사
                     	,IM.SPEC --규격
                     	,BC.MATERIALDETAILTYPE --자재유형
                     	,BC.INKTYPE --잉크품목구분
                     	,BC.WORKMETHOD --작업방법
                     	,BC.DESCRIPTION
                     	,TO_NUMBER(NVL(SBM.MULTIPLE, 1)) AS MULTIPLE
                     	,BC.COMPONENTBOMID
                     	,BC.COMPONENTSEQUENCE
                     	,SBM.PROCESSSEGMENTID
                     	,SBM.PROCESSSEGMENTVERSION
                     	,BC.OPERATIONID
                     	,BC.PSRPRINTTYPE
                     	,BO.USERSEQUENCE
                 FROM BAS_BOMCOMPONENT               BC 
                 LEFT OUTER JOIN BAS_OPERATION    BO    ON   BO.OPERATIONID       = BC.OPERATIONID
                                                           AND  BO.ENTERPRISEID         = BC.ENTERPRISEID
                 LEFT OUTER JOIN BAS_ITEMMASTER     IM    ON   IM.ENTERPRISEID     = BC.ENTERPRISEID
                                       AND IM.ITEMID         = BC.COMPONENTITEMID
                                       AND IM.ITEMVERSION       = BC.COMPONENTITEMVERSION
                 LEFT OUTER JOIN BAS_BILLOFMATERIAL  SBM     ON  SBM.ENTERPRISEID         = BC.ENTERPRISEID
                                                            AND SBM.PROCESSSEGMENTID     = BO.PROCESSSEGMENTID
                                                           AND SBM.MATERIALDEFID       = BC.COMPONENTITEMID
                                                           AND SBM.MATERIALDEFVERSION  = BC.COMPONENTITEMVERSION      
                                                           AND SBM.PRODUCTDEFID         = #{ITEMID}
                                                           AND SBM.PRODUCTDEFVERSION   = #{ITEMVERSION}
                                                           AND SBM.PROCESSDEFID        = #{ITEMID}
                                                           AND SBM.PROCESSDEFVERSION   = #{ITEMVERSION}
                                                           AND SBM."sequence" = BC.COMPONENTSEQUENCE
                 LEFT OUTER JOIN BAS_MATERIALITEMSPEC MIS    ON  IM.ENTERPRISEID         = MIS.ENTERPRISEID
                                                            AND IM.ITEMID               = MIS.ITEMID
                                                            AND IM.ITEMVERSION          = MIS.ITEMVERSION                                           
               LEFT OUTER JOIN CMD_USERS            CU    ON CU.USER_ID            = SBM.CREATOR
               LEFT OUTER JOIN CMD_USERS            MU    ON MU.USER_ID            = SBM.MODIFIER
               LEFT OUTER JOIN BAS_UOMDEFINITION  U    ON BC.COMPONENTUOM    = U.UOMDEFID                                               
                 WHERE 1=1
                  AND BC.ENTERPRISEID      = #{SESSION_ENTERPRISEID}
                  AND BC.OPERATIONID       = #{OPERATIONID}
                  ORDER BY BC.USERLAYER ASC
              ]]>
    </select>
    
	<!-- 공정스팩 조회-->
    <select id="selectOperationSpecList" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02100Dao.selectOperationSpecList */
					
				SELECT  SA.SPECSEQUENCE                  AS   SPECSEQUENCE 
					  	, SA.PROCESSSEGID   			     AS   PROCESSSEGMENTID
				      , SA.INSPITEMID 
				      , II.INSPITEMVERSION
				      , SA.INSPECTIONDEFID
				      , SA.INSPECTIONDEFVERSION
				      , SA.RESOURCETYPE
				      , IID.DICTIONARYNAME               AS   INSPITEMNAME
				      , SA.SPECCLASSID 
				      , SN.WORKCONDITION                 AS   LOCATION
				      , SN.DEFAULTCHARTTYPE
				      , SD.LCL
				      , SD.CL
				      , SD.UCL
				      , SD.LSL
				      , SD.SL
				      , SD.USL
				      , SD.LOL
				      , SD.UOL
				      , CU.USER_NM						 AS CREATOR
				      , TO_CHAR(SD.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
				      , MU.USER_NM						 AS MODIFIER
				      , TO_CHAR(SD.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
              		  , SA.RESOURCEID
              		  , SA.RESOURCEVERSION
              		  , SD.COPPERTHICKNESS
              		  , SD.OSL
              		  , SD.OUSL
              		  , SD.OLSL
              		  , II.SPECTRANSTYPE
					FROM    BAS_INSPECTIONITEMREL               SA      
					LEFT JOIN   BAS_SPECDEFINITION              SN      ON  SA.SPECSEQUENCE 	= SN.SPECSEQUENCE
					LEFT JOIN   BAS_SPECDETAIL                  SD      ON  SA.SPECSEQUENCE 	= SD.SPECSEQUENCE  
	                                   AND SA.SPECCLASSID   = SD.SPECCLASSID
	        LEFT JOIN   BAS_INSPITEM                    II      ON  SA.ENTERPRISEID   = II.ENTERPRISEID
	                                   AND SA.INSPITEMID    = II.INSPITEMID   
	        LEFT OUTER JOIN CMD_DICTIONARY              IID     ON  II.INSPITEMNAME   = IID.DICTIONARYID
	                                   AND IID.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
	        LEFT OUTER JOIN CMD_USERS                    CU       ON  CU.USER_ID        = SD.CREATOR
	              LEFT OUTER JOIN CMD_USERS                    MU       ON  MU.USER_ID        = SD.MODIFIER
	                                         
	        WHERE   1=1
	        AND     SA.SPECCLASSID     = 'OperationSpec'
	        AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
	        AND     SA.RESOURCEID     = #{ITEMID}        --품목ID
	        AND     SA.RESOURCEVERSION   = #{ITEMVERSION}   --품목 버전       
	        AND     SA.PROCESSSEGID   = #{PROCESSSEGMENTID}     --공정아이디;
	        
	        UNION ALL
	        
	        SELECT  IIR.SPECSEQUENCE                  AS   SPECSEQUENCE 
	            , SA.PROCESSSEGMENTID
	            , SA.INSPITEMID 
	            , II.INSPITEMVERSION
	            , ISD.INSPECTIONDEFID
	            , ISD.INSPECTIONDEFVERSION
	            , IC.RESOURCETYPE
	            , IID.DICTIONARYNAME                AS INSPITEMNAME
	            , 'OperationSpec'                   AS SPECCLASSID 
	            , NULL AS LOCATION
	            , NULL AS DEFAULTCHARTTYPE
	            , NULL AS LCL
	            , NULL AS CL
	            , NULL AS UCL
	            , NULL AS LSL
	            , NULL AS SL
	            , NULL AS USL
	            , NULL AS LOL
	            , NULL AS UOL
	            , NULL AS CREATOR
	            , NULL AS CREATEDTIME
	            , NULL AS MODIFIER
	            , NULL AS MODIFIEDTIME
              	, SA.PROCESSSEGMENTID AS RESOURCEID
				, NVL(IIR.RESOURCEVERSION, #{ITEMVERSION}) AS RESOURCEVERSION
      			, NULL AS COPPERTHICKNESS
	       		  ,  NULL AS OSL
	       		  ,  NULL AS OUSL
	       		  ,  NULL AS OLSL
	       		  ,II.SPECTRANSTYPE
	        FROM    BAS_SPECATTRIBUTE                   SA     
	        INNER JOIN BAS_INSPECTIONDEFINITION        ISD   ON ISD.INSPECTIONCLASSID = SA.INSPITEMCLASSID
	                                                     AND ISD.ENTERPRISEID     = SA.ENTERPRISEID
                                                         AND ISD.INSPECTIONDEFID= 'OperationInspection-OperationInspection'
	        INNER JOIN BAS_INSPECTIONCLASS        IC    ON IC.INSPECTIONCLASSID  = ISD.INSPECTIONCLASSID
	                                  AND IC.ENTERPRISEID     = ISD.ENTERPRISEID
	        LEFT JOIN  BAS_INSPITEM                     II      ON  SA.ENTERPRISEID    = II.ENTERPRISEID
	                                  AND SA.INSPITEMID      = II.INSPITEMID
	        LEFT OUTER JOIN CMD_DICTIONARY              IID    ON  II.INSPITEMNAME    = IID.DICTIONARYID
	                                  AND IID.LANGUAGETYPE   = #{SESSION_LANGUAGETYPE}
	        LEFT OUTER JOIN BAS_INSPECTIONITEMREL      IIR     ON IIR.SPECCLASSID      = 'OperationSpec'
	                                  AND IIR.RESOURCEID      = #{ITEMID}        --품목ID
	                                  AND IIR.RESOURCEVERSION  = #{ITEMVERSION}    --품목 버전       
	                                  AND IIR.PROCESSSEGID    = SA.PROCESSSEGMENTID
	                                  AND IIR.INSPITEMID     = SA.INSPITEMID
	                                  AND IIR.INSPITEMVERSION  = II.INSPITEMVERSION
                                      AND IIR.INSPECTIONDEFID = 'OperationInspection-OperationInspection'
	        WHERE   1=1
	        AND     SA.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
	        AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
	        AND     SA.DEFAULTDISPLAY = 'Y'
	        AND     IIR.SPECSEQUENCE IS NULL               
	        ORDER BY INSPITEMID
    </select>
    
	<!-- 치공구 조회-->
    <select id="selectDurableList" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02100Dao.selectDurableList */              
	      SELECT OS.RESOURCEID            AS TOOLCODE -- 치공구ID
		            ,DI.DICTIONARYNAME        AS TOOLNAME -- 치공구명
		            ,OS.RESOURCEIDVERSION     AS TOOLVERSION -- 치공구버전
		            ,DD.FILMUSELAYER1 -- CS 사용층
		            ,DD.FILMUSELAYER2 -- SS 사용층
		            ,CSD.DICTIONARYNAME       AS FILMUSELAYER1NAME -- CS 사용층
		            ,SSD.DICTIONARYNAME       AS FILMUSELAYER2NAME -- SS 사용층
		            ,OS.DESCRIPTION -- 비고 
		            ,OS.RESOURCETYPE          AS DURABLETYPE
		            ,BR.RESOURCETYPE
		            ,BR.EQUIPMENTID
		            ,BR.RESOURCECLASSID
		            ,BR."sequence"            AS SEQ
		             ,CU.USER_NM               AS CREATOR		             
		             , TO_CHAR(BR.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
		             ,MU.USER_NM               AS MODIFIER
		             , TO_CHAR(BR.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
		             ,OS.OPERATIONID
		             ,DD.TOOLTYPE
		             ,DD.TOOLDETAILTYPE
		             ,C1.MEANING               AS FORM
		             ,DD.HITCOUNT
		             ,DD.SUMMARY
		             ,OS.WRAPTYPE
		             ,DD.DURABLECLASSID --TOOL구분
		             ,PG.PROCESSSEGMENTCLASSID
		             ,BR.PRODUCTDEFID
		             ,BR.PRODUCTDEFVERSION
		             ,IM.ITEMNAME              AS PRODUCTDEFNAME		 
		             ,OS.OPERATIONRESOURCEID           
	                 ,OS.MAINPRODUCTID
	                 ,OS.MAINPRODUCTVERSION      
				       ,BR.PROCESSSEGMENTID
				       ,BR.PROCESSSEGMENTVERSION
				       ,BR.RESOURCEID
				       ,BR.RESOURCEVERSION
		      FROM   BAS_OPERATIONRESOURCE OS
		       INNER JOIN BAS_OPERATION              OP   ON OP.OPERATIONID      = OS.OPERATIONID
		        LEFT JOIN TOM_DURABLEDEFINITION      DD   ON DD.ENTERPRISEID      = OS.ENTERPRISEID
		                                                 AND DD.DURABLEDEFID      = OS.RESOURCEID
		                                                 AND DD.DURABLEDEFVERSION    = OS.RESOURCEIDVERSION                          
		        LEFT JOIN BAS_BILLOFRESOURCE         BR   ON BR.RESOURCEID      = DD.DURABLEDEFID
		                                                 AND BR.RESOURCEVERSION    = DD.DURABLEDEFVERSION
		                                                 AND BR.PRODUCTDEFID         = #{ITEMID}
		                                                 AND BR.PRODUCTDEFVERSION   = #{ITEMVERSION} 
		                                                 AND BR.PRODUCTDEFID         = BR.PROCESSDEFID
		                                                 AND BR.PRODUCTDEFVERSION   = BR.PROCESSDEFVERSION
		                                                 AND BR.PROCESSSEGMENTID    = OP.PROCESSSEGMENTID
		        LEFT OUTER JOIN BAS_PROCESSSEGMENTEXT  PG    ON PG.PROCESSSEGMENTID      = OP.PROCESSSEGMENTID 
		                                                    AND PG.ENTERPRISEID         = OP.ENTERPRISEID
		        LEFT JOIN BAS_ITEMMASTER               IM    ON BR.PRODUCTDEFID         = IM.ITEMID
		                                                    AND BR.PRODUCTDEFVERSION    = IM.ITEMVERSION
		                                                    AND OS.ENTERPRISEID         = IM.ENTERPRISEID                                           
		        LEFT JOIN CMD_LOOKUP_VALUES           CSC    ON CSC.LOOKUP_CODE         = DD.FILMUSELAYER1 
		                                                    AND (OS.RESOURCETYPE = 'Film' AND CSC.LOOKUP_TYPE     = 'FilmUseLayer1'
		                                                         OR OS.RESOURCETYPE = 'Durable' AND CSC.LOOKUP_TYPE     = 'Layer' )
		        LEFT JOIN CMD_DICTIONARY              CSD    ON CSD.DICTIONARYID      = CSC.DICTIONARYID
		                                                    AND CSD.LANGUAGETYPE      = #{SESSION_LANGUAGETYPE}
		        LEFT JOIN CMD_LOOKUP_VALUES           SSC    ON SSC.LOOKUP_CODE         = DD.FILMUSELAYER2 
		                                                    AND SSC.LOOKUP_TYPE     = 'FilmUseLayer2'
		        LEFT JOIN CMD_DICTIONARY              SSD    ON SSD.DICTIONARYID      = SSC.DICTIONARYID
		                                                    AND SSD.LANGUAGETYPE      = #{SESSION_LANGUAGETYPE}     
		        LEFT JOIN CMD_DICTIONARY              DI     ON DI.DICTIONARYID      = DD.DURABLEDEFNAME
		                                                    AND DI.LANGUAGETYPE      = #{SESSION_LANGUAGETYPE}
		        LEFT OUTER JOIN CMD_USERS             CU     ON CU.USER_ID            = BR.CREATOR
		        LEFT OUTER JOIN CMD_USERS             MU     ON MU.USER_ID            = BR.MODIFIER
		        LEFT OUTER JOIN CMD_LOOKUP_VALUES     C1     ON DD.FORM   =  C1.LOOKUP_CODE
		                                                    AND C1.LOOKUP_TYPE = 'ToolForm'        
		        WHERE OS.RESOURCETYPE IN ('Film','Durable')
		          AND OS.ENTERPRISEID = #{SESSION_ENTERPRISEID}
		          AND OS.OPERATIONID  = #{OPERATIONID}
		        ORDER BY BR."sequence" ASC 
    </select>
    
	<!-- 외주단가 조회-->
    <select id="selectProcessAttributeValueList" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02100Dao.selectProcessAttributeValueList */


	        SELECT PB.ITEMID
	              ,PB.ITEMVERSION
	              ,PB.ENTERPRISEID
	              ,PB.PLANTID
	              ,PB.USERSEQUENCE
	              ,PB.SEQUENCE
	              ,PB.PROCESSSEGMENTID
	              ,PS.PROCESSSEGMENTCLASSID
	              ,PB.ATTRIBUTECLASS
	              ,PB.OSPPRICECODE
	              ,OP.OSPPRICENAME
	              ,PB.ATTRIBUTECODE
	              ,PB.ATTRIBUTEVALUE        AS ATTRIBUTEVALUE1
	              ,PB.DESCRIPTION
	              ,PB.VALIDSTATE
	              ,OP.CALCULATEUNIT
	              ,USC.USER_NM              AS CREATOR
	              , TO_CHAR(PB.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
	              ,USM.USER_NM              AS MODIFIER	              
	              , TO_CHAR(PB.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
        FROM   BAS_PROCESSATTRIBUTEVALUE PB
        LEFT JOIN OSM_OSPPRICECODE       OP   ON  OP.ENTERPRISEID     = PB.ENTERPRISEID 
                                             AND OP.PLANTID          = PB.PLANTID
                                             AND OP.OSPPRICECODE   = PB.OSPPRICECODE
        LEFT JOIN BAS_PROCESSSEGMENTEXT  PS   ON  PS.ENTERPRISEID     = PB.ENTERPRISEID
                           AND PS.PROCESSSEGMENTID = PB.PROCESSSEGMENTID   
        LEFT OUTER JOIN CMD_USERS      USC   ON   PB.CREATOR       = USC.USER_ID
        LEFT OUTER JOIN CMD_USERS      USM   ON   PB.MODIFIER     = USM.USER_ID
        WHERE 1  = 1
        AND PB.ITEMID = #{ITEMID}
        AND PB.ITEMVERSION = #{ITEMVERSION}
        AND PB.ENTERPRISEID = #{SESSION_ENTERPRISEID}
        AND PB.PLANTID = #{PLANTID}
        AND PB.USERSEQUENCE = #{USERSEQUENCE}
        AND PB.PROCESSSEGMENTID = #{PROCESSSEGMENTID}       
         <if test="ATTRIBUTECLASS != null and ATTRIBUTECLASS !='' "> 
         		AND PB.ATTRIBUTECLASS  = #{ATTRIBUTECLASS}
		</if>	
    </select>
    
	<!-- AOILayer 조회-->
    <select id="selectAOILayerList" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02100Dao.selectAOILayerList */      
			 SELECT OS.OPERATIONID
		              ,OS.ENTERPRISEID
		              ,OS.PLANTID
		              ,OS.PROCESSSEGMENTID
		              ,OS.AOIQCLAYER
		              ,OS.AOIQCLAYER2
		              ,OS.DESCRIPTION
		              ,OS.VALIDSTATE
		              ,OS.SEQUENCE
		              , TO_CHAR(OS.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
		              ,CU.USER_NM          AS CREATOR
		              , TO_CHAR(OS.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
		              ,MU.USER_NM          AS MODIFIER
		        FROM   BAS_OPERATIONSPECVALUE OS
						LEFT OUTER JOIN CMD_USERS                 CU  ON CU.USER_ID      			= OS.CREATOR
		        LEFT OUTER JOIN CMD_USERS                 MU  ON MU.USER_ID      			= OS.MODIFIER
						WHERE OS.OPERATIONID 	= #{OPERATIONID}
						AND	 OS.ENTERPRISEID 	= #{SESSION_ENTERPRISEID}
						AND    OS.PLANTID        = #{PLANTID}   
		                 
    </select>

	<!-- 치공구 조회 팝업-->
    <select id="selectDurablePopList" parameterType="map" resultType="hashmap">
                SELECT DC.DURABLECLASSTYPE
		                  ,DSD.DICTIONARYNAME   AS DURABLETYPENAME
		                  ,DT.PRODUCTDEFID
		                  ,IM.ITEMNAME          AS PRODUCTDEFNAME
		                  ,DT.PRODUCTDEFVERSION
		                  ,DT.DURABLEDEFID      AS TOOLCODE
		                  ,DT.DURABLEDEFID
		                  ,DT.DURABLEDEFVERSION
		                  ,DI.DICTIONARYNAME    AS DURABLEDEFNAME
		                  ,DT.FILMUSELAYER1     AS FILMUSELAYER1 -- CS 사용층
		                  ,DT.FILMUSELAYER2     AS FILMUSELAYER2 -- CS 사용층
		                  ,CSD.DICTIONARYNAME   AS FILMUSELAYER1NAME -- CS 사용층
		                  ,SSD.DICTIONARYNAME   AS FILMUSELAYER2NAME -- SS 사용층
		                  ,DT.DURABLECLASSID
		                  ,DT.TOOLTYPE
		                  ,DT.TOOLDETAILTYPE
		                  ,C1.MEANING           AS FORM
		                  ,DT.SUMMARY
		                  ,DT.HITCOUNT
		                  ,DT.DURABLETYPE
		            FROM   TOM_DURABLEDEFINITION DT
        LEFT JOIN TOM_DURABLECLASS      DC   ON   DC.DURABLECLASSID   = DT.DURABLECLASSID
                                            AND   DC.ENTERPRISEID     = DT.ENTERPRISEID
        LEFT JOIN CMD_DICTIONARY        DI   ON   DI.DICTIONARYID     = DT.DURABLEDEFNAME
                                            AND   DI.LANGUAGETYPE     = #{SESSION_LANGUAGETYPE}
        LEFT JOIN CMD_DICTIONARY        DSD  ON   DSD.DICTIONARYID    = DC.DURABLECLASSNAME
                                            AND   DSD.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}                                
        LEFT JOIN BAS_ITEMMASTER        IM   ON   IM.ITEMID           = DT.PRODUCTDEFID      
                                            AND   IM.ITEMVERSION      = DT.PRODUCTDEFVERSION      
                                            AND   IM.ENTERPRISEID     = DT.ENTERPRISEID
        LEFT JOIN BAS_PRODUCTITEMSPEC   IMS  ON   IMS.ITEMID          = IM.ITEMID      
                                            AND   IMS.ITEMVERSION     = IM.ITEMVERSION      
        LEFT JOIN CMD_LOOKUP_VALUES     CSC  ON   CSC.LOOKUP_CODE     = DT.FILMUSELAYER1 
                                            AND   (DC.DURABLECLASSTYPE= 'Film' AND CSC.LOOKUP_TYPE   = 'FilmUseLayer1'
                                                   OR DC.DURABLECLASSTYPE = 'Durable' AND CSC.LOOKUP_TYPE   = 'Layer' )
        LEFT JOIN CMD_DICTIONARY        CSD  ON   CSD.DICTIONARYID    = CSC.DICTIONARYID
                                            AND   CSD.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN CMD_LOOKUP_VALUES     SSC  ON   SSC.LOOKUP_CODE     = DT.FILMUSELAYER2 
                                            AND   SSC.LOOKUP_TYPE     = 'FilmUseLayer2'
        LEFT JOIN CMD_DICTIONARY        SSD  ON   SSD.DICTIONARYID    = SSC.DICTIONARYID
                                            AND   SSD.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}     
        LEFT JOIN CMD_LOOKUP_VALUES      C1  ON   DT.FORM             =  C1.LOOKUP_CODE
                                            AND   C1.LOOKUP_TYPE      = 'ToolForm'     
      WHERE  1 = 1
      AND    DC.DURABLECLASSTYPE IN ('Durable', 'Film')
      AND    DT.ENTERPRISEID = #{SESSION_ENTERPRISEID}
      AND    NOT EXISTS (SELECT 1
              FROM   BAS_OPERATIONRESOURCE OPS
              WHERE  OPS.RESOURCEID = DT.DURABLEDEFID
              AND    OPS.ENTERPRISEID = DT.ENTERPRISEID
              AND    OPS.OPERATIONID = #{OPERATIONID}
              AND    OPS.RESOURCETYPE IN ('Durable', 'Film'))
    
    </select>    

  <update id="upsertRouting" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertRouting */
    	MERGE INTO BAS_ROUTING BR
    	USING DUAL
    	        	ON ( BR.ASSEMBLYITEMID = #{PRODUCTDEFID} 
    	        		AND BR.ASSEMBLYITEMVERSION = #{PRODUCTDEFVERSION}
    	        		AND BR.ENTERPRISEID = #{SESSION_ENTERPRISEID}			    
                    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         ASSEMBLYITEMCLASS = #{PRODUCTDEFCLASSID}
							,MAINPRODUCTID = #{PRODUCTDEFID}
					        ,MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( ASSEMBLYROUTINGID
							,ENTERPRISEID
							,PLANTID
							,ASSEMBLYITEMID
							,ASSEMBLYITEMVERSION
							,ASSEMBLYITEMCLASS
							,MAINPRODUCTID
							,MAINPRODUCTVERSION
							,VALIDSTATE
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES( 
						#{PRODUCTDEFID} || '_' || #{PRODUCTDEFVERSION}
						,#{SESSION_ENTERPRISEID}
						,#{SESSION_SITETYPE}
						,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{PRODUCTDEFCLASSID}
						,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,'Valid'
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </update>
    
  <update id="upsertRoutingERP" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertRoutingERP */
 	 DECLARE
 	 	V_CNT NUMBER DEFAULT 0; 	 	
 	 	V_CRUD VARCHAR2(1);
 	 BEGIN
 	 	BEGIN
 	 		SELECT COUNT(*)
 	 		   INTO V_CNT
 	 		   FROM BAS_ROUTING BR
 	 		   WHERE 1=1
 	 		      AND BR.ASSEMBLYITEMID = #{PRODUCTDEFID} 
 	        	  AND BR.ASSEMBLYITEMVERSION = #{PRODUCTDEFVERSION}
 	        	  AND BR.ENTERPRISEID = #{SESSION_ENTERPRISEID};
 	 	EXCEPTION WHEN OTHERS THEN
 	 		V_CNT := 0;
 	 	END;
 	 	
 	 	IF V_CNT = 0 THEN
 	 		V_CRUD := 'C';
 	 	ELSE
 	 		V_CRUD := 'U';
 	 	END IF;
 	 	
 	 	FOR REC IN (SELECT BI.ENTERPRISEID
		                          ,BI.PLANTID
		                          ,BI.ASSEMBLYITEMID
		                          ,BI.ASSEMBLYITEMVERSION
		                          ,BI.IMPLEMENTATIONDATE
		                          ,BW.WAREHOUSEID
		                          ,BI.VALIDSTATE
		                          ,BI.CREATEDTIME
		                          ,BI.MODIFIEDTIME
		                          ,BI.ASSEMBLYITEMCLASS
		                          ,BI.DESCRIPTION
		                          ,INF_BAS_ROUTING_S.NEXTVAL AS PKKEY
		                          ,V_CRUD AS IF_CRUD
		                    FROM   BAS_ROUTING       BI
		                          	  ,BAS_ITEMWAREHOUSE BW
		                    WHERE  BI.ASSEMBLYITEMID = BW.ITEMID(+)
		                    AND    BI.ASSEMBLYITEMVERSION = BW.ITEMVERSION(+)
		                    AND    BI.ASSEMBLYITEMID = #{PRODUCTDEFID} 
		                    AND    BI.ASSEMBLYITEMVERSION = #{PRODUCTDEFVERSION})
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_ROUTINGS@ERPPROD
                    (ENTERPRISEID --회사ID         
                    ,ORGANIZATION_CODE --조직코드       
                    ,ASSEMBLY_ITEM_NAME --모품목코드     
                    ,ASSEMBLY_ITEM_REV --모품목 Revision
                    ,IMPLEMENTATION_DATE --적용일자       
                    ,COMPLETION_SUBINVENTORY --완료창고       
                    ,ROUTING_DESCRIPTION --설명           
                    ,CREATOR --생성자         
                    ,CREATEDTIME --생성시간       
                    ,MODIFIER --수정자         
                    ,MODIFIEDTIME --수정시간       
                    ,VALIDSTATE --유효여부       
                    ,IF_CRUD --IF변경구분     
                    ,IF_DATE --IF일자         
                    ,IF_PROCESS_TYPE --IF처리여부     
                    ,IF_PROCESS_TIME --IF처리시간     
                    ,IF_PROCESS_COMMENT --IF처리설명     
                    ,IF_SEQUENCE --IF일련번호     
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.ASSEMBLYITEMID
                    ,REC.ASSEMBLYITEMVERSION
                    ,REC.IMPLEMENTATIONDATE
                    ,(CASE WHEN REC.WAREHOUSEID IS NULL THEN
                      DECODE(REC.ASSEMBLYITEMCLASS, 'Product', '0Main01', 'SubAssembly', 'SUB45') ELSE
                      REC.WAREHOUSEID END)
                    ,REC.DESCRIPTION
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,DECODE(REC.VALIDSTATE, 'Valid', 'Y', 'Invalid', 'N', NULL)
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);
            EXCEPTION
                WHEN OTHERS THEN
                	NULL;            
            END;
        END LOOP;        
 	 END;    
    </update>
    
  <update id="updateProductItemSpec" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateProductItemSpec */
    	          UPDATE BAS_PRODUCTITEMSPEC 
    	       		   SET RTRSHT 				= #{RTRSHT}     
					        ,PNLSIZEXAXIS 		= #{PNLSIZEXAXIS}       
					        ,PNLSIZEYAXIS 		= #{PNLSIZEYAXIS}
							,USELAYER 			= #{USELAYER}
					        ,PCSPNL 				= #{PCSPNL}
					        ,PCSMM 				= #{PCSMM}
					        ,MODIFIER 			= #{MODIFIER}     
					        ,MODIFIEDTIME 		= SYSDATE     
					        ,LASTTXNHISTKEY 	= #{LASTTXNHISTKEY}     
					        ,LASTTXNID 			= #{LASTTXNID}     
					        ,LASTTXNUSER 		= #{MODIFIER}     
					        ,LASTTXNTIME 		= SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
   				  WHERE 	ENTERPRISEID		= #{SESSION_ENTERPRISEID}
					 AND	ITEMID 				= #{PRODUCTDEFID}
					 AND ITEMVERSION 		= #{PRODUCTDEFVERSION}
    </update>
    
    
  <update id="updateProductdefinition" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateProductdefinition */
    	          UPDATE BAS_PRODUCTDEFINITION 
    	       		   SET RTRSHT 				= #{RTRSHT}     
					        ,PNLSIZEXAXIS 		= #{PNLSIZEXAXIS}       
					        ,PNLSIZEYAXIS 		= #{PNLSIZEYAXIS}							
					        ,PCSPNL 				= #{PCSPNL}
					        ,PCSMM 				= #{PCSMM}
					        ,PROCESSDEFID		= #{PRODUCTDEFID}
					        ,PROCESSDEFVERSION	= #{PRODUCTDEFVERSION}
					        ,MODIFIER 			= #{MODIFIER}     
					        ,MODIFIEDTIME 		= SYSDATE     
					        ,LASTTXNHISTKEY 	= #{LASTTXNHISTKEY}     
					        ,LASTTXNID 			= #{LASTTXNID}     
					        ,LASTTXNUSER 		= #{MODIFIER}     
					        ,LASTTXNTIME 		= SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
   				  WHERE PRODUCTDEFID 				= #{PRODUCTDEFID}
					 AND PRODUCTDEFVERSION 		= #{PRODUCTDEFVERSION}
    </update>
    
  <update id="upsertProcessdefinition" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertProcessdefinition */
    	MERGE INTO BAS_PROCESSDEFINITION BR
    	USING DUAL
    	        	ON ( BR.PROCESSDEFID = #{PRODUCTDEFID} 
    	        		AND BR.PROCESSDEFVERSION = #{PRODUCTDEFVERSION}    	        		
                    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         PROCESSCLASSID = #{PRODUCTDEFCLASSID}     
					        ,PROCESSDEFNAME = #{PRODUCTDEFNAME}       
					        ,ENTERPRISEID = #{SESSION_ENTERPRISEID}
							,PLANTID = #{SESSION_SITETYPE}
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( PROCESSDEFID
							,PROCESSDEFVERSION
							,PROCESSCLASSID
							,PROCESSDEFNAME
							,ENTERPRISEID
							,PLANTID
							,PROCESSDEFTYPE
							,VERSIONSTATE
							,VALIDSTATE
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES( 
						#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}		
						,#{PRODUCTDEFCLASSID}
						,#{PRODUCTDEFNAME}				
						,#{SESSION_ENTERPRISEID}
						,#{SESSION_SITETYPE}
						,#{PROCESSDEFTYPE}
						,#{VERSIONSTATE}
						,'Valid'
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </update>
    
  <update id="upsertProductItemSpecComment" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertProductItemSpecComment */
    	MERGE INTO BAS_PRODUCTITEMSPECCOMMENT BR
    	USING DUAL
    	        	ON ( BR.ITEMID = #{PRODUCTDEFID} 
    	        		AND BR.ITEMVERSION = #{PRODUCTDEFVERSION}    	        		
                    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         CHANGENOTE1 = #{REMARK}     
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( ITEMID
							,ITEMVERSION
							,CHANGENOTE1
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES( 
						#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}		
						,#{REMARK}
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </update>
 <select id="selectAssemblyBomId" parameterType="map" resultType="hashmap">
    /* smh.bas.dao.BAS02100Dao."GetAssemblyBomId" */
   	SELECT ASSEMBLYBOMID 
	FROM BAS_ASSEMBLYBILLOFMATERIAL AM
	WHERE AM.ENTERPRISEID   = #{SESSION_ENTERPRISEID}  
		AND AM.ASSEMBLYITEMID	= #{PRODUCTDEFID}
		AND AM.ASSEMBLYITEMVERSION	= #{PRODUCTDEFVERSION}
        AND ROWNUM = 1
    </select>    
  <insert id="upsertAssemblybillofmaterialData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertAssemblybillofmaterialData */
 	 	INSERT INTO BAS_ASSEMBLYBILLOFMATERIAL
				 	 		(ENTERPRISEID
				 	 		,PLANTID
				 	 		,ASSEMBLYBOMID
				 	 		,ASSEMBLYITEMID
				 	 		,ASSEMBLYITEMVERSION
				 	 		,ASSEMBLYTYPE
				 	 		,ASSEMBLYITEMUOM
				 	 		,VALIDSTATE
				 	 		,MAINPRODUCTID
				 	 		,MAINPRODUCTVERSION
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES( 
				    	#{SESSION_ENTERPRISEID}
				    	,#{SESSION_SITETYPE}
				    	,#{ASSEMBLYBOMID}
						,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{PRODUCTIONTYPE}
						,#{UOMDEFID}
						,'Valid'		
						,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}		
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </insert>
    
    <!-- 공정순서 중복체크 -->
	<select id="checkUserSequence"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.checkUserSequence */	
		 		SELECT USERSEQUENCE
                FROM   BAS_PROCESSPATH
                WHERE  1=1
                AND    ENTERPRISEID = #{SESSION_ENTERPRISEID}
                AND    PROCESSDEFID = #{PRODUCTDEFID}
                AND    PROCESSDEFVERSION = #{PRODUCTDEFVERSION}                
                AND    USERSEQUENCE      = #{USERSEQUENCE}       
                AND	  VALIDSTATE	= 'Valid'  
    </select>
    
    <!-- 공정ID 중복체크 -->
	<select id="checkSegmentId"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.checkSegmentId */	
		 		SELECT USERSEQUENCE
                FROM   BAS_PROCESSPATH
                WHERE  1=1
                AND    ENTERPRISEID = #{SESSION_ENTERPRISEID}
                AND    PROCESSDEFID = #{PRODUCTDEFID}
                AND    PROCESSDEFVERSION = #{PRODUCTDEFVERSION}                
                AND    USERSEQUENCE      = #{USERSEQUENCE}
                AND	  VALIDSTATE	= 'Valid'         
    </select>

    <!-- Operation ID 중복체크 -->
	<select id="checkOperationId"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.checkOperationId */	
		 		SELECT USERSEQUENCE
                FROM   BAS_PROCESSPATH
                WHERE PROCESSPATHID = #{OPERATIONID} 	 	         
                AND	  VALIDSTATE	= 'Valid'
    </select>

    <!-- Operation ID 중복체크 -->
	<select id="checkOperationId2"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.checkOperationId */	
		 		SELECT USERSEQUENCE
                FROM   BAS_PROCESSPATH
                WHERE PROCESSPATHID = #{OPERATIONID} 	 	         
                <!-- AND	  VALIDSTATE	= 'Valid' -->
    </select>    
   <!-- Operation ID 중복체크 -->
	<select id="GetExistByBillofMaterial"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.GetExistByBillofMaterial */	
					SELECT BC.OPERATIONID
				FROM   BAS_BOMCOMPONENT BC
				LEFT   OUTER JOIN BAS_OPERATION BO
				ON     BO.OPERATIONID = BC.OPERATIONID
				AND    BO.ENTERPRISEID = BC.ENTERPRISEID
				LEFT   OUTER JOIN BAS_ITEMMASTER IM
				ON     IM.ENTERPRISEID = BC.ENTERPRISEID
				AND    IM.ITEMID = BC.COMPONENTITEMID
				AND    IM.ITEMVERSION = BC.COMPONENTITEMVERSION
				LEFT   OUTER JOIN BAS_BILLOFMATERIAL SBM
				ON     SBM.ENTERPRISEID = BC.ENTERPRISEID
				AND    SBM.PROCESSSEGMENTID = BO.PROCESSSEGMENTID
				AND    SBM.MATERIALDEFID = BC.COMPONENTITEMID
				AND    SBM.MATERIALDEFVERSION = BC.COMPONENTITEMVERSION
				AND    SBM.PRODUCTDEFID = #{PRODUCTDEFID}
				AND    SBM.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
				AND 	  SBM."sequence" = BC.COMPONENTSEQUENCE
				WHERE  1 = 1
				AND    BC.ENTERPRISEID = #{SESSION_ENTERPRISEID}
				AND    BC.OPERATIONID = #{OPERATIONID}
				AND    SBM.MATERIALDEFID = #{COMPONENTITEMID}
				AND    SBM.MATERIALDEFVERSION = #{COMPONENTITEMVERSION}       
				AND	  BC.VALIDSTATE	= 'Valid'
    </select>
    
    	<select id="GetMaxDegreeByBillofMaterial"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.GetMaxDegreeByBillofMaterial */	
			SELECT TO_CHAR(NVL(MAX(TO_NUMBER(SBM."sequence")), 0)) AS DEGREE
			FROM   BAS_BOMCOMPONENT BC
			LEFT   OUTER JOIN BAS_OPERATION BO                ON     BO.OPERATIONID = BC.OPERATIONID
			                                                  AND    BO.ENTERPRISEID = BC.ENTERPRISEID
			LEFT   OUTER JOIN BAS_ITEMMASTER IM               ON     IM.ENTERPRISEID = BC.ENTERPRISEID
			                                                  AND    IM.ITEMID = BC.COMPONENTITEMID
			                                                  AND    IM.ITEMVERSION = BC.COMPONENTITEMVERSION
			LEFT   OUTER JOIN BAS_BILLOFMATERIAL SBM          ON     SBM.ENTERPRISEID = BC.ENTERPRISEID
			                                                  AND    SBM.PROCESSSEGMENTID = BO.PROCESSSEGMENTID
			                                                  AND    SBM.MATERIALDEFID = BC.COMPONENTITEMID
			                                                  AND    SBM.MATERIALDEFVERSION = BC.COMPONENTITEMVERSION
			                                                  AND    SBM.PRODUCTDEFID = #{PRODUCTDEFID}
			                                                  AND    SBM.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
			                                                  AND 	SBM."sequence" = BC.COMPONENTSEQUENCE
			WHERE  1 = 1
			AND    BC.ENTERPRISEID =  #{SESSION_ENTERPRISEID}
			AND    BC.OPERATIONID =#{OPERATIONID}
			AND	  BC.VALIDSTATE	= 'Valid'
    </select>
        
  <insert id="insertProcesspath" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertProcesspath */
 	 	INSERT INTO BAS_PROCESSPATH
				 	 	(PROCESSPATHID
	                    ,ENTERPRISEID
	                    ,PLANTID
	                    ,PROCESSDEFID
	                    ,PROCESSDEFVERSION
	                    ,PROCESSSEGMENTID
	                    ,PROCESSSEGMENTVERSION
	                    ,PATHSEQUENCE
	                    ,USERSEQUENCE
	                    ,PATHTYPE
	                    ,PROCESSUOM
	                    ,DESCRIPTION
	                    ,ISWEEKMNG
	                    ,VALIDSTATE
	                    ,CREATOR
	                    ,CREATEDTIME
	                    ,MODIFIER
	                    ,MODIFIEDTIME
	                    ,LASTTXNHISTKEY
	                    ,LASTTXNID
	                    ,LASTTXNUSER
	                    ,LASTTXNTIME
	                    ,LASTTXNCOMMENT)
				    VALUES( 
				    	#{OPERATIONID}
				    	,#{SESSION_ENTERPRISEID}
				    	,#{SESSION_SITETYPE}
				    	,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{PROCESSSEGMENTID}
						,'*'
						,#{OPERATIONSEQUENCE}
						,#{USERSEQUENCE}
						,#{PATHTYPE}
						,#{UOMDEFID}
						,#{DESCRIPTION}
						,#{ISWEEKMNG}
						,#{VALIDSTATE}		
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </insert>
    
      <insert id="insertProcesspathERP" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertProcesspathERP */
 	 DECLARE
 	 BEGIN
 	 	FOR REC IN (SELECT BR.ASSEMBLYITEMID
                          ,BR.ASSEMBLYITEMVERSION
                          ,BO.ENTERPRISEID
                          ,BO.PLANTID
                          ,BO.USERSEQUENCE
                          ,BO.PROCESSSEGMENTID
                          ,PN.DICTIONARYNAME AS PROCESSSEGMENTNAME
                          ,BPC.PARENTPROCESSSEGMENTCLASSID
                          ,BO.LEADTIME
                          ,BO.VALIDSTATE
                          ,BO.CREATEDTIME
                          ,BO.MODIFIEDTIME
                          ,INF_BAS_ROUTINGOPERATION_S.NEXTVAL AS PKKEY
                          ,'C' AS IF_CRUD
                    FROM   BAS_OPERATION           BO
                          ,BAS_ROUTING             BR
                          ,BAS_PROCESSSEGMENTEXT   BP
                          ,BAS_PROCESSSEGMENTCLASS BPC
                          ,CMD_DICTIONARY          PN
                    --,IFC_MES_R_BOM_RTG_OPER@ERPPROD BI2
                    WHERE  1 = 1
                    AND    BO.ASSEMBLYROUTINGID = BR.ASSEMBLYROUTINGID
                    AND    BO.PROCESSSEGMENTID = BP.PROCESSSEGMENTID
                    AND    BP.PROCESSSEGMENTCLASSID = BPC.PROCESSSEGMENTCLASSID
                    AND    BP.PROCESSSEGMENTNAME = PN.DICTIONARYID(+)
                    AND    PN.LANGUAGETYPE(+) = 'ko-KR'
					AND	  BO.OPERATIONID = #{OPERATIONID})
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_RTG_OPER@ERPPROD
                    (ENTERPRISEID --회사ID         
                    ,ORGANIZATION_CODE --조직코드       
                    ,ASSEMBLY_ITEM_NAME --모품목코드     
                    ,ASSEMBLY_ITEM_REV --모품목 Revision
                    ,OPERATION_SEQ_NUMBER --작업일련번호   
                    ,STANDARD_OPERATION_CODE --표준작업코드   
                    ,STANDARD_OPERATION_NAME --표준작업명     
                    ,DEPARTMENT_CODE --부서           
                    ,LEAD_TIME --리드타임       
                    ,CREATOR --생성자         
                    ,CREATEDTIME --생성시간       
                    ,MODIFIER --수정자         
                    ,MODIFIEDTIME --수정시간       
                    ,VALIDSTATE --유효여부       
                    ,IF_CRUD --IF변경구분     
                    ,IF_DATE --IF일자         
                    ,IF_PROCESS_TYPE --IF처리여부     
                    ,IF_PROCESS_TIME --IF처리시간     
                    ,IF_PROCESS_COMMENT --IF처리설명     
                    ,IF_SEQUENCE --IF일련번호       
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.ASSEMBLYITEMID
                    ,REC.ASSEMBLYITEMVERSION
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.PROCESSSEGMENTID
                    ,REC.PROCESSSEGMENTNAME
                    ,REC.PARENTPROCESSSEGMENTCLASSID
                    ,REC.LEADTIME
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,DECODE(REC.VALIDSTATE, 'Valid', 'Y', 'Invalid', 'N', NULL)
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);

            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
     END;
    </insert>
    
 <update id="updateProcesspath" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateProcesspath */
 	 	UPDATE BAS_PROCESSPATH SET
 	 						DESCRIPTION = #{DESCRIPTION}	
 	 						,USERSEQUENCE = #{USERSEQUENCE} 	 		
 	 						,PATHSEQUENCE	= #{OPERATIONSEQUENCE}
 	 						,PROCESSUOM	= #{PROCESSUOM}				
 	 						,PATHTYPE = #{PATHTYPE}
 	 						,ISWEEKMNG = #{ISWEEKMNG}
     						,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE
					        ,VALIDSTATE = #{VALIDSTATE}          
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
	WHERE PROCESSPATHID = #{OPERATIONID}				    
    </update>
    
    <insert id="updateProcesspathERP" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateProcesspathERP */
 	 DECLARE
 	 BEGIN
/* Resource 먼저 삭제 */
		FOR REC IN (SELECT BOR.ENTERPRISEID
                          ,BOR.PLANTID
                          ,BR.ASSEMBLYITEMID
                          ,BR.ASSEMBLYITEMVERSION
                          ,BO.USERSEQUENCE
                          ,BO.PROCESSSEGMENTID
                          ,PN.DICTIONARYNAME AS PROCESSSEGMENTNAME
                          ,BPC.PARENTPROCESSSEGMENTCLASSID
                          ,(NVL(BOR.RESOURCESEQUENCE, 0) + 1) * 10 AS RESOURCESEQUENCE
                          ,BOR.RESOURCEID
                          ,BOR.RESOURCETYPE
                          ,BOR.ASSIGNEDUNITS
                          ,BOR.MANHOUR
                          ,BOR.ISSTANDARDRATE
                          ,BOR.ISAUTOCHARGE
                          ,BOR.BASISTYPE
                          ,BOR.SCHEDULESEQUENCE                          
                          ,BOR.CREATEDTIME
                          ,BOR.MODIFIEDTIME
                          ,INF_BAS_ROUTINGRESOURCE_S.NEXTVAL AS PKKEY
                          ,'U' AS IF_CRUD
                          ,NVL(BOR.ISPRIMARY, 'N') AS ISPRIMARY
                          ,BO.VALIDSTATE AS VALIDSTATE
                    FROM   BAS_OPERATIONRESOURCE   BOR
                          ,BAS_OPERATION           BO
                          ,BAS_ROUTING             BR
                          ,BAS_PROCESSSEGMENTEXT   BP
                          ,BAS_PROCESSSEGMENTCLASS BPC
                          ,CMD_DICTIONARY          PN
                    WHERE  BOR.OPERATIONID = BO.OPERATIONID
                    AND    BO.ASSEMBLYROUTINGID = BR.ASSEMBLYROUTINGID
                    AND    BOR.RESOURCETYPE = 'Resource'
                    AND    BO.PROCESSSEGMENTID = BP.PROCESSSEGMENTID
                    AND    BP.PROCESSSEGMENTCLASSID = BPC.PROCESSSEGMENTCLASSID
                    AND    BP.PROCESSSEGMENTNAME = PN.DICTIONARYID(+)
                    AND    PN.LANGUAGETYPE(+) = 'ko-KR'
                    AND	  BO.OPERATIONID = #{OPERATIONID}
                    AND	  BO.USERSEQUENCE = #{USERSEQUENCE})
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_RTG_RES@ERPPROD
                    (ENTERPRISEID --회사ID         
                    ,ORGANIZATION_CODE --조직코드       
                    ,ASSEMBLY_ITEM_NAME --모품목코드     
                    ,ASSEMBLY_ITEM_REV --모품목 Revision
                    ,OPERATION_SEQ_NUMBER --작업일련번호   
                    ,STANDARD_OPERATION_CODE --표준작업코드   
                    ,RESOURCE_SEQ_NUM --자원일련번호   
                    ,RESOURCE_CODE --자원코드       
                    ,RESOURCE_TYPE --자원유형       
                    ,ASSIGNED_UNIT --설비대수       
                    ,USAGE_RATE --설비공수       
                    ,ALTERNAME_RESOURCE_YN --대체자원여부   
                    ,SCHEDULE_FLAG --스케줄링여부   
                    ,CREATOR --생성자         
                    ,CREATEDTIME --생성시간       
                    ,MODIFIER --수정자         
                    ,MODIFIEDTIME --수정시간       
                    ,VALIDSTATE --유효여부       
                    ,IF_CRUD --IF변경구분     
                    ,IF_DATE --IF일자         
                    ,IF_PROCESS_TYPE --IF처리여부     
                    ,IF_PROCESS_TIME --IF처리시간     
                    ,IF_PROCESS_COMMENT --IF처리설명     
                    ,IF_SEQUENCE --IF일련번호    
                    ,PRIMARY_YN --주자원여부
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.ASSEMBLYITEMID
                    ,REC.ASSEMBLYITEMVERSION
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.PROCESSSEGMENTID
                    ,TO_NUMBER(REC.RESOURCESEQUENCE)
                    ,REC.RESOURCEID
                    ,'1' -- 1: Machine
                    ,REC.ASSIGNEDUNITS --설비대수
                    ,NULL --설비공수      TODO :  컬럼 확인
                    ,NULL --대체자원여부   TODO :  컬럼 확인
                    ,NULL --스케줄링여부   TODO :  컬럼 확인
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    --공정이 Invalid면 무조건 N 
                    ,DECODE(REC.VALIDSTATE, 'Valid', 'Y', 'Invalid', 'N')
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY
                    ,REC.ISPRIMARY);
         
            END;

        END LOOP;
        
FOR REC IN (SELECT Q.*
                          ,TRUNC(Q.USERSEQUENCE) || Q.COMPONENTSEQUENCE AS RN
                          ,INF_BAS_BOMCOMPONENT_S.NEXTVAL AS PKKEY
                    FROM   (SELECT BC.ENTERPRISEID --회사 ID
                                  ,BC.PLANTID --SITE ID
                                  ,BC.MAINPRODUCTID --모 품목
                                  ,BC.MAINPRODUCTVERSION --모 품목 REVISION
                                  ,BPP.USERSEQUENCE --공정 순번
                                  ,BC.COMPONENTSEQUENCE --COMPONENT 등록 순번
                                  ,BC.COMPONENTITEMID --자 품목                          
                                  ,BC.COMPONENTITEMVERSION --자 품목 REVISION
                                  ,BC.COMPONENTUOM --자 품목 UOM
                                  ,SBM.QTY AS COMPONENTQTY --소요량
                                  ,BC.WIPSUPPLYTYPE --공급유형
                                  ,BC.SUPPLYWAREHOUSEID --공급창고
                                  ,BC.CREATEDTIME --IMPLEMENTATION_DATE(적용일), EFFECTIVITY_DATE(시작일자), CREATEDTIME(생성일)
                                  ,BPP.PROCESSSEGMENTID --공정코드
                                  ,BO.VALIDSTATE AS VALIDSTATE --VALID="Y", INVALID="N"(유효여부)
                                  ,BC.CREATOR --CREATOR(생성자)
                                  ,BC.MODIFIEDTIME --MODIFIEDTIME
                                  ,BC.MODIFIER --MODIFIER(수정자)
                                  ,'U' AS IF_CRUD
                            FROM   BAS_BOMCOMPONENT BC
                            LEFT   OUTER JOIN BAS_OPERATION BO
                            ON     BO.OPERATIONID = BC.OPERATIONID
                            AND    BO.ENTERPRISEID = BC.ENTERPRISEID
                            LEFT   OUTER JOIN BAS_BILLOFMATERIAL SBM
                            ON     SBM.ENTERPRISEID = BC.ENTERPRISEID
                            AND    SBM.PROCESSSEGMENTID = BO.PROCESSSEGMENTID
                            AND    SBM.MATERIALDEFID = BC.COMPONENTITEMID
                            AND    SBM.MATERIALDEFVERSION = BC.COMPONENTITEMVERSION
                            AND    SBM.PRODUCTDEFID = BO.MAINPRODUCTID
                            AND    SBM.PRODUCTDEFVERSION = BO.MAINPRODUCTVERSION
                            AND    SBM.PROCESSDEFID = BO.MAINPRODUCTID
                            AND    SBM.PROCESSDEFVERSION = BO.MAINPRODUCTVERSION
                            AND    sbm."sequence" = BC.COMPONENTSEQUENCE
                            LEFT   JOIN BAS_PROCESSPATH BPP
                            ON     BPP.PROCESSSEGMENTID = SBM.PROCESSSEGMENTID
                            AND    BPP.PROCESSDEFID = SBM.PRODUCTDEFID
                            AND    BPP.PROCESSDEFVERSION = SBM.PRODUCTDEFVERSION
                            AND    BPP.USERSEQUENCE = BO.USERSEQUENCE
                            WHERE  1 = 1
                            AND    BC.MAINPRODUCTID = #{PRODUCTDEFID}
                            AND    BC.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}
                            AND	  BO.OPERATIONID = #{OPERATIONID}
                            AND	  BO.USERSEQUENCE = #{USERSEQUENCE}
                            ) Q)
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_COMPONENT@ERPPROD
                    (ENTERPRISEID --MES 회사 ID "INTERFLEX"                                                       
                    ,PLANTID --MES SITE "IFC"                                                                
                    ,ASSEMBLY_ITEM_NAME --모 품목(Update 불가)                                                          
                    ,ASSEMBLY_ITEM_REV --모 품목 Revision(Update 불가)                                                 
                    ,ITEM_NUM --Component 등록 순번(Update 가능)                                              
                    ,OPERATION_SEQ_NUM --공정순번 (ROUTING의 공정순번과 일치)(Update 불가)                             
                    ,COMPONENT_ITEM_NAME --자 품목(Update 불가)                                                          
                    ,COMPONENT_ITEM_REV --자 품목 Revision(Update 불가)                                                 
                    ,COMPONENT_UOM --자 품목 UOM(Update 가능)                                                      
                    ,COMPONENT_QUANTITY --소요량 (Update 가능)                                                          
                    ,WIP_SUPPLY_TYPE --공급유형 (Update 가능)1=Push  2=AssemblyPull  3=OperationPull 4=Bulk 6=Phantom
                    ,SUPPLY_SUBINVENTORY --공급창고(Update 가능)                                                         
                    ,IMPLEMENTATION_DATE --모품목 적용일 (Update 불가)                                                   
                    ,EFFECTIVITY_DATE --시작일자(Update 불가)                                                         
                    ,DISABLE_DATE --종료일자(Update 가능,null로수정불가,시작일자 초과)                            
                    ,OPERATION_CODE --공정코드                                                                      
                    ,CREATOR --MES 생성자                                                                    
                    ,CREATEDTIME --MES 생성일                                                                    
                    ,MODIFIER --MES 수정자                                                                    
                    ,MODIFIEDTIME --MES 수정일                                                                    
                    ,VALIDSTATE --유효여부 Active  = "Y", Inactive = 'N'                                        
                    ,IF_CRUD --IF 변경구분 C/U/D                                                             
                    ,IF_DATE --IF 일시                                                                       
                    ,IF_PROCESS_TYPE --IF 처리여부 ERP에서 (성공=Y, 에러=E)                                          
                    ,IF_PROCESS_TIME --IF 처리일시 ERP에서 사용                                                      
                    ,IF_PROCESS_COMMENT --IF 처리설명 ERP에서 사용(에러 내용)                                           
                    ,IF_SEQUENCE --IF 일련번호                                                                   
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.MAINPRODUCTID
                    ,REC.MAINPRODUCTVERSION
                    ,REC.RN
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.COMPONENTITEMID
                    ,REC.COMPONENTITEMVERSION
                    ,REC.COMPONENTUOM
                    ,REC.COMPONENTQTY
                    ,TO_NUMBER(DECODE(REC.WIPSUPPLYTYPE, 'Push', '1', 'AssemblyPull', '2', 'OperationPull', '3', 'Bulk', '4', 'Phantom', '6', NULL))
                    ,REC.SUPPLYWAREHOUSEID
                    ,REC.CREATEDTIME
                    ,REC.CREATEDTIME
                    ,DECODE(REC.VALIDSTATE, 'Invalid', REC.MODIFIEDTIME, NULL)
                    ,REC.PROCESSSEGMENTID
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,DECODE(REC.VALIDSTATE, 'Valid', 'Y', 'Invalid', 'N', NULL)                     
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
        
        
 	 	FOR REC IN (SELECT BR.ASSEMBLYITEMID
                          ,BR.ASSEMBLYITEMVERSION
                          ,BO.ENTERPRISEID
                          ,BO.PLANTID
                          ,BO.USERSEQUENCE
                          ,BO.PROCESSSEGMENTID
                          ,PN.DICTIONARYNAME AS PROCESSSEGMENTNAME
                          ,BPC.PARENTPROCESSSEGMENTCLASSID
                          ,BO.LEADTIME
                          ,BO.VALIDSTATE
                          ,BO.CREATEDTIME
                          ,BO.MODIFIEDTIME
                          ,INF_BAS_ROUTINGOPERATION_S.NEXTVAL AS PKKEY
                          ,'U' AS IF_CRUD
                    FROM   BAS_OPERATION           BO
                          ,BAS_ROUTING             BR
                          ,BAS_PROCESSSEGMENTEXT   BP
                          ,BAS_PROCESSSEGMENTCLASS BPC
                          ,CMD_DICTIONARY          PN
                    --,IFC_MES_R_BOM_RTG_OPER@ERPPROD BI2
                    WHERE  1 = 1
                    AND    BO.ASSEMBLYROUTINGID = BR.ASSEMBLYROUTINGID
                    AND    BO.PROCESSSEGMENTID = BP.PROCESSSEGMENTID
                    AND    BP.PROCESSSEGMENTCLASSID = BPC.PROCESSSEGMENTCLASSID
                    AND    BP.PROCESSSEGMENTNAME = PN.DICTIONARYID(+)
                    AND    PN.LANGUAGETYPE(+) = 'ko-KR'
                    AND	  BO.OPERATIONID = #{OPERATIONID}
                    AND	  BO.USERSEQUENCE = #{USERSEQUENCE}
                    )
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_RTG_OPER@ERPPROD
                    (ENTERPRISEID --회사ID         
                    ,ORGANIZATION_CODE --조직코드       
                    ,ASSEMBLY_ITEM_NAME --모품목코드     
                    ,ASSEMBLY_ITEM_REV --모품목 Revision
                    ,OPERATION_SEQ_NUMBER --작업일련번호   
                    ,STANDARD_OPERATION_CODE --표준작업코드   
                    ,STANDARD_OPERATION_NAME --표준작업명     
                    ,DEPARTMENT_CODE --부서           
                    ,LEAD_TIME --리드타임       
                    ,CREATOR --생성자         
                    ,CREATEDTIME --생성시간       
                    ,MODIFIER --수정자         
                    ,MODIFIEDTIME --수정시간       
                    ,VALIDSTATE --유효여부       
                    ,IF_CRUD --IF변경구분     
                    ,IF_DATE --IF일자         
                    ,IF_PROCESS_TYPE --IF처리여부     
                    ,IF_PROCESS_TIME --IF처리시간     
                    ,IF_PROCESS_COMMENT --IF처리설명     
                    ,IF_SEQUENCE --IF일련번호       
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.ASSEMBLYITEMID
                    ,REC.ASSEMBLYITEMVERSION
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.PROCESSSEGMENTID
                    ,REC.PROCESSSEGMENTNAME
                    ,REC.PARENTPROCESSSEGMENTCLASSID
                    ,REC.LEADTIME
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,DECODE(REC.VALIDSTATE, 'Valid', 'Y', 'Invalid', 'N', NULL)
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
     END;
    </insert>
    
 <insert id="insertConsumableERP" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertConsumableERP */
 	 DECLARE
 	 BEGIN
 	 	FOR REC IN (SELECT Q.*
                          ,TRUNC(Q.USERSEQUENCE) || Q.COMPONENTSEQUENCE AS RN
                          ,INF_BAS_BOMCOMPONENT_S.NEXTVAL AS PKKEY
                    FROM   (SELECT BC.ENTERPRISEID --회사 ID
                                  ,BC.PLANTID --SITE ID
                                  ,BC.MAINPRODUCTID --모 품목
                                  ,BC.MAINPRODUCTVERSION --모 품목 REVISION
                                  ,BPP.USERSEQUENCE --공정 순번
                                  ,BC.COMPONENTSEQUENCE --COMPONENT 등록 순번
                                  ,BC.COMPONENTITEMID --자 품목                          
                                  ,BC.COMPONENTITEMVERSION --자 품목 REVISION
                                  ,BC.COMPONENTUOM --자 품목 UOM
                                  ,SBM.QTY AS COMPONENTQTY --소요량
                                  ,BC.WIPSUPPLYTYPE --공급유형
                                  ,BC.SUPPLYWAREHOUSEID --공급창고
                                  ,BC.CREATEDTIME --IMPLEMENTATION_DATE(적용일), EFFECTIVITY_DATE(시작일자), CREATEDTIME(생성일)
                                  ,BPP.PROCESSSEGMENTID --공정코드
                                  ,BC.VALIDSTATE --VALID="Y", INVALID="N"(유효여부)
                                  ,BC.CREATOR --CREATOR(생성자)
                                  ,BC.MODIFIEDTIME --MODIFIEDTIME
                                  ,BC.MODIFIER --MODIFIER(수정자)
                                  ,#{CRUD} AS IF_CRUD
                            FROM   BAS_BOMCOMPONENT BC
                            LEFT   OUTER JOIN BAS_OPERATION BO
                            ON     BO.OPERATIONID = BC.OPERATIONID
                            AND    BO.ENTERPRISEID = BC.ENTERPRISEID
                            AND	  BO.VALIDSTATE = 'Valid'
                            AND	  BO.USERSEQUENCE = #{USERSEQUENCE}
                            LEFT   OUTER JOIN BAS_BILLOFMATERIAL SBM
                            ON     SBM.ENTERPRISEID = BC.ENTERPRISEID
                            AND    SBM.PROCESSSEGMENTID = BO.PROCESSSEGMENTID
                            AND    SBM.MATERIALDEFID = BC.COMPONENTITEMID
                            AND    SBM.MATERIALDEFVERSION = BC.COMPONENTITEMVERSION
                            AND    SBM.PRODUCTDEFID = BO.MAINPRODUCTID
                            AND    SBM.PRODUCTDEFVERSION = BO.MAINPRODUCTVERSION
                            AND    SBM.PROCESSDEFID = BO.MAINPRODUCTID
                            AND    SBM.PROCESSDEFVERSION = BO.MAINPRODUCTVERSION
                            AND    sbm."sequence" = BC.COMPONENTSEQUENCE
                            LEFT   JOIN BAS_PROCESSPATH BPP
                            ON     BPP.PROCESSSEGMENTID = SBM.PROCESSSEGMENTID
                            AND    BPP.PROCESSDEFID = SBM.PRODUCTDEFID
                            AND    BPP.PROCESSDEFVERSION = SBM.PRODUCTDEFVERSION
                            AND	  BPP.VALIDSTATE = 'Valid'
                            AND    BPP.USERSEQUENCE = BO.USERSEQUENCE
                            WHERE  1 = 1
                            AND    BC.MAINPRODUCTID = #{PRODUCTDEFID}
                            AND    BC.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}
                            AND    BC.COMPONENTITEMID = #{COMPONENTITEMID}
                            AND    BC.COMPONENTITEMVERSION = #{COMPONENTITEMVERSION}
                            AND	  BC.COMPONENTSEQUENCE = #{SEQUENCE}
                            AND    NVL(BC.COMPONENTQTY, 0) != 0 --20210610 ERP에서는 0인건은 오류이므로 안나오게
                            ) Q)
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_COMPONENT@ERPPROD
                    (ENTERPRISEID --MES 회사 ID "INTERFLEX"                                                       
                    ,PLANTID --MES SITE "IFC"                                                                
                    ,ASSEMBLY_ITEM_NAME --모 품목(Update 불가)                                                          
                    ,ASSEMBLY_ITEM_REV --모 품목 Revision(Update 불가)                                                 
                    ,ITEM_NUM --Component 등록 순번(Update 가능)                                              
                    ,OPERATION_SEQ_NUM --공정순번 (ROUTING의 공정순번과 일치)(Update 불가)                             
                    ,COMPONENT_ITEM_NAME --자 품목(Update 불가)                                                          
                    ,COMPONENT_ITEM_REV --자 품목 Revision(Update 불가)                                                 
                    ,COMPONENT_UOM --자 품목 UOM(Update 가능)                                                      
                    ,COMPONENT_QUANTITY --소요량 (Update 가능)                                                          
                    ,WIP_SUPPLY_TYPE --공급유형 (Update 가능)1=Push  2=AssemblyPull  3=OperationPull 4=Bulk 6=Phantom
                    ,SUPPLY_SUBINVENTORY --공급창고(Update 가능)                                                         
                    ,IMPLEMENTATION_DATE --모품목 적용일 (Update 불가)                                                   
                    ,EFFECTIVITY_DATE --시작일자(Update 불가)                                                         
                    ,DISABLE_DATE --종료일자(Update 가능,null로수정불가,시작일자 초과)                            
                    ,OPERATION_CODE --공정코드                                                                      
                    ,CREATOR --MES 생성자                                                                    
                    ,CREATEDTIME --MES 생성일                                                                    
                    ,MODIFIER --MES 수정자                                                                    
                    ,MODIFIEDTIME --MES 수정일                                                                    
                    ,VALIDSTATE --유효여부 Active  = "Y", Inactive = 'N'                                        
                    ,IF_CRUD --IF 변경구분 C/U/D                                                             
                    ,IF_DATE --IF 일시                                                                       
                    ,IF_PROCESS_TYPE --IF 처리여부 ERP에서 (성공=Y, 에러=E)                                          
                    ,IF_PROCESS_TIME --IF 처리일시 ERP에서 사용                                                      
                    ,IF_PROCESS_COMMENT --IF 처리설명 ERP에서 사용(에러 내용)                                           
                    ,IF_SEQUENCE --IF 일련번호                                                                   
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.MAINPRODUCTID
                    ,REC.MAINPRODUCTVERSION
                    ,REC.RN
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.COMPONENTITEMID
                    ,REC.COMPONENTITEMVERSION
                    ,REC.COMPONENTUOM
                    ,REC.COMPONENTQTY
                    ,TO_NUMBER(DECODE(REC.WIPSUPPLYTYPE, 'Push', '1', 'AssemblyPull', '2', 'OperationPull', '3', 'Bulk', '4', 'Phantom', '6', NULL))
                    ,REC.SUPPLYWAREHOUSEID
                    ,REC.CREATEDTIME
                    ,REC.CREATEDTIME
                    ,DECODE(REC.VALIDSTATE, 'Invalid', REC.MODIFIEDTIME, NULL)
                    ,REC.PROCESSSEGMENTID
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,DECODE(#{CRUD}, 'D', 'N', DECODE(REC.VALIDSTATE, 'Valid', 'Y', 'Invalid', 'N', NULL))                     
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
     END;
    </insert>
 <delete id="deleteProcesspath" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteProcesspath */
 	 	DELETE FROM BAS_PROCESSPATH WHERE PROCESSPATHID = #{OPERATIONID} 	 					    
    </delete>
    
<delete id="deleteProcesspathERP" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteProcesspath */
 	 	 DECLARE
 	 BEGIN
 	 	/* Resource 먼저 삭제 */
		FOR REC IN (SELECT BOR.ENTERPRISEID
                          ,BOR.PLANTID
                          ,BR.ASSEMBLYITEMID
                          ,BR.ASSEMBLYITEMVERSION
                          ,BO.USERSEQUENCE
                          ,BO.PROCESSSEGMENTID
                          ,PN.DICTIONARYNAME AS PROCESSSEGMENTNAME
                          ,BPC.PARENTPROCESSSEGMENTCLASSID
                          ,(NVL(BOR.RESOURCESEQUENCE, 0) + 1) * 10 AS RESOURCESEQUENCE
                          ,BOR.RESOURCEID
                          ,BOR.RESOURCETYPE
                          ,BOR.ASSIGNEDUNITS
                          ,BOR.MANHOUR
                          ,BOR.ISSTANDARDRATE
                          ,BOR.ISAUTOCHARGE
                          ,BOR.BASISTYPE
                          ,BOR.SCHEDULESEQUENCE
                          ,'Invalid' AS VALIDSTATE
                          ,BOR.CREATEDTIME
                          ,BOR.MODIFIEDTIME
                          ,INF_BAS_ROUTINGRESOURCE_S.NEXTVAL AS PKKEY
                          ,'U' AS IF_CRUD
                          ,NVL(BOR.ISPRIMARY, 'N') AS ISPRIMARY
                          ,BO.VALIDSTATE AS VALIDSTATE_PARENT
                    FROM   BAS_OPERATIONRESOURCE   BOR
                          ,BAS_OPERATION           BO
                          ,BAS_ROUTING             BR
                          ,BAS_PROCESSSEGMENTEXT   BP
                          ,BAS_PROCESSSEGMENTCLASS BPC
                          ,CMD_DICTIONARY          PN
                    WHERE  BOR.OPERATIONID = BO.OPERATIONID
                    AND    BO.ASSEMBLYROUTINGID = BR.ASSEMBLYROUTINGID
                    AND    BOR.RESOURCETYPE = 'Resource'
                    AND    BO.PROCESSSEGMENTID = BP.PROCESSSEGMENTID
                    AND    BP.PROCESSSEGMENTCLASSID = BPC.PROCESSSEGMENTCLASSID
                    AND    BP.PROCESSSEGMENTNAME = PN.DICTIONARYID(+)
                    AND    PN.LANGUAGETYPE(+) = 'ko-KR'
                    AND	  BO.OPERATIONID = #{OPERATIONID}
                    AND	  BO.USERSEQUENCE = #{USERSEQUENCE})
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_RTG_RES@ERPPROD
                    (ENTERPRISEID --회사ID         
                    ,ORGANIZATION_CODE --조직코드       
                    ,ASSEMBLY_ITEM_NAME --모품목코드     
                    ,ASSEMBLY_ITEM_REV --모품목 Revision
                    ,OPERATION_SEQ_NUMBER --작업일련번호   
                    ,STANDARD_OPERATION_CODE --표준작업코드   
                    ,RESOURCE_SEQ_NUM --자원일련번호   
                    ,RESOURCE_CODE --자원코드       
                    ,RESOURCE_TYPE --자원유형       
                    ,ASSIGNED_UNIT --설비대수       
                    ,USAGE_RATE --설비공수       
                    ,ALTERNAME_RESOURCE_YN --대체자원여부   
                    ,SCHEDULE_FLAG --스케줄링여부   
                    ,CREATOR --생성자         
                    ,CREATEDTIME --생성시간       
                    ,MODIFIER --수정자         
                    ,MODIFIEDTIME --수정시간       
                    ,VALIDSTATE --유효여부       
                    ,IF_CRUD --IF변경구분     
                    ,IF_DATE --IF일자         
                    ,IF_PROCESS_TYPE --IF처리여부     
                    ,IF_PROCESS_TIME --IF처리시간     
                    ,IF_PROCESS_COMMENT --IF처리설명     
                    ,IF_SEQUENCE --IF일련번호    
                    ,PRIMARY_YN --주자원여부
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.ASSEMBLYITEMID
                    ,REC.ASSEMBLYITEMVERSION
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.PROCESSSEGMENTID
                    ,TO_NUMBER(REC.RESOURCESEQUENCE)
                    ,REC.RESOURCEID
                    ,'1' -- 1: Machine
                    ,REC.ASSIGNEDUNITS --설비대수
                    ,NULL --설비공수      TODO :  컬럼 확인
                    ,NULL --대체자원여부   TODO :  컬럼 확인
                    ,NULL --스케줄링여부   TODO :  컬럼 확인
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    --공정이 Invalid면 무조건 N 
                    ,'N'
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY
                    ,REC.ISPRIMARY);

            EXCEPTION
                WHEN OTHERS THEN
                    O_RESULT_CODE := 'E';
                    O_RESULT_MSG  := SQLERRM;
                    RAISE MY_DEFINE_ERROR;
            END;

        END LOOP;
        
 	 	/* BOM 먼저 삭제 */
 	 	 	 	FOR REC IN (SELECT Q.*
                          ,TRUNC(Q.USERSEQUENCE) || Q.COMPONENTSEQUENCE AS RN
                          ,INF_BAS_BOMCOMPONENT_S.NEXTVAL AS PKKEY
                    FROM   (SELECT BC.ENTERPRISEID --회사 ID
                                  ,BC.PLANTID --SITE ID
                                  ,BC.MAINPRODUCTID --모 품목
                                  ,BC.MAINPRODUCTVERSION --모 품목 REVISION
                                  ,BPP.USERSEQUENCE --공정 순번
                                  ,BC.COMPONENTSEQUENCE --COMPONENT 등록 순번
                                  ,BC.COMPONENTITEMID --자 품목                          
                                  ,BC.COMPONENTITEMVERSION --자 품목 REVISION
                                  ,BC.COMPONENTUOM --자 품목 UOM
                                  ,SBM.QTY AS COMPONENTQTY --소요량
                                  ,BC.WIPSUPPLYTYPE --공급유형
                                  ,BC.SUPPLYWAREHOUSEID --공급창고
                                  ,BC.CREATEDTIME --IMPLEMENTATION_DATE(적용일), EFFECTIVITY_DATE(시작일자), CREATEDTIME(생성일)
                                  ,BPP.PROCESSSEGMENTID --공정코드
                                  ,'Invalid' --VALID="Y", INVALID="N"(유효여부)
                                  ,BC.CREATOR --CREATOR(생성자)
                                  ,BC.MODIFIEDTIME --MODIFIEDTIME
                                  ,BC.MODIFIER --MODIFIER(수정자)
                                  ,'U' AS IF_CRUD
                            FROM   BAS_BOMCOMPONENT BC
                            LEFT   OUTER JOIN BAS_OPERATION BO
                            ON     BO.OPERATIONID = BC.OPERATIONID
                            AND    BO.ENTERPRISEID = BC.ENTERPRISEID
                            LEFT   OUTER JOIN BAS_BILLOFMATERIAL SBM
                            ON     SBM.ENTERPRISEID = BC.ENTERPRISEID
                            AND    SBM.PROCESSSEGMENTID = BO.PROCESSSEGMENTID
                            AND    SBM.MATERIALDEFID = BC.COMPONENTITEMID
                            AND    SBM.MATERIALDEFVERSION = BC.COMPONENTITEMVERSION
                            AND    SBM.PRODUCTDEFID = BO.MAINPRODUCTID
                            AND    SBM.PRODUCTDEFVERSION = BO.MAINPRODUCTVERSION
                            AND    SBM.PROCESSDEFID = BO.MAINPRODUCTID
                            AND    SBM.PROCESSDEFVERSION = BO.MAINPRODUCTVERSION
                            AND    sbm."sequence" = BC.COMPONENTSEQUENCE
                            LEFT   JOIN BAS_PROCESSPATH BPP
                            ON     BPP.PROCESSSEGMENTID = SBM.PROCESSSEGMENTID
                            AND    BPP.PROCESSDEFID = SBM.PRODUCTDEFID
                            AND    BPP.PROCESSDEFVERSION = SBM.PRODUCTDEFVERSION
                            AND    BPP.USERSEQUENCE = BO.USERSEQUENCE
                            WHERE  1 = 1
                            AND    BC.MAINPRODUCTID = #{PRODUCTDEFID}
                            AND    BC.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}
                            AND	  BO.OPERATIONID = #{OPERATIONID}
                            AND	  BO.USERSEQUENCE = #{USERSEQUENCE}
                            ) Q)
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_COMPONENT@ERPPROD
                    (ENTERPRISEID --MES 회사 ID "INTERFLEX"                                                       
                    ,PLANTID --MES SITE "IFC"                                                                
                    ,ASSEMBLY_ITEM_NAME --모 품목(Update 불가)                                                          
                    ,ASSEMBLY_ITEM_REV --모 품목 Revision(Update 불가)                                                 
                    ,ITEM_NUM --Component 등록 순번(Update 가능)                                              
                    ,OPERATION_SEQ_NUM --공정순번 (ROUTING의 공정순번과 일치)(Update 불가)                             
                    ,COMPONENT_ITEM_NAME --자 품목(Update 불가)                                                          
                    ,COMPONENT_ITEM_REV --자 품목 Revision(Update 불가)                                                 
                    ,COMPONENT_UOM --자 품목 UOM(Update 가능)                                                      
                    ,COMPONENT_QUANTITY --소요량 (Update 가능)                                                          
                    ,WIP_SUPPLY_TYPE --공급유형 (Update 가능)1=Push  2=AssemblyPull  3=OperationPull 4=Bulk 6=Phantom
                    ,SUPPLY_SUBINVENTORY --공급창고(Update 가능)                                                         
                    ,IMPLEMENTATION_DATE --모품목 적용일 (Update 불가)                                                   
                    ,EFFECTIVITY_DATE --시작일자(Update 불가)                                                         
                    ,DISABLE_DATE --종료일자(Update 가능,null로수정불가,시작일자 초과)                            
                    ,OPERATION_CODE --공정코드                                                                      
                    ,CREATOR --MES 생성자                                                                    
                    ,CREATEDTIME --MES 생성일                                                                    
                    ,MODIFIER --MES 수정자                                                                    
                    ,MODIFIEDTIME --MES 수정일                                                                    
                    ,VALIDSTATE --유효여부 Active  = "Y", Inactive = 'N'                                        
                    ,IF_CRUD --IF 변경구분 C/U/D                                                             
                    ,IF_DATE --IF 일시                                                                       
                    ,IF_PROCESS_TYPE --IF 처리여부 ERP에서 (성공=Y, 에러=E)                                          
                    ,IF_PROCESS_TIME --IF 처리일시 ERP에서 사용                                                      
                    ,IF_PROCESS_COMMENT --IF 처리설명 ERP에서 사용(에러 내용)                                           
                    ,IF_SEQUENCE --IF 일련번호                                                                   
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.MAINPRODUCTID
                    ,REC.MAINPRODUCTVERSION
                    ,REC.RN
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.COMPONENTITEMID
                    ,REC.COMPONENTITEMVERSION
                    ,REC.COMPONENTUOM
                    ,REC.COMPONENTQTY
                    ,TO_NUMBER(DECODE(REC.WIPSUPPLYTYPE, 'Push', '1', 'AssemblyPull', '2', 'OperationPull', '3', 'Bulk', '4', 'Phantom', '6', NULL))
                    ,REC.SUPPLYWAREHOUSEID
                    ,REC.CREATEDTIME
                    ,REC.CREATEDTIME
                    ,DECODE(REC.VALIDSTATE, 'Invalid', REC.MODIFIEDTIME, NULL)
                    ,REC.PROCESSSEGMENTID
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,'N'                 
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP;
        
 	 	
 	 	
 	 	FOR REC IN (SELECT BR.ASSEMBLYITEMID
                          ,BR.ASSEMBLYITEMVERSION
                          ,BO.ENTERPRISEID
                          ,BO.PLANTID
                          ,BO.USERSEQUENCE
                          ,BO.PROCESSSEGMENTID
                          ,PN.DICTIONARYNAME AS PROCESSSEGMENTNAME
                          ,BPC.PARENTPROCESSSEGMENTCLASSID
                          ,BO.LEADTIME
                          ,'Invalid'  AS VALIDSTATE
                          ,BO.CREATEDTIME
                          ,BO.MODIFIEDTIME
                          ,INF_BAS_ROUTINGOPERATION_S.NEXTVAL AS PKKEY
                          ,'U' AS IF_CRUD
                    FROM   BAS_OPERATION           BO
                          ,BAS_ROUTING             BR
                          ,BAS_PROCESSSEGMENTEXT   BP
                          ,BAS_PROCESSSEGMENTCLASS BPC
                          ,CMD_DICTIONARY          PN
                    --,IFC_MES_R_BOM_RTG_OPER@ERPPROD BI2
                    WHERE  1 = 1
                    AND    BO.ASSEMBLYROUTINGID = BR.ASSEMBLYROUTINGID
                    AND    BO.PROCESSSEGMENTID = BP.PROCESSSEGMENTID
                    AND    BP.PROCESSSEGMENTCLASSID = BPC.PROCESSSEGMENTCLASSID
                    AND    BP.PROCESSSEGMENTNAME = PN.DICTIONARYID(+)
                    AND    PN.LANGUAGETYPE(+) = 'ko-KR'
                    AND	  BO.OPERATIONID = #{OPERATIONID}
                    AND	  BO.USERSEQUENCE = #{USERSEQUENCE})
        LOOP
            BEGIN
                INSERT INTO IFC_MES_R_BOM_RTG_OPER@ERPPROD
                    (ENTERPRISEID --회사ID         
                    ,ORGANIZATION_CODE --조직코드       
                    ,ASSEMBLY_ITEM_NAME --모품목코드     
                    ,ASSEMBLY_ITEM_REV --모품목 Revision
                    ,OPERATION_SEQ_NUMBER --작업일련번호   
                    ,STANDARD_OPERATION_CODE --표준작업코드   
                    ,STANDARD_OPERATION_NAME --표준작업명     
                    ,DEPARTMENT_CODE --부서           
                    ,LEAD_TIME --리드타임       
                    ,CREATOR --생성자         
                    ,CREATEDTIME --생성시간       
                    ,MODIFIER --수정자         
                    ,MODIFIEDTIME --수정시간       
                    ,VALIDSTATE --유효여부       
                    ,IF_CRUD --IF변경구분     
                    ,IF_DATE --IF일자         
                    ,IF_PROCESS_TYPE --IF처리여부     
                    ,IF_PROCESS_TIME --IF처리시간     
                    ,IF_PROCESS_COMMENT --IF처리설명     
                    ,IF_SEQUENCE --IF일련번호       
                     )
                VALUES
                    (NVL(REC.ENTERPRISEID, 'SMLINES')
                    ,NVL(REC.PLANTID, 'IFC')
                    ,REC.ASSEMBLYITEMID
                    ,REC.ASSEMBLYITEMVERSION
                    ,TO_NUMBER(REC.USERSEQUENCE)
                    ,REC.PROCESSSEGMENTID
                    ,REC.PROCESSSEGMENTNAME
                    ,REC.PARENTPROCESSSEGMENTCLASSID
                    ,REC.LEADTIME
                    ,'-1'
                    ,REC.CREATEDTIME
                    ,'-1'
                    ,NVL(REC.MODIFIEDTIME, REC.CREATEDTIME)
                    ,'N'
                    ,REC.IF_CRUD
                    ,SYSDATE
                    ,'N'
                    ,NULL
                    ,NULL
                    ,REC.PKKEY);

            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END LOOP; 	 					
        
      END;    
    </delete>
    
 <delete id="deleteOperation" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteOperation */
 	 	DELETE FROM BAS_OPERATION WHERE OPERATIONID = #{OPERATIONID} 	 					    
    </delete>
    
   <select id="GetRoutingInspectionItemList" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02100Dao.GetRoutingInspectionItemList */
		    SELECT SA.RESOURCEID
		          ,  SA.RESOURCEVERSION
		          ,  SA.PROCESSSEGID
		          ,  SA.PROCESSEGVERSION
		          ,  SA.SPECSEQUENCE            AS  SPECSEQUENCE 
		          ,  SA.INSPITEMID 
		          ,  II.INSPITEMVERSION
		          ,  IID.DICTIONARYNAME          AS  INSPITEMNAME
		          ,  SA.INSPECTIONDEFID
		          ,  SA.INSPECTIONDEFVERSION  
		          ,  SA.SPECCLASSID 
		          ,  SN.WORKCONDITION            AS  LOCATION
		          ,  SN.DEFAULTCHARTTYPE
		          ,  SD.LCL
		          ,  SD.CL
		          ,  SD.UCL
		          ,  SD.LSL
		          ,  SD.SL
		          ,  SD.USL
		          ,  SD.LOL
		          ,  SD.UOL
        FROM    BAS_INSPECTIONITEMREL          SA      
        LEFT JOIN   BAS_SPECDEFINITION          SN    ON  SA.SPECSEQUENCE = SN.SPECSEQUENCE
        LEFT JOIN   BAS_SPECDETAIL            SD    ON  SA.SPECSEQUENCE = SD.SPECSEQUENCE  
                                    AND SA.SPECCLASSID   = SD.SPECCLASSID
        LEFT JOIN  BAS_INSPITEM              II    ON  SA.ENTERPRISEID = II.ENTERPRISEID
                                    AND SA.INSPITEMID   = II.INSPITEMID                                                                   
        LEFT OUTER JOIN CMD_DICTIONARY          IID    ON  II.INSPITEMNAME = IID.DICTIONARYID
                                    AND IID.LANGUAGETYPE =#{SESSION_LANGUAGETYPE}
        WHERE   SA.SPECCLASSID = 'OperationSpec'
        AND     SA.ENTERPRISEID =#{SESSION_ENTERPRISEID}
        AND     SA.RESOURCEID = #{ITEMID}
        AND     SA.RESOURCEVERSION = #{ITEMVERSION}       
        AND     SA.PROCESSSEGID =#{PROCESSSEGMENTID}  --공정아이디                 
    </select>
    
    
 <delete id="deleteInspectionitemrelData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteInspectionitemrelData */
 	 	DELETE FROM BAS_INSPECTIONITEMREL 
 	 	WHERE INSPITEMID						= #{INSPITEMID}
 	 	   AND INSPITEMVERSION			= #{INSPITEMVERSION}
 	 	   AND INSPECTIONDEFID				= #{INSPECTIONDEFID}
 	 	   AND INSPECTIONDEFVERSION		= #{INSPECTIONDEFVERSION}
 	 	   AND RESOURCEID					= #{PRODUCTDEFID}
 	 	   AND RESOURCEVERSION			= #{PRODUCTDEFVERSION}
 	 	   AND PROCESSSEGID					= #{PROCESSSEGMENTID}
 	 	   AND PROCESSEGVERSION 			= '*'
  	 					    
    </delete>
        
 <delete id="deleteSpecdefinitionData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteSpecdefinitionData */
 	 	DELETE FROM BAS_SPECDEFINITION WHERE SPECSEQUENCE = #{SPECSEQUENCE} 	 					    
    </delete>
    
    
 <delete id="deleteSpecdetailData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteSpecdetailData */
 DECLARE
 	 BEGIN
 	 	
 	 	   /* 설비 I/F 삭제 Data Insert*/
 	 	   INSERT INTO INF_BAS_SPECDETAIL
 	 	    (PLANTID
			,PROCESS_ID
			,ITEM_ID
			,ITEM_VERSION
			,INSPECT_CODE
			,SPEC_STD_LIMIT
			,SPEC_UPPER_LIMIT
			,SPEC_LOWER_LIMIT
			,USE_YN
			,IF_CRUD
			,IF_DATE
			,IF_PROCESS_TYPE
			,IF_PROCESS_TIME
			,IF_PROCESS_COMMENT
			,IF_SEQUENCE)
			VALUES
			(
			#{SESSION_SITETYPE}
			,#{PROCESSSEGMENTID}
			,#{PRODUCTDEFID}
			,#{PRODUCTDEFVERSION}
			,#{INSPITEMID}
			,TO_NUMBER(#{OSL})
			,TO_NUMBER(#{OUSL})
			,TO_NUMBER(#{OLSL})
			,'N'
			,'D'
			,SYSDATE
			,'N'
			,NULL
			,NULL			
			,INF_TOM_PROCESSSPEC_S.NEXTVAL
			);
			
 	 	DELETE FROM BAS_SPECDETAIL 
 	 	WHERE SPECSEQUENCE = #{SPECSEQUENCE}
 	 	   AND CONTROLTYPE = #{DEFAULTCHARTTYPE} ;
 	 END;		    
    </delete>
    
 <delete id="deleteAllBillofresourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteAllBillofresourceData */
 	 DELETE FROM   BAS_BILLOFRESOURCE T
			WHERE  1=1
			  AND  ENTERPRISEID 				= #{SESSION_ENTERPRISEID}
			  AND  PRODUCTDEFID 			= #{PRODUCTDEFID}
			  AND  PRODUCTDEFVERSION 	= #{PRODUCTDEFVERSION}
			  AND  PROCESSDEFID      		= #{PRODUCTDEFID}
			  AND  PROCESSDEFVERSION		= #{PRODUCTDEFVERSION}
			  AND  PROCESSSEGMENTID  	= #{PROCESSSEGMENTID}			   					    
    </delete>   
    
 <delete id="deleteAllOperationresourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteAllOperationresourceData */
 	 	DELETE FROM BAS_OPERATIONRESOURCE 
 	 	WHERE 1=1
 	 	   AND  ENTERPRISEID 		= #{SESSION_ENTERPRISEID}
		   AND  OPERATIONID 		= #{OPERATIONID}
			   					    
    </delete>

 <delete id="deleteOperationspecvalueData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteOperationspecvalueData */
 	 	DELETE FROM BAS_OPERATIONSPECVALUE 
 	 	WHERE 1=1
 	 	   AND  OPERATIONID 		= #{OPERATIONID}
 	 	   AND  SEQUENCE 			= #{SEQUENCE}
		   AND  ENTERPRISEID 	  	= #{SESSION_ENTERPRISEID}
		   AND  PLANTID			  	= #{SESSION_SITETYPE}	 
    </delete>    

	<insert id="insertBillofmaterialData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertBillofmaterialData */
 	 	INSERT INTO BAS_BILLOFMATERIAL
				 	 	(PRODUCTDEFID
						,PRODUCTDEFVERSION
						,PROCESSDEFID
						,PROCESSDEFVERSION
						,PROCESSSEGMENTID
						,PROCESSSEGMENTVERSION
						,MATERIALTYPE
						,MATERIALDEFID
						,MATERIALDEFVERSION
						,"sequence"
						,ENTERPRISEID
						,PLANTID
						,UNIT
						,QTY
						,ISALTERABLE
						,ISREQUIRED
						,DESCRIPTION
						,CREATOR
						,CREATEDTIME
						,MODIFIER
						,MODIFIEDTIME
						,LASTTXNHISTKEY
						,LASTTXNID
						,LASTTXNUSER
						,LASTTXNTIME
						,LASTTXNCOMMENT
						,VALIDSTATE
						,WIPSUPPLYTYPE
						,MULTIPLE
						,ALTITEM
						,ALTREVISION
						,VARIABLE1
						,VARIABLE2
						,VARIABLE3
						,VARIABLE4
						,VARIABLE5
						)
				    VALUES
					    (#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{PROCESSSEGMENTID}
						,'*'
						,#{MATERIALTYPE}
						,#{COMPONENTITEMID}
						,#{COMPONENTITEMVERSION}
						,#{SEQUENCE}
						,#{SESSION_ENTERPRISEID}
						,#{SESSION_SITETYPE}
						,#{COMPONENTUOM}
						,#{COMPONENTQTY}
						,#{ISALTERABLE}
						,#{ISREQUIREDMATERIAL}
						,#{DESCRIPTION}
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						,'Valid'
						,#{WIPSUPPLYTYPE}
						,#{MULTIPLE}
						,#{ALTITEM}
						,#{ALTREVISION}
						,TO_NUMBER(#{VARIABLE1})
						,TO_NUMBER(#{VARIABLE2})
						,TO_NUMBER(#{VARIABLE3})
						,TO_NUMBER(#{VARIABLE4})
						,TO_NUMBER(#{VARIABLE5})
						) 
				    	
    </insert>

  <update id="upsertBomcomponentData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertBomcomponentData */
    	MERGE INTO BAS_BOMCOMPONENT BC
    	USING DUAL
    	        	ON ( 	  BC.COMPONENTBOMID 					= #{COMPONENTBOMID}
						AND BC.COMPONENTSEQUENCE   			= #{SEQUENCE}															    
                    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         COMPONENTQTY 			= #{COMPONENTQTY}     
					        ,WIPSUPPLYTYPE				= #{WIPSUPPLYTYPE}       
					        ,USERLAYER 					= #{USERLAYER}
							,ISREQUIREDMATERIAL 	= #{ISREQUIREDMATERIAL}
					        ,PNLSIZEXAXIS 				= #{PNLSIZEXAXIS}
					        ,PNLSIZEYAXIS 				= #{PNLSIZEYAXIS}
					        ,MATERIALDETAILTYPE 	= #{MATERIALDETAILTYPE}            
					        ,INKTYPE 						= #{INKTYPE}            
					        ,WORKMETHOD				= #{WORKMETHOD}            
					        ,DESCRIPTION 				= #{DESCRIPTION}                      
					        ,PSRPRINTTYPE				= #{PSRPRINTTYPE}  
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( ASSEMBLYBOMID
							,COMPONENTSEQUENCE
							,COMPONENTBOMID
							,ENTERPRISEID
							,PLANTID
							,OPERATIONID
							,COMPONENTITEMID
							,COMPONENTITEMVERSION
							,COMPONENTUOM
							,COMPONENTQTY
							,WIPSUPPLYTYPE
							,USERLAYER
							,ISREQUIREDMATERIAL
							,MAINPRODUCTID
							,MAINPRODUCTVERSION
							,PNLSIZEXAXIS
							,PNLSIZEYAXIS
							,MATERIALDETAILTYPE
							,INKTYPE
							,WORKMETHOD
							,DESCRIPTION	
							,PSRPRINTTYPE
							,VALIDSTATE
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES
				    (	#{ASSEMBLYBOMID}
				    	,#{SEQUENCE}
				    	,#{COMPONENTBOMID}
						,#{SESSION_ENTERPRISEID}
						,#{SESSION_SITETYPE}
						,#{OPERATIONID}
						,#{COMPONENTITEMID}
						,#{COMPONENTITEMVERSION}
						,#{COMPONENTUOM}
						,#{COMPONENTQTY}						
						,#{WIPSUPPLYTYPE}
						,#{USERLAYER}
						,#{ISREQUIREDMATERIAL}
						,#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{PNLSIZEXAXIS}
						,#{PNLSIZEYAXIS}
						,#{MATERIALDETAILTYPE}
						,#{INKTYPE}
						,#{WORKMETHOD}
						,#{DESCRIPTION}
						,#{PSRPRINTTYPE}
						,'Valid'
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </update>
    
    
 <delete id="deleteBomcomponentData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteBomcomponentData */
 	 	DELETE FROM BAS_BOMCOMPONENT 
 	 	WHERE 1=1
 	 	   AND  COMPONENTBOMID 			= #{COMPONENTBOMID}
		   AND  COMPONENTSEQUENCE 	  	= #{COMPONENTSEQUENCE}		   	 
    </delete>
    					
     <delete id="deleteBillofmaterialData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteBillofmaterialData */
 	 DELETE FROM   BAS_BILLOFMATERIAL T
			WHERE  1=1
			  AND  PRODUCTDEFID 					= #{PRODUCTDEFID}
			  AND  PRODUCTDEFVERSION 			= #{PRODUCTDEFVERSION}
			  AND  PROCESSDEFID      				= #{PRODUCTDEFID}
			  AND  PROCESSDEFVERSION				= #{PRODUCTDEFVERSION}
			  AND  PROCESSSEGMENTID  			= #{PROCESSSEGMENTID}
			  AND  PROCESSSEGMENTVERSION  	= '*'			 
			  AND  MATERIALTYPE  					= #{MATERIALTYPE}			 
			  AND  MATERIALDEFID  					= #{MATERIALDEFID}			 
			  AND  MATERIALDEFVERSION  			= #{MATERIALDEFVERSION}
			  AND  "sequence"  						= #{SEQUENCE}			 			   					    
    </delete>
    
     <update id="updateBillofmaterialData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateBillofmaterialData */
 	 	   UPDATE   BAS_BILLOFMATERIAL SET
 	 	    			QTY = #{COMPONENTQTY}
 	 	    			,UNIT = #{COMPONENTUOM}
 	 	    			,WIPSUPPLYTYPE = #{WIPSUPPLYTYPE}
 	 	    			,VARIABLE1 = TO_NUMBER(#{VARIABLE1})
 	 	    			,VARIABLE2 = TO_NUMBER(#{VARIABLE2})
 	 	    			,VARIABLE3 = TO_NUMBER(#{VARIABLE3})
 	 	    			,VARIABLE4 = TO_NUMBER(#{VARIABLE4})
 	 	    			,VARIABLE5 = TO_NUMBER(#{VARIABLE5})
 	 	    			,ALTITEM = #{ALTITEM}
 	 	    			,ALTREVISION = #{ALTREVISION}
						,MODIFIER = #{MODIFIER}     
				        ,MODIFIEDTIME = SYSDATE     
				        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
				        ,LASTTXNID = #{LASTTXNID}     
				        ,LASTTXNUSER = #{MODIFIER}     
				        ,LASTTXNTIME = SYSDATE   
				        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHERE  1=1
			  AND  PRODUCTDEFID 					= #{PRODUCTDEFID}
			  AND  PRODUCTDEFVERSION 			= #{PRODUCTDEFVERSION}
			  AND  PROCESSDEFID      				= #{PRODUCTDEFID}
			  AND  PROCESSDEFVERSION				= #{PRODUCTDEFVERSION}
			  AND  PROCESSSEGMENTID  			= #{PROCESSSEGMENTID}
			  AND  PROCESSSEGMENTVERSION  	= '*'			 
			  AND  MATERIALTYPE  					= #{MATERIALTYPE}			 
			  AND  MATERIALDEFID  					= #{MATERIALDEFID}			 
			  AND  MATERIALDEFVERSION  			= #{MATERIALDEFVERSION}
			  AND  "sequence"  						= #{SEQUENCE}			 			   					    
    </update>
    
       <!-- 공정Spec 중복체크 -->
	<select id="GetExistInspectionItemRel"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.GetExistInspectionItemRel */	
					SELECT INSPITEMID
						      ,INSPITEMVERSION
						      ,INSPECTIONDEFID
						      ,INSPECTIONDEFVERSION
						      ,RESOURCEID
						      ,RESOURCEVERSION
						      ,PROCESSSEGID
						      ,PROCESSEGVERSION
						      ,RESOURCETYPE
						      ,ENTERPRISEID
						      ,PLANTID
						      ,VALIDTYPE
						      ,UNIT
						      ,SEQUENCE
						      ,TANKSIZE
						      ,CALCULATIONTYPE
						      ,ANALYSISCONST
						      ,FOMULATYPE
						      ,QTYCONST
						      ,SPECCLASSID
						      ,SPECSEQUENCE
						      ,ISINSPECTIONREQUIRED
						      ,INSPECTORDEGREE
						      ,ISAQL
						      ,AQLINSPECTIONLEVEL
						      ,AQLDEFECTLEVEL
						      ,AQLDECISIONDEGREE
						      ,AQLCYCLE
						      ,ISNCR
						      ,NCRINSPECTIONQTY
						      ,NCRCYCLE
						      ,NCRDECISIONDEGREE
						      ,NCRDEFECTRATE
						      ,NCRLOTSIZE
						      ,QTYUNIT
						      ,INSPECTIONUNIT
						      ,DESCRIPTION
						      ,CREATOR
						      ,CREATEDTIME
						      ,MODIFIER
						      ,MODIFIEDTIME
						      ,LASTTXNHISTKEY
						      ,LASTTXNID
						      ,LASTTXNUSER
						      ,LASTTXNTIME
						      ,LASTTXNCOMMENT
						      ,VALIDSTATE
						FROM   BAS_INSPECTIONITEMREL T
						WHERE  INSPITEMID 					= #{INSPITEMID}
						AND    INSPITEMVERSION 			= #{INSPITEMVERSION}
						AND    INSPECTIONDEFID 			= #{INSPECTIONDEFID}
						AND    INSPECTIONDEFVERSION 	= #{INSPECTIONDEFVERSION}
						AND    RESOURCEID 					= #{RESOURCEID}
						AND    RESOURCEVERSION 			= #{RESOURCEVERSION}
						AND    PROCESSSEGID 				= #{PROCESSSEGMENTID}
						AND    PROCESSEGVERSION			= '*'
						AND    SPECSEQUENCE 				= #{SPECSEQUENCE}
    </select>

 <update id="updateInspectionitemrel" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateInspectionitemrel */
 	 	UPDATE BAS_INSPECTIONITEMREL SET
 	 						SPECCLASSID = 'OperationSpec'	
 	 						,RESOURCETYPE = #{RESOURCETYPE}
 	 						,DESCRIPTION = #{DESCRIPTION}
 	 						,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
				WHERE  INSPITEMID 					= #{INSPITEMID}
				AND    INSPITEMVERSION 			= #{INSPITEMVERSION}
				AND    INSPECTIONDEFID 			= #{INSPECTIONDEFID}
				AND    INSPECTIONDEFVERSION 	= #{INSPECTIONDEFVERSION}
				AND    RESOURCEID 					= #{PRODUCTDEFID}
				AND    RESOURCEVERSION 			= #{PRODUCTDEFVERSION}
				AND    PROCESSSEGID 				= #{PROCESSSEGMENTID}
				AND    PROCESSEGVERSION			= '*'
				AND    SPECSEQUENCE 				= #{SPECSEQUENCE}					    
    </update>

	<insert id="insertInspectionitemrel" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertInspectionitemrel */
 	 	INSERT INTO BAS_INSPECTIONITEMREL
				 	 	(INSPITEMID
						,INSPITEMVERSION
						,INSPECTIONDEFID
						,INSPECTIONDEFVERSION
						,RESOURCEID
						,RESOURCEVERSION
						,PROCESSSEGID
						,PROCESSEGVERSION
						,RESOURCETYPE
						,ENTERPRISEID
						,PLANTID
						,SPECCLASSID
						,SPECSEQUENCE
						,ISNCR
						,NCRDECISIONDEGREE
						,CREATOR
						,CREATEDTIME
						,MODIFIER
						,MODIFIEDTIME
						,LASTTXNHISTKEY
						,LASTTXNID
						,LASTTXNUSER
						,LASTTXNTIME
						,LASTTXNCOMMENT
						,VALIDSTATE)
				    VALUES
					    (#{INSPITEMID}
						,#{INSPITEMVERSION}
						,#{INSPECTIONDEFID}
						,#{INSPECTIONDEFVERSION}
						,#{RESOURCEID}
						,#{RESOURCEVERSION}
						,#{PROCESSSEGMENTID}
						,'*'
						,#{RESOURCETYPE}
						,#{SESSION_ENTERPRISEID}
						,#{SESSION_SITETYPE}
						,'OperationSpec'
						,#{SPECSEQUENCE}
						,#{ISNCR}
						,#{NCRDECISIONDEGREE}
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						,'Valid') 
				    	
    </insert>
    
  <update id="upsertSpecdefinition" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertSpecdefinition */
    	MERGE INTO BAS_SPECDEFINITION BR
    	USING DUAL
    	        	ON ( BR.SPECSEQUENCE = #{SPECSEQUENCE})
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         DEFAULTCHARTTYPE = #{DEFAULTCHARTTYPE}     
					        ,WORKCONDITION = #{LOCATION}       
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( SPECSEQUENCE
							,SPECCLASSID
							,ENTERPRISEID
							,PLANTID
							,PROCESSSEGMENTID
							,PRODUCTDEFID
							,INSPITEMID
							,WORKCONDITION
							,DEFAULTCHARTTYPE
							,VALIDSTATE
							,RESOURCEID
							,RESOURCEVERSION
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES(  #{SPECSEQUENCE}
				    			,'OperationSpec'
								,#{SESSION_ENTERPRISEID}
								,#{SESSION_SITETYPE}
								,#{PROCESSSEGMENTID}
								,#{PRODUCTDEFID}
								,#{INSPITEMID}
								,#{LOCATION}
								,#{DEFAULTCHARTTYPE}						
								,'Valid'
								,#{PRODUCTDEFID}
								,#{PRODUCTDEFVERSION}
								,#{CREATOR}  
						        ,SYSDATE  
						        ,#{MODIFIER}  
						        ,SYSDATE  
						        ,#{LASTTXNHISTKEY}  
						        ,#{LASTTXNID}
						        ,#{CREATOR} 
						        ,SYSDATE
						        ,#{LASTTXNCOMMENT})
    </update>    
    
  <update id="upsertSpecdetailData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertSpecdetailData */
 DECLARE
 	 	V_CNT NUMBER DEFAULT 0;
 	 BEGIN
 	 
 	 BEGIN
			SELECT COUNT(*)
			  INTO V_CNT
			 FROM BAS_SPECDETAIL BR
    	    WHERE  BR.SPECSEQUENCE = #{SPECSEQUENCE}
    	       AND BR.CONTROLTYPE = #{DEFAULTCHARTTYPE};
    	EXCEPTION WHEN no_data_found THEN
    		V_CNT := 0; 
		END;				
		        
		 /* 설비 I/F 입력,수정 Data Insert*/
 	 	   INSERT INTO INF_BAS_SPECDETAIL
 	 	    (PLANTID
			,PROCESS_ID
			,ITEM_ID
			,ITEM_VERSION
			,INSPECT_CODE
			,SPEC_STD_LIMIT
			,SPEC_UPPER_LIMIT
			,SPEC_LOWER_LIMIT
			,USE_YN
			,IF_CRUD
			,IF_DATE
			,IF_PROCESS_TYPE
			,IF_PROCESS_TIME
			,IF_PROCESS_COMMENT
			,IF_SEQUENCE)
			VALUES
			(
			#{SESSION_SITETYPE}
			,#{PROCESSSEGMENTID}
			,#{RESOURCEID}
			,#{RESOURCEVERSION}
			,#{INSPITEMID}
			,TO_NUMBER(#{OSL})
			,TO_NUMBER(#{OUSL})
			,TO_NUMBER(#{OLSL})
			,'Y'
			,DECODE(V_CNT, 0, 'C','U')
			,SYSDATE
			,'N'
			,NULL
			,NULL			
			,INF_TOM_PROCESSSPEC_S.NEXTVAL
			);			
 	 
    	MERGE INTO BAS_SPECDETAIL BR
    	USING DUAL
    	        	ON ( BR.SPECSEQUENCE = #{SPECSEQUENCE}
    	        	    AND BR.CONTROLTYPE = #{DEFAULTCHARTTYPE})
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         SPECCLASSID = 'OperationSpec'       
					        ,LSL	= #{LSL}
					        ,SL		= #{SL}
					        ,USL	= #{USL}
							,COPPERTHICKNESS = #{COPPERTHICKNESS}
	              	        ,OLSL	= #{OLSL}
					        ,OSL	= #{OSL}
					        ,OUSL	= #{OUSL}
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( SPECSEQUENCE
							,SPECCLASSID
							,CONTROLTYPE
							,SL
							,USL
							,LSL
							,VALIDSTATE
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES(  #{SPECSEQUENCE}
								,'OperationSpec'
								,#{DEFAULTCHARTTYPE}
								,#{SL}
								,#{USL}
								,#{LSL}
								,'Valid'
								,#{CREATOR}  
						        ,SYSDATE  
						        ,#{MODIFIER}  
						        ,SYSDATE  
						        ,#{LASTTXNHISTKEY}  
						        ,#{LASTTXNID}
						        ,#{CREATOR} 
						        ,SYSDATE
						        ,#{LASTTXNCOMMENT});						        
		END;
    </update>
    
	<select id="GetExistByBillofResource"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.GetExistByBillofResource */
		SELECT 	OS.RESOURCEID
						FROM BAS_OPERATIONRESOURCE         OS
		        LEFT OUTER JOIN TOM_DURABLEDEFINITION  DD   ON DD.ENTERPRISEID      = OS.ENTERPRISEID
		                                       AND DD.DURABLEDEFID      = OS.RESOURCEID
		                                       AND DD.DURABLEDEFVERSION    = OS.RESOURCEIDVERSION
		        LEFT OUTER JOIN BAS_BILLOFRESOURCE     BR  ON  BR.ENTERPRISEID         = DD.ENTERPRISEID
		                              AND BR.RESOURCEID      = DD.DURABLEDEFID
		                              AND BR.RESOURCEVERSION    = DD.DURABLEDEFVERSION
		                                                           AND BR.PRODUCTDEFID           = #{PRODUCTDEFID}
		                                                           AND BR.PRODUCTDEFVERSION   = #{PRODUCTDEFVERSION}  
		                WHERE 1=1
		                 AND OS.ENTERPRISEID      = #{SESSION_ENTERPRISEID}
		                 AND OS.OPERATIONID       = #{OPERATIONID}
		                 AND OS.RESOURCEID = #{TOOLCODE}
		                 AND OS.RESOURCEIDVERSION = #{TOOLVERSION}		                
    </select>
    
	<select id="GetMaxDegreeByBillofResource"  parameterType="map" resultType="hashmap">
		  /* smh.bas.dao.BAS02100Dao.GetMaxDegreeByBillofResource */	
		SELECT	TO_CHAR(NVL(MAX(TO_NUMBER(DS."sequence")), 0)) AS DEGREE	
	     FROM BAS_OPERATIONRESOURCE 			  OS
				LEFT OUTER JOIN TOM_DURABLEDEFINITION  DD 	ON DD.ENTERPRISEID  		= OS.ENTERPRISEID
				              							 	AND DD.DURABLEDEFID  		= OS.RESOURCEID
				   								            AND DD.DURABLEDEFVERSION  	= OS.RESOURCEIDVERSION
				LEFT OUTER JOIN BAS_BILLOFRESOURCE	  DS	ON DS.RESOURCEID			= DD.DURABLEDEFID
															AND DS.RESOURCEVERSION		= DD.DURABLEDEFVERSION
															AND DS.PRODUCTDEFID       	=   #{PRODUCTDEFID}
                                                         	AND DS.PRODUCTDEFVERSION 	=  #{PRODUCTDEFVERSION}  
				WHERE OS.RESOURCETYPE IN ('Film','Durable')
					AND OS.ENTERPRISEID 		=  #{SESSION_ENTERPRISEID}
            		AND OS.OPERATIONID      = #{OPERATIONID}
    </select>
    
	<insert id="insertBillofResourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertBillofResourceData */
 	 	INSERT INTO BAS_BILLOFRESOURCE
				 	 	(PRODUCTDEFID
						,PRODUCTDEFVERSION
						,PROCESSDEFID
						,PROCESSDEFVERSION
						,PROCESSSEGMENTID
						,PROCESSSEGMENTVERSION
						,RESOURCETYPE
						,"sequence"
						,EQUIPMENTID
						,RESOURCECLASSID
						,RESOURCEID
						,ISPRIMARYRESOURCE
						,ENTERPRISEID
						,PLANTID
						,DESCRIPTION
						,CREATOR
						,CREATEDTIME
						,MODIFIER
						,MODIFIEDTIME
						,LASTTXNHISTKEY
						,LASTTXNID
						,LASTTXNUSER
						,LASTTXNTIME
						,LASTTXNCOMMENT
						,VALIDSTATE
						,RESOURCEVERSION)
				    VALUES
				    (
				    #{PRODUCTDEFID}
					,#{PRODUCTDEFVERSION}
					,#{PRODUCTDEFID}
					,#{PRODUCTDEFVERSION}
					,#{PROCESSSEGMENTID}
					,'*'
					,#{DURABLETYPE}
					,#{SEQUENCE}
					,'*'
					,'*'
					,#{TOOLCODE}
					,#{ISPRIMARYRESOURCE}
					,#{SESSION_ENTERPRISEID}
					,#{SESSION_SITETYPE}
					,#{DESCRIPTION}
					,#{CREATOR}  
			        ,SYSDATE  
			        ,#{MODIFIER}  
			        ,SYSDATE  
			        ,#{LASTTXNHISTKEY}  	
			        ,#{LASTTXNID}
			        ,#{CREATOR} 
			        ,SYSDATE
			        ,#{LASTTXNCOMMENT}
					,'Valid'
					,#{TOOLVERSION}									    
				    )
					   
    </insert>
    
    	<update id="updateBillofResourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateBillofResourceData */
 	 	UPDATE BAS_BILLOFRESOURCE SET	DESCRIPTION = #{DESCRIPTION}
				 WHERE PRODUCTDEFID					 = #{PRODUCTDEFID}
						AND PRODUCTDEFVERSION		= #{PRODUCTDEFVERSION}
						AND PROCESSDEFID				= #{PRODUCTDEFID}
						AND PROCESSDEFVERSION		= #{PRODUCTDEFVERSION}
						AND PROCESSSEGMENTID			= #{PROCESSSEGMENTID}
						AND PROCESSSEGMENTVERSION	= '*'
						AND RESOURCETYPE				= #{RESOURCETYPE}		
						AND EQUIPMENTID					= '*'
						AND RESOURCECLASSID			= '*'
						AND RESOURCEID					= #{RESOURCEID}
						AND RESOURCEVERSION			= #{RESOURCEVERSION}
						AND "sequence"					= #{SEQUENCE}
    </update>
    

    	<delete id="deleteBillofresourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteBillofresourceData */
 	 	DELETE FROM  BAS_BILLOFRESOURCE
				 WHERE PRODUCTDEFID					 = #{PRODUCTDEFID}
						AND PRODUCTDEFVERSION		= #{PRODUCTDEFVERSION}
						AND PROCESSDEFID				= #{PRODUCTDEFID}
						AND PROCESSDEFVERSION		= #{PRODUCTDEFVERSION}
						AND PROCESSSEGMENTID			= #{PROCESSSEGMENTID}
						AND PROCESSSEGMENTVERSION	= '*'
						AND RESOURCETYPE				= #{RESOURCETYPE}		
						AND EQUIPMENTID					= '*'
						AND RESOURCECLASSID			= '*'
						AND RESOURCEID					= #{RESOURCEID}
						AND RESOURCEVERSION			= #{RESOURCEVERSION}
						AND "sequence"					= #{SEQUENCE}
						
					   
    </delete>


    	<delete id="deleteOperationresourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.deleteOperationresourceData */
 	 	DELETE FROM  BAS_OPERATIONRESOURCE BR
				 WHERE BR.OPERATIONRESOURCEID = #{OPERATIONRESOURCEID}
    	        	    AND BR.RESOURCESEQUENCE = #{SEQUENCE}
    	        	    AND BR.ENTERPRISEID = #{SESSION_ENTERPRISEID}
    	        	    AND BR.OPERATIONID = #{OPERATIONID}
    </delete>        
    
	<select id="GetExistDurableComponent" parameterType="map" resultType="hashmap">
				 SELECT   OPERATIONRESOURCEID
							,OPERATIONID
							,RESOURCEID
							,RESOURCEIDVERSION
							,RESOURCETYPE
							,RESOURCESEQUENCE
							,MAINPRODUCTID
							,MAINPRODUCTVERSION
					FROM BAS_OPERATIONRESOURCE OS
					WHERE  OS.ENTERPRISEID 			= #{SESSION_ENTERPRISEID}
						AND OS.OPERATIONID   			= #{OPERATIONID}
						AND OS.RESOURCEID				= #{TOOLCODE}
						AND OS.RESOURCEIDVERSION 	= #{TOOLVERSION}
						AND OS.RESOURCETYPE 			= #{DURABLETYPE}
						AND OS.MAINPRODUCTID 		= #{PRODUCTDEFID}
						AND OS.MAINPRODUCTVERSION= #{PRODUCTDEFVERSION}
						AND ROWNUM = 1
	</select>
	
	<select id="GetExistByOperationSpecValue" parameterType="map" resultType="hashmap">
			SELECT 
						OPERATIONID
				FROM 	BAS_OPERATIONSPECVALUE
				WHERE 	1=1
				AND OPERATIONID 	  	  = #{OPERATIONID}
				AND ENTERPRISEID 	  	  = #{SESSION_ENTERPRISEID}
				AND PROCESSSEGMENTID  = #{PROCESSSEGMENTID}
				AND AOIQCLAYER		  	  = #{AOIQCLAYER}	
				AND AOIQCLAYER2		  	  = #{AOIQCLAYER2}	
	</select>
	
	<select id="GetMaxDegreeByOperationSpecValue" parameterType="map" resultType="hashmap">
			SELECT 	TO_CHAR(NVL(MAX(TO_NUMBER(SEQUENCE)), 0)) AS DEGREE
				FROM 	BAS_OPERATIONSPECVALUE
				WHERE 	1=1
				AND OPERATIONID 	  	  = #{OPERATIONID}
				AND ENTERPRISEID 	  	  = #{SESSION_ENTERPRISEID}					
	</select>
	
  <update id="upsertOperationresourceData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertOperationresourceData */
    	MERGE INTO BAS_OPERATIONRESOURCE BR
    	USING DUAL
    	        	ON ( BR.OPERATIONRESOURCEID = #{OPERATIONRESOURCEID}
    	        	    AND BR.RESOURCESEQUENCE = #{SEQUENCE}
    	        	    AND BR.ENTERPRISEID = #{SESSION_ENTERPRISEID}
    	        	    AND BR.OPERATIONID = #{OPERATIONID}
    	        	    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	        DESCRIPTION = #{DESCRIPTION}					        
					        ,MODIFIER = #{MODIFIER}
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( OPERATIONRESOURCEID
							,RESOURCESEQUENCE
							,OPERATIONID
							,ENTERPRISEID
							,PLANTID
							,RESOURCETYPE
							,RESOURCEID
							,DESCRIPTION
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT
							,VALIDSTATE
							,RESOURCEIDVERSION
							,ISPRIMARY
							,MAINPRODUCTID
							,MAINPRODUCTVERSION
							,WRAPTYPE
							) 
				    VALUES(  
						    #{OPERATIONRESOURCEID}
							,#{SEQUENCE}
							,#{OPERATIONID}
							,#{SESSION_ENTERPRISEID}
							,#{SESSION_SITETYPE}
							,#{DURABLETYPE}
							,#{TOOLCODE}
							,#{DESCRIPTION}
							,#{CREATOR}  
					        ,SYSDATE  
					        ,#{MODIFIER}  
					        ,SYSDATE  
					        ,#{LASTTXNHISTKEY}  
					        ,#{LASTTXNID}
					        ,#{CREATOR} 
					        ,SYSDATE
					        ,#{LASTTXNCOMMENT}
							,'Valid'
							,#{TOOLVERSION}
							,'Y'
							,#{PRODUCTDEFID}
							,#{PRODUCTDEFVERSION}
							,#{WRAPTYPE})
    </update>
    
<insert id="insertOperationspecvalueData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.insertOperationspecvalueData */
 	 	INSERT INTO BAS_OPERATIONSPECVALUE
				 	 	(OPERATIONID
						,SEQUENCE
						,ENTERPRISEID
						,PLANTID
						,PROCESSSEGMENTID
						,AOIQCLAYER
						,AOIQCLAYER2
						,DESCRIPTION
						,CREATOR
						,CREATEDTIME
						,MODIFIER
						,MODIFIEDTIME
						,LASTTXNHISTKEY
						,LASTTXNID
						,LASTTXNUSER
						,LASTTXNTIME
						,LASTTXNCOMMENT
						,VALIDSTATE)
				    VALUES
					    (#{OPERATIONID}
						,#{SEQUENCE}
						,#{SESSION_ENTERPRISEID}
						,#{SESSION_SITETYPE}
						,#{PROCESSSEGMENTID}
						,#{AOIQCLAYER}
						,#{AOIQCLAYER2}
						,#{DESCRIPTION}
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}
						,'Valid')
    </insert>
    
    <update id="updateOperationspecvalueData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateOperationspecvalueData */
 	 	UPDATE BAS_OPERATIONSPECVALUE SET	
 	 					AOIQCLAYER 		= #{AOIQCLAYER}
 	 					,AOIQCLAYER2		= #{AOIQCLAYER2}
 	 					,DESCRIPTION 		= #{DESCRIPTION}
				 WHERE OPERATIONID		= #{OPERATIONID}
					AND SEQUENCE			= #{SEQUENCE}
    </update>
    
<!-- Routing 삭제 전 LOT 등록 조회-->
    <select id="selectCheckRoutingList" parameterType="map" resultType="hashmap">
    	/* smh.bas.dao.BAS02100Dao."selectCheckRoutingList" */
				SELECT PL.LOTID
				FROM   PCM_LOT PL
				WHERE  PL.PRODUCTDEFID = #{ITEMID}
				    AND PL.PRODUCTDEFVERSION = #{ITEMVERSION}
	</select>
	
<!-- Routing 미사용처리 가능여부 조회 (현재공 있는지 체크)-->
    <select id="selectCheckLot" parameterType="map" resultType="hashmap">
    	/* smh.bas.dao.BAS02100Dao.selectCheckLot */
				SELECT PL.LOTID
				FROM   PCM_LOT PL
		 		 WHERE  PL.PROCESSDEFID = #{ITEMID}
				    AND	PL.PROCESSDEFVERSION = #{ITEMVERSION}
				    AND	PL.USERSEQUENCE = #{USERSEQUENCE}
				    AND	PL.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
				    AND	PL.PROCESSSEGMENTVERSION = '*'	
					AND	PL.LOTSTATE IN ('InTransit', 'InProduction')
					AND	PL.LOTCREATEDTYPE NOT IN ('Defect')
					AND	PL.ISDEFECTED = 'N'
	</select>

  <update id="saveItemWarehouse" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.saveItemWarehouse */
    	MERGE INTO BAS_ITEMWAREHOUSE BR
    	USING DUAL
    	        	ON ( ITEMID = #{PRODUCTDEFID}
    	        	AND ITEMVERSION = #{PRODUCTDEFVERSION}
    	        	AND ENTERPRISEID = #{SESSION_ENTERPRISEID}
    	        	 AND PLANTID = #{PLANTID}
                    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         WAREHOUSEID = #{WAREHOUSEID}     
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( ITEMID
							,ITEMVERSION
							,ENTERPRISEID
							,PLANTID
							,WAREHOUSEID
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES( 
						#{PRODUCTDEFID}
						,#{PRODUCTDEFVERSION}
						,#{SESSION_ENTERPRISEID}
						,#{PLANTID}
						,#{WAREHOUSEID}
						,#{CREATOR}  
				        ,SYSDATE  
				        ,#{MODIFIER}  
				        ,SYSDATE  
				        ,#{LASTTXNHISTKEY}  
				        ,#{LASTTXNID}
				        ,#{CREATOR} 
				        ,SYSDATE
				        ,#{LASTTXNCOMMENT}  
						)
    </update>
    
    	<!-- Routing Copy -->
	<select id="copyRouting"  statementType="CALLABLE" parameterType="map">
		{call   /* smh.bas.dao.BAS02100Dao.copyRouting */
				BAS_02100_PKG.COPY_ROUTING(#{ITEMID_FR}
										  ,#{ITEMREV_FR}
				 						  ,#{ITEMID_TO}
										  ,#{ITEMREV_TO}
										  ,#{SESSION_ENTERPRISEID}
										  ,#{SESSION_SITETYPE}
										  ,#{CREATOR}
										  ,#{MODIFIER}
										  ,#{LASTTXNHISTKEY}
										  ,#{O_RESULT_CODE,mode=OUT,jdbcType=VARCHAR ,javaType=string}
										  ,#{O_RESULT_MSG,mode=OUT,jdbcType=VARCHAR ,javaType=string}
										)
	     }
    </select>
    
  <update id="upsertOperationData" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.upsertOperationData */
 	 DECLARE
 	 	V_ITEMID		VARCHAR2(100);
 	 BEGIN
    	MERGE INTO BAS_OPERATION BR
    	USING DUAL
    	        	ON ( BR.OPERATIONID = #{OPERATIONID}
                    )
              WHEN  MATCHED THEN  
	              UPDATE SET 
	              	         OPERATIONSEQUENCE = #{OPERATIONSEQUENCE}
							,USERSEQUENCE = #{USERSEQUENCE}
					        ,DESCRIPTION = #{DESCRIPTION}
					        ,PROCESSUOM = #{PROCESSUOM}        
					        ,MAINPRODUCTID = #{PRODUCTDEFID}
					        ,MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}                    
					        ,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE
					        ,VALIDSTATE = #{VALIDSTATE}
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
			WHEN NOT MATCHED THEN
				INSERT ( OPERATIONID
							,OPERATIONSEQUENCE
							,ENTERPRISEID
							,ASSEMBLYROUTINGID
							,PLANTID
							,USERSEQUENCE
							,PROCESSSEGMENTID
							,MAINPRODUCTID
							,MAINPRODUCTVERSION
							,VALIDSTATE
							,DESCRIPTION
							,CREATOR
							,CREATEDTIME
							,MODIFIER
							,MODIFIEDTIME
							,LASTTXNHISTKEY
							,LASTTXNID
							,LASTTXNUSER
							,LASTTXNTIME
							,LASTTXNCOMMENT) 
				    VALUES( 
				    		#{OPERATIONID}
				    		,#{OPERATIONSEQUENCE}
							,#{SESSION_ENTERPRISEID}
							,#{PRODUCTDEFID} || '_' || #{PRODUCTDEFVERSION}						
							,#{SESSION_SITETYPE}
							,#{USERSEQUENCE}
							,#{PROCESSSEGMENTID}
							,#{PRODUCTDEFID}
							,#{PRODUCTDEFVERSION}						
							,'Valid'
							,#{DESCRIPTION}
							,#{CREATOR}  
					        ,SYSDATE  
					        ,#{MODIFIER}  
					        ,SYSDATE  
					        ,#{LASTTXNHISTKEY}  
					        ,#{LASTTXNID}
					        ,#{CREATOR} 
					        ,SYSDATE
					        ,#{LASTTXNCOMMENT}  
							);
			
			/* 완료창고가 존재하지 않으면 자동으로 생성해줌, 제품은(FGI01/안산생산제품) 반제품은 (SUB45, SUB창고)*/
			<if test="IS_WAREHOUSE == null">
				BEGIN
					SELECT ITEMID
					  INTO V_ITEMID
					 FROM  BAS_ITEMWAREHOUSE
					 WHERE ITEMID = #{PRODUCTDEFID}
	    	        	AND ITEMVERSION = #{PRODUCTDEFVERSION}
	    	        	AND ENTERPRISEID = #{SESSION_ENTERPRISEID}
	    	        	AND PLANTID = #{SESSION_SITETYPE};
	    	       EXCEPTION 
					WHEN NO_DATA_FOUND THEN
						INSERT INTO BAS_ITEMWAREHOUSE ( ITEMID
								,ITEMVERSION
								,ENTERPRISEID
								,PLANTID
								,WAREHOUSEID
								,CREATOR
								,CREATEDTIME
								,MODIFIER
								,MODIFIEDTIME
								,LASTTXNHISTKEY
								,LASTTXNID
								,LASTTXNUSER
								,LASTTXNTIME
								,LASTTXNCOMMENT) 
					    VALUES( 
							#{PRODUCTDEFID}
							,#{PRODUCTDEFVERSION}
							,#{SESSION_ENTERPRISEID}
							,#{SESSION_SITETYPE}
							,DECODE(SUBSTR(#{PRODUCTDEFID},0,1),'1', 'FGI01','2','SUB45',null)
							,#{CREATOR}  
					        ,SYSDATE  
					        ,#{MODIFIER}  
					        ,SYSDATE  
					        ,#{LASTTXNHISTKEY}  
					        ,#{LASTTXNID}
					        ,#{CREATOR} 
					        ,SYSDATE
					        ,#{LASTTXNCOMMENT}  
							);
				END;
			</if>
		END;
    </update>
    
	<select id="GetExistBomComponent" parameterType="map" resultType="hashmap">
			SELECT   COMPONENTBOMID
										,COMPONENTSEQUENCE
								FROM BAS_BOMCOMPONENT BC
								WHERE BC.ENTERPRISEID =#{SESSION_ENTERPRISEID}
									AND BC.OPERATIONID   =#{OPERATIONID}
									AND BC.COMPONENTITEMID	= #{COMPONENTITEMID}
									AND BC.COMPONENTITEMVERSION =  #{COMPONENTITEMVERSION}
			            			AND ROWNUM = 1
								ORDER BY COMPONENTSEQUENCE DESC
	</select>
	
 <select id="selectUploadSegment" parameterType="map" resultType="hashmap">   
	     SELECT  T.SUBSEGMENTID
		      	   ,T.PROCESSSEGMENTID
		  FROM  BAS_PROCESSSEGMENTEXT T
		 WHERE  T.PROCESSSEGMENTID IN 
                <foreach collection="KEY_LIST" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach> 
		        
    </select>
    
<select id="selectProcessSegmentExtPupop" parameterType="map" resultType="hashmap">
    	/* GetProcessSegmentExtPupop 10001 */
    				<choose>
		          		<when  test="TYPE != null and TYPE !='' ">
						SELECT   
							 	PG.PROCESSSEGMENTID             
						    ,	DI.DICTIONARYNAME          	 	AS PROCESSSEGMENTNAME
                			, 	PG.PROCESSSEGMENTVERSION
						    ,	PG.DESCRIPTION
						    ,	PG.PROCESSSEGMENTCLASSID
						    ,	PG.STEPCLASS
						    ,   (
							      SELECT 
							            LISTAGG(B.DICTIONARYNAME,',') WITHIN GROUP(ORDER BY A.DISPLAYSEQUENCE)
		                FROM CMD_LOOKUP_VALUES A
		                LEFT JOIN CMD_DICTIONARY B ON A.DICTIONARYID = B.DICTIONARYID AND B.LANGUAGETYPE = NULL
		                WHERE A.LOOKUP_TYPE  = PG.STEPCLASS            
		                ) STEPTYPE
		          ,   CU.USER_NM AS CREATOR
		          ,   PG.CREATEDTIME
		          ,   MU.USER_NM AS MODIFIER
		          ,   PG.MODIFIEDTIME
		        FROM BAS_PROCESSSEGMENT             PG
		        		LEFT JOIN CMD_USERS                       CU   ON CU.USER_ID = PG.CREATOR
						LEFT JOIN CMD_USERS                       MU   ON MU.USER_ID = PG.MODIFIER
						LEFT JOIN CMD_DICTIONARY 				DI	 ON DI.DICTIONARYID = PG.PROCESSSEGMENTNAME
																 	 AND DI.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
						WHERE 1=1
					</when>
					<otherwise>
					 SELECT   
					 	PG.PROCESSSEGMENTID             
				    ,	DI.DICTIONARYNAME          	 	AS PROCESSSEGMENTNAME
				    ,	PG.DESCRIPTION
				    ,	PG.PROCESSSEGMENTCLASSID
				    ,	PG.SEGMENTTYPE
				    ,	PG.STEPCLASS
				    ,   (
					      SELECT 
					            LISTAGG(B.DICTIONARYNAME,',') WITHIN GROUP(ORDER BY A.DISPLAYSEQUENCE)
					      FROM CMD_LOOKUP_VALUES A
					      LEFT JOIN CMD_DICTIONARY B ON A.DICTIONARYID = B.DICTIONARYID AND B.LANGUAGETYPE = #{LANGUAGETYPE}
					      WHERE A.LOOKUP_TYPE  = PG.STEPCLASS				    
				        ) STEPTYPE
				    ,	PG.SUBSEGMENTID
				    ,	PG.ISTOOLWORK
				    ,	PG.ISINCOMINGINSPECTION
				    ,	PG.COSTCODE
				    ,	PG.VALIDSTATE
					,   CU.USER_NM AS CREATOR
					,   PG.CREATEDTIME
					,   MU.USER_NM AS MODIFIER
					,   PG.MODIFIEDTIME
        	FROM BAS_PROCESSSEGMENTEXT           	PG
				LEFT JOIN CMD_USERS                       CU   ON CU.USER_ID = PG.CREATOR
				LEFT JOIN CMD_USERS                       MU   ON MU.USER_ID = PG.MODIFIER
				LEFT JOIN CMD_DICTIONARY 				DI	 ON DI.DICTIONARYID = PG.PROCESSSEGMENTNAME
														 	 AND DI.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
				WHERE 1=1
				AND  (PG.PRIVATEPROCESS IS NULL OR PG.PRIVATEPROCESS = #{PLANTID})						
					</otherwise>
				</choose>				  
			<if test="ENTERPRISEID != null and ENTERPRISEID !=''"> 
				AND	PG.ENTERPRISEID = #{ENTERPRISEID}
			</if>
			<if test="SEARCHKEY != null and SEARCHKEY !=''"> 
		  		AND	(
		  				UPPER(PG.PROCESSSEGMENTID) LIKE UPPER(<![CDATA['%' ||]]> #{SEARCHKEY} <![CDATA[|| '%']]> )
		  				OR UPPER(DI.DICTIONARYNAME) LIKE UPPER(<![CDATA['%' ||]]> #{SEARCHKEY} <![CDATA[|| '%']]> )
		  				)
		  	</if>
			<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' and !(PROCESSSEGMENTID eq '*'.toString())"> 
		  		AND	UPPER(PG.PROCESSSEGMENTID) LIKE UPPER(<![CDATA['%' ||]]> #{PROCESSSEGMENTID} <![CDATA[|| '%']]> )
		  	</if>
		  	<if test="PROCESSSEGMENTNAME != null and PROCESSSEGMENTNAME !='' and !(PROCESSSEGMENTNAME eq '*'.toString())"> 
		  		AND	UPPER(DI.DICTIONARYNAME) LIKE UPPER(<![CDATA['%' ||]]> #{PROCESSSEGMENTNAME} <![CDATA[|| '%']]> )
		  	</if>
		  		AND PG.VALIDSTATE = #{VALIDSTATE}
		  		ORDER BY PG.PROCESSSEGMENTID 
	</select>
	
	<select id="selectBomValue" parameterType="map" resultType="hashmap">
    	/* selectBomValue */
    	SELECT MAX(VAL13_1) AS VAL13_1
			      ,MAX(VAL13_2) AS VAL13_2
			      ,MAX(VAL14_1) AS VAL14_1
		            ,MAX(VAL14_2) AS VAL14_2
		            ,MAX(VAL15_1) AS VAL15_1
		            ,MAX(VAL15_2) AS VAL15_2
			      ,MAX(VAL3) AS VAL3
			FROM   (SELECT FROMORIGINAL AS VAL13_1
			              ,TOORIGINAL   AS VAL13_2
                    ,NULL         AS VAL14_1
                    ,NULL         AS VAL14_2
                    ,NULL         AS VAL15_1
                    ,NULL         AS VAL15_2                    
			              ,NULL         AS VAL3
			        FROM   BAS_PRODUCTITEMSPECDETAIL
			        WHERE  SEQUENCE = 13
			        AND    ITEMID = #{ITEMID}
              AND    ITEMVERSION = #{ITEMVERSION}
              AND    DETAILTYPE = 'CopperPlating'
              
              UNION ALL
              
              SELECT NULL         AS VAL13_1
                    ,NULL         AS VAL13_2
                    ,FROMORIGINAL AS VAL14_1
			              ,TOORIGINAL   AS VAL14_2
                    ,NULL         AS VAL15_1
                    ,NULL         AS VAL15_2                    
			              ,NULL         AS VAL3
			        FROM   BAS_PRODUCTITEMSPECDETAIL
			        WHERE  SEQUENCE = 14
			        AND    ITEMID = #{ITEMID}
              AND    ITEMVERSION = #{ITEMVERSION}
              AND    DETAILTYPE = 'CopperPlating'
              UNION ALL
              
              SELECT NULL         AS VAL13_1
                    ,NULL         AS VAL13_2              
                    ,NULL         AS VAL14_1
                    ,NULL         AS VAL14_2                    
                    ,FROMORIGINAL AS VAL15_1
			              ,TOORIGINAL   AS VAL16_2
			              ,NULL         AS VAL3
			        FROM   BAS_PRODUCTITEMSPECDETAIL
			        WHERE  SEQUENCE = 15
			        AND    ITEMID = #{ITEMID}
              AND    ITEMVERSION = #{ITEMVERSION}
              AND    DETAILTYPE = 'CopperPlating'
              
              UNION ALL
              
              SELECT NULL         AS VAL13_1
                    ,NULL         AS VAL13_2              
                    ,NULL         AS VAL14_1
                    ,NULL         AS VAL14_2     
                    ,NULL         AS VAL15_1
                    ,NULL         AS VAL15_2     
                    ,SD.LSL AS VAL3
              FROM   BAS_INSPECTIONITEMREL SA
              LEFT   JOIN BAS_SPECDETAIL SD
              ON     SA.SPECSEQUENCE = SD.SPECSEQUENCE
              AND    SA.SPECCLASSID = SD.SPECCLASSID
              WHERE  1 = 1
              AND    SA.SPECCLASSID = 'OperationSpec'
              AND    SA.ENTERPRISEID = #{SESSION_ENTERPRISEID}
              AND    SA.RESOURCEID = #{ITEMID}
              AND    SA.RESOURCEVERSION = #{ITEMVERSION}
              AND    SA.PROCESSSEGID = '5514401'
              AND    SA.INSPITEMID = '0234')             	    	
	</select>
	
 <!-- Durable 조회-->
    <select id="selectDurableListPop" parameterType="map" resultType="hashmap">
    			-- selectDurableList
				SELECT 
					   OS.RESOURCEID        	AS TOOLCODE       /* 치공구ID */
				      ,DI.DICTIONARYNAME    	AS TOOLNAME       /* 치공구명 */
				      ,OS.RESOURCEIDVERSION 	AS TOOLVERSION    /* 치공구버전 */
				      ,DD.FILMUSELAYER1		          	              /*  CS 사용층 */
				      ,DD.FILMUSELAYER2 		           	          /*  SS 사용층 */
				      ,OS.DESCRIPTION                   	      /* 비고  */
				      ,OS.RESOURCETYPE			AS DURABLETYPE
				      ,BR.RESOURCETYPE
				      ,BR.EQUIPMENTID
				      ,BR.RESOURCECLASSID
				      ,BR."sequence"						AS SEQUENCE
				      ,CU.USER_NM 				AS CREATOR
				      ,BR.CREATEDTIME
				      ,MU.USER_NM 				AS MODIFIER
				      ,BR.MODIFIEDTIME
				      ,OS.OPERATIONID
				      ,DD.TOOLTYPE
				      ,DD.TOOLDETAILTYPE
				      ,DD.HITCOUNT
				      ,DD.SUMMARY
				      ,OS.WRAPTYPE
				      ,DD.DURABLECLASSID              /* TOOL구분 */
				      ,PG.PROCESSSEGMENTCLASSID
				      ,DD.PRODUCTDEFID				/* 품목 코드 */
                      ,DD.PRODUCTDEFVERSION			/* 품목 버전 */
                      ,IM.ITEMNAME                    AS PRODUCTDEFNAME		/* 품목 명 */
                      ,OS.PLANTID
				FROM BAS_OPERATIONRESOURCE 			  OS
				INNER JOIN BAS_OPERATION			  OP	ON OP.OPERATIONID			= OS.OPERATIONID
				INNER JOIN TOM_DURABLEDEFINITION  	  DD 	ON DD.ENTERPRISEID  		= OS.ENTERPRISEID
				              							 	AND DD.DURABLEDEFID  		= OS.RESOURCEID
				   								            AND DD.DURABLEDEFVERSION  	= OS.RESOURCEIDVERSION							            
				INNER JOIN BAS_BILLOFRESOURCE 	  	  BR	ON BR.RESOURCEID			= DD.DURABLEDEFID
															AND BR.RESOURCEVERSION		= DD.DURABLEDEFVERSION
															<if test="ITEMID != null and ITEMID !='' ">															
															AND BR.PRODUCTDEFID       	= #{ITEMID}
															</if>
															<if test="ITEMVERSION != null and ITEMVERSION !='' ">
                                                         	AND BR.PRODUCTDEFVERSION 	= #{ITEMVERSION}
                                                         	</if> 
															AND BR.PRODUCTDEFID       	= BR.PROCESSDEFID
                                                         	AND BR.PRODUCTDEFVERSION 	= BR.PROCESSDEFVERSION
                                                         	AND BR.PROCESSSEGMENTID		= OP.PROCESSSEGMENTID
                INNER JOIN BAS_PROCESSSEGMENTEXT  	  PG    ON PG.PROCESSSEGMENTID      = OP.PROCESSSEGMENTID 
                                                            AND PG.ENTERPRISEID         = OP.ENTERPRISEID
				INNER JOIN BAS_ITEMMASTER              IM   ON  DD.PRODUCTDEFID         = IM.ITEMID
				                                            AND DD.PRODUCTDEFVERSION    = IM.ITEMVERSION
				                                            AND OS.ENTERPRISEID         = IM.ENTERPRISEID                                         	
				LEFT JOIN CMD_DICTIONARY  		  	  DI 	ON  DI.DICTIONARYID  		= DD.DURABLEDEFNAME
				              								AND DI.LANGUAGETYPE  		= #{LANGUAGETYPE}
				LEFT OUTER JOIN CMD_USERS      		  CU 	ON CU.USER_ID  			    = BR.CREATOR
				LEFT OUTER JOIN CMD_USERS             MU  	ON MU.USER_ID      			= BR.MODIFIER  
				WHERE OS.RESOURCETYPE = 'Durable'
					AND OS.ENTERPRISEID 		= #{ENTERPRISEID}
				    AND OS.OPERATIONID			= #{OPERATIONID}
				ORDER BY BR."sequence" ASC
    </select>
    
 <select id="checkAOI" parameterType="map" resultType="hashmap">
    			-- checkAOI
<!-- 				SELECT *
				FROM   BAS_OPERATIONSPECVALUE  BOS
				WHERE  BOS.OPERATIONID IN (SELECT OPERATIONID
				                       FROM   BAS_OPERATION BO
				                       WHERE  BO.MAINPRODUCTID = #{PRODUCTDEFID}
				                         AND  BO.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION})
				AND  (BOS.AOIQCLAYER IS NOT NULL
				     OR BOS.AOIQCLAYER2 IS NOT NULL) -->
				     
SELECT MAX(INPUTCNT) AS INPUTCNT
      ,MAX(AOICNT) AS AOICNT
FROM   (SELECT COUNT(*) AS INPUTCNT
              ,NULL AS AOICNT
        FROM   BAS_OPERATIONSPECVALUE BOS
        WHERE  BOS.OPERATIONID IN
               (SELECT OPERATIONID
                FROM   BAS_OPERATION BO
                WHERE  BO.MAINPRODUCTID = #{PRODUCTDEFID}
                AND    BO.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION})
        AND    (BOS.AOIQCLAYER IS NOT NULL OR BOS.AOIQCLAYER2 IS NOT NULL)
        
        UNION ALL
        
        SELECT NULL AS INPUTCNT
              ,COUNT(*) AS AOICNT
        FROM   BAS_OPERATION BO
        INNER  JOIN BAS_PROCESSSEGMENT PG
        ON     BO.PROCESSSEGMENTID = PG.PROCESSSEGMENTID
        AND    PG.VALIDSTATE = 'Valid'
        AND    PG.PROCESSSEGMENTTYPE = 'AOIInspection'
        WHERE  BO.MAINPRODUCTID = #{PRODUCTDEFID}
        AND    BO.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}
        AND    BO.VALIDSTATE = 'Valid')

    </select>
    
	<update id="updateInvalidOperation" parameterType="map">
 	 /* smh.bas.dao.BAS02100Dao.updateInvalidOperation */
    	          UPDATE BAS_PROCESSPATH 
    	       		   SET PATHSEQUENCE  = NULL
							,MODIFIER = #{MODIFIER}     
					        ,MODIFIEDTIME = SYSDATE     
					        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
					        ,LASTTXNID = #{LASTTXNID}     
					        ,LASTTXNUSER = #{MODIFIER}     
					        ,LASTTXNTIME = SYSDATE   
					        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}
   				  WHERE 	ENTERPRISEID		= #{SESSION_ENTERPRISEID}
					 AND	PROCESSDEFID 				= #{ITEMID}
					 AND PROCESSDEFVERSION 		= #{ITEMVERSION}
					 AND VALIDSTATE	= 'Invalid'
    </update>
    
<select id="checkWeek" parameterType="map" resultType="hashmap">
    			-- checkWeek
        SELECT SUM(CASE WHEN PP.ISWEEKMNG IS NULL THEN 
                   0
               ELSE
                  1 
               END )    AS INPUTCNT               
              ,COUNT(*) AS WEEKCNT
        FROM   BAS_OPERATION BO
        INNER JOIN BAS_PROCESSPATH               PP  ON  BO.MAINPRODUCTID        = PP.PROCESSDEFID
                                                                  AND BO.MAINPRODUCTVERSION   = PP.PROCESSDEFVERSION
                                                                  AND BO.PROCESSSEGMENTID     = PP.PROCESSSEGMENTID
                                                                  AND PP.VALIDSTATE = BO.VALIDSTATE
        INNER  JOIN BAS_PROCESSSEGMENT PG    ON     BO.PROCESSSEGMENTID = PG.PROCESSSEGMENTID
                                             AND    PG.VALIDSTATE = 'Valid'
                                             AND    PG.PROCESSSEGMENTTYPE = 'MKPrint'
        WHERE  BO.MAINPRODUCTID =  #{PRODUCTDEFID}
        AND    BO.MAINPRODUCTVERSION = #{PRODUCTDEFVERSION}
        AND    BO.VALIDSTATE = 'Valid'        
    </select>
    
</mapper>
