<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.bas.dao.BAS02000Dao">
	<!-- 제품정보 조회-->
    <select id="selectProductInfo" parameterType="map" resultType="hashmap">
    /* smh.bas.dao.BAS02000Dao.selectProductInfo */
       SELECT IM.ITEMID -- 제품코드
          ,IM.ITEMNAME -- 제품명
          ,PIS.CUSTOMERID || ' / ' || PIS.CUSTOMERNAME AS CUSTOMERNAME -- 고객명
          ,PIS.CUSTOMERID || ' / ' || PIS.CUSTOMERNAME AS CUSTOMER -- 고객명
          ,IM.SALEORDERCATEGORY -- 판매범주
          ,PIS.CUSTOMERITEMID -- 고객 아이템 품목
          ,PIS.CUSTOMERITEMVERSION -- 고객 아이템 버전
          ,NVL(D1.DICTIONARYNAME, PIS.PRODUCTTYPE) AS PRODUCTTYPE -- 제품타입
          ,IM.SALEORDERCATEGORY -- 판매범주
          ,IM.ITEMVERSION -- 내부 REV
          ,PIS.PRODUCTRATING -- 제품 등급
          ,PIS.CUSTOMERITEMVERSION AS CUSTOMERREV -- 고객 REV
          ,PIS.ENDUSER -- END USER
          ,PIS.PROJECTNAME -- 프로젝트명
          ,PIS.JOBTYPE -- 작업구분
          ,PIS.APN AS INPUTAPN -- APN
          ,PIS.PRODUCTIONTYPE -- 생산구분
          ,PIS.INPUTTYPE -- 투입유형
          ,TO_CHAR(PIS.DELIVERYDATE, 'YYYY-MM-DD') AS DELIVERYDATE -- 납기일자
          ,PIS.GITYPE AS OUTBOUNDFORMAT -- 출고형태
          ,PIS.SPECIFICATIONMAN AS SPECPERSON -- 사양담당자
          ,PIS.SALESMAN AS SALESOWNER -- 영업담당자
          ,PIS.CAMMAN AS CAMOWNER -- CAM담당자
          ,TO_CHAR(PIS.CREATEDTIME, 'YYYY-MM-DD') AS REGISTRATIONDATE -- 등록일자
          ,TO_CHAR(PIS.INVALIDDATE, 'YYYY-MM-DD') AS INVALIDDATE -- 무효화일자
          ,NVL(U.USERNAME, PIS.SPECIFICATIONMAN) AS SPECPERSONNAME -- 사양담당자명
          ,NVL(U2.USERNAME, PIS.SALESMAN) AS SALESOWNERNAME -- 영업담당자명
          ,NVL(U3.USERNAME, PIS.CAMMAN) AS CAMOWNERNAME -- CAM담당자명
          ,NVL(CF.FACTORYNAME, PIS.FACTORYID) AS MAINFACTORY
          ,IM.UOMDEFID AS UOM
          ,PIS.ITEMACCOUNT
          ,PIS.ITEMKIND AS ITEMCLASS
          ,PIS.QRDIVISION AS QRBUSINESSINFO
          ,PIS.QRSUBDIVISION AS QRBUSINESSSUB
          ,PIS.QRPRODUCTIONTYPE AS QRPRODUCTIONTYPE
          ,PIS.QRMATERIALVERSION AS QRMATERIALREV
          ,PIS.DESCRIPTION AS REMARK
          ,PIS.CUSTOMERITEMNAME AS CUSTOMERMODELNAME -- 고객 아이템 명     
           -- 제품 사양
          ,PIS.LAYER -- LAYER
          ,PIS.PNLSIZEXAXIS -- PNLSIZE_X
          ,PIS.PNLSIZEYAXIS -- PNLSIZE_Y
          ,PIS.ARYSIZEXAXIS -- ARRAYSIZE_X
          ,PIS.ARYSIZEYAXIS -- ARRAYSIZE_Y
          ,PIS.PCSSIZEXAXIS -- PCSSIZE_X
          ,PIS.PCSSIZEYAXIS -- PCSSIZE_Y
          ,PIS.XOUT -- XOUT PCS
          ,PIS.RTRSHT -- RTR/SHEET
          ,PIS.PCSPNL -- PCS/PNL
          ,PIS.PCSARY -- PCS/ARRAY
          ,PIS.PNLMM -- PNL/MM
          ,PIS.PCSMM -- PCS/MM
          ,PIS.ISWEEKMNG -- 주차관리
          ,PIS.MINCL -- 최소 C/L 쏠림
          ,PIS.MINPSR -- 최소 PSR 쏠림
          ,PIS.INPUTSCALE1 -- 투입 SCALE X
          ,PIS.INPUTSCALE2 -- 투입 SCALE Y
          ,PIS.INPUTSIZEXAXIS -- 투입 SIZE X축
          ,PIS.ELONGATION -- 연신율
          ,PIS.OXIDE -- OXIDE
          ,PIS.SEPARATINGPORTION -- 분리부
          ,PIS.UL_MARK              AS ULMARK -- UL MARK
          ,PIS.ASSY -- ASSY
          ,PIS.IMPEDANCE -- 임피던스
          ,PIS.IMPEDANCESPEC1 -- SPEC 1
          ,PIS.IMPEDANCESPEC2 -- SPEC 2
          ,PIS.IMPEDANCESPEC3 -- SPEC 3
          ,PIS.IMPEDANCETYPE1 -- 구분 1
          ,PIS.IMPEDANCETYPE2 -- 구분 2
          ,PIS.IMPEDANCETYPE3 -- 구분 3
          ,PIS.IMPEDANCEAPPLYLAYER1
          ,PIS.IMPEDANCEAPPLYLAYER2 -- 적용층 2
          ,PIS.IMPEDANCEAPPLYLAYER3 -- 적용층 3
          ,PIS.FLATNESS11 -- 평탄도1
          ,PIS.FLATNESS12 -- 평탄도1
          ,PIS.FLATNESS11UM         AS FLATNESS11UM -- 평탄도1
          ,PIS.FLATNESS12UM         AS FLATNESS12UM -- 평탄도1          
          ,PIS.FLATNESS21           AS FLATNESS21 -- 평탄도2
          ,PIS.FLATNESS22           AS FLATNESS22 -- 평탄도2
          ,PIS.FLATNESS21UM         AS FLATNESS21UM -- 평탄도2
          ,PIS.FLATNESS22UM         AS FLATNESS22UM -- 평탄도2            
           --기타정보
          ,PIS.INPUTSHRINKX        AS INPUTNUMAXIS1 --투입수축 X
          ,PIS.INPUTSHRINKY        AS INPUTNUMAXIS2 --투입수축 Y
          ,PIS.MEASUREMENT --치수측정
          ,PIS.ARRAYDIAGONAL       AS ARRAYDIAGONALLENGTH --ARRAY 대각선 길이
          ,PIS.RELIABILITY --신뢰성
          ,IM.LOTCONTROL --LOT관리대상
          ,PIS.HAZARDOUSSUBSTANCES --유해물질
          ,PIS.COPPERFOILUPLAYER --동박UP
          ,PIS.COPPERFOILDOWNLAYER --동박DOWN     
           --YoungPoong전용
          ,PIS.USELAYER AS USERLAYER --사용층
          ,PIS.PRODUCTDIMENSIONS --제품면적
          ,PIS.PSRTOLERANCE --PSR공차
          ,PIS.PSRXAXIS AS X
          ,PIS.PSRYAXIS AS Y
          ,M.ACCEPTFLAG AS RECEIVENEWDATA
          ,IM.MODELCODE AS BASICCODE
          ,IM.ENDTYPE
          ,PIS.SALESTYPE
          ,PIS.CONTRACTOR
          ,PIS.SHIPTO
          ,PIS.BILLTO
          ,NVL(CU1.CUSTOMERNAME, PIS.CONTRACTOR) AS CONTRACTORNAME
          ,NVL(CU2.CUSTOMERNAME, PIS.SHIPTO) AS SHIPTONAME
          ,NVL(CU3.CUSTOMERNAME, PIS.BILLTO) AS BILLTONAME
          ,PIS.CUMULATIVEYIELD AS ESTIMATEYIELD
          ,PIS.MFG_CATEGORY
          ,NVL(D2.DICTIONARYNAME, PIS.MFG_CATEGORY) AS MFG_CATEGORY_NAME
          ,PIS.JOBINPUTTYPE
    FROM   BAS_ITEMMASTER IM
        INNER JOIN BAS_PRODUCTITEMSPEC     PIS ON  IM.ENTERPRISEID = PIS.ENTERPRISEID
                                              AND IM.ITEMID = PIS.ITEMID
                                              AND IM.ITEMVERSION = PIS.ITEMVERSION
        LEFT JOIN BAS_PRODUCTITEMSPECCOMMENT  M  ON  IM.ITEMID = M.ITEMID
                              AND  IM.ITEMVERSION = M.ITEMVERSION
        LEFT JOIN BAS_CATEGORY BC  ON PIS.MFG_CATEGORY        = BC.CATEGORYID
                                   AND BC.CATEGORYSET = 'Production'
        LEFT JOIN CMD_USER_V          U  ON  PIS.SPECIFICATIONMAN = U.USERID
        LEFT JOIN CMD_USER_V          U2  ON  PIS.SALESMAN = U2.USERID
        LEFT JOIN CMD_USER_V          U3  ON  PIS.CAMMAN = U3.USERID   
        LEFT JOIN CMD_LOOKUP_VALUES          C  ON  C.LOOKUP_CODE =  IM.PRODUCTIONTYPE 
                            AND C.LOOKUP_TYPE = 'ProductionType'
        LEFT JOIN CMD_DICTIONARY        D  ON  C.DICTIONARYID  = D.DICTIONARYID    
                            AND D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}          
        LEFT JOIN CMD_LOOKUP_VALUES          C1  ON  C1.LOOKUP_CODE =  PIS.PRODUCTTYPE
                            AND C1.LOOKUP_TYPE = 'ProductType'
        LEFT JOIN CMD_DICTIONARY        D1  ON  C1.DICTIONARYID  = D1.DICTIONARYID    
                            AND D1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}           
        LEFT JOIN CMD_DICTIONARY        D2  ON  BC.DICTIONARYID  = D2.DICTIONARYID    
                            AND D2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}        
        LEFT JOIN BAS_CUSTOMER        CU1  ON  PIS.CONTRACTOR = CU1.CUSTOMERID
        LEFT JOIN BAS_CUSTOMER        CU2  ON  PIS.SHIPTO = CU2.CUSTOMERID
        LEFT JOIN BAS_CUSTOMER        CU3  ON  PIS.BILLTO = CU3.CUSTOMERID         
        LEFT JOIN BAS_FACTORY        CF  ON  PIS.FACTORYID = CF.FACTORYID
        WHERE   1 = 1
		<if test="ENTERPRISEID != null and ENTERPRISEID !='' "> 
	        AND IM.ENTERPRISEID = #{ENTERPRISEID}
	    </if>
        AND     IM.ITEMID = #{ITEMID}
        AND     IM.ITEMVERSION = #{ITEMVERSION}
        AND     IM.VALIDSTATE = 'Valid'                 
    </select>   
	<!-- 제품정보 조회-->
    <select id="SelectProductSpecDetail" parameterType="map" resultType="hashmap">
     SELECT ITEMID
		      ,ITEMVERSION
		      ,DETAILNAME
		      ,SPECDETAILFROM
		      ,SPECDETAILTO
		      ,SEQUENCE
		FROM   BAS_PRODUCTITEMSPECDETAIL
		WHERE  1 = 1
		AND    DETAILTYPE = 'Circuit'
		AND    ITEMID = #{ITEMID}
		AND    ITEMVERSION = #{ITEMVERSION}
		ORDER  BY SEQUENCE ASC
    </select>
    <select id="SelectProductThickSpec" parameterType="map" resultType="hashmap">
    SELECT ITEMID
		      ,ITEMVERSION
		      ,THICKNO
		      ,THICKPOSITION
		      ,THICKSPEC
		      ,THICKTHEORETICALVALUE
		      ,THICKEXPERIMENTALVALUE
		FROM   BAS_PRODUCTITEMTHICKSPEC
		WHERE  1 = 1
		AND    ITEMID = #{ITEMID}
		AND    ITEMVERSION = #{ITEMVERSION}
		ORDER  BY TO_NUMBER(THICKNO) ASC
    </select>    	
    <select id="SelectProductSpecComment" parameterType="map" resultType="hashmap">
			SELECT  ITEMID
				    ,   ITEMVERSION
				    ,   ACCEPTFLAG		AS RECEIVENEWDATA
				    ,   CHANGECOMMENT1	AS SPECCHANGE1
				    ,   CHANGECOMMENT2	AS SPECCHANGE2
				    ,   CHANGECOMMENT3	AS SPECCHANGE3
				    ,   CHANGECOMMENT4	AS SPECCHANGE4
				    ,   CHANGECOMMENT5	AS SPECCHANGE5
				    ,   CHANGENOTE1		AS SPECIALNOTE1
				    ,   CHANGENOTE2		AS SPECIALNOTE2
				    ,   CHANGENOTE3		AS SPECIALNOTE3
				    ,   CHANGENOTE4		AS SPECIALNOTE4
				    ,   CHANGENOTE5		AS SPECIALNOTE5
				FROM    BAS_PRODUCTITEMSPECCOMMENT
				WHERE 1=1
				AND    ITEMID = #{ITEMID}
				AND    ITEMVERSION = #{ITEMVERSION}
    </select>
    <select id="SelectProductMVHSpec" parameterType="map" resultType="hashmap">
    SELECT ITEMID
		      ,ITEMVERSION
		      ,SEQUENCE
		      ,TRUNC(CASE
		           WHEN LANDSIZE IS NOT NULL AND LASERSIZE IS NOT NULL THEN
		            (TO_NUMBER(LANDSIZE) - TO_NUMBER(LASERSIZE)) / 2
		       END
		       ,4) AS ANNULARING
		      ,TRUNC(CASE
		           WHEN FORMINGDEPTH IS NOT NULL AND LASERSIZE IS NOT NULL THEN
		            (TO_NUMBER(FORMINGDEPTH) * 100) / (TO_NUMBER(LASERSIZE) * 1000) 
		       END
		       ,1) AS ASPECTRATIO
		      ,MVHTYPE
		      ,LASERSIZE
		      ,LANDSIZE
		      ,CLFLAG
		      ,CONFORMALSIZE
		      ,FORMINGDEPTH
		FROM   BAS_PRODUCTITEMSPECMVH
		WHERE  1 = 1
		AND    ITEMID = #{ITEMID}
		AND    ITEMVERSION = #{ITEMVERSION}
		ORDER  BY TO_NUMBER(SEQUENCE) ASC
    </select>    	    	
 <select id="selectApplicationList" parameterType="map" resultType="hashmap">
   SELECT C.CATEGORYID      AS CODE
	       ,D1.DICTIONARYNAME AS NAME
	       ,C.DESCRIPTION     AS DESCRIPTION
	 FROM   BAS_CATEGORY C
	 LEFT   OUTER JOIN CMD_DICTIONARY D1  ON     C.DICTIONARYID = D1.DICTIONARYID
	                                      AND    D1.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
	 WHERE  1 = 1
	 AND    C.ENTERPRISEID = #{SESSION_ENTERPRISEID}
	 AND    C.PARENTCATEGORYID = 'Production'
	 AND    C.VALIDSTATE = 'Valid'
	 ORDER  BY C.CATEGORYID ASC

    </select>    	    	
    
	<select id="checkItemMaster" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02000Dao.checkItemMaster */  
   SELECT IM.ITEMID
   FROM   BAS_ITEMMASTER IM
   WHERE IM.ITEMID = #{ITEMID}
      AND IM.ITEMVERSION = #{ITEMVERSION}
      AND IM.ENTERPRISEID = #{SESSION_ENTERPRISEID}
      AND ROWNUM = 1
    </select>
    
    <update id="getUpdateItemMasterData" parameterType="map" >
	     /* smh.bas.dao.BAS02000Dao.getUpdateItemMasterData */  
	    UPDATE  BAS_ITEMMASTER IM SET    
	      			IM.LOTCONTROL = 'Y'
	              	,IM.MODIFIER = #{MODIFIER}     
			        ,IM.MODIFIEDTIME = SYSDATE     
			        ,IM.LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
			        ,IM.LASTTXNID = #{LASTTXNID}     
			        ,IM.LASTTXNUSER = #{MODIFIER}     
			        ,IM.LASTTXNTIME = SYSDATE   
			        ,IM.LASTTXNCOMMENT = #{LASTTXNCOMMENT}
		   WHERE IM.ITEMID = #{ITEMID}
		      AND IM.ITEMVERSION = #{ITEMVERSION}
		      AND IM.ENTERPRISEID = #{SESSION_ENTERPRISEID}	    
    </update>
    
   <select id="checkProductItemSpec" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02000Dao.checkProductItemSpec */  
   SELECT IM.ITEMID
   FROM   BAS_PRODUCTITEMSPEC IM
   WHERE IM.ITEMID = #{ITEMID}
      AND IM.ITEMVERSION = #{ITEMVERSION}
      AND IM.ENTERPRISEID = #{SESSION_ENTERPRISEID}
      AND ROWNUM = 1
    </select>

   <select id="checkProductDefinition" parameterType="map" resultType="hashmap">
	/* smh.bas.dao.BAS02000Dao.checkProductDefinition */  
   SELECT IM.PRODUCTDEFID
   FROM   BAS_PRODUCTDEFINITION IM
   WHERE IM.PRODUCTDEFID = #{ITEMID}
      AND IM.PRODUCTDEFVERSION = #{ITEMVERSION}      
      AND ROWNUM = 1
    </select>    
    
    

  <update id="getUpdateProductItemSpecData" parameterType="map">
 	 /* smh.bas.dao.BAS02000Dao.getUpdateProductItemSpecData */
    	DECLARE
    	BEGIN
    	MERGE INTO BAS_PRODUCTITEMSPEC BP
USING DUAL
ON (BP.ENTERPRISEID = #{SESSION_ENTERPRISEID} 
	AND BP.ITEMID = #{ITEMID} 
	AND BP.ITEMVERSION = #{ITEMVERSION})
WHEN MATCHED THEN
    UPDATE
    SET   CUSTOMERITEMVERSION  = #{CUSTOMERITEMVERSION}
          ,ENDUSER              = #{ENDUSER}
          ,PROJECTNAME          = #{PROJECTNAME}
          ,DELIVERYDATE         = TO_DATE(#{DELIVERYDATE}, 'YYYY-MM-DD')
          ,GITYPE               = #{GITYPE}
          ,SPECIFICATIONMAN     = #{SPECIFICATIONMAN}
          ,SALESMAN             = #{SALESMAN}
          ,CAMMAN               = #{CAMMAN}
          ,INVALIDDATE          = TO_DATE(#{INVALIDDATE}, 'YYYY-MM-DD')
          ,LAYER                = #{LAYER}
          ,PNLSIZEXAXIS         = #{PNLSIZEXAXIS}
          ,PNLSIZEYAXIS         = #{PNLSIZEYAXIS}
          ,ARYSIZEXAXIS         = #{ARYSIZEXAXIS}
          ,ARYSIZEYAXIS         = #{ARYSIZEYAXIS}
          ,PCSSIZEXAXIS         = #{PCSSIZEXAXIS}
          ,PCSSIZEYAXIS         = #{PCSSIZEYAXIS}
          ,XOUT                 = #{XOUT}
          ,PCSPNL               = #{PCSPNL}
          ,PCSARY               = #{PCSARY}
          ,PNLMM                = #{PNLMM}
          ,PCSMM                = #{PCSMM}
          ,ISWEEKMNG            = #{ISWEEKMNG}
          ,MINCL                = #{MINCL}
          ,MINPSR               = #{MINPSR}
          ,INPUTSCALE1          = #{INPUTSCALE1}
          ,INPUTSCALE2          = #{INPUTSCALE2}
          ,INPUTSIZEXAXIS       = #{INPUTSIZEXAXIS}
          ,ELONGATION           = #{ELONGATION}
          ,OXIDE                = #{OXIDE}
          ,SEPARATINGPORTION    = #{SEPARATINGPORTION}
          ,UL_MARK              = #{UL_MARK}
          ,ASSY                 = #{ASSY}
          ,IMPEDANCE            = #{IMPEDANCE}
          ,IMPEDANCESPEC1       = #{IMPEDANCESPEC1}
          ,IMPEDANCESPEC2       = #{IMPEDANCESPEC2}
          ,IMPEDANCESPEC3       = #{IMPEDANCESPEC3}
          ,IMPEDANCETYPE1       = #{IMPEDANCETYPE1}
          ,IMPEDANCETYPE2       = #{IMPEDANCETYPE2}
          ,IMPEDANCETYPE3       = #{IMPEDANCETYPE3}
          ,IMPEDANCEAPPLYLAYER1 = #{IMPEDANCEAPPLYLAYER1}
          ,IMPEDANCEAPPLYLAYER2 = #{IMPEDANCEAPPLYLAYER2}
          ,IMPEDANCEAPPLYLAYER3 = #{IMPEDANCEAPPLYLAYER3}
          ,FLATNESS11           = #{FLATNESS11}
          ,FLATNESS12           = #{FLATNESS12}
          ,FLATNESS11UM         = #{FLATNESS11UM}
          ,FLATNESS21           = #{FLATNESS21}
          ,FLATNESS22           = #{FLATNESS22}
          ,FLATNESS21UM         = #{FLATNESS21UM}
          ,MEASUREMENT          = #{MEASUREMENT}
          ,RELIABILITY          = #{RELIABILITY}
          ,HAZARDOUSSUBSTANCES  = #{HAZARDOUSSUBSTANCES}
          ,INPUTSHRINKX         = #{INPUTSHRINKX}
          ,INPUTSHRINKY         = #{INPUTSHRINKY}
          ,ARRAYDIAGONAL        = #{ARRAYDIAGONAL}
          ,COPPERFOILUPLAYER    = #{COPPERFOILUPLAYER}
          ,COPPERFOILDOWNLAYER  = #{COPPERFOILDOWNLAYER}
          ,MFG_CATEGORY	= #{MFG_CATEGORY}
          ,MODIFIER             = #{MODIFIER}
          ,MODIFIEDTIME         = SYSDATE
          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
          ,LASTTXNID            = #{LASTTXNID}
          ,LASTTXNUSER          = #{MODIFIER}
          ,LASTTXNTIME          = SYSDATE
          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
WHEN NOT MATCHED THEN
    INSERT
        (  
          ENTERPRISEID 
		  ,PLANTID   
		  ,ITEMID 
		  ,ITEMVERSION
          ,CUSTOMERITEMVERSION  
          ,ENDUSER              
          ,PROJECTNAME          
          ,DELIVERYDATE         
          ,GITYPE               
          ,SPECIFICATIONMAN     
          ,SALESMAN             
          ,CAMMAN               
          ,INVALIDDATE          
          ,LAYER                
          ,PNLSIZEXAXIS         
          ,PNLSIZEYAXIS         
          ,ARYSIZEXAXIS         
          ,ARYSIZEYAXIS         
          ,PCSSIZEXAXIS         
          ,PCSSIZEYAXIS         
          ,XOUT                 
          ,PCSPNL               
          ,PCSARY               
          ,PNLMM                
          ,PCSMM                
          ,ISWEEKMNG            
          ,MINCL                
          ,MINPSR               
          ,INPUTSCALE1          
          ,INPUTSCALE2          
          ,INPUTSIZEXAXIS       
          ,ELONGATION           
          ,OXIDE                
          ,SEPARATINGPORTION    
          ,UL_MARK              
          ,ASSY                 
          ,IMPEDANCE            
          ,IMPEDANCESPEC1       
          ,IMPEDANCESPEC2       
          ,IMPEDANCESPEC3       
          ,IMPEDANCETYPE1       
          ,IMPEDANCETYPE2       
          ,IMPEDANCETYPE3       
          ,IMPEDANCEAPPLYLAYER1 
          ,IMPEDANCEAPPLYLAYER2 
          ,IMPEDANCEAPPLYLAYER3 
          ,FLATNESS11           
          ,FLATNESS12           
          ,FLATNESS11UM         
          ,FLATNESS21           
          ,FLATNESS22           
          ,FLATNESS21UM         
          ,MEASUREMENT          
          ,RELIABILITY          
          ,HAZARDOUSSUBSTANCES  
          ,INPUTSHRINKX         
          ,INPUTSHRINKY         
          ,ARRAYDIAGONAL        
          ,COPPERFOILUPLAYER    
          ,COPPERFOILDOWNLAYER  
          ,MFG_CATEGORY
	        ,CREATOR
	        ,CREATEDTIME
	        ,MODIFIER
	        ,MODIFIEDTIME
	        ,LASTTXNHISTKEY
	        ,LASTTXNID
	        ,LASTTXNUSER
	        ,LASTTXNTIME
	        ,LASTTXNCOMMENT)
    VALUES
        (#{SESSION_ENTERPRISEID}
        ,#{SESSION_SITETYPE}
        ,#{ITEMID}
        ,#{ITEMVERSION}
        ,#{CUSTOMERITEMVERSION}                              
        ,#{ENDUSER}                                          
        ,#{PROJECTNAME}                                      
        ,TO_DATE(#{DELIVERYDATE}, 'YYYY-MM-DD')              
        ,#{GITYPE}                                           
        ,#{SPECIFICATIONMAN}                                 
        ,#{SALESMAN}                                         
        ,#{CAMMAN}                                           
        ,TO_DATE(#{INVALIDDATE}, 'YYYY-MM-DD')               
        ,#{LAYER}                                            
        ,#{PNLSIZEXAXIS}                                     
        ,#{PNLSIZEYAXIS}                                     
        ,#{ARYSIZEXAXIS}                                     
        ,#{ARYSIZEYAXIS}                                     
        ,#{PCSSIZEXAXIS}                                     
        ,#{PCSSIZEYAXIS}                                     
        ,#{XOUT}                                             
        ,#{PCSPNL}                                           
        ,#{PCSARY}                                           
        ,#{PNLMM}                                            
        ,#{PCSMM}                                            
        ,#{ISWEEKMNG}                                        
        ,#{MINCL}                                            
        ,#{MINPSR}                                           
        ,#{INPUTSCALE1}                                      
        ,#{INPUTSCALE2}                                      
        ,#{INPUTSIZEXAXIS}                                   
        ,#{ELONGATION}                                       
        ,#{OXIDE}                                            
        ,#{SEPARATINGPORTION}                                
        ,#{UL_MARK}                                          
        ,#{ASSY}                                             
        ,#{IMPEDANCE}                                        
        ,#{IMPEDANCESPEC1}                                   
        ,#{IMPEDANCESPEC2}                                   
        ,#{IMPEDANCESPEC3}                                   
        ,#{IMPEDANCETYPE1}                                   
        ,#{IMPEDANCETYPE2}                                   
        ,#{IMPEDANCETYPE3}                                   
        ,#{IMPEDANCEAPPLYLAYER1}                             
        ,#{IMPEDANCEAPPLYLAYER2}                             
        ,#{IMPEDANCEAPPLYLAYER3}                             
        ,#{FLATNESS11}                                       
        ,#{FLATNESS12}                                       
        ,#{FLATNESS11UM}                                     
        ,#{FLATNESS21}                                       
        ,#{FLATNESS22}                                       
        ,#{FLATNESS21UM}                                     
        ,#{MEASUREMENT}                                      
        ,#{RELIABILITY}                                      
        ,#{HAZARDOUSSUBSTANCES}                              
        ,#{INPUTSHRINKX}                                     
        ,#{INPUTSHRINKY}                                     
        ,#{ARRAYDIAGONAL}                                    
        ,#{COPPERFOILUPLAYER}                                
        ,#{COPPERFOILDOWNLAYER}        
        ,#{MFG_CATEGORY}
        ,#{CREATOR}
        ,SYSDATE
        ,#{MODIFIER}
        ,SYSDATE
        ,#{LASTTXNHISTKEY}
        ,#{LASTTXNID}
        ,#{CREATOR}
        ,SYSDATE
        ,#{LASTTXNCOMMENT});
        
        UPDATE BAS_GOVERNANCE SET
        		   CUSTOMERREV = #{CUSTOMERITEMVERSION}
        		   ,SPECPERSON		= #{SPECIFICATIONMAN}
        		   ,SALESPERSON	= #{SALESMAN}
        		   ,CAMPERSON		= #{CAMMAN}
         WHERE PRODUCTDEFID = #{ITEMID}
         	AND PRODUCTDEFVERSION	= #{ITEMVERSION}
            AND GOVERNANCETYPE ='NewRequest'
            AND WORKCLASS != 'Same';        
        
        END;

    </update>    
    
<update id="getUpdateProductDefinitionData" parameterType="map">
 	 /* smh.bas.dao.BAS02000Dao.getUpdateProductDefinitionData */
    	UPDATE BAS_PRODUCTDEFINITION  SET
		           LAYER                = #{LAYER}
		          ,ISWEEKMNG            = #{ISWEEKMNG}
		          ,PNLSIZEXAXIS         = #{PNLSIZEXAXIS}
		          ,PNLSIZEYAXIS         = #{PNLSIZEYAXIS}
		          ,ARYSIZEXAXIS         = #{ARYSIZEXAXIS}
		          ,ARYSIZEYAXIS         = #{ARYSIZEYAXIS}
		          ,PCSSIZEXAXIS         = #{PCSSIZEXAXIS}
		          ,PCSSIZEYAXIS         = #{PCSSIZEYAXIS}
		          ,XOUT                 = #{XOUT}
		          ,PCSPNL               = #{PCSPNL}
		          ,PCSARY               = #{PCSARY}
		          ,PNLMM                = #{PNLMM}
		          ,PCSMM                = #{PCSMM}
		          ,MODIFIER             = #{MODIFIER}
		          ,MODIFIEDTIME         = SYSDATE
		          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
		          ,LASTTXNID            = #{LASTTXNID}
		          ,LASTTXNUSER          = #{MODIFIER}
		          ,LASTTXNTIME          = SYSDATE
		          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
 		WHERE  PRODUCTDEFID = #{ITEMID} 
			AND PRODUCTDEFVERSION = #{ITEMVERSION}
    </update>

<delete id="checkDeleteProductItemSpecDetail" parameterType="map">
 	 /* smh.bas.dao.BAS02000Dao.checkDeleteProductItemSpecDetail */
    	DELETE  
    	 FROM  BAS_PRODUCTITEMSPECDETAIL  
    	WHERE ITEMID = #{ITEMID} 
		   AND ITEMVERSION = #{ITEMVERSION}
		   AND DETAILTYPE = 'Circuit'
		   AND ENTERPRISEID	= #{SESSION_ENTERPRISEID}
    </delete>

<update id="getUpdateProductItemSpecDetailData" parameterType="map">
/* smh.bas.dao.BAS02000Dao.getUpdateProductItemSpecDetailData */
		 MERGE INTO BAS_PRODUCTITEMSPECDETAIL BP
		USING DUAL
		ON (BP.ENTERPRISEID = #{SESSION_ENTERPRISEID} 
			AND BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION}
			AND BP.DETAILTYPE ='Circuit'
			AND BP.SEQUENCE = TO_NUMBER(#{SEQUENCE}))
		WHEN MATCHED THEN
		    UPDATE
		    SET   DETAILNAME  = #{DETAILNAME}
		          ,SPECDETAILFROM              = #{SPECDETAILFROM}
		          ,SPECDETAILTO          = #{SPECDETAILTO}
		          ,VALIDSTATE         = 'Valid'
		          ,MODIFIER             = #{MODIFIER}
		          ,MODIFIEDTIME         = SYSDATE
		          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
		          ,LASTTXNID            = #{LASTTXNID}
		          ,LASTTXNUSER          = #{MODIFIER}
		          ,LASTTXNTIME          = SYSDATE
		          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (  
		          ENTERPRISEID 
				  ,PLANTID   
				  ,ITEMID 
				  ,ITEMVERSION
				  ,SEQUENCE
				  ,DETAILTYPE
		          ,DETAILNAME  
		          ,SPECDETAILFROM              
		          ,SPECDETAILTO       
		          ,VALIDSTATE
			        ,CREATOR
			        ,CREATEDTIME
			        ,MODIFIER
			        ,MODIFIEDTIME
			        ,LASTTXNHISTKEY
			        ,LASTTXNID
			        ,LASTTXNUSER
			        ,LASTTXNTIME
			        ,LASTTXNCOMMENT)
		    VALUES
		        (#{SESSION_ENTERPRISEID}
		        ,#{SESSION_SITETYPE}
		        ,#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{SEQUENCE}                              
		        ,'Circuit'                                          
		        ,#{DETAILNAME}                                      
		        ,#{SPECDETAILFROM}                                           
		        ,#{SPECDETAILTO}                                 
		        ,'Valid'                                         
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT})
		</update>        

<delete id="checkDeleteMVHSpecDetail" parameterType="map">
 	 /* smh.bas.dao.BAS02000Dao.checkDeleteMVHSpecDetail */
    	DELETE  
    	 FROM  BAS_PRODUCTITEMSPECMVH  
    	WHERE ITEMID = #{ITEMID} 
		   AND ITEMVERSION = #{ITEMVERSION}		   
    </delete>

<update id="getUpdateMVHSpecDetailData" parameterType="map">
/* smh.bas.dao.BAS02000Dao.getUpdateMVHSpecDetailData */
		 MERGE INTO BAS_PRODUCTITEMSPECMVH BP
		USING DUAL
		ON (	   BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION}			
			AND BP.SEQUENCE = #{SEQUENCE})
		WHEN MATCHED THEN
		    UPDATE
		    SET   MVHTYPE  = #{MVHTYPE}
		    	  ,LASERSIZE  = #{LASERSIZE}
		          ,LANDSIZE              = #{LANDSIZE}
		          ,CONFORMALSIZE          = #{CONFORMALSIZE}
		          ,FORMINGDEPTH         = #{FORMINGDEPTH}
		          ,CLFLAG	= #{CLFLAG}		          
		          ,MODIFIER             = #{MODIFIER}
		          ,MODIFIEDTIME         = SYSDATE
		          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
		          ,LASTTXNID            = #{LASTTXNID}
		          ,LASTTXNUSER          = #{MODIFIER}
		          ,LASTTXNTIME          = SYSDATE
		          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (  
		          ITEMID 
				  ,ITEMVERSION
				  ,SEQUENCE
				  ,MVHTYPE
		          ,LASERSIZE  
		          ,LANDSIZE              
		          ,CLFLAG
		          ,CONFORMALSIZE
		          ,FORMINGDEPTH       
		          ,VALIDSTATE
			        ,CREATOR
			        ,CREATEDTIME
			        ,MODIFIER
			        ,MODIFIEDTIME
			        ,LASTTXNHISTKEY
			        ,LASTTXNID
			        ,LASTTXNUSER
			        ,LASTTXNTIME
			        ,LASTTXNCOMMENT)
		    VALUES
		        (#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{SEQUENCE}                              
		        ,#{MVHTYPE}                                          
		        ,#{LASERSIZE}                                      
		        ,#{LANDSIZE}                                           
		        ,#{CLFLAG}               
		        ,#{CONFORMALSIZE}
		        ,#{FORMINGDEPTH}                  
		        ,'Valid'                                         
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT})
		</update>     
		
		<update id="getUpsertProductItemThickSpecData" parameterType="map">
		/* smh.bas.dao.BAS02000Dao.getUpsertProductItemThickSpecData */
		 MERGE INTO BAS_PRODUCTITEMTHICKSPEC BP
		USING DUAL
		ON (	   BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION}			
			AND BP.THICKNO = #{THICKNO})
		WHEN MATCHED THEN
		    UPDATE
		    SET   THICKPOSITION  = #{THICKPOSITION}
		    	  ,THICKSPEC  = #{THICKSPEC}
		          ,THICKTHEORETICALVALUE          = #{THICKTHEORETICALVALUE}
		          ,THICKEXPERIMENTALVALUE         = #{THICKEXPERIMENTALVALUE}
		          ,MODIFIER             = #{MODIFIER}
		          ,MODIFIEDTIME         = SYSDATE
		          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
		          ,LASTTXNID            = #{LASTTXNID}
		          ,LASTTXNUSER          = #{MODIFIER}
		          ,LASTTXNTIME          = SYSDATE
		          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (  
		            ITEMID 
				    ,ITEMVERSION
				    ,THICKNO
				    ,THICKPOSITION
		            ,THICKSPEC  
		            ,THICKTHEORETICALVALUE              
		            ,THICKEXPERIMENTALVALUE
		            ,VALIDSTATE
			        ,CREATOR
			        ,CREATEDTIME
			        ,MODIFIER
			        ,MODIFIEDTIME
			        ,LASTTXNHISTKEY
			        ,LASTTXNID
			        ,LASTTXNUSER
			        ,LASTTXNTIME
			        ,LASTTXNCOMMENT)
		    VALUES
		        (#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{THICKNO}                              
		        ,#{THICKPOSITION}                                          
		        ,#{THICKSPEC}                                      
		        ,#{THICKTHEORETICALVALUE}                                           
		        ,#{THICKTHEORETICALVALUE}               
		        ,'Valid'                                         
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT})
		</update>      


	<update id="getUpsertProductItemSpecCommentData" parameterType="map">
		/* smh.bas.dao.BAS02000Dao.getUpsertProductItemSpecCommentData */
		 MERGE INTO BAS_PRODUCTITEMSPECCOMMENT BP
		USING DUAL
		ON (	   BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION})
		WHEN MATCHED THEN
		    UPDATE
		    SET   ACCEPTFLAG  = #{RECEIVENEWDATA}
		    	  ,CHANGECOMMENT1  = #{SPECCHANGE1}
		    	  ,CHANGECOMMENT2  = #{SPECCHANGE2}
		    	  ,CHANGECOMMENT3  = #{SPECCHANGE3}
		    	  ,CHANGECOMMENT4  = #{SPECCHANGE4}
		    	  ,CHANGECOMMENT5  = #{SPECCHANGE5}
		          ,CHANGENOTE1          = #{SPECIALNOTE1}
		          ,CHANGENOTE2          = #{SPECIALNOTE2}
		          ,CHANGENOTE3          = #{SPECIALNOTE3}
		          ,CHANGENOTE4          = #{SPECIALNOTE4}
		          ,CHANGENOTE5          = #{SPECIALNOTE5}
		          ,MODIFIER             = #{MODIFIER}
		          ,MODIFIEDTIME         = SYSDATE
		          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
		          ,LASTTXNID            = #{LASTTXNID}
		          ,LASTTXNUSER          = #{MODIFIER}
		          ,LASTTXNTIME          = SYSDATE
		          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (  
		            ITEMID 
				    ,ITEMVERSION
				    ,ACCEPTFLAG
		    	    ,CHANGECOMMENT1
		    	    ,CHANGECOMMENT2
		    	    ,CHANGECOMMENT3
		    	    ,CHANGECOMMENT4
		    	    ,CHANGECOMMENT5
		            ,CHANGENOTE1
		            ,CHANGENOTE2
		            ,CHANGENOTE3
		            ,CHANGENOTE4
		            ,CHANGENOTE5
		            ,VALIDSTATE
			        ,CREATOR
			        ,CREATEDTIME
			        ,MODIFIER
			        ,MODIFIEDTIME
			        ,LASTTXNHISTKEY
			        ,LASTTXNID
			        ,LASTTXNUSER
			        ,LASTTXNTIME
			        ,LASTTXNCOMMENT)
		    VALUES
		        (#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{RECEIVENEWDATA}                              
		        ,#{SPECCHANGE1}
		        ,#{SPECCHANGE2}
		        ,#{SPECCHANGE3}
		        ,#{SPECCHANGE4}
		        ,#{SPECCHANGE5}
		        ,#{SPECIALNOTE1}
		        ,#{SPECIALNOTE2}
		        ,#{SPECIALNOTE3}
		        ,#{SPECIALNOTE4}
		        ,#{SPECIALNOTE5}                                          
		        ,'Valid'                                         
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT})
		</update>
		
    <select id="SelectProductSpecDetail_Material" parameterType="map" resultType="hashmap">
    /* smh.bas.dao.BAS02000Dao.SelectProductSpecDetail_Material */
    	WITH BOMTREE(ROOT_ASSEMBLYITEMID,
				ROOT_ASSEMBLYITEMVERSION,
				ROOT_BOMID,
				PARENTS_ASSEMBLYITEMID,
				PARENTS_ASSEMBLYITEMVERSION,
				PARENTBOMID,
				PLANTID,
				ASSEMBLYITEMID,
				ASSEMBLYITEMVERSION,
				ASSEMBLYCALCQTY,
				ASSEMBLYITEMBOMID,
				ASSEMBLYQTY,
				BOMID,
				USERSEQUENCE,
				LVL,
				USERLAYER,
				INKTYPE,
				WORKMETHOD,
				MATERIALDETAILTYPE
				) AS
				 (SELECT *
				  FROM   (SELECT P.ASSEMBLYITEMID ROOT_ASSEMBLYITEMID
				                ,P.ASSEMBLYITEMVERSION ROOT_ASSEMBLYITEMVERSION
				                ,CASE
				                     WHEN A.ASSEMBLYBOMID IS NOT NULL THEN
				                      A.ASSEMBLYBOMID
				                     ELSE
				                      A.COMPONENTBOMID
				                 END ROOT_BOMID
				                ,'' PARENTS_ASSEMBLYITEMID
				                ,'' PARENTS_ASSEMBLYITEMVERSION
				                ,'0' PARENTBOMID
				                ,A.PLANTID PLANTID
				                ,P.ASSEMBLYITEMID ASSEMBLYITEMID
				                ,P.ASSEMBLYITEMVERSION ASSEMBLYITEMVERSION
				                ,CAST(1 AS FLOAT) ASSEMBLYCALCQTY
				                ,A.COMPONENTBOMID ASSEMBLYITEMBOMID
				                ,CAST(1 AS FLOAT) ASSEMBLYQTY
				                ,CASE
				                     WHEN A.ASSEMBLYBOMID IS NOT NULL THEN
				                      A.ASSEMBLYBOMID
				                     ELSE
				                      A.COMPONENTBOMID
				                 END BOMID
				                ,'00' AS USERSEQUENCE
				                ,1 AS LVL
				                ,A.USERLAYER
				                ,A.INKTYPE
				                ,A.WORKMETHOD
				                ,A.MATERIALDETAILTYPE
				          FROM   BAS_BOMCOMPONENT A
				          INNER  JOIN BAS_ASSEMBLYBILLOFMATERIAL P
				          ON     P.ASSEMBLYBOMID = A.ASSEMBLYBOMID
				          AND    P.ENTERPRISEID = A.ENTERPRISEID
				          LEFT   OUTER JOIN BAS_BOMCOMPONENT B
				          ON     P.ASSEMBLYBOMID = B.COMPONENTBOMID
				          AND    P.ENTERPRISEID = B.ENTERPRISEID
				          WHERE  P.ASSEMBLYITEMID = #{ITEMID}
				          AND    P.ASSEMBLYITEMVERSION = #{ITEMVERSION}
				          AND    B.COMPONENTBOMID IS NULL
				          AND    ROWNUM = 1) A
  
  UNION ALL
  
  SELECT BG.ROOT_ASSEMBLYITEMID
        ,BG.ASSEMBLYITEMVERSION
        ,BG.ROOT_BOMID
        ,P.ASSEMBLYITEMID PARENTS_ASSEMBLYITEMID
        ,P.ASSEMBLYITEMVERSION PARENTS_ASSEMBLYITEMVERSION
        ,P.ASSEMBLYBOMID PARENTBOMID
        ,A.PLANTID PLANTID
        ,A.COMPONENTITEMID ASSEMBLYITEMID
        ,A.COMPONENTITEMVERSION ASSEMBLYITEMVERSION
        ,BG.ASSEMBLYQTY * A.COMPONENTQTY AS ASSEMBLYCALCQTY
        ,A.COMPONENTBOMID ASSEMBLYITEMBOMID
        ,A.COMPONENTQTY ASSEMBLYQTY
        ,CASE
             WHEN C.ASSEMBLYBOMID IS NOT NULL THEN
              C.ASSEMBLYBOMID
             ELSE
              A.COMPONENTBOMID
         END BOMID
        ,O.USERSEQUENCE
        ,BG.LVL + 1 AS LVL
        ,A.USERLAYER
        ,A.INKTYPE
        ,A.WORKMETHOD
        ,A.MATERIALDETAILTYPE
  FROM   BAS_BOMCOMPONENT A
  INNER  JOIN BAS_ASSEMBLYBILLOFMATERIAL P
  ON     P.ASSEMBLYBOMID = A.ASSEMBLYBOMID
  INNER  JOIN BAS_OPERATION O
  ON     O.OPERATIONID = A.OPERATIONID
  INNER  JOIN BOMTREE BG
  ON     P.ASSEMBLYITEMID = BG.ASSEMBLYITEMID
  AND    P.ASSEMBLYITEMVERSION = BG.ASSEMBLYITEMVERSION
  LEFT   OUTER JOIN BAS_ASSEMBLYBILLOFMATERIAL C
  ON     C.ASSEMBLYITEMID = A.COMPONENTITEMID
  AND    C.ASSEMBLYITEMVERSION = A.COMPONENTITEMVERSION)
SELECT IMB.ITEMNAME AS BOTASSEMBLYITEMNAME
      ,IMB.CONSUMABLETYPE
      ,COALESCE(D.DICTIONARYNAME, BT.MATERIALDETAILTYPE) AS CONSUMABLETYPE2
      ,BT.MATERIALDETAILTYPE AS CONSUMABLETYPE
      ,'' AS WORKSURFACE
      ,IMB.SPEC AS SPEC
      ,PIS.PNLSIZEXAXIS
      ,PIS.PNLSIZEYAXIS
      ,CASE
           WHEN CONCAT(CONCAT(PIS.PNLSIZEXAXIS, ' * '), PIS.PNLSIZEYAXIS) = ' * ' THEN
            NULL
           ELSE
            CONCAT(CONCAT(PIS.PNLSIZEXAXIS, ' * '), PIS.PNLSIZEYAXIS)
       END AS PNLSIZE
      ,MIS.MAKER
      ,MIS.COLOR
      ,BT.ROOT_ASSEMBLYITEMID
      ,BT.ROOT_ASSEMBLYITEMVERSION
      ,BT.ROOT_BOMID
      ,BT.PARENTS_ASSEMBLYITEMID
      ,BT.PARENTS_ASSEMBLYITEMVERSION
      ,BT.PARENTBOMID
      ,BT.PLANTID
      ,BT.ASSEMBLYCALCQTY AS REQUIREMENTQTY
      ,BT.ASSEMBLYITEMID
      ,BT.ASSEMBLYITEMVERSION
      ,BT.ASSEMBLYITEMBOMID
      ,BT.ASSEMBLYQTY
      ,PIS.PCSPNL AS ARRAYPCS
      ,CASE
           WHEN COALESCE(PIS.PNLSIZEXAXIS, 0) = 0 OR
                COALESCE(PIS.PNLSIZEYAXIS, 0) = 0 THEN
            NULL
           ELSE
            TRUNC(TO_NUMBER((PIS.PCSPNL / (PIS.PNLSIZEXAXIS / 1000) /
                            (PIS.PNLSIZEYAXIS / 1000))), 0)
       END AS CALCULATEPCS
      ,BT.BOMID
      ,BT.USERSEQUENCE
      ,BT.LVL
      ,COALESCE(D4.DICTIONARYNAME, BT.USERLAYER) AS USERLAYER
      ,D2.DICTIONARYNAME AS INKTYPE
      ,D3.DICTIONARYNAME AS WORKMETHOD
      ,MATERIALDETAILTYPE
FROM   BOMTREE BT
LEFT   OUTER JOIN BAS_ITEMMASTER IMB ON     ASSEMBLYITEMID = IMB.ITEMID
                                     AND    ASSEMBLYITEMVERSION = IMB.ITEMVERSION
LEFT   OUTER JOIN BAS_PRODUCTITEMSPEC PIS   ON     PIS.ITEMID = ASSEMBLYITEMID
                                            AND    PIS.ITEMVERSION = ASSEMBLYITEMVERSION
LEFT   OUTER JOIN BAS_MATERIALITEMSPEC MIS  ON     MIS.ITEMID = ASSEMBLYITEMID
                                            AND    MIS.ITEMVERSION = ASSEMBLYITEMVERSION
LEFT   JOIN CMD_LOOKUP_VALUES C             ON     C.LOOKUP_CODE = BT.MATERIALDETAILTYPE
                                            AND    C.LOOKUP_TYPE = 'MaterialDetailType'
LEFT   JOIN CMD_DICTIONARY D                ON     D.DICTIONARYID = C.DICTIONARYID
                                            AND    D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
LEFT   JOIN CMD_LOOKUP_VALUES C2            ON     C2.LOOKUP_CODE = BT.INKTYPE
                                            AND    C2.LOOKUP_TYPE = 'OutsourcingSpecInkType'
LEFT   JOIN CMD_DICTIONARY D2               ON     D2.DICTIONARYID = C2.DICTIONARYID
                                            AND    D2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
LEFT   JOIN CMD_LOOKUP_VALUES C3            ON     C3.LOOKUP_CODE = BT.WORKMETHOD
                                            AND    C3.LOOKUP_TYPE = 'OutsourcingSpecWorkType'
LEFT   JOIN CMD_DICTIONARY D3               ON     D3.DICTIONARYID = C3.DICTIONARYID
                                            AND    D3.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
LEFT   JOIN CMD_LOOKUP_VALUES C4            ON     C4.LOOKUP_CODE = BT.USERLAYER
                                            AND    C4.LOOKUP_TYPE = 'UserLayer'
LEFT   JOIN CMD_DICTIONARY D4               ON     D4.DICTIONARYID = C4.DICTIONARYID
                                            AND    D4.LANGUAGETYPE = 'ko-KR'
WHERE  1 = 1
AND    BT.MATERIALDETAILTYPE NOT IN ('SHIELD', 'OTHER', 'GULE', 'GUSSETPLATE')
AND    BT.PARENTS_ASSEMBLYITEMID IS NOT NULL
ORDER  BY NVL(D4.DICTIONARYNAME, BT.USERLAYER)
    	
    </select>
    
 <select id="SelectProductSpecDetail_InkInfo" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.SelectProductSpecDetail_InkInfo */
    	SELECT ITEMID
			     ,ITEMVERSION
			     ,ENTERPRISEID
			     ,DETAILTYPE     AS INKTYPE
			     ,DETAILNAME
			     ,SPECDETAILFROM
			     ,SPECDETAILTO   AS COLOR
			     ,FROMORIGINAL   AS USERLAYER1
			     ,TOORIGINAL     AS USERLAYER2
			     ,SEQUENCE       AS SEQUENCE1
			     ,TO_CHAR(CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
		FROM  BAS_PRODUCTITEMSPECDETAIL
	   WHERE  1 = 1
		  AND  DETAILTYPE = 'InkSpecification'
		  AND  ITEMID = #{ITEMID}
		  AND  ITEMVERSION = #{ITEMVERSION}
		  AND  ENTERPRISEID = #{SESSION_ENTERPRISEID}
	   ORDER  BY SEQUENCE ASC    	
    </select>
    
 <select id="SelectProductSpecDetail_MaterialDetail" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.SelectProductSpecDetail_MaterialDetail */
    	WITH BOMTREE(ROOT_ASSEMBLYITEMID,
				ROOT_ASSEMBLYITEMVERSION,
				ROOT_BOMID,
				PARENTS_ASSEMBLYITEMID,
				PARENTS_ASSEMBLYITEMVERSION,
				PARENTBOMID,
				PLANTID,
				ASSEMBLYITEMID,
				ASSEMBLYITEMVERSION,
				ASSEMBLYCALCQTY,
				ASSEMBLYITEMBOMID,
				ASSEMBLYQTY,
				BOMID,
				USERSEQUENCE,
				LVL,
				USERLAYER,
				INKTYPE,
				WORKMETHOD,
				MATERIALDETAILTYPE
				) AS
				 (SELECT *
				  FROM   (SELECT P.ASSEMBLYITEMID ROOT_ASSEMBLYITEMID
				                ,P.ASSEMBLYITEMVERSION ROOT_ASSEMBLYITEMVERSION
				                ,CASE
				                     WHEN A.ASSEMBLYBOMID IS NOT NULL THEN
				                      A.ASSEMBLYBOMID
				                     ELSE
				                      A.COMPONENTBOMID
				                 END ROOT_BOMID
				                ,'' PARENTS_ASSEMBLYITEMID
				                ,'' PARENTS_ASSEMBLYITEMVERSION
				                ,'0' PARENTBOMID
				                ,A.PLANTID PLANTID
				                ,P.ASSEMBLYITEMID ASSEMBLYITEMID
				                ,P.ASSEMBLYITEMVERSION ASSEMBLYITEMVERSION
				                ,CAST(1 AS FLOAT) ASSEMBLYCALCQTY
				                ,A.COMPONENTBOMID ASSEMBLYITEMBOMID
				                ,CAST(1 AS FLOAT) ASSEMBLYQTY
				                ,CASE
				                     WHEN A.ASSEMBLYBOMID IS NOT NULL THEN
				                      A.ASSEMBLYBOMID
				                     ELSE
				                      A.COMPONENTBOMID
				                 END BOMID
				                ,'00' AS USERSEQUENCE
				                ,1 AS LVL
				                ,A.USERLAYER
				                ,A.INKTYPE
				                ,A.WORKMETHOD
				                ,A.MATERIALDETAILTYPE
				          FROM   BAS_BOMCOMPONENT A
				          INNER  JOIN BAS_ASSEMBLYBILLOFMATERIAL P
				          ON     P.ASSEMBLYBOMID = A.ASSEMBLYBOMID
				          AND    P.ENTERPRISEID = A.ENTERPRISEID
				          LEFT   OUTER JOIN BAS_BOMCOMPONENT B
				          ON     P.ASSEMBLYBOMID = B.COMPONENTBOMID
				          AND    P.ENTERPRISEID = B.ENTERPRISEID
				          WHERE  P.ASSEMBLYITEMID = #{ITEMID}
				          AND    P.ASSEMBLYITEMVERSION = #{ITEMVERSION}
				          AND    B.COMPONENTBOMID IS NULL
				          AND    ROWNUM = 1) A
  
  UNION ALL
  
  SELECT BG.ROOT_ASSEMBLYITEMID
        ,BG.ASSEMBLYITEMVERSION
        ,BG.ROOT_BOMID
        ,P.ASSEMBLYITEMID PARENTS_ASSEMBLYITEMID
        ,P.ASSEMBLYITEMVERSION PARENTS_ASSEMBLYITEMVERSION
        ,P.ASSEMBLYBOMID PARENTBOMID
        ,A.PLANTID PLANTID
        ,A.COMPONENTITEMID ASSEMBLYITEMID
        ,A.COMPONENTITEMVERSION ASSEMBLYITEMVERSION
        ,BG.ASSEMBLYQTY * A.COMPONENTQTY AS ASSEMBLYCALCQTY
        ,A.COMPONENTBOMID ASSEMBLYITEMBOMID
        ,A.COMPONENTQTY ASSEMBLYQTY
        ,CASE
             WHEN C.ASSEMBLYBOMID IS NOT NULL THEN
              C.ASSEMBLYBOMID
             ELSE
              A.COMPONENTBOMID
         END BOMID
        ,O.USERSEQUENCE
        ,BG.LVL + 1 AS LVL
        ,A.USERLAYER
        ,A.INKTYPE
        ,A.WORKMETHOD
        ,A.MATERIALDETAILTYPE
  FROM   BAS_BOMCOMPONENT A
  INNER  JOIN BAS_ASSEMBLYBILLOFMATERIAL P
  ON     P.ASSEMBLYBOMID = A.ASSEMBLYBOMID
  INNER  JOIN BAS_OPERATION O
  ON     O.OPERATIONID = A.OPERATIONID
  INNER  JOIN BOMTREE BG
  ON     P.ASSEMBLYITEMID = BG.ASSEMBLYITEMID
  AND    P.ASSEMBLYITEMVERSION = BG.ASSEMBLYITEMVERSION
  LEFT   OUTER JOIN BAS_ASSEMBLYBILLOFMATERIAL C
  ON     C.ASSEMBLYITEMID = A.COMPONENTITEMID
  AND    C.ASSEMBLYITEMVERSION = A.COMPONENTITEMVERSION)
SELECT IMB.ITEMNAME AS COMPONENTITEMNAME
      ,IMB.CONSUMABLETYPE
      ,COALESCE(D.DICTIONARYNAME, BT.MATERIALDETAILTYPE) AS CONSUMABLETYPE2
      ,BT.MATERIALDETAILTYPE AS MATERIALDETAILTYPE
      ,'' AS WORKSURFACE
      ,IMB.SPEC AS SPEC
      ,PIS.PNLSIZEXAXIS
      ,PIS.PNLSIZEYAXIS
      ,CASE
           WHEN CONCAT(CONCAT(PIS.PNLSIZEXAXIS, ' * '), PIS.PNLSIZEYAXIS) = ' * ' THEN
            NULL
           ELSE
            CONCAT(CONCAT(PIS.PNLSIZEXAXIS, ' * '), PIS.PNLSIZEYAXIS)
       END AS PNLSIZE
      ,MIS.MAKER
      ,MIS.COLOR
      ,BT.ROOT_ASSEMBLYITEMID
      ,BT.ROOT_ASSEMBLYITEMVERSION
      ,BT.ROOT_BOMID
      ,BT.PARENTS_ASSEMBLYITEMID
      ,BT.PARENTS_ASSEMBLYITEMVERSION
      ,BT.PARENTBOMID
      ,BT.PLANTID
      ,BT.ASSEMBLYCALCQTY AS REQUIREMENTQTY
      ,BT.ASSEMBLYITEMID
      ,BT.ASSEMBLYITEMVERSION
      ,BT.ASSEMBLYITEMBOMID
      ,BT.ASSEMBLYQTY
      ,PIS.PCSPNL AS ARRAYPCS
      ,CASE
           WHEN COALESCE(PIS.PNLSIZEXAXIS, 0) = 0 OR
                COALESCE(PIS.PNLSIZEYAXIS, 0) = 0 THEN
            NULL
           ELSE
            TRUNC(TO_NUMBER((PIS.PCSPNL / (PIS.PNLSIZEXAXIS / 1000) /
                            (PIS.PNLSIZEYAXIS / 1000))), 2)
       END AS CALCULATEPCS
      ,BT.BOMID
      ,BT.USERSEQUENCE
      ,BT.LVL
      ,BT.USERLAYER
      ,D2.DICTIONARYNAME AS INKTYPE
      ,D3.DICTIONARYNAME AS WORKMETHOD
FROM   BOMTREE BT
LEFT   OUTER JOIN BAS_ITEMMASTER IMB ON     ASSEMBLYITEMID = IMB.ITEMID
                                     AND    ASSEMBLYITEMVERSION = IMB.ITEMVERSION
LEFT   OUTER JOIN BAS_PRODUCTITEMSPEC PIS   ON     PIS.ITEMID = ASSEMBLYITEMID
                                            AND    PIS.ITEMVERSION = ASSEMBLYITEMVERSION
LEFT   OUTER JOIN BAS_MATERIALITEMSPEC MIS  ON     MIS.ITEMID = ASSEMBLYITEMID
                                            AND    MIS.ITEMVERSION = ASSEMBLYITEMVERSION
LEFT   JOIN CMD_LOOKUP_VALUES C             ON     C.LOOKUP_CODE = BT.MATERIALDETAILTYPE
                                            AND    C.LOOKUP_TYPE = 'MaterialDetailType'
LEFT   JOIN CMD_DICTIONARY D                ON     D.DICTIONARYID = C.DICTIONARYID
                                            AND    D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
LEFT   JOIN CMD_LOOKUP_VALUES C2            ON     C2.LOOKUP_CODE = BT.INKTYPE
                                            AND    C2.LOOKUP_TYPE = 'OutsourcingSpecInkType'
LEFT   JOIN CMD_DICTIONARY D2               ON     D2.DICTIONARYID = C2.DICTIONARYID
                                            AND    D2.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
LEFT   JOIN CMD_LOOKUP_VALUES C3            ON     C3.LOOKUP_CODE = BT.WORKMETHOD
                                            AND    C3.LOOKUP_TYPE = 'OutsourcingSpecWorkType'
LEFT   JOIN CMD_DICTIONARY D3               ON     D3.DICTIONARYID = C3.DICTIONARYID
                                            AND    D3.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}

WHERE  1 = 1
AND    BT.MATERIALDETAILTYPE IN ('SHIELD', 'OTHER', 'GULE', 'GUSSETPLATE')
AND    BT.PARENTS_ASSEMBLYITEMID IS NOT NULL
ORDER  BY USERLAYER
    	
    </select>
    
 <select id="SelectProductSpecDetail_Plating" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.SelectProductSpecDetail_Plating */
	 SELECT PS.ITEMID
		      ,PS.ITEMVERSION
		      ,PS.ENTERPRISEID
		      ,PS.DETAILTYPE
		      ,PS.SPECDETAILFROM
		      ,PS.DETAILNAME
		      ,PS.SPECDETAILTO
		      ,PS.FROMORIGINAL
		      ,PS.TOORIGINAL
		      ,PS.SEQUENCE AS SEQUENCE3
		      ,PS.CREATEDTIME
		      ,NVL(D.DICTIONARYNAME, PS.DESCRIPTION) AS DESCRIPTION
		      ,PS.DESCRIPTION AS PROCESSSEGMENTID
	FROM   BAS_PRODUCTITEMSPECDETAIL PS
	LEFT   JOIN BAS_PROCESSSEGMENTEXT PG          ON     PG.PROCESSSEGMENTID = PS.DESCRIPTION
	LEFT   JOIN CMD_DICTIONARY D                      ON     PG.PROCESSSEGMENTNAME = D.DICTIONARYID
	                                                  			 AND    D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
	WHERE  1 = 1
	AND    PS.DETAILTYPE = 'CopperPlating'
	AND    PS.ITEMID = #{ITEMID}
	AND    PS.ITEMVERSION = #{ITEMVERSION}
	AND    PS.ENTERPRISEID = #{SESSION_ENTERPRISEID}
	ORDER  BY PS.DETAILTYPE
	         ,PS.SEQUENCE ASC
    </select>
    
 <select id="GetPlatingTypeSegment" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.GetPlatingTypeSegment */
 SELECT PROCESSSEGMENTID
      ,PROCESSSEGMENTNAME
      ,INSPITEMNAME
      ,MAX(LSL) AS LSL
      ,MAX(SL) AS SL
      ,MAX(USL) AS USL
      ,INSPITEMID
   FROM
 (
	 SELECT SA.PROCESSSEGID    AS PROCESSSEGMENTID
		      ,PD.DICTIONARYNAME  AS PROCESSSEGMENTNAME
		      ,IID.DICTIONARYNAME AS INSPITEMNAME
		      ,SD.LSL
		      ,SD.SL
		      ,SD.USL
		      ,SA.INSPITEMID
          ,CASE WHEN SUBSTR(SA.INSPITEMID,0,1) = 'S' THEN
                1
           ELSE
                2
           END
           AS ORDERSEQ
		FROM   BAS_INSPECTIONITEMREL SA
						LEFT JOIN   BAS_SPECDETAIL               SD	ON  SA.SPECSEQUENCE 	= SD.SPECSEQUENCE  
																	AND SA.SPECCLASSID   = SD.SPECCLASSID
						LEFT JOIN BAS_INSPITEM                   II	ON  SA.ENTERPRISEID = II.ENTERPRISEID
																	AND SA.INSPITEMID  = II.INSPITEMID   
						LEFT JOIN CMD_DICTIONARY  		        IID ON  II.INSPITEMNAME = IID.DICTIONARYID
																	AND IID.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
						INNER JOIN BAS_PROCESSSEGMENTEXT			PT	ON  SA.PROCESSSEGID  = PT.PROCESSSEGMENTID
						LEFT JOIN CMD_DICTIONARY					PD	ON PD.DICTIONARYID = PT.PROCESSSEGMENTNAME
																	AND PD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE  1 = 1
		AND    SA.SPECCLASSID = 'OperationSpec'
		AND    SA.ENTERPRISEID = #{SESSION_ENTERPRISEID}
		AND    SA.RESOURCEID = #{RESOURCEID}
		AND    SA.RESOURCEVERSION = #{RESOURCEVERSION}
		<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' ">       
			AND    SA.PROCESSSEGID = #{PROCESSSEGMENTID}
		</if>
		
		
		UNION

 SELECT   DISTINCT SA.PROCESSSEGMENTID       
          ,PD.DICTIONARYNAME AS PROCESSSEGMENTNAME       
          ,IID.DICTIONARYNAME AS INSPITEMNAME         
          ,NULL AS LSL
          ,NULL AS SL
          ,NULL AS USL
          ,II.INSPITEMID AS INSPITEMID
          ,CASE WHEN SUBSTR(II.INSPITEMID,0,1) = 'S' THEN
                1
           ELSE
                2
           END
           AS ORDERSEQ
          FROM    BAS_SPECATTRIBUTE                   SA     
          INNER JOIN BAS_INSPECTIONDEFINITION        ISD   ON ISD.INSPECTIONCLASSID = SA.INSPITEMCLASSID
                                                       AND ISD.ENTERPRISEID     = SA.ENTERPRISEID
                                                         AND ISD.INSPECTIONDEFID= 'OperationInspection-OperationInspection'
          LEFT JOIN  BAS_INSPITEM                     II      ON  SA.ENTERPRISEID    = II.ENTERPRISEID
                                    AND SA.INSPITEMID      = II.INSPITEMID        
      LEFT JOIN CMD_DICTIONARY              IID ON  II.INSPITEMNAME = IID.DICTIONARYID
                                  AND IID.LANGUAGETYPE = 'ko-KR'
            INNER JOIN BAS_PROCESSSEGMENTEXT      PT  ON  SA.PROCESSSEGMENTID  = PT.PROCESSSEGMENTID
            LEFT JOIN CMD_DICTIONARY          PD  ON PD.DICTIONARYID = PT.PROCESSSEGMENTNAME
                                                  AND PD.LANGUAGETYPE = 'ko-KR'
          WHERE   1=1
          AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
          AND     SA.DEFAULTDISPLAY = 'Y' 		 
		<if test="PROCESSSEGMENTID != null and PROCESSSEGMENTID !='' ">       
			AND    SA.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
		</if>
          AND     SA.PROCESSSEGMENTID IN (SELECT OP.PROCESSSEGMENTID            
                                            FROM   BAS_OPERATION OP
                                            INNER JOIN BAS_ROUTING                  RT  ON OP.ENTERPRISEID        = RT.ENTERPRISEID
                                                                                        AND OP.ASSEMBLYROUTINGID   = RT.ASSEMBLYROUTINGID
                                            INNER JOIN BAS_PROCESSPATH               PP  ON  RT.MAINPRODUCTID        = PP.PROCESSDEFID
                                                                                         AND RT.MAINPRODUCTVERSION   = PP.PROCESSDEFVERSION
                                                                                         AND OP.PROCESSSEGMENTID     = PP.PROCESSSEGMENTID
                                            WHERE RT.ENTERPRISEID  =#{SESSION_ENTERPRISEID}
                                            AND RT.MAINPRODUCTID  = #{RESOURCEID} 
                                            AND RT.MAINPRODUCTVERSION  = #{RESOURCEVERSION}     
                                            AND  OP.VALIDSTATE = 'Valid'
                                            AND  PP.VALIDSTATE = 'Valid')
		ORDER  BY INSPITEMID
)
GROUP  BY PROCESSSEGMENTID
         ,PROCESSSEGMENTNAME
         ,INSPITEMNAME
         ,INSPITEMID
         ,ORDERSEQ
ORDER BY ORDERSEQ, INSPITEMID
    </select>
    
 <select id="GetPlatingTypeSegmentList" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.GetPlatingTypeSegmentList */
 
   SELECT  DISTINCT SA.PROCESSSEGID              AS   PROCESSSEGMENTID      
          ,PD.DICTIONARYNAME AS PROCESSSEGMENTNAME  
          FROM    BAS_INSPECTIONITEMREL               SA      
          INNER  JOIN BAS_PROCESSSEGMENTEXT PT        ON     SA.PROCESSSEGID = PT.PROCESSSEGMENTID
                                                               AND    (PT.PLATINGTYPE = #{PLATINGTYPE} 
			                                                      OR      PT.PLATINGTYPE = #{PLATINGTYPE2} 
			                                                      OR      PT.PLATINGTYPE = #{PLATINGTYPE3})                    
          LEFT   JOIN CMD_DICTIONARY PD               ON     PD.DICTIONARYID = PT.PROCESSSEGMENTNAME
                                                      AND    PD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
          WHERE   1=1
          AND     SA.SPECCLASSID     = 'OperationSpec'
          AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
          AND     SA.RESOURCEID     = #{RESOURCEID}       --품목ID
          AND     SA.RESOURCEVERSION   = #{RESOURCEVERSION}   --품목 버전    
          
          UNION 
          
          SELECT   DISTINCT SA.PROCESSSEGMENTID       
                   ,PD.DICTIONARYNAME AS PROCESSSEGMENTNAME                
          FROM    BAS_SPECATTRIBUTE                   SA     
          INNER JOIN BAS_INSPECTIONDEFINITION        ISD   ON ISD.INSPECTIONCLASSID = SA.INSPITEMCLASSID
                                                       AND ISD.ENTERPRISEID     = SA.ENTERPRISEID
                                                         AND ISD.INSPECTIONDEFID= 'OperationInspection-OperationInspection'
          LEFT JOIN  BAS_INSPITEM                     II      ON  SA.ENTERPRISEID    = II.ENTERPRISEID
                                    AND SA.INSPITEMID      = II.INSPITEMID        
          INNER  JOIN BAS_PROCESSSEGMENTEXT PT        ON     SA.PROCESSSEGMENTID = PT.PROCESSSEGMENTID
          											AND    (PT.PLATINGTYPE = #{PLATINGTYPE} 
                                                      OR      PT.PLATINGTYPE = #{PLATINGTYPE2} 
                                                      OR      PT.PLATINGTYPE = #{PLATINGTYPE3})              
          LEFT   JOIN CMD_DICTIONARY PD               ON     PD.DICTIONARYID = PT.PROCESSSEGMENTNAME
                                                      AND    PD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
          WHERE   1=1
          AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
          AND     SA.DEFAULTDISPLAY = 'Y'
          AND     SA.PROCESSSEGMENTID IN (SELECT OP.PROCESSSEGMENTID            
                                            FROM   BAS_OPERATION OP
                                            INNER JOIN BAS_ROUTING                  RT  ON OP.ENTERPRISEID        = RT.ENTERPRISEID
                                                                                        AND OP.ASSEMBLYROUTINGID   = RT.ASSEMBLYROUTINGID
                                            INNER JOIN BAS_PROCESSPATH               PP  ON  RT.MAINPRODUCTID        = PP.PROCESSDEFID
                                                                                         AND RT.MAINPRODUCTVERSION   = PP.PROCESSDEFVERSION
                                                                                         AND OP.PROCESSSEGMENTID     = PP.PROCESSSEGMENTID
                                            WHERE RT.ENTERPRISEID  =#{SESSION_ENTERPRISEID}
                                            AND RT.MAINPRODUCTID  = #{RESOURCEID} 
                                            AND RT.MAINPRODUCTVERSION  = #{RESOURCEVERSION}     
                                            AND  OP.VALIDSTATE = 'Valid'
                                            AND  PP.VALIDSTATE = 'Valid')
 
<!-- SELECT PROCESSSEGMENTID
	     ,PROCESSSEGMENTNAME
FROM 
	 (SELECT  SA.PROCESSSEGID   			    AS PROCESSSEGMENTID
					,	PD.DICTIONARYNAME				AS PROCESSSEGMENTNAME
					, SA.PROCESSSEGID || ' ' || PD.DICTIONARYNAME AS SEARCHKEY 
        FROM    BAS_INSPECTIONITEMREL            SA      
        LEFT JOIN   BAS_SPECDETAIL               SD  ON  SA.SPECSEQUENCE   = SD.SPECSEQUENCE  
                              AND SA.SPECCLASSID   = SD.SPECCLASSID
        INNER JOIN BAS_PROCESSSEGMENTEXT      PT  ON  SA.PROCESSSEGID  = PT.PROCESSSEGMENTID
        LEFT JOIN CMD_DICTIONARY          PD  ON PD.DICTIONARYID = PT.PROCESSSEGMENTNAME
                              AND PD.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
        WHERE  1=1
        AND    SA.SPECCLASSID = 'OperationSpec'  
        AND   (PT.PLATINGTYPE = #{PLATINGTYPE} OR PT.PLATINGTYPE = #{PLATINGTYPE2}   OR PT.PLATINGTYPE = #{PLATINGTYPE3})  
        AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
        AND     SA.RESOURCEID     = #{RESOURCEID}
        AND     SA.RESOURCEVERSION   =#{RESOURCEVERSION}
        GROUP BY SA.PROCESSSEGID ,  PD.DICTIONARYNAME 
)
WHERE 1=1-->
    </select>
    
     <select id="GetPlatingTypeSegmentLInspist" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.GetPlatingTypeSegmentLInspist */
  SELECT  
              SA.PROCESSSEGID                      AS   PROCESSSEGMENTID
              , SA.INSPITEMID 
              , COALESCE(D.DICTIONARYNAME, II.INSPITEMNAME)    AS  INSPITEMNAME
              , SD.LSL
              , SD.USL
        FROM    BAS_INSPECTIONITEMREL               SA      
        LEFT JOIN   BAS_SPECDETAIL                  SD    ON  SA.SPECSEQUENCE   = SD.SPECSEQUENCE  
                                  AND SA.SPECCLASSID   = SD.SPECCLASSID
        LEFT JOIN   BAS_INSPITEM                    II    ON  SA.ENTERPRISEID   = II.ENTERPRISEID
                                  AND SA.INSPITEMID    = II.INSPITEMID  
        LEFT JOIN  CMD_DICTIONARY           D    ON  II.INSPITEMNAME     = D.DICTIONARYNAME
                                  AND  D.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
 
        LEFT OUTER JOIN CMD_USER_V                    CU    ON  CU.USERID        = SD.CREATOR
              LEFT OUTER JOIN CMD_USER_V                    MU    ON  MU.USERID        = SD.MODIFIER
                                         
        WHERE   SA.SPECCLASSID     =  'OperationSpec'
        AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
        AND     SA.RESOURCEID     = #{RESOURCEID}        --품목ID
        AND     SA.RESOURCEVERSION   = #{RESOURCEVERSION}   --품목 버전       
        AND     SA.PROCESSSEGID   = #{PROCESSSEGMENTID}     --공정아이디;
        <!-- AND     SA.INSPITEMID IN ('0256', '0257', '0258', '0259') -->
        AND     SA.INSPITEMID IN ('R0070', 'R0071', 'R0072', 'R0073')
            
        UNION ALL
        
        SELECT  SA.PROCESSSEGMENTID
            , SA.INSPITEMID 
            , COALESCE(D.DICTIONARYNAME, II.INSPITEMNAME)    AS  INSPITEMNAME
            , NULL AS LSL
            , NULL AS USL
        FROM    BAS_SPECATTRIBUTE                   SA     
        INNER JOIN BAS_INSPECTIONDEFINITION        ISD   ON ISD.INSPECTIONCLASSID = SA.INSPITEMCLASSID
                                                     AND ISD.ENTERPRISEID     = SA.ENTERPRISEID
        LEFT JOIN  BAS_INSPITEM                     II      ON  SA.ENTERPRISEID    = II.ENTERPRISEID
                                  AND SA.INSPITEMID      = II.INSPITEMID
        LEFT JOIN  CMD_DICTIONARY          D    ON  II.INSPITEMNAME     = D.DICTIONARYNAME
                                  AND  D.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT OUTER JOIN BAS_INSPECTIONITEMREL      IIR     ON IIR.SPECCLASSID      = 'OperationSpec'
                                  AND IIR.RESOURCEID      =#{RESOURCEID}        --품목ID
                                  AND IIR.RESOURCEVERSION  =#{RESOURCEVERSION}    --품목 버전       
                                  AND IIR.PROCESSSEGID    = SA.PROCESSSEGMENTID
                                  AND IIR.INSPITEMID     = SA.INSPITEMID
                                  AND IIR.INSPITEMVERSION  = II.INSPITEMVERSION
        WHERE   SA.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
        AND     SA.ENTERPRISEID   = #{SESSION_ENTERPRISEID}
        AND     IIR.SPECSEQUENCE IS NULL
        <!-- AND     SA.INSPITEMID IN ('0256', '0257', '0258', '0259') -->
        AND     SA.INSPITEMID IN ('R0070', 'R0071', 'R0072', 'R0073')
        ORDER BY  INSPITEMID 
        
    </select>
<update id="getUpdateProductItemSpecDetailData_InkInfo" parameterType="map">
/* smh.bas.dao.BAS02000Dao.getUpdateProductItemSpecDetailData_InkInfo */
		 MERGE INTO BAS_PRODUCTITEMSPECDETAIL BP
		USING DUAL
		ON (BP.ENTERPRISEID = #{SESSION_ENTERPRISEID} 
			AND BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION}
			AND BP.DETAILTYPE ='InkSpecification'
			AND BP.SEQUENCE = TO_NUMBER(#{SEQUENCE1}))
		WHEN MATCHED THEN
		    UPDATE
		    SET   DETAILNAME  = #{DETAILNAME}
		          ,SPECDETAILFROM              = #{SPECDETAILFROM}
		          ,SPECDETAILTO          = #{COLOR}
		          ,FROMORIGINAL              = #{USERLAYER1}
		          ,TOORIGINAL              = #{USERLAYER2}		          
		          ,MODIFIER             = #{MODIFIER}
		          ,MODIFIEDTIME         = SYSDATE
		          ,LASTTXNHISTKEY       = #{LASTTXNHISTKEY}
		          ,LASTTXNID            = #{LASTTXNID}
		          ,LASTTXNUSER          = #{MODIFIER}
		          ,LASTTXNTIME          = SYSDATE
		          ,LASTTXNCOMMENT       = #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (  
		          ENTERPRISEID 
				  ,PLANTID   
				  ,ITEMID 
				  ,ITEMVERSION
				  ,SEQUENCE
				  ,DETAILTYPE
		          ,DETAILNAME  
		          ,SPECDETAILFROM              
		          ,SPECDETAILTO       
		          ,FROMORIGINAL
		          ,TOORIGINAL
		          ,VALIDSTATE
			        ,CREATOR
			        ,CREATEDTIME
			        ,MODIFIER
			        ,MODIFIEDTIME
			        ,LASTTXNHISTKEY
			        ,LASTTXNID
			        ,LASTTXNUSER
			        ,LASTTXNTIME
			        ,LASTTXNCOMMENT)
		    VALUES
		        (#{SESSION_ENTERPRISEID}
		        ,#{SESSION_SITETYPE}
		        ,#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{SEQUENCE1}                              
		        ,'InkSpecification'                                          
		        ,#{DETAILNAME}                                      
		        ,#{SPECDETAILFROM}                                           
		        ,#{COLOR}
		        ,#{USERLAYER1}
		        ,#{USERLAYER2}                                 
		        ,'Valid'                                         
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT})
		</update>        

<delete id="getDeleteProductItemSpecDetailData_InkInfo" parameterType="map">
 	 /* smh.bas.dao.BAS02000Dao.getDeleteProductItemSpecDetailData_InkInfo */
    	DELETE  
    	 FROM  BAS_PRODUCTITEMSPECDETAIL  
    	WHERE ITEMID = #{ITEMID} 
		   AND ITEMVERSION = #{ITEMVERSION}
		   AND DETAILTYPE = 'InkSpecification'
		   AND ENTERPRISEID	= #{SESSION_ENTERPRISEID}
		   AND SEQUENCE = TO_NUMBER(#{SEQUENCE1}) 
    </delete>
    
<update id="getUpdateProductItemSpecDetailData_PlatingInfo" parameterType="map">
/* smh.bas.dao.BAS02000Dao.getUpdateProductItemSpecDetailData_PlatingInfo */
		 MERGE INTO BAS_PRODUCTITEMSPECDETAIL BP
		USING DUAL
		ON (BP.ENTERPRISEID = #{SESSION_ENTERPRISEID} 
			AND BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION}
			AND BP.DETAILTYPE = #{DETAILTYPE}
			AND BP.SEQUENCE = TO_NUMBER(#{SEQUENCE}))
		WHEN MATCHED THEN
		    UPDATE
		    SET   DETAILNAME  			= #{DETAILNAME}
		          ,SPECDETAILFROM        = #{SPECDETAILFROM}
		          ,SPECDETAILTO            = #{SPECDETAILTO}
		          ,FROMORIGINAL          = #{FROMORIGINAL}
		          ,TOORIGINAL              = #{TOORIGINAL}
		          ,DESCRIPTION             = #{PROCESSSEGMENTID}		          
		          ,MODIFIER             		= #{MODIFIER}
		          ,MODIFIEDTIME         	= SYSDATE
		          ,LASTTXNHISTKEY       	= #{LASTTXNHISTKEY}
		          ,LASTTXNID            	= #{LASTTXNID}
		          ,LASTTXNUSER          	= #{MODIFIER}
		          ,LASTTXNTIME          	= SYSDATE
		          ,LASTTXNCOMMENT     = #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (  
		          ENTERPRISEID 
				  ,PLANTID   
				  ,ITEMID 
				  ,ITEMVERSION
				  ,SEQUENCE
				  ,DETAILTYPE
		          ,DETAILNAME  
		          ,SPECDETAILFROM              
		          ,SPECDETAILTO       
		          ,FROMORIGINAL
		          ,TOORIGINAL
		          ,DESCRIPTION
		          ,VALIDSTATE
			        ,CREATOR
			        ,CREATEDTIME
			        ,MODIFIER
			        ,MODIFIEDTIME
			        ,LASTTXNHISTKEY
			        ,LASTTXNID
			        ,LASTTXNUSER
			        ,LASTTXNTIME
			        ,LASTTXNCOMMENT)
		    VALUES
		        (#{SESSION_ENTERPRISEID}
		        ,#{SESSION_SITETYPE}
		        ,#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{SEQUENCE}                              
		        ,#{DETAILTYPE}                             
		        ,#{DETAILNAME}                                      
		        ,#{SPECDETAILFROM}                                           
		        ,#{SPECDETAILTO}
		        ,#{FROMORIGINAL}
		        ,#{TOORIGINAL}          
		        ,#{PROCESSSEGMENTID}		                       
		        ,'Valid'                                         
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT})
		</update>
		
  <select id="GetToolByItem1" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.GetToolByItem1 */
  	SELECT   	 I.ITEMNAME							AS  PRODUCTDEFNAME							
		  	  ,  PS.USEITEMID            AS  PRODUCTDEFID
              ,  PS.USEITEMVERSION          AS  PRODUCTDEFVERSION
              ,  PS."sequence"              AS  SEQUENCE
              ,  PS.TOOLFORM   AS  TOOLFORM
              ,  PS.TOOLKIND                  AS  TOOLKIND
              ,  FN_GETTOOLFORMNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM) AS TOOLFORMNAME
              ,  FN_GETTOOLKINDNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM, DD.TOOLKIND) AS TOOLKINDNM
              ,  COALESCE(CD.DICTIONARYNAME, PS.TOOLCLASS)   AS  MOLDTOOLCLASS
              ,  PS.TOOLCLASS            
              ,  PS.SUMMARY
	      	  ,  PS.MANUFACTURER
              ,  NVL(PS.SCALEX, DD.SCALEX) AS SCALEX
              ,  NVL(PS.SCALEY, DD.SCALEY) AS SCALEY
              ,  PS.DURABLECLASSID
              ,  PS.DURABLEDEFID
              ,  PS.DESCRIPTION
              ,  COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME) AS  DURABLEDEFNAME
              ,  PS.DURABLEDEFVERSION
              ,  PS.RECEIPTAREAID AS RECEIPTAREAID
              ,  NVL(DAR.DICTIONARYNAME, PS.RECEIPTAREAID)  AS RECEIPTAREANM                
        FROM    BAS_PRODUCTITEMSPECTOOL        PS      
        LEFT JOIN  TOM_DURABLEDEFINITION      DD    ON  PS.DURABLEDEFID  =  DD.DURABLEDEFID
        														AND PS.DURABLEDEFVERSION = DD.DURABLEDEFVERSION
      LEFT OUTER JOIN BAS_AREA                 SAC      ON SAC.AREAID              = PS.RECEIPTAREAID        --20210318 APPEND (작업장)
                                                        AND SAC.VALIDSTATE = 'Valid'
      LEFT OUTER JOIN CMD_DICTIONARY           DAR     ON DAR.DICTIONARYID        = SAC.AREANAME
                                                          AND  DAR.LANGUAGETYPE       = #{SESSION_LANGUAGETYPE}
                                                          AND  DAR.USE_YN = 'Y'
        LEFT JOIN  CMD_DICTIONARY          D    ON  DD.DURABLEDEFNAME    = D.DICTIONARYID
                                  AND  D.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN  BAS_ITEMMASTER          I    ON  I.ITEMID       =  PS.USEITEMID
                                  AND  I.ITEMVERSION    =  PS.USEITEMVERSION
        LEFT JOIN   CMD_LOOKUP_VALUES              C    ON C.LOOKUP_CODE    =  PS.TOOLCLASS
                                  AND C.LOOKUP_TYPE ='ProductSpecToolClassify'
        LEFT JOIN  CMD_DICTIONARY          CD    ON  C.DICTIONARYID    = CD.DICTIONARYID
                                  AND  CD.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN   CMD_LOOKUP_VALUES              C2    ON  C2.LOOKUP_CODE    =  PS.TOOLFORM
                                  AND C2.LOOKUP_TYPE = 'ToolFormETC'
        LEFT JOIN  CMD_DICTIONARY          CD2    ON  C2.DICTIONARYID    = CD2.DICTIONARYID
                                  AND  CD2.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}                                                       
        WHERE   1=1
        AND     PS.ITEMID   = #{ITEMID}
        AND     PS.ITEMVERSION   = #{ITEMVERSION}
        AND    PS.DURABLECLASSID IN ('M', 'W')
    </select>
    
  <select id="GetToolByItem2" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.GetToolByItem2 */
	  	SELECT   	 I.ITEMNAME							AS  PRODUCTDEFNAME							
		  	  ,  PS.USEITEMID            AS  PRODUCTDEFID
              ,  PS.USEITEMVERSION          AS  PRODUCTDEFVERSION
              ,  PS."sequence"              AS  SEQUENCE
              ,  PS.TOOLFORM   AS  TOOLFORM
              ,  PS.TOOLKIND                  AS  TOOLKIND
              ,  FN_GETTOOLFORMNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM) AS TOOLFORMNAME
              ,  FN_GETTOOLKINDNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM, DD.TOOLKIND) AS TOOLKINDNM
              ,  COALESCE(CD.DICTIONARYNAME, PS.TOOLCLASS)   AS  MOLDTOOLCLASS
              ,  PS.TOOLCLASS            
              ,  PS.SUMMARY
	      	  ,  PS.MANUFACTURER
              ,  NVL(PS.SCALEX, DD.SCALEX) AS SCALEX
              ,  NVL(PS.SCALEY, DD.SCALEY) AS SCALEY
              ,  PS.DURABLECLASSID
              ,  PS.DURABLEDEFID
              ,  PS.DESCRIPTION
              ,  COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME) AS  DURABLEDEFNAME
              ,  PS.DURABLEDEFVERSION
              ,  PS.RECEIPTAREAID AS RECEIPTAREAID
              ,  NVL(DAR.DICTIONARYNAME, PS.RECEIPTAREAID)  AS RECEIPTAREANM                
        FROM    BAS_PRODUCTITEMSPECTOOL        PS      
        LEFT JOIN  TOM_DURABLEDEFINITION      DD    ON  PS.DURABLEDEFID  =  DD.DURABLEDEFID
        														AND PS.DURABLEDEFVERSION = DD.DURABLEDEFVERSION
      LEFT OUTER JOIN BAS_AREA                 SAC      ON SAC.AREAID              = PS.RECEIPTAREAID        --20210318 APPEND (작업장)
                                                        AND SAC.VALIDSTATE = 'Valid'
      LEFT OUTER JOIN CMD_DICTIONARY           DAR     ON DAR.DICTIONARYID        = SAC.AREANAME
                                                          AND  DAR.LANGUAGETYPE       = #{SESSION_LANGUAGETYPE}
                                                          AND  DAR.USE_YN = 'Y'
        LEFT JOIN  CMD_DICTIONARY          D    ON  DD.DURABLEDEFNAME    = D.DICTIONARYID
                                  AND  D.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN  BAS_ITEMMASTER          I    ON  I.ITEMID       =  PS.USEITEMID
                                  AND  I.ITEMVERSION    =  PS.USEITEMVERSION
        LEFT JOIN   CMD_LOOKUP_VALUES              C    ON C.LOOKUP_CODE    =  PS.TOOLCLASS
                                  AND C.LOOKUP_TYPE ='ProductSpecToolClassify'
        LEFT JOIN  CMD_DICTIONARY          CD    ON  C.DICTIONARYID    = CD.DICTIONARYID
                                  AND  CD.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN   CMD_LOOKUP_VALUES              C2    ON  C2.LOOKUP_CODE    =  PS.TOOLFORM
                                  AND C2.LOOKUP_TYPE = 'ToolFormETC'
        LEFT JOIN  CMD_DICTIONARY          CD2    ON  C2.DICTIONARYID    = CD2.DICTIONARYID
                                  AND  CD2.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}                                                       
        WHERE   1=1
        AND     PS.ITEMID   = #{ITEMID}
        AND     PS.ITEMVERSION   = #{ITEMVERSION}
        AND    PS.DURABLECLASSID IN ('B', 'J')

    </select>
    
  <select id="GetToolByItem3" parameterType="map" resultType="hashmap">
 /* smh.bas.dao.BAS02000Dao.GetToolByItem3 */
  	SELECT   	 I.ITEMNAME							AS  PRODUCTDEFNAME							
		  	  ,  PS.USEITEMID            AS  PRODUCTDEFID
              ,  PS.USEITEMVERSION          AS  PRODUCTDEFVERSION
              ,  PS."sequence"              AS  SEQUENCE
              ,  PS.TOOLFORM   AS  TOOLFORM
              ,  PS.TOOLKIND                  AS  TOOLKIND
                       ,  FN_GETTOOLFORMNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM) AS TOOLFORMNAME
                   ,	FN_GETTOOLKINDNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM, DD.TOOLKIND) AS TOOLKINDNM
              ,  COALESCE(CD.DICTIONARYNAME, PS.TOOLCLASS)   AS  MOLDTOOLCLASS
              ,  PS.TOOLCLASS            
              ,  PS.SUMMARY
              ,  PS.MANUFACTURER
              ,  PS.SCALEX
              ,  PS.SCALEY
              ,  PS.DURABLECLASSID
              ,  PS.DURABLEDEFID
              ,  PS.DESCRIPTION
              ,  COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME) AS  DURABLEDEFNAME
              ,  PS.DURABLEDEFVERSION
              ,  PS.RECEIPTAREAID AS RECEIPTAREAID
              ,  COALESCE(CD3.DICTIONARYNAME, PS.RECEIPTAREAID) AS RECEIPTAREANM              
        FROM    BAS_PRODUCTITEMSPECTOOL        PS      
        LEFT JOIN  TOM_DURABLEDEFINITION      DD    ON  PS.DURABLEDEFID  =  DD.DURABLEDEFID
        LEFT JOIN  CMD_DICTIONARY          D    ON  DD.DURABLEDEFNAME    = D.DICTIONARYID
                                  AND  D.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN  BAS_ITEMMASTER          I    ON  I.ITEMID       =  PS.USEITEMID
                                  AND  I.ITEMVERSION    =  PS.USEITEMVERSION
        LEFT JOIN   CMD_LOOKUP_VALUES              C    ON C.LOOKUP_CODE    =  PS.TOOLCLASS
                                  AND C.LOOKUP_TYPE ='ProductSpecToolClassify'
        LEFT JOIN  CMD_DICTIONARY          CD    ON  C.DICTIONARYID    = CD.DICTIONARYID
                                  AND  CD.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN   CMD_LOOKUP_VALUES              C2    ON  C2.LOOKUP_CODE    =  PS.TOOLFORM
                                  AND C2.LOOKUP_TYPE = 'ToolFormETC'
        LEFT JOIN  CMD_DICTIONARY          CD2    ON  C2.DICTIONARYID    = CD2.DICTIONARYID
                                  AND  CD2.LANGUAGETYPE    = #{SESSION_LANGUAGETYPE}
        LEFT JOIN  BAS_AREA              AR    ON  AR.AREAID  = PS.RECEIPTAREAID
        LEFT JOIN  CMD_DICTIONARY          CD3    ON  AR.AREANAME = CD3.DICTIONARYID
                                  AND  CD3.LANGUAGETYPE =  #{SESSION_LANGUAGETYPE}                                                       
        WHERE   1=1
        AND     PS.ITEMID   = #{ITEMID}
        AND     PS.ITEMVERSION   = #{ITEMVERSION}
        AND     PS.DURABLECLASSID = 'E'
    </select>

	<select id="GetToolTypeByClassId" parameterType="map" resultType="hashmap">
		/* smh.bas.dao.BAS02000Dao.GetToolTypeByClassId */
		SELECT CODE
      ,NAME
      ,TOOLFORM
FROM   (SELECT NULL AS CODE
              ,NULL AS NAME
              ,NULL AS TOOLFORM
              ,-1   DISPLAYSEQUENCE
        FROM   DUAL
        UNION ALL
        SELECT CD.LOOKUP_CODE AS CODE
              ,CASE
                   WHEN DIC.DICTIONARYNAME IS NULL THEN
                    CD.MEANING
                   ELSE
                    DIC.DICTIONARYNAME
               END  AS NAME
              ,CD.LOOKUP_TYPE AS TOOLFORM
              ,CD.DISPLAYSEQUENCE
        FROM   CMD_LOOKUP_VALUES CD
        LEFT   JOIN CMD_DICTIONARY DIC
        ON     DIC.DICTIONARYID = CD.DICTIONARYID
        AND    DIC.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
        WHERE  1 = 1        
        AND    CD.LOOKUP_TYPE LIKE 'ToolKindE%'
        AND    CD.ENABLED_FLAG = 'Y')
ORDER  BY DISPLAYSEQUENCE ASC
	</select>
	
	  <select id="GetToolByItemList1" parameterType="map" resultType="hashmap">
		 /* smh.bas.dao.BAS02000Dao.GetToolByItemList1 */
		  SELECT 	   I.ITEMNAME AS ITEMNAME
				      ,DD.PRODUCTDEFID	AS ITEMID
				      ,DD.PRODUCTDEFVERSION	AS ITEMVERSION
				      ,DD.TOOLKIND
				      ,DD.FORM AS TOOLFORM
    				, FN_GETTOOLFORMNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM) AS TOOLFORMNAME
                   ,	FN_GETTOOLKINDNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM, DD.TOOLKIND) AS TOOLKINDNM
				      ,DD.SUMMARY
				      ,VDR.VENDORNAME AS MANUFACTURER
				      ,DD.SCALEX
				      ,DD.SCALEY
				      ,DD.DURABLEDEFID
				      ,DD.DURABLEDEFVERSION
			      ,TRDT.AREAID AS RECEIPTAREAID
				  ,DAR.DICTIONARYNAME  AS RECEIPTAREANM
				      ,DD.DESCRIPTION
				      ,COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME) AS DURABLEDEFNAME
				      ,DD.HITCOUNT
				      ,DD.TOOLTYPE
				      ,DD.TOOLDETAILTYPE
				      ,DD.FILMUSELAYER1
				      ,DD.DURABLECLASSID
			FROM   TOM_DURABLEDEFINITION DD
      LEFT   JOIN TOM_TOOLREQUESTDETAIL TRDT  ON TRDT.DURABLEDEFID       = DD.DURABLEDEFID
                                            AND  TRDT.DURABLEDEFVERSION = DD.DURABLEDEFVERSION 
      LEFT JOIN BAS_VENDOR             VDR     ON TRDT.VENDORID          = VDR.VENDORID         --20210312 APPEND (제작처/협력업체 : 제작처명)
                                                            AND  TRDT.ENTERPRISEID      = VDR.ENTERPRISEID
	                                                          AND  TRDT.PLANTID        = VDR.PLANTID
      LEFT OUTER JOIN BAS_AREA                 SAC      ON SAC.AREAID              = TRDT.AREAID        --20210318 APPEND (작업장)
      LEFT OUTER JOIN CMD_DICTIONARY           DAR     ON DAR.DICTIONARYID        = SAC.AREANAME
                                                          AND  DAR.LANGUAGETYPE       =#{SESSION_LANGUAGETYPE}
                                                          AND  DAR.USE_YN = 'Y'
			
			
			LEFT   JOIN BAS_ITEMMASTER I ON     DD.PRODUCTDEFID = I.ITEMID
			                             AND    DD.PRODUCTDEFVERSION = I.ITEMVERSION
			LEFT   JOIN CMD_DICTIONARY D ON     DD.DURABLEDEFNAME = D.DICTIONARYID
			                             AND    D.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
			WHERE  1 = 1
			<!-- AND    DD.DURABLETYPE = 'Tool' -->
			AND    I.MASTERDATACLASSID <![CDATA[<>]]> 'SparePart'
			AND    DD.DURABLECLASSID IN ('M', 'W')
				<if test="SEARCH_KEY != null and SEARCH_KEY !='' ">
					AND (UPPER(DD.PRODUCTDEFID) LIKE '%' || #{SEARCH_KEY} || '%' 
					    OR UPPER(I.ITEMNAME) LIKE '%' || #{SEARCH_KEY} || '%')
				</if>
				<if test="OPERATIONID != null and OPERATIONID !='' ">
  					AND  	NOT EXISTS(
										SELECT 	1
										FROM 	BAS_OPERATIONRESOURCE 		OPS
										WHERE 	OPS.RESOURCEID = DD.DURABLEDEFID
										  AND   OPS.ENTERPRISEID = DD.ENTERPRISEID
										  AND   OPS.OPERATIONID =  #{OPERATIONID}
									)
				</if>
			ORDER BY DD.PRODUCTDEFID, I.ITEMNAME, DD.PRODUCTDEFVERSION, DD.DURABLEDEFID
			
    </select>

	  <select id="GetToolByItemList2" parameterType="map" resultType="hashmap">
		 /* smh.bas.dao.BAS02000Dao.GetToolByItemList2 */
			SELECT I.ITEMNAME AS ITEMNAME
			      ,DD.PRODUCTDEFID AS ITEMID
			      ,DD.PRODUCTDEFVERSION	ITEMVERSION
			      ,DD.TOOLKIND
			      ,DD.FORM AS TOOLFORM
    				, FN_GETTOOLFORMNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM) AS TOOLFORMNAME
                   ,	FN_GETTOOLKINDNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM, DD.TOOLKIND) AS TOOLKINDNM
			      ,DD.SUMMARY
				  ,VDR.VENDORNAME AS MANUFACTURER
			      ,DD.SCALEX
			      ,DD.SCALEY
			      ,DD.DURABLEDEFID
			      ,DD.DURABLEDEFVERSION
			      ,TRDT.AREAID AS RECEIPTAREAID
				  ,DAR.DICTIONARYNAME  AS RECEIPTAREANM
			      ,DD.DESCRIPTION
			      ,COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME) AS DURABLEDEFNAME
			      ,DD.HITCOUNT
			      ,DD.TOOLTYPE
			      ,DD.TOOLDETAILTYPE
			      ,DD.FILMUSELAYER1
			      ,DD.DURABLECLASSID
			FROM   TOM_DURABLEDEFINITION DD
LEFT   JOIN TOM_TOOLREQUESTDETAIL TRDT  ON TRDT.DURABLEDEFID       = DD.DURABLEDEFID
                                            AND  TRDT.DURABLEDEFVERSION = DD.DURABLEDEFVERSION 
      LEFT JOIN BAS_VENDOR             VDR     ON TRDT.VENDORID          = VDR.VENDORID         --20210312 APPEND (제작처/협력업체 : 제작처명)
                                                            AND  TRDT.ENTERPRISEID      = VDR.ENTERPRISEID
	                                                          AND  TRDT.PLANTID        = VDR.PLANTID
      LEFT OUTER JOIN BAS_AREA                 SAC      ON SAC.AREAID              = TRDT.AREAID        --20210318 APPEND (작업장)
      LEFT OUTER JOIN CMD_DICTIONARY           DAR     ON DAR.DICTIONARYID        = SAC.AREANAME
                                                          AND  DAR.LANGUAGETYPE       =#{SESSION_LANGUAGETYPE}
                                                          AND  DAR.USE_YN = 'Y'
		
			LEFT   JOIN BAS_ITEMMASTER I      ON     DD.PRODUCTDEFID = I.ITEMID
			                                  AND    DD.PRODUCTDEFVERSION = I.ITEMVERSION
			LEFT   JOIN CMD_DICTIONARY D      ON     DD.DURABLEDEFNAME = D.DICTIONARYID
			                                  AND    D.LANGUAGETYPE =  #{SESSION_LANGUAGETYPE}
			WHERE  1 = 1
			<!-- AND    DD.DURABLETYPE = 'Tool' -->
			AND    I.MASTERDATACLASSID <![CDATA[<>]]> 'SparePart'
			AND    DD.DURABLECLASSID IN ('B', 'J')
				<if test="SEARCH_KEY != null and SEARCH_KEY !='' ">
					AND (UPPER(DD.PRODUCTDEFID) LIKE '%' || #{SEARCH_KEY} || '%' 
					    OR UPPER(I.ITEMNAME) LIKE '%' || #{SEARCH_KEY} || '%')
				</if>
			ORDER BY DD.PRODUCTDEFID, I.ITEMNAME, DD.PRODUCTDEFVERSION, DD.DURABLEDEFID
    </select>
    
	  <select id="GetToolByItemList3" parameterType="map" resultType="hashmap">
		 /* smh.bas.dao.BAS02000Dao.GetToolByItemList3 */
			SELECT I.ITEMNAME AS ITEMNAME
			      ,DD.PRODUCTDEFID AS ITEMID
			      ,DD.PRODUCTDEFVERSION	ITEMVERSION
			      ,DD.TOOLKIND
			      ,DD.FORM AS TOOLFORM
    				, FN_GETTOOLFORMNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM) AS TOOLFORMNAME
                   ,	FN_GETTOOLKINDNAME(#{SESSION_ENTERPRISEID}, #{SESSION_LANGUAGETYPE}, DD.DURABLECLASSID, DD.FORM, DD.TOOLKIND) AS TOOLKINDNM
			      ,DD.SUMMARY
				      ,VDR.VENDORNAME AS MANUFACTURER
			      ,DD.SCALEX
			      ,DD.SCALEY
			      ,DD.DURABLEDEFID
			      ,DD.DURABLEDEFVERSION
			      ,TRDT.AREAID AS RECEIPTAREAID
				  ,DAR.DICTIONARYNAME  AS RECEIPTAREANM
			      ,DD.DESCRIPTION
			      ,COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME) AS DURABLEDEFNAME
			      ,DD.HITCOUNT
			      ,DD.TOOLTYPE
			      ,DD.TOOLDETAILTYPE
			      ,DD.FILMUSELAYER1
			      ,DD.DURABLECLASSID
			FROM   TOM_DURABLEDEFINITION DD
LEFT   JOIN TOM_TOOLREQUESTDETAIL TRDT  ON TRDT.DURABLEDEFID       = DD.DURABLEDEFID
                                            AND  TRDT.DURABLEDEFVERSION = DD.DURABLEDEFVERSION 
      LEFT JOIN BAS_VENDOR             VDR     ON TRDT.VENDORID          = VDR.VENDORID         --20210312 APPEND (제작처/협력업체 : 제작처명)
                                                            AND  TRDT.ENTERPRISEID      = VDR.ENTERPRISEID
	                                                          AND  TRDT.PLANTID        = VDR.PLANTID
      LEFT OUTER JOIN BAS_AREA                 SAC      ON SAC.AREAID              = TRDT.AREAID        --20210318 APPEND (작업장)
      LEFT OUTER JOIN CMD_DICTIONARY           DAR     ON DAR.DICTIONARYID        = SAC.AREANAME
                                                          AND  DAR.LANGUAGETYPE       =#{SESSION_LANGUAGETYPE}
                                                          AND  DAR.USE_YN = 'Y'
		
			LEFT   JOIN BAS_ITEMMASTER I      ON     DD.PRODUCTDEFID = I.ITEMID
			                                  AND    DD.PRODUCTDEFVERSION = I.ITEMVERSION
			LEFT   JOIN CMD_DICTIONARY D      ON     DD.DURABLEDEFNAME = D.DICTIONARYID
			                                  AND    D.LANGUAGETYPE =  #{SESSION_LANGUAGETYPE}
			WHERE  1 = 1
			<!-- AND    DD.DURABLETYPE = 'Tool' -->
			AND    I.MASTERDATACLASSID <![CDATA[<>]]> 'SparePart'
			<choose>				
			    <when  test="TOOLTYPE != null and TOOLTYPE !='' ">
			    	<choose>				
				          <when test="TOOLTYPE eq 'FRM_ITEM1'.toString()">
				          	AND    DD.DURABLECLASSID IN ('M', 'W')
				          </when>
				          <when test="TOOLTYPE eq 'FRM_ITEM2'.toString()">
				          		AND    DD.DURABLECLASSID IN ('B', 'J')
				          </when>
				          <when test="TOOLTYPE eq 'FRM_ITEM3'.toString()">
								AND    DD.DURABLECLASSID IN ('E')	          
				          </when>
			          </choose>
			    </when>
			</choose>
				<if test="SEARCH_KEY != null and SEARCH_KEY !='' ">
					AND (UPPER(DD.PRODUCTDEFID) LIKE '%' || #{SEARCH_KEY} || '%' 
					    OR UPPER(COALESCE(D.DICTIONARYNAME, DD.DURABLEDEFNAME)) LIKE '%' || #{SEARCH_KEY} || '%')
				</if>
				<if test="SEARCH_VALUE != null and SEARCH_VALUE !='' ">
			    	AND (UPPER(I.ITEMID) LIKE '%' || #{SEARCH_VALUE} || '%' 
					    OR UPPER(I.ITEMNAME) LIKE '%' || #{SEARCH_VALUE} || '%')
				</if>			
	 
UNION ALL

        SELECT   ITEMNAME
        ,ITEMID
        ,ITEMVERSION
        ,NULL AS TOOLKIND
        ,NULL AS TOOLFORM
        ,NULL AS TOOLFORMNAME
        ,NULL AS TOOLKINDNM
        ,NULL AS SUMMARY
        ,NULL AS MANUFACTURER
        ,NULL AS SCALEX
        ,NULL AS SCALEY
        ,NULL AS DURABLEDEFID
        ,NULL AS DURABLEDEFVERSION
        ,NULL AS RECEIPTAREAID
        ,NULL AS RECEIPTAREANM
        ,NULL AS DESCRIPTION
        ,NULL AS DURABLEDEFNAME
        ,NULL AS HITCOUNT
        ,NULL AS TOOLTYPE
        ,NULL AS TOOLDETAILTYPE
        ,NULL AS FILMUSELAYER1
        ,NULL AS DURABLECLASSID

             FROM    BAS_ITEMMASTER           A 
             INNER JOIN BAS_MASTERDATACLASS        B     ON     A.ENTERPRISEID       = B.ENTERPRISEID 
                                                      AND    A.MASTERDATACLASSID  = B.MASTERDATACLASSID            
             WHERE 1=1
			 	AND A.VALIDSTATE    = 'Valid'
			 	AND A.ENTERPRISEID = #{SESSION_ENTERPRISEID}
       			AND A.MASTERDATACLASSID = 'Product'
				<if test="SEARCH_KEY != null and SEARCH_KEY !='' ">
					AND 1=2
				</if>
				<if test="SEARCH_VALUE != null and SEARCH_VALUE !='' ">
			    	AND (UPPER(A.ITEMID) LIKE '%' || #{SEARCH_VALUE} || '%' 
					    OR UPPER(A.ITEMNAME) LIKE '%' || #{SEARCH_VALUE} || '%')
				</if>
      ORDER BY ITEMID, ITEMNAME, ITEMVERSION, DURABLEDEFID      
    </select>
    
<delete id="getDeleteProductItemSpecToolData" parameterType="map">
 	 /* smh.bas.dao.BAS02000Dao.getDeleteProductItemSpecToolData */
    	DELETE  
    	 FROM  BAS_PRODUCTITEMSPECTOOL  
    	WHERE ITEMID 				= #{ITEMID} 
		   AND ITEMVERSION 		= #{ITEMVERSION}
		   AND DURABLECLASSID 	= #{DURABLECLASSID}
		   AND "sequence"			= TO_NUMBER(#{SEQUENCE})		    
    </delete>
    
<update id="getUpdateProductItemSpecToolData" parameterType="map">
/* smh.bas.dao.BAS02000Dao.getUpdateProductItemSpecToolData */
		 MERGE INTO BAS_PRODUCTITEMSPECTOOL BP
		USING DUAL
		ON (	   BP.ITEMID = #{ITEMID} 
			AND BP.ITEMVERSION = #{ITEMVERSION}
			AND BP.DURABLECLASSID =#{DURABLECLASSID}
			AND BP."sequence" = TO_NUMBER(#{SEQUENCE}))
		WHEN MATCHED THEN
		    UPDATE
		    SET   USEITEMID  				= #{PRODUCTDEFID}
		          ,USEITEMVERSION        = #{PRODUCTDEFVERSION}
		          ,TOOLCLASS          		= #{TOOLCLASS}
		          ,TOOLFORM          		= #{TOOLFORM}
		          ,TOOLKIND          		= #{TOOLKIND}
		          ,SUMMARY          		= #{SUMMARY}
		          ,MANUFACTURER         = #{MANUFACTURER}
		          ,DURABLEDEFID           = #{DURABLEDEFID}
		          ,DURABLEDEFVERSION   = #{DURABLEDEFVERSION}
		          ,SCALEX          			= #{SCALEX}
		          ,SCALEY          			= #{SCALEY}
		          ,DESCRIPTION          	= #{DESCRIPTION}
		          ,RECEIPTAREAID          	= #{RECEIPTAREANM}
		          ,MODIFIER             		= #{MODIFIER}
		          ,MODIFIEDTIME         	= SYSDATE
		          ,LASTTXNHISTKEY       	= #{LASTTXNHISTKEY}
		          ,LASTTXNID            	= #{LASTTXNID}
		          ,LASTTXNUSER          	= #{MODIFIER}
		          ,LASTTXNTIME          	= SYSDATE
		          ,LASTTXNCOMMENT    	= #{LASTTXNCOMMENT}
		WHEN NOT MATCHED THEN
		    INSERT
		        (   ITEMID
					,ITEMVERSION
					,DURABLECLASSID
					,"sequence"
					,USEITEMID
					,USEITEMVERSION
					,DURABLEDEFID
					,TOOLFORM
					,TOOLKIND
					,TOOLCLASS
					,SUMMARY
					,MANUFACTURER
					,RECEIPTAREAID
					,SCALEX
					,SCALEY
					,DESCRIPTION
					,VALIDSTATE
					,DURABLEDEFVERSION
					,CREATOR
					,CREATEDTIME
					,MODIFIER
					,MODIFIEDTIME
					,LASTTXNHISTKEY
					,LASTTXNID
					,LASTTXNUSER
					,LASTTXNTIME
					,LASTTXNCOMMENT
					)
		    VALUES
		        (#{ITEMID}
		        ,#{ITEMVERSION}
		        ,#{DURABLECLASSID}
		        ,TO_NUMBER(#{SEQUENCE})
		        ,#{PRODUCTDEFID}              
		        ,#{PRODUCTDEFVERSION}              
		        ,#{DURABLEDEFID}              
		        ,#{TOOLFORM}              
		        ,#{TOOLKIND}              
		        ,#{TOOLCLASS}              
		        ,#{SUMMARY}
		        ,#{MANUFACTURER}
		        ,#{RECEIPTAREANM}
		        ,#{SCALEX}
		        ,#{SCALEY}
		        ,#{DESCRIPTION}
		        ,'Valid'
		        ,#{DURABLEDEFVERSION}		                                                 
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{MODIFIER}
		        ,SYSDATE
		        ,#{LASTTXNHISTKEY}
		        ,#{LASTTXNID}
		        ,#{CREATOR}
		        ,SYSDATE
		        ,#{LASTTXNCOMMENT}
		        )
		</update>   
</mapper>
