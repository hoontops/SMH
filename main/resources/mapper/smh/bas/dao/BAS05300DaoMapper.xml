<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smh.bas.dao.BAS05300Dao">
<!-- 작업장 작업인원 정보-->

    <!-- 작업장 작업인원 정보 등록 -->
    <insert id="insertBasAreaworker" parameterType="map">
    /* smh.bas.dao.BAS05300Dao.insertBasAreaworker  */
    INSERT INTO BAS_AREAWORKER( 
        ENTERPRISEID  
        ,PLANTID  
        ,AREAID  
        ,WORKERNAME  
        ,USERID  
        ,EMPLOYEENO  
        ,DEPARTMENT  
        ,OWNTYPE  
        ,WORKERTYPE  
        ,ISMAINAREA  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE  
        ,WORKERNO        ) 
    VALUES( 
        #{ENTERPRISEID}  
        ,#{PLANTID}  
        ,#{AREAID}  
        ,#{WORKERNAME}  
        ,#{USERID}  
        ,#{EMPLOYEENO}  
        ,#{DEPARTMENT}  
        ,#{OWNTYPE}  
        ,#{WORKERTYPE}  
        ,#{ISMAINAREA}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}  
        ,#{WORKERNO}    )
    </insert>

    <!-- 작업장 작업인원 정보 변경 -->
    <update id="updateBasAreaworker" parameterType="map" >
    /* smh.bas.dao.BAS05300Dao.updateBasAreaworker  */
    UPDATE BAS_AREAWORKER 
    SET 
        EMPLOYEENO = #{EMPLOYEENO}     
        ,DEPARTMENT = #{DEPARTMENT}     
        ,OWNTYPE = #{OWNTYPE}     
        ,WORKERTYPE = #{WORKERTYPE}     
        ,ISMAINAREA = #{ISMAINAREA}     
        ,DESCRIPTION = #{DESCRIPTION}             
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}     
        ,WORKERNO = #{WORKERNO}
    WHERE ENTERPRISEID = #{ENTERPRISEID}
    AND PLANTID = #{PLANTID}
    AND AREAID = #{AREAID}
    AND WORKERNAME = #{WORKERNAME}
    AND USERID = #{USERID}
    </update>

    <!-- 작업장 작업인원 정보 삭제 -->
    <update id="deleteBasAreaworker" parameterType="map" > 
    /* smh.bas.dao.BAS05300Dao.deleteBasAreaworker  */
    DELETE FROM BAS_AREAWORKER 
    WHERE ENTERPRISEID = #{ENTERPRISEID}
    AND PLANTID = #{PLANTID}
    AND AREAID = #{AREAID}
    AND WORKERNAME = #{WORKERNAME}
    AND USERID = #{USERID}
    </update>

    <!-- 작업장 작업인원 정보 조회-->
    <select id="selectBasAreaworkerList" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.BAS05300Dao.selectBasAreaTreeList  */
    SELECT 
        A.ENTERPRISEID	
        ,A.PLANTID	
        ,A.AREAID	
        ,A.WORKERNAME	
        ,A.USERID	
        ,A.EMPLOYEENO	
        ,A.DEPARTMENT	
        ,A.OWNTYPE	
        ,A.WORKERTYPE	
        ,A.ISMAINAREA	
        ,A.DESCRIPTION	
        ,CU.USER_NM AS CREATOR
        ,TO_CHAR(A.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME
        ,MU.USER_NM AS MODIFIER
        ,TO_CHAR(A.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
        ,A.LASTTXNHISTKEY	
        ,A.LASTTXNID	
        ,A.LASTTXNUSER	
        ,A.LASTTXNTIME	
        ,A.LASTTXNCOMMENT	
        ,A.VALIDSTATE	
        ,A.WORKERNO	
    FROM	BAS_AREAWORKER A 
    LEFT OUTER JOIN CMD_USERS                CU   ON   A.CREATOR                    = CU.USER_ID
    LEFT OUTER JOIN CMD_USERS                MU   ON   A.MODIFIER                   = MU.USER_ID
    WHERE 1=1 
        AND A.ENTERPRISEID = #{SESSION_ENTERPRISEID}
    <if test="PLANTID != null and PLANTID !='' "> 
        AND A.PLANTID = #{PLANTID}
    </if>
    <if test="AREAID != null and AREAID !='' "> 
        AND A.AREAID = #{AREAID}
    </if>
    <if test="WORKERNAME != null and WORKERNAME !='' "> 
        AND A.WORKERNAME = #{WORKERNAME}
    </if>
    <if test="VALIDSTATE != null and VALIDSTATE !='' "> 
        AND A.VALIDSTATE = #{VALIDSTATE}
    </if>
    </select>
    
    <!-- 작업장 트리 정보 조회-->
    <select id="selectBasAreaTreeList" parameterType="map" resultType="hashmap">
    /* smh.qam.dao.BAS05300Dao.selectBasAreaTreeList  */
    WITH AREA 
    	(
    		AREAID
    		,AREANAME
			,PARENTAREAID
			,AREATYPE 
			,OWNTYPE
			,VALIDSTATE
			,AREALEVEL
			,ISMODIFY
    	)  AS (
		SELECT A.AREAID
				 ,CASE WHEN DIC.DICTIONARYNAME IS NULL THEN A.AREAID
						 ELSE DIC.DICTIONARYNAME
						 END AS AREANAME
				 ,A.PARENTAREAID
				 ,A.AREATYPE
				 ,A.OWNTYPE
				 ,A.VALIDSTATE
				 ,1 AS AREALEVEL
				 ,'Y' AS ISMODIFY
		FROM BAS_AREA A
		LEFT OUTER JOIN CMD_DICTIONARY DIC 
		ON A.AREANAME = DIC.DICTIONARYID
		AND DIC.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		WHERE A.PARENTAREAID IS NULL
		AND A.VALIDSTATE  = 'Valid'
		AND A.PLANTID = #{PLANTID}
		UNION ALL
		SELECT A.AREAID
				 ,CASE WHEN DIC.DICTIONARYNAME IS NULL THEN A.AREAID
						 ELSE DIC.DICTIONARYNAME
						 END AS AREANAME
				 ,A.PARENTAREAID
				 ,A.AREATYPE
				 ,A.OWNTYPE
				 ,A.VALIDSTATE
				 ,AREALEVEL + 1 AS AREALEVEL
				 ,NVL(AR.ISMODIFY, 'N') AS ISMODIFY
		FROM BAS_AREA A
		INNER JOIN AREA T 
		ON A.PARENTAREAID = T.AREAID
		LEFT OUTER JOIN CMD_DICTIONARY DIC 
		ON A.AREANAME = DIC.DICTIONARYID
		AND DIC.LANGUAGETYPE = #{SESSION_LANGUAGETYPE}
		LEFT JOIN FN_AREA(#{SESSION_USER_ID}) AR  
		ON   A.AREAID  = AR.AREAID
		WHERE 1 = 1 
	)
 , PRE_TREE AS (     	
	SELECT '*' AS AREAID
    		,'Root' AS AREANAME
			,NULL AS PARENTAREAID
			,NULL AS AREATYPE 
			,NULL AS OWNTYPE
			,'Valid' AS VALIDSTATE
			,NULL AS AREAID_COPY
			,0 AS AREALEVEL
			,'Y' AS ISMODIFY
	FROM DUAL
	UNION ALL
	SELECT T.AREAID
			 ,T.AREANAME
			 ,T.PARENTAREAID
			 ,T.AREATYPE
			 ,T.OWNTYPE
			 ,T.VALIDSTATE
			 ,T.AREAID		AS AREAID_COPY
			 ,T.AREALEVEL		
			 ,T.ISMODIFY
	FROM AREA	T
    WHERE   T.AREATYPE != #{AREATYPE}
    UNION ALL
    SELECT T.AREAID
			 ,T.AREANAME
			 ,T.PARENTAREAID
			 ,T.AREATYPE
			 ,T.OWNTYPE
			 ,T.VALIDSTATE
			 ,T.AREAID		AS AREAID_COPY
			 ,T.AREALEVEL		
			 ,T.ISMODIFY
	FROM AREA	T
    WHERE  T.AREATYPE = #{AREATYPE}
    AND T.OWNTYPE IN ( SELECT TRIM(REGEXP_SUBSTR(ORG_DATA, '[^,]+', 1, LEVEL)) AS SPLIT_DATA
                                FROM  (SELECT  #{OWNTYPE} AS ORG_DATA FROM DUAL)
                                CONNECT BY  INSTR(ORG_DATA, ',', 1, LEVEL - 1) > 0 )  
	ORDER BY AREANAME
	)
    SELECT  *           -- (21.04.27) 김진현 추가
      FROM PRE_TREE
      WHERE (AREATYPE != 'Area' OR ISMODIFY = 'Y')
      START WITH PARENTAREAID IS NULL
      CONNECT BY PRIOR   AREAID = PARENTAREAID
      ORDER SIBLINGS BY AREANAME ASC
    </select>

</mapper>
