<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    파일명       : Claim공정별 기준금액
    설명          : Claim공정별 기준금액
    작성자       : 진성하
    최초작성일 : 2021.04.10
<< 개정이력(Modification Information) >>
      수정일              수정자      수정내용
     2021.04.10      진성하     최초  생성
-->

<mapper namespace="smh.osm.dao.OSM00100Dao">
<!-- 제품견적공정별-->

    <!-- 제품견적공정별 등록 -->
    <insert id="insertBasProductquotationsegment" parameterType="map">
    /* "smh.osm.dao.OSM00100Dao.insertBasProductquotationsegment"  */
    INSERT INTO BAS_PRODUCTQUOTATIONSEGMENT( 
        PRODUCTDEFID  
        ,PRODUCTDEFVERSION  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,PROCESSSEGMENTID  
        ,PROCESSSEGMENTVERSION  
        ,ENTERPRISEID  
        ,PLANTID  
        ,VARIABLECOST  
        ,FIXEDCOST  
        ,MATERIALCOST  
        ,MATERIALPROCESSCOST  
        ,BOXCOST  
        ,MOLDCOST  
        ,SAMPLECOST  
        ,MANUFACTURINGOVERHEAD  
        ,GENERALCOST  
        ,ETCCOST  
        ,DEFECTAMOUNT  
        ,AMOUNT  
        ,PCSAMOUNT  
        ,CUMULATIVEAMOUNT  
        ,CUMULATIVERATE  
        ,CUMULATIVEPCSAMOUNT  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{PRODUCTDEFID}  
        ,#{PRODUCTDEFVERSION}  
        ,#{PROCESSDEFID}  
        ,#{PROCESSDEFVERSION}  
        ,#{PROCESSSEGMENTID}  
        ,#{PROCESSSEGMENTVERSION}  
        ,#{SESSION_ENTERPRISEID}  
        ,NVL(#{PLANTID},#{SESSION_SITETYPE})  
        ,#{VARIABLECOST}  
        ,#{FIXEDCOST}  
        ,#{MATERIALCOST}  
        ,#{MATERIALPROCESSCOST}  
        ,#{BOXCOST}  
        ,#{MOLDCOST}  
        ,#{SAMPLECOST}  
        ,#{MANUFACTURINGOVERHEAD}  
        ,#{GENERALCOST}  
        ,#{ETCCOST}  
        ,#{DEFECTAMOUNT}  
        ,#{AMOUNT}  
        ,#{PCSAMOUNT}  
        ,#{CUMULATIVEAMOUNT}  
        ,#{CUMULATIVERATE}  
        ,#{CUMULATIVEPCSAMOUNT}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>
    
    <!-- 제품견적공정별 copy -->
    <insert id="insertBasProductquotationsegmentCopy" parameterType="map">
    /* "smh.osm.dao.OSM00100Dao.insertBasProductquotationsegmentCopy"  */
    INSERT INTO BAS_PRODUCTQUOTATIONSEGMENT( 
        PRODUCTDEFID  
        ,PRODUCTDEFVERSION  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,PROCESSSEGMENTID  
        ,PROCESSSEGMENTVERSION  
        ,ENTERPRISEID  
        ,PLANTID  
        ,VARIABLECOST  
        ,FIXEDCOST  
        ,MATERIALCOST  
        ,MATERIALPROCESSCOST  
        ,BOXCOST  
        ,MOLDCOST  
        ,SAMPLECOST  
        ,MANUFACTURINGOVERHEAD  
        ,GENERALCOST  
        ,ETCCOST  
        ,DEFECTAMOUNT  
        ,AMOUNT  
        ,PCSAMOUNT  
        ,CUMULATIVEAMOUNT  
        ,CUMULATIVERATE  
        ,CUMULATIVEPCSAMOUNT  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    SELECT 
        #{TOPRODUCTDEFID}  
        ,#{TOPRODUCTDEFVERSION}   
        ,#{TOPROCESSDEFID}   
        ,#{TOPROCESSDEFVERSION}   
        ,PROCESSSEGMENTID  
        ,PROCESSSEGMENTVERSION  
        ,ENTERPRISEID  
        ,PLANTID  
        ,VARIABLECOST  
        ,FIXEDCOST  
        ,MATERIALCOST  
        ,MATERIALPROCESSCOST  
        ,BOXCOST  
        ,MOLDCOST  
        ,SAMPLECOST  
        ,MANUFACTURINGOVERHEAD  
        ,GENERALCOST  
        ,ETCCOST  
        ,DEFECTAMOUNT  
        ,AMOUNT  
        ,PCSAMOUNT  
        ,CUMULATIVEAMOUNT  
        ,CUMULATIVERATE  
        ,CUMULATIVEPCSAMOUNT  
        ,DESCRIPTION  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,VALIDSTATE    
    FROM BAS_PRODUCTQUOTATIONSEGMENT
    WHERE PROCESSDEFID = #{PROCESSDEFID}
    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    AND VALIDSTATE = 'Valid'
    </insert>

    <!-- 제품견적공정별 변경 -->
    <update id="updateBasProductquotationsegment" parameterType="map" >
    /* "smh.osm.dao.OSM00100Dao.updateBasProductquotationsegment"  */
    UPDATE BAS_PRODUCTQUOTATIONSEGMENT 
    SET 
        VARIABLECOST = #{VARIABLECOST}     
        ,FIXEDCOST = #{FIXEDCOST}     
        ,MATERIALCOST = #{MATERIALCOST}     
        ,MATERIALPROCESSCOST = #{MATERIALPROCESSCOST}     
        ,BOXCOST = #{BOXCOST}     
        ,MOLDCOST = #{MOLDCOST}     
        ,SAMPLECOST = #{SAMPLECOST}     
        ,MANUFACTURINGOVERHEAD = #{MANUFACTURINGOVERHEAD}     
        ,GENERALCOST = #{GENERALCOST}     
        ,ETCCOST = #{ETCCOST}     
        ,DEFECTAMOUNT = #{DEFECTAMOUNT}     
        ,AMOUNT = #{AMOUNT}     
        ,PCSAMOUNT = #{PCSAMOUNT}     
        ,CUMULATIVEAMOUNT = #{CUMULATIVEAMOUNT}     
        ,CUMULATIVERATE = #{CUMULATIVERATE}     
        ,CUMULATIVEPCSAMOUNT = #{CUMULATIVEPCSAMOUNT}     
        ,DESCRIPTION = #{DESCRIPTION}             
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE PROCESSDEFID = #{PROCESSDEFID}
    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </update>

    <!-- 제품견적공정별 삭제 -->
    <update id="deleteBasProductquotationsegment" parameterType="map" > 
    /* "smh.osm.dao.OSM00100Dao.deleteBasProductquotationsegment"  */
    UPDATE BAS_PRODUCTQUOTATIONSEGMENT 
    SET MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = 'Invalid'
    WHERE PROCESSDEFID = #{PROCESSDEFID}
    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </update>

    <!-- 제품견적공정별 조회-->
    <select id="selectBasProductquotationsegmentList" parameterType="map" resultType="hashmap">
 	SELECT 	 /* smh.bas.dao.OSM00100Dao.selectBasProductquotationsegmentList */
	       PRQ.PRODUCTDEFID
	    ,  PRQ.PRODUCTDEFVERSION
	    ,  PRQ.PROCESSDEFID
	    ,  PRQ.PROCESSDEFVERSION
	    ,  PRQ.PROCESSSEGMENTID 
	    ,  PRQ.PROCESSSEGMENTVERSION
	    ,  DIC.DICTIONARYNAME  AS        PROCESSSEGMENTNAME 
		,	PRQ.VARIABLECOST
		,	PRQ.FIXEDCOST
		,	PRQ.MATERIALCOST
		,	PRQ.MATERIALPROCESSCOST
		,	PRQ.BOXCOST
		,	PRQ.MOLDCOST
		,	PRQ.SAMPLECOST
		,	PRQ.MANUFACTURINGOVERHEAD
		,	PRQ.GENERALCOST
		,	PRQ.ETCCOST
		,	PRQ.DEFECTAMOUNT
		,	PRQ.AMOUNT
		,	PRQ.PCSAMOUNT
		,	PRQ.CUMULATIVEAMOUNT
		,	PRQ.CUMULATIVERATE
		,	PRQ.CUMULATIVEPCSAMOUNT
		,	PRQ.ENTERPRISEID
		,	PRQ.DESCRIPTION 
		,	PRH.PATHSEQUENCE
		,	#{PLANTID}   AS PLANTID
		,	PRA.CURRENCYUNIT
		,	PRA.DEFECTAMOUNT                    AS DEFECTAMOUNTTOT
		,	PRA.BOXCOST							AS BOXCOSTTOT
		,	PRA.MOLDCOST						AS MOLDCOSTTOT
		,	PRA.SAMPLECOST						AS SAMPLECOSTTOT
		,	PRA.MANUFACTURINGOVERHEAD			AS MANUFACTURINGOVERHEADTOT
		,   PRA.GENERALCOST						AS GENERALCOSTTOT
		,	PRA.ETCCOST							AS ETCCOSTTOT
		,	PRD.PCSMM
		,	USERSEQUENCE
		,	PATHSEQUENCE
		,	PRODUCTDEFNAME
		,   ROUND(#{SALEPRICE} * CUMULATIVERATE / 100,1) as DEFECTUNITPRICE
		
		-- (21.07.28) (미사용(무효화)된 공정 -> 유효상태 Valid(사용) / Invalid(미사용))
        ,   CASE WHEN PRH.PATHSEQUENCE IS NULL
                 THEN 'Invalid'
                 ELSE 'Valid'
                 END                 
                 AS USE_YN
        ---------------------------------------------------------------------------
        
        -- (21.08.04) 등록자,등록일,수정자,수정일 추가
        ,	U1.USER_NM AS CREATOR
        ,   TO_CHAR(PRQ.CREATEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDTIME				   
        ,	U2.USER_NM AS MODIFIER
        ,   TO_CHAR(PRQ.MODIFIEDTIME, 'YYYY-MM-DD HH24:MI:SS') AS MODIFIEDTIME
		
	  FROM      BAS_PRODUCTQUOTATIONSEGMENT  PRQ  
	  LEFT OUTER JOIN     BAS_PRODUCTDEFINITION        PRD ON    PRQ.PRODUCTDEFID          = PRD.PRODUCTDEFID
	                                                    AND   PRQ.PRODUCTDEFVERSION     = PRD.PRODUCTDEFVERSION
	                                                    AND   PRQ.VALIDSTATE            = 'Valid'                               
	  LEFT OUTER JOIN BAS_PROCESSPATH              PRH   ON    PRH.PROCESSDEFID          = PRQ.PROCESSDEFID
	                                                    AND   PRH.PROCESSDEFVERSION     = PRQ.PROCESSDEFVERSION
	                                                    <!-- 2021-06-17 무효화 공정도 나오게 변경 -->
	                                                    <!-- AND   PRH.VALIDSTATE            = 'Valid' -->
	                                                    AND   PRQ.PROCESSSEGMENTID      = PRH.PROCESSSEGMENTID
	                                                    AND   PRQ.PROCESSSEGMENTVERSION = PRH.PROCESSSEGMENTVERSION
	  LEFT OUTER JOIN BAS_PROCESSSEGMENT           PRS   ON    PRS.PROCESSSEGMENTID      = PRQ.PROCESSSEGMENTID
	                                                    AND   PRS.PROCESSSEGMENTVERSION = PRQ.PROCESSSEGMENTVERSION
	  LEFT OUTER JOIN CMD_DICTIONARY              DIC    ON  DIC.DICTIONARYID          = PRS.PROCESSSEGMENTNAME
                                  						AND  DIC.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE} 
	    LEFT OUTER JOIN BAS_PRODUCTQUOTATION        PRA    ON    PRA.PRODUCTDEFID          = PRD.PRODUCTDEFID  -- 제품견적정보
	                                                    AND   PRA.PRODUCTDEFVERSION     = PRD.PRODUCTDEFVERSION
	                                                               AND   PRA.PROCESSDEFID          = PRD.PROCESSDEFID
	                                                    AND   PRA.PROCESSDEFVERSION     = PRD.PROCESSDEFVERSION
		--(21.08.04) 등록자, 수정자, 등록일시, 수정일시 추가
        LEFT OUTER JOIN CMD_USERS 			U1  ON  PRQ.CREATOR = U1.USER_ID
        LEFT OUTER JOIN CMD_USERS 			U2  ON  PRQ.MODIFIER = U2.USER_ID

	                                                    		
	WHERE	PRQ.VALIDSTATE           = 'Valid'
	AND		PRQ.PRODUCTDEFID         = #{PRODUCTDEFID}
	AND		PRQ.PRODUCTDEFVERSION    = #{PRODUCTDEFVERSION}
	AND		PRQ.PROCESSDEFID         = #{PROCESSDEFID}
	AND		PRQ.PROCESSDEFVERSION    = #{PROCESSDEFVERSION}
	-- (21.07.28) 정렬 기준 변경 라우팅 상의 공정 순서 -> 사용자 정의 순서
	--ORDER BY PRH.PATHSEQUENCE
	ORDER BY   LPAD(PRH.USERSEQUENCE, 6, '0')  -- (숫자로변경보다 앞에 자리 채워서 정렬) (21.07.28)(라우팅 상의 공정 순서 -> 사용자 정의 순서)
	
    </select>

    <!-- 제품견적공정별 조회(최초)-->
    <select id="selectBasProductquotationsegmentList_first" parameterType="map" resultType="hashmap">
 	SELECT 	 /* smh.bas.dao.OSM00100Dao.selectBasProductquotationsegmentList_first */
		 	PRD.PRODUCTDEFID
		,	PRD.PRODUCTDEFVERSION
		,	PRD.PROCESSDEFID
		,	PRD.PROCESSDEFVERSION
		,	PRH.PROCESSSEGMENTID 
		,	PRH.PROCESSSEGMENTVERSION
		,	DIC.DICTIONARYNAME  AS        PROCESSSEGMENTNAME 
		,	PRQ.VARIABLECOST
		,	PRQ.FIXEDCOST
		,	PRQ.MATERIALCOST
		,	PRQ.MATERIALPROCESSCOST
		,	PRQ.BOXCOST
		,	PRQ.MOLDCOST
		,	PRQ.SAMPLECOST
		,	PRQ.MANUFACTURINGOVERHEAD
		,	PRQ.GENERALCOST
		,	PRQ.ETCCOST
		,	PRQ.DEFECTAMOUNT
		,	PRQ.AMOUNT
		,	PRQ.PCSAMOUNT
		,	PRQ.CUMULATIVEAMOUNT
		,	PRQ.CUMULATIVERATE
		,	PRQ.CUMULATIVEPCSAMOUNT
		,	PRQ.ENTERPRISEID
		,	PRQ.DESCRIPTION 
		,	PRH.PATHSEQUENCE
		,	#{PLANTID}   AS PLANTID
		,	PRA.CURRENCYUNIT
		,	PRA.DEFECTAMOUNT                    AS DEFECTAMOUNTTOT
		,	PRA.BOXCOST							AS BOXCOSTTOT
		,	PRA.MOLDCOST						AS MOLDCOSTTOT
		,	PRA.SAMPLECOST						AS SAMPLECOSTTOT
		,	PRA.MANUFACTURINGOVERHEAD			AS MANUFACTURINGOVERHEADTOT
		,   PRA.GENERALCOST						AS GENERALCOSTTOT
		,	PRA.ETCCOST							AS ETCCOSTTOT
		,	PRD.PCSMM
		,	USERSEQUENCE
		,	PATHSEQUENCE
		,	PRODUCTDEFNAME
		,   ROUND(#{SALEPRICE} * CUMULATIVERATE / 100,1) as DEFECTUNITPRICE
		
		-- (21.07.28) (미사용(무효화)된 공정 -> 유효상태 Valid(사용) / Invalid(미사용))
        ,   CASE WHEN PRH.PATHSEQUENCE IS NULL
                 THEN 'Invalid'
                 ELSE 'Valid'
                 END                 
                 AS USE_YN
        ---------------------------------------------------------------------------
        
        -- (21.08.04) 등록자,등록일,수정자,수정일 추가
        ,	'' AS CREATOR
        ,   	'' AS CREATEDTIME				   
        ,	'' AS MODIFIER
        ,   	'' AS MODIFIEDTIME
        
		
	FROM            BAS_PRODUCTDEFINITION        PRD                                
	INNER      JOIN BAS_PROCESSPATH              PRH   ON    PRH.PROCESSDEFID          = PRD.PROCESSDEFID
	                                                  AND   PRH.PROCESSDEFVERSION     = PRD.PROCESSDEFVERSION
	                                                  -- (미사용 내역도 조회 가능 하도록) (21.07.28)
                                                      --AND   PRH.VALIDSTATE            = 'Valid'
	INNER      JOIN BAS_PROCESSSEGMENT           PRS   ON    PRS.PROCESSSEGMENTID      = PRH.PROCESSSEGMENTID
	                                                  AND   PRS.PROCESSSEGMENTVERSION = PRH.PROCESSSEGMENTVERSION
	LEFT OUTER JOIN CMD_DICTIONARY            	DIC	  ON	DIC.DICTIONARYID          = PRS.PROCESSSEGMENTNAME
										              AND	DIC.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE}  
	LEFT OUTER JOIN BAS_PRODUCTQUOTATIONSEGMENT  PRQ   ON    PRQ.PRODUCTDEFID          = PRD.PRODUCTDEFID
	                                                  AND   PRQ.PRODUCTDEFVERSION     = PRD.PRODUCTDEFVERSION
	                                                  AND   PRQ.PROCESSDEFID          = PRH.PROCESSDEFID
	                                                  AND   PRQ.PROCESSDEFVERSION     = PRH.PROCESSDEFVERSION
	                                                  AND   PRQ.PROCESSSEGMENTID      = PRH.PROCESSSEGMENTID
	                                                  AND   PRQ.PROCESSSEGMENTVERSION = PRH.PROCESSSEGMENTVERSION
	                                                  AND   PRQ.VALIDSTATE            = 'Valid'
  	LEFT OUTER JOIN BAS_PRODUCTQUOTATION      	PRA	  ON    PRA.PRODUCTDEFID          = PRD.PRODUCTDEFID  -- 제품견적정보
	                                                  AND   PRA.PRODUCTDEFVERSION     = PRD.PRODUCTDEFVERSION
                                                               AND   PRA.PROCESSDEFID          = PRD.PROCESSDEFID
	                                                  AND   PRA.PROCESSDEFVERSION     = PRD.PROCESSDEFVERSION
	WHERE	PRD.VALIDSTATE           = 'Valid'
	AND		PRD.PRODUCTDEFID         = #{PRODUCTDEFID}
	AND		PRD.PRODUCTDEFVERSION    = #{PRODUCTDEFVERSION}
	AND		PRD.PROCESSDEFID         = #{PROCESSDEFID}
	AND		PRD.PROCESSDEFVERSION    = #{PROCESSDEFVERSION}
	--ORDER BY PRH.PATHSEQUENCE
	ORDER BY   LPAD(PRH.USERSEQUENCE, 6, '0')  -- (숫자로변경보다 앞에 자리 채워서 정렬) (21.07.28)
	
    </select>
    
    <!-- 제품견적공정별 상세조회-->
    <select id="selectBasProductquotationsegmentCnt" parameterType="map" resultType="Integer">
    SELECT /* "smh.osm.dao.OSM00100Dao.selectBasProductquotationsegmentCnt"  */
        count(*)
    FROM	BAS_PRODUCTQUOTATIONSEGMENT A 
    WHERE A.PROCESSDEFID = #{PROCESSDEFID}
    AND	A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND	A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND	A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    AND	A.PRODUCTDEFID = #{PRODUCTDEFID}
    AND	A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </select>
    <!-- 제품견적공정별 건수조회-->
    <select id="selectBasProductquotationsegmentCnt_first" parameterType="map" resultType="Integer">
    SELECT /* "smh.osm.dao.OSM00100Dao.selectBasProductquotationsegmentCnt_first"  */
        count(*)
    FROM	BAS_PRODUCTQUOTATIONSEGMENT A 
    WHERE A.PROCESSDEFID = #{PROCESSDEFID}
    AND	A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND	A.PRODUCTDEFID = #{PRODUCTDEFID}
    AND	A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    AND	A.VALIDSTATE           = 'Valid'
    </select>
    
    <!-- Product 정보 가져오기  -->
    <select id="selectGetProductInformatByOsp" parameterType="map" resultType="hashmap">
		SELECT /* "smh.osm.dao.OSM00100Dao.selectProductInformatByOsp"  */
				PRD.PRODUCTDEFID           AS  PRODUCTDEFID
			,	PRD.PRODUCTDEFVERSION	   AS  PRODUCTDEFVERSION
			,	PRD.PRODUCTDEFNAME         AS  PRODUCTDEFNAME
			,	NVL(BASEUNIT,'KRW') AS CURRENCYUNIT <!-- NVL(PRQ.CURRENCYUNIT, EXC.CURRENCY_CODE) AS CURRENCYUNIT -->
			,	PRQ.DEFECTAMOUNT
			,	PRQ.BOXCOST
			,	PRQ.MOLDCOST
			,	PRQ.SAMPLECOST
			,	PRQ.MANUFACTURINGOVERHEAD
			,	PRQ.GENERALCOST
			,   PRQ.ETCCOST
			,	MPR.PCSMM  
			,	PRD.PROCESSDEFID
			,	PRD.PROCESSDEFVERSION
			,   PRD.PRODUCTDEFID || '|' || PRD.PRODUCTDEFVERSION || '|'	||COALESCE(PRD.PROCESSDEFID,'') || '|' || COALESCE(PRD.PROCESSDEFVERSION,'') || '|' AS PRODUCTDEFCODE
			,   UPR.UNITPRICE * NVL(EXC.EXCHANGE_RATE,1)   AS SALEPRICE
		FROM	       BAS_PRODUCTDEFINITION    PRD
		LEFT OUTER JOIN BAS_PRODUCTQUOTATION     PRQ   ON    PRQ.PRODUCTDEFID      = PRD.PRODUCTDEFID  -- 제품견적정보
		                                              AND   PRQ.PRODUCTDEFVERSION = PRD.PRODUCTDEFVERSION
		LEFT OUTER JOIN BAS_PRODUCTITEMSPEC      MPR	  ON    MPR.ITEMID            = PRD.PRODUCTDEFID  -- 품목사양 정보
		                                              AND   MPR.ITEMVERSION       = PRD.PRODUCTDEFVERSION
		LEFT JOIN BAS_UNITPRICEFORMES UPR     ON  PRD.PRODUCTDEFID = UPR.PRODUCTDEFID
		                            AND PRD.PRODUCTDEFVERSION = UPR.PRODUCTDEFVERSION
		LEFT JOIN BAS_EXCHANGE EXC  ON  UPR.CURRENCY_CODE = EXC.CURRENCY_CODE		
									AND EXC.PERIOD_NAME=TO_CHAR(SYSDATE,'YYYY-MM')                                              
		WHERE	1=1
		AND		PRD.VALIDSTATE           = 'Valid'
		AND		PRD.PRODUCTDEFID         = #{PRODUCTDEFID}
		AND		PRD.PRODUCTDEFVERSION    = #{PRODUCTDEFVERSION}
    </select>

    <!-- 판가 정보 가져오기  -->
    <select id="selectSalePrice" parameterType="map" resultType="hashmap">
		SELECT /* "smh.osm.dao.OSM00100Dao.selectSalePrice"  */
				NVL(BASEUNIT,'KRW') AS CURRENCYUNIT <!-- NVL(PRQ.CURRENCYUNIT, EXC.CURRENCY_CODE) AS CURRENCYUNIT -->
			,	UPR.UNITPRICE * NVL(EXC.EXCHANGE_RATE,1)   AS SALEPRICE
		FROM	BAS_UNITPRICEFORMES UPR   
		LEFT JOIN BAS_EXCHANGE EXC  ON  UPR.CURRENCY_CODE = EXC.CURRENCY_CODE		
									AND EXC.PERIOD_NAME=TO_CHAR(SYSDATE,'YYYY-MM')                                              
		WHERE	1=1
		AND		UPR.VALIDSTATE           = 'Valid'
		AND		UPR.PRODUCTDEFID         = #{PRODUCTDEFID}
		AND		UPR.PRODUCTDEFVERSION    = #{PRODUCTDEFVERSION}
    </select>
    <!-- 공정별 claim 금액 기준 환산금액 조회  계획 환율 값 가져오기   -->
    <select id="selectGetOutsourcedClaimExchangeValueByOsp" parameterType="map" resultType="hashmap">
		SELECT 	
				MEX.EXCHANGE_RATE                                    -- 환율
		FROM	BAS_EXCHANGE               MEX                        -- 환율 정보
		WHERE	1=1	 
		AND		MEX.BASEUNIT             = #{CURRENCYUNIT_FR}   -- 기본화폐단위
		AND		MEX.CURRENCY_CODE        = #{CURRENCYUNIT_TO}   -- 화폐단위
		AND		MEX.PERIOD_NAME          = #{PERIOD_NAME} 
		AND 	MEX.PLANTID              = #{SESSION_SITETYPE}
    </select>

    <select id="selectOutsourcedClaimExchange" parameterType="map" resultType="hashmap">
		SELECT	B.BASEUNIT
			,	B.CURRENCY_CODE as CURRENCYUNIT
			,	B.EXCHANGE_RATE
			,	B.PLANTID
		FROM BAS_EXCHANGE B
		INNER JOIN 
		(
			SELECT 	MAX(PERIOD_NAME) AS MAXDATE
			FROM BAS_EXCHANGE
		) M ON M.MAXDATE = B.PERIOD_NAME
		WHERE 1=1
		<if test="PLANTID != null and PLANTID !=''"> 
		AND B.PLANTID = #{PLANTID}
		</if>
    </select>

    <select id="selectGetOutsourcedClaimBaseAmountCopy" parameterType="map" resultType="hashmap">
		SELECT 	/* "smh.osm.dao.OSM00100Dao.selectOutsourcedClaimBaseAmountCopy"  */
			 	PRQ.PRODUCTDEFID
			,	PRQ.PRODUCTDEFVERSION
			,	PRQ.PROCESSDEFID
			,	PRQ.PROCESSDEFVERSION
			,	PRQ.PROCESSSEGMENTID 
			,	PRQ.PROCESSSEGMENTVERSION
			,	COALESCE(PRQ.VARIABLECOST         ,0)     AS VARIABLECOST
			,	COALESCE(PRQ.FIXEDCOST            ,0)     AS FIXEDCOST
			,	COALESCE(PRQ.MATERIALCOST         ,0)     AS MATERIALCOST
			,	COALESCE(PRQ.MATERIALPROCESSCOST  ,0)     AS MATERIALPROCESSCOST
			,	COALESCE(PRQ.BOXCOST              ,0)     AS BOXCOST
			,	COALESCE(PRQ.MOLDCOST             ,0)     AS MOLDCOST
			,	COALESCE(PRQ.SAMPLECOST           ,0)     AS SAMPLECOST
			,	COALESCE(PRQ.MANUFACTURINGOVERHEAD,0)     AS MANUFACTURINGOVERHEAD
			,	COALESCE(PRQ.GENERALCOST          ,0)     AS GENERALCOST
			,	COALESCE(PRQ.ETCCOST              ,0)     AS ETCCOST
			,	COALESCE(PRQ.DEFECTAMOUNT         ,0)     AS DEFECTAMOUNT
			,	COALESCE(PRQ.AMOUNT               ,0)     AS AMOUNT
			,	COALESCE(PRQ.PCSAMOUNT            ,0)     AS PCSAMOUNT
			,	COALESCE(PRQ.CUMULATIVEAMOUNT     ,0)     AS CUMULATIVEAMOUNT
			,	COALESCE(PRQ.CUMULATIVERATE       ,0)     AS CUMULATIVERATE
			,	COALESCE(PRQ.CUMULATIVEPCSAMOUNT  ,0)     AS CUMULATIVEPCSAMOUNT
			,	PTH.ENTERPRISEID                          AS ENTERPRISEID
			,	''                                        AS DESCRIPTION 
			,	COALESCE(PRA.CURRENCYUNIT,'KRW')          AS CURRENCYUNIT
			,	COALESCE(PRA.DEFECTAMOUNT  ,0)            AS DEFECTAMOUNTTOT
	   FROM      BAS_PRODUCTQUOTATIONSEGMENT  PRQ  
	    LEFT OUTER JOIN     BAS_PRODUCTDEFINITION        PDT ON    PRQ.PRODUCTDEFID          = PDT.PRODUCTDEFID
	                                                      AND   PRQ.PRODUCTDEFVERSION     = PDT.PRODUCTDEFVERSION
	                                                      AND   PRQ.VALIDSTATE            = 'Valid'                               
	    LEFT OUTER JOIN BAS_PROCESSPATH              PTH   ON    PTH.PROCESSDEFID          = PRQ.PROCESSDEFID
	                                                      AND   PTH.PROCESSDEFVERSION     = PRQ.PROCESSDEFVERSION
	                                                      AND   PTH.VALIDSTATE            = 'Valid'
	                                                      AND   PRQ.PROCESSSEGMENTID      = PTH.PROCESSSEGMENTID
	                                                      AND   PRQ.PROCESSSEGMENTVERSION = PTH.PROCESSSEGMENTVERSION
	    LEFT OUTER JOIN BAS_PROCESSSEGMENT           PRS   ON    PRS.PROCESSSEGMENTID      = PRQ.PROCESSSEGMENTID
	                                                      AND   PRS.PROCESSSEGMENTVERSION = PRQ.PROCESSSEGMENTVERSION
        LEFT OUTER JOIN BAS_PRODUCTQUOTATION        PRA    ON    PRA.PRODUCTDEFID          = PDT.PRODUCTDEFID  -- 제품견적정보
	                                                      AND   PRA.PRODUCTDEFVERSION     = PDT.PRODUCTDEFVERSION
	                                                      AND   PRA.PROCESSDEFID          = PDT.PROCESSDEFID
	                                                      AND   PRA.PROCESSDEFVERSION     = PDT.PROCESSDEFVERSION    			
		WHERE  1=1
		AND		PRQ.PRODUCTDEFID      =#{PRODUCTDEFID}
		AND		PRQ.PRODUCTDEFVERSION =#{PRODUCTDEFVERSION}
		AND    PRQ.Validstate = 'Valid'
    </select>


    <!-- [테이블 설명을 입력하세요] 등록 -->
    <insert id="insertBasProductquotation" parameterType="map">
     /* "smh.osm.dao.OSM00100Dao.insertBasProductquotation"  */
    INSERT INTO BAS_PRODUCTQUOTATION( 
        PRODUCTDEFID  
        ,PRODUCTDEFVERSION  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,ENTERPRISEID  
        ,PLANTID  
        ,CURRENCYUNIT  
        ,DEFECTAMOUNT  
        ,BOXCOST  
        ,MOLDCOST  
        ,SAMPLECOST  
        ,MANUFACTURINGOVERHEAD  
        ,GENERALCOST  
        ,ETCCOST  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{PRODUCTDEFID}  
        ,#{PRODUCTDEFVERSION}  
        ,#{PROCESSDEFID}  
        ,#{PROCESSDEFVERSION}  
        ,#{SESSION_ENTERPRISEID}  
        ,nvl(#{PLANTID},#{SESSION_SITETYPE})  
        ,#{CURRENCYUNIT}  
        ,#{DEFECTAMOUNT}  
        ,#{BOXCOST}  
        ,#{MOLDCOST}  
        ,#{SAMPLECOST}  
        ,#{MANUFACTURINGOVERHEAD}  
        ,#{GENERALCOST}  
        ,#{ETCCOST}  
        ,#{DESCRIPTION}  
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    )
    </insert>

    <insert id="insertBasProductquotationCopy" parameterType="map">
     /* "smh.osm.dao.OSM00100Dao.insertBasProductquotationCopy"  */
    INSERT INTO BAS_PRODUCTQUOTATION( 
        PRODUCTDEFID  
        ,PRODUCTDEFVERSION  
        ,PROCESSDEFID  
        ,PROCESSDEFVERSION  
        ,ENTERPRISEID  
        ,PLANTID  
        ,CURRENCYUNIT  
        ,DEFECTAMOUNT  
        ,BOXCOST  
        ,MOLDCOST  
        ,SAMPLECOST  
        ,MANUFACTURINGOVERHEAD  
        ,GENERALCOST  
        ,ETCCOST  
        ,DESCRIPTION  
        ,CREATOR  
        ,CREATEDTIME  
        ,MODIFIER  
        ,MODIFIEDTIME  
        ,LASTTXNHISTKEY  
        ,LASTTXNID  
        ,LASTTXNUSER  
        ,LASTTXNTIME  
        ,LASTTXNCOMMENT  
        ,VALIDSTATE        ) 
    VALUES( 
        #{TOPRODUCTDEFID}  
        ,#{TOPRODUCTDEFVERSION}  
        ,#{TOPROCESSDEFID}  
        ,#{TOPROCESSDEFVERSION}  
        ,ENTERPRISEID  
        ,PLANTID  
        ,CURRENCYUNIT  
        ,DEFECTAMOUNT  
        ,BOXCOST  
        ,MOLDCOST  
        ,SAMPLECOST  
        ,MANUFACTURINGOVERHEAD  
        ,GENERALCOST  
        ,ETCCOST  
        ,DESCRIPTION   
        ,#{CREATOR}  
        ,SYSDATE  
        ,#{MODIFIER}  
        ,SYSDATE  
        ,#{LASTTXNHISTKEY}  
        ,#{LASTTXNID}  
        ,#{LASTTXNUSER}  
        ,SYSDATE  
        ,#{LASTTXNCOMMENT}  
        ,#{VALIDSTATE}    
    WHERE PROCESSDEFID = #{PROCESSDEFID}
    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    AND VALIDSTATE = 'Valid'
    </insert>
    <!-- [테이블 설명을 입력하세요] 변경 -->
    <update id="updateBasProductquotation" parameterType="map" >
    /* "smh.osm.dao.OSM00100Dao.updateBasProductquotation"  */
    UPDATE BAS_PRODUCTQUOTATION 
    SET 
        CURRENCYUNIT = #{CURRENCYUNIT}     
        ,DEFECTAMOUNT = #{DEFECTAMOUNT}     
        ,BOXCOST = #{BOXCOST}     
        ,MOLDCOST = #{MOLDCOST}     
        ,SAMPLECOST = #{SAMPLECOST}     
        ,MANUFACTURINGOVERHEAD = #{MANUFACTURINGOVERHEAD}     
        ,GENERALCOST = #{GENERALCOST}     
        ,ETCCOST = #{ETCCOST}     
        ,MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = #{VALIDSTATE}
    WHERE PROCESSDEFID = #{PROCESSDEFID}
    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </update>

    <!-- [테이블 설명을 입력하세요] 삭제 -->
    <update id="deleteBasProductquotation" parameterType="map" > 
    /* "smh.osm.dao.OSM00100Dao.deleteBasProductquotation"  */
    UPDATE BAS_PRODUCTQUOTATION 
    SET MODIFIER = #{MODIFIER}     
        ,MODIFIEDTIME = SYSDATE     
        ,LASTTXNHISTKEY = #{LASTTXNHISTKEY}     
        ,LASTTXNID = #{LASTTXNID}     
        ,LASTTXNUSER = #{LASTTXNUSER}     
        ,LASTTXNTIME = SYSDATE     
        ,LASTTXNCOMMENT = #{LASTTXNCOMMENT}     
        ,VALIDSTATE = 'Invalid'
    WHERE PROCESSDEFID = #{PROCESSDEFID}
    AND PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND PRODUCTDEFID = #{PRODUCTDEFID}
    AND PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </update>
    
    <!-- [테이블 설명을 입력하세요] 상세조회-->
    <select id="selectBasProductquotationCnt" parameterType="map" resultType="integer">
    SELECT 	/* "smh.osm.dao.OSM00100Dao.selectBasProductquotationCnt"  */
        count(*)
    FROM	BAS_PRODUCTQUOTATION A 
    WHERE A.PROCESSDEFID = #{PROCESSDEFID}
    AND	A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND	A.PRODUCTDEFID = #{PRODUCTDEFID}
    AND	A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </select>   
    
    <select id="GetInvalidProductquotationsegment" parameterType="map"  resultType="hashmap">
	SELECT 	/* "smh.osm.dao.OSM00100Dao.GetInvalidProductquotationsegment"  */
		 	PRQ.PRODUCTDEFID
		,	PRQ.PRODUCTDEFVERSION
		,	PRQ.PROCESSDEFID
		,	PRQ.PROCESSDEFVERSION
		,	PRQ.PROCESSSEGMENTID
		,	PRQ.PROCESSSEGMENTVERSION
		,	PRQ.VARIABLECOST
		,	PRQ.FIXEDCOST
		,	PRQ.MATERIALCOST
		,	PRQ.MATERIALPROCESSCOST
		,	PRQ.BOXCOST
		,	PRQ.MOLDCOST
		,	PRQ.SAMPLECOST
		,	PRQ.MANUFACTURINGOVERHEAD
		,	PRQ.GENERALCOST
		,	PRQ.ETCCOST
		,	PRQ.DEFECTAMOUNT
		,	PRQ.AMOUNT
		,	PRQ.PCSAMOUNT
		,	PRQ.CUMULATIVEAMOUNT
		,	PRQ.CUMULATIVERATE
		,	PRQ.CUMULATIVEPCSAMOUNT
		,	PRQ.ENTERPRISEID
		,	PRQ.DESCRIPTION 
		,	PRQ.ENTERPRISEID 
		,	PRQ.PLANTID 
	FROM	BAS_PRODUCTQUOTATIONSEGMENT  PRQ     
	WHERE	PRQ.VALIDSTATE           = 'Valid'
	AND		PRQ.PRODUCTDEFID         = #{PRODUCTDEFID}
	AND		PRQ.PRODUCTDEFVERSION    = #{PRODUCTDEFVERSION}
	AND		PRQ.PROCESSDEFID         = #{PROCESSDEFID}
	AND		PRQ.PROCESSDEFVERSION    = #{PROCESSDEFVERSION} 
    </select>   

    <!-- 화폐단위조회-->
    <select id="selectGetUomDefinitionListByOsp" parameterType="map" resultType="hashmap">
	SELECT
			UI.UOMDEFID
		,	UI.UOMDEFNAME
	FROM	BAS_UOMDEFINITION	UI	
	WHERE	1 = 1
	AND		UI.UOMTYPE   = #{UOMTYPE}
	AND		UI.VALIDSTATE = 'Valid'
    </select>   
    
    <select id="selectGetOutsourcedClaimBaseAmount" parameterType="map"  resultType="hashmap">
	SELECT 	/* "smh.osm.dao.OSM00100Dao.GetOutsourcedClaimBaseAmount"  */
		 	PRD.PRODUCTDEFID
		,	PRD.PRODUCTDEFVERSION
		,	PRD.PROCESSDEFID
		,	PRD.PROCESSDEFVERSION
		,	PRH.PROCESSSEGMENTID 
		,	PRH.PROCESSSEGMENTVERSION
		,	DIC.DICTIONARYNAME  AS        PROCESSSEGMENTNAME 
		,	ROUND(NVL(PRQ.VARIABLECOST,0) / #{EXCHANGE_RATE}) AS VARIABLECOST
		,	ROUND(NVL(PRQ.FIXEDCOST,0) / #{EXCHANGE_RATE}) AS FIXEDCOST
		,	ROUND(NVL(PRQ.MATERIALCOST,0) / #{EXCHANGE_RATE}) AS MATERIALCOST
		,	ROUND(NVL(PRQ.MATERIALPROCESSCOST,0) / #{EXCHANGE_RATE}) AS MATERIALPROCESSCOST
		,	ROUND(NVL(PRQ.BOXCOST,0) / #{EXCHANGE_RATE}) AS BOXCOST
		,	ROUND(NVL(PRQ.MOLDCOST,0) / #{EXCHANGE_RATE}) AS MOLDCOST
		,	ROUND(NVL(PRQ.SAMPLECOST,0) / #{EXCHANGE_RATE}) AS SAMPLECOST
		,	ROUND(NVL(PRQ.MANUFACTURINGOVERHEAD,0) / #{EXCHANGE_RATE}) AS MANUFACTURINGOVERHEAD
		,	ROUND(NVL(PRQ.GENERALCOST,0) / #{EXCHANGE_RATE}) AS GENERALCOST
		,	ROUND(NVL(PRQ.ETCCOST,0) / #{EXCHANGE_RATE}) AS ETCCOST
		,	ROUND(NVL(PRQ.DEFECTAMOUNT,0) / #{EXCHANGE_RATE}) AS DEFECTAMOUNT
		,	ROUND(NVL(PRQ.AMOUNT,0) / #{EXCHANGE_RATE}) AS AMOUNT
		,	ROUND(NVL(PRQ.PCSAMOUNT,0) / #{EXCHANGE_RATE}) AS PCSAMOUNT
		,	ROUND(NVL(PRQ.CUMULATIVEAMOUNT,0) / #{EXCHANGE_RATE}) AS CUMULATIVEAMOUNT
		,	PRQ.CUMULATIVERATE
		,	ROUND(NVL(PRQ.CUMULATIVEPCSAMOUNT,0) / #{EXCHANGE_RATE}) AS CUMULATIVEPCSAMOUNT
		,	PRQ.ENTERPRISEID
		,	PRQ.DESCRIPTION 
		,	PRH.PATHSEQUENCE
		,	''   AS PLANTID
		,	PRA.CURRENCYUNIT
		,	PRA.DEFECTAMOUNT                    AS DEFECTAMOUNTTOT
		,	PRA.BOXCOST							AS BOXCOSTTOT
		,	PRA.MOLDCOST						AS MOLDCOSTTOT
		,	PRA.SAMPLECOST						AS SAMPLECOSTTOT
		,	PRA.MANUFACTURINGOVERHEAD			AS MANUFACTURINGOVERHEADTOT
		,   PRA.GENERALCOST						AS GENERALCOSTTOT
		,	PRA.ETCCOST							AS ETCCOSTTOT
	FROM            BAS_PRODUCTDEFINITION        PRD                                
	INNER      JOIN BAS_PROCESSPATH              PRH   ON    PRH.PROCESSDEFID          = PRD.PROCESSDEFID
	                                                  AND   PRH.PROCESSDEFVERSION     = PRD.PROCESSDEFVERSION
	                                                  AND   PRH.VALIDSTATE            = 'Valid'
	INNER      JOIN BAS_PROCESSSEGMENT           PRS   ON    PRS.PROCESSSEGMENTID      = PRH.PROCESSSEGMENTID
	                                                  AND   PRS.PROCESSSEGMENTVERSION = PRH.PROCESSSEGMENTVERSION
	LEFT OUTER JOIN CMD_DICTIONARY            	DIC	  ON	DIC.DICTIONARYID          = PRS.PROCESSSEGMENTNAME
										              AND	DIC.LANGUAGETYPE          = #{SESSION_LANGUAGETYPE}  
	LEFT OUTER JOIN BAS_PRODUCTQUOTATIONSEGMENT  PRQ   ON    PRQ.PRODUCTDEFID          = PRD.PRODUCTDEFID
	                                                  AND   PRQ.PRODUCTDEFVERSION     = PRD.PRODUCTDEFVERSION
	                                                  AND   PRQ.PROCESSDEFID          = PRH.PROCESSDEFID
	                                                  AND   PRQ.PROCESSDEFVERSION     = PRH.PROCESSDEFVERSION
	                                                  AND   PRQ.PROCESSSEGMENTID      = PRH.PROCESSSEGMENTID
	                                                  AND   PRQ.PROCESSSEGMENTVERSION = PRH.PROCESSSEGMENTVERSION
	                                                  AND   PRQ.VALIDSTATE            = 'Valid'
  	LEFT OUTER JOIN BAS_PRODUCTQUOTATION      	PRA	  ON    PRA.PRODUCTDEFID          = PRD.PRODUCTDEFID  -- 제품견적정보
	                                                  AND   PRA.PRODUCTDEFVERSION     = PRD.PRODUCTDEFVERSION
                                                               AND   PRA.PROCESSDEFID          = PRD.PROCESSDEFID
	                                                  AND   PRA.PROCESSDEFVERSION     = PRD.PROCESSDEFVERSION
	WHERE	PRD.VALIDSTATE           = 'Valid'
	AND		PRD.PRODUCTDEFID         = #{PRODUCTDEFID}
	AND		PRD.PRODUCTDEFVERSION    = #{PRODUCTDEFVERSION}
	AND		PRD.PROCESSDEFID         = #{PROCESSDEFID}
	AND		PRD.PROCESSDEFVERSION    = #{PROCESSDEFVERSION}
	AND     decode(#{EXCHANGE_RATE},null,0,0,0,1) = 1
	ORDER BY PRH.PATHSEQUENCE
    </select>  
    
    <select id="selectBasProductquotation" parameterType="map" resultType="hashmap">
    SELECT 
        A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.PROCESSDEFID	 
        ,A.PROCESSDEFVERSION	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.CURRENCYUNIT	 
        ,A.DEFECTAMOUNT	 
        ,A.BOXCOST	 
        ,A.MOLDCOST	 
        ,A.SAMPLECOST	 
        ,A.MANUFACTURINGOVERHEAD	 
        ,A.GENERALCOST	 
        ,A.ETCCOST	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
    FROM	BAS_PRODUCTQUOTATION A 
    WHERE A.PROCESSDEFID = #{PROCESSDEFID}
    AND	A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND	A.PRODUCTDEFID = #{PRODUCTDEFID}
    AND	A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </select>
    
    <select id="selectBasProductquotationsegment" parameterType="map" resultType="hashmap">
    SELECT 
        A.PRODUCTDEFID	 
        ,A.PRODUCTDEFVERSION	 
        ,A.PROCESSDEFID	 
        ,A.PROCESSDEFVERSION	 
        ,A.PROCESSSEGMENTID	 
        ,A.PROCESSSEGMENTVERSION	 
        ,A.ENTERPRISEID	 
        ,A.PLANTID	 
        ,A.VARIABLECOST	 
        ,A.FIXEDCOST	 
        ,A.MATERIALCOST	 
        ,A.MATERIALPROCESSCOST	 
        ,A.BOXCOST	 
        ,A.MOLDCOST	 
        ,A.SAMPLECOST	 
        ,A.MANUFACTURINGOVERHEAD	 
        ,A.GENERALCOST	 
        ,A.ETCCOST	 
        ,A.DEFECTAMOUNT	 
        ,A.AMOUNT	 
        ,A.PCSAMOUNT	 
        ,A.CUMULATIVEAMOUNT	 
        ,A.CUMULATIVERATE	 
        ,A.CUMULATIVEPCSAMOUNT	 
        ,A.DESCRIPTION	 
        ,A.CREATOR	 
        ,A.CREATEDTIME	 
        ,A.MODIFIER	 
        ,A.MODIFIEDTIME	 
        ,A.LASTTXNHISTKEY	 
        ,A.LASTTXNID	 
        ,A.LASTTXNUSER	 
        ,A.LASTTXNTIME	 
        ,A.LASTTXNCOMMENT	 
        ,A.VALIDSTATE	 
    FROM	BAS_PRODUCTQUOTATIONSEGMENT A 
    WHERE A.PROCESSDEFID = #{PROCESSDEFID}
    AND	A.PROCESSDEFVERSION = #{PROCESSDEFVERSION}
    AND	A.PROCESSSEGMENTID = #{PROCESSSEGMENTID}
    AND	A.PROCESSSEGMENTVERSION = #{PROCESSSEGMENTVERSION}
    AND	A.PRODUCTDEFID = #{PRODUCTDEFID}
    AND	A.PRODUCTDEFVERSION = #{PRODUCTDEFVERSION}
    </select>         				    
</mapper>
