<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="10 seconds">

    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>

    <conversionRule conversionWord="txId" converterClass="com.nbdf.commons.util.NbdfQosTxIdLogConverter" />
    <conversionRule conversionWord="txIp" converterClass="com.nbdf.commons.util.NbdfQosTxIpLogConverter" />
    <conversionRule conversionWord="txReqId" converterClass="com.nbdf.commons.util.NbdfQosTxReqIdLogConverter" />
    <conversionRule conversionWord="txTime" converterClass="com.nbdf.commons.util.NbdfQosTxTimeLogConverter" />
    <conversionRule conversionWord="txLogId" converterClass="com.nbdf.commons.util.NbdfQosLogConverter" />

    <jmxConfigurator />

    <property name="LOG_PATH" value="/lmsdata/data/logback/applog/nbdf" />
    <property name="LOG_FILE" value="nbdf-app.log" />
    <property name="ERR_LOG_FILE" value="nbdf-app-err.log" />
    <property name="SQL_LOG_FILE" value="nbdf-sql.log" />

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <maxHistory>15</maxHistory>
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}-%d{yyyy-MM-dd}-.zip</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[%-5p] %d{HH:mm:ss.SSS} [%txId] %txIp %txReqId \(%F:%L\)-#%M\(\) - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
           <evaluator>
                <expression>return message.contains("com.nbdf.batch");</expression>
           </evaluator>
           <OnMismatch>NEUTRAL</OnMismatch>
           <OnMatch>DENY</OnMatch>
        </filter>
    </appender>

     <appender name="ERR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${ERR_LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE}-%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <maxHistory>10</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
            <maxFileSize>500MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[%-5p] %d{HH:mm:ss.SSS} [%txId] %txIp %txReqId \(%F:%L\)-#%M\(\) - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <OnMismatch>DENY</OnMismatch>
           <OnMatch>ACCEPT</OnMatch>
        </filter>
    </appender>

     <appender name="SQL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${SQL_LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${SQL_LOG_FILE}-%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <maxHistory>10</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
            <maxFileSize>500MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[%-5p] %d{HH:mm:ss.SSS} [%txId] %txIp %txReqId \(%F:%L\)-#%M\(\) - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <OnMismatch>DENY</OnMismatch>
           <OnMatch>ACCEPT</OnMatch>
        </filter>
    </appender>

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%-5p] %d{HH:mm:ss.SSS} %txLogId \(%F:%L\)-#%M\(\) - \n%msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
           <evaluator>
                <expression>return message.contains("com.nbdf.batch");</expression>
           </evaluator>
           <OnMismatch>NEUTRAL</OnMismatch>
           <OnMatch>DENY</OnMatch>
        </filter>
    </appender>
<!--    
	<logger name="jdbc.sqlonly" level="DEBUG" additivity="false">>
	  <appender-ref ref="console" />
	</logger>  
-->
    <logger name="nbdf">
        <appender-ref ref="FILE" />
        <level value="DEBUG" />
    </logger>
    <logger name="com.nbdf.SPRING_MONITOR">
        <appender-ref ref="FILE" />
        <level value="TRACE" />
    </logger>
<!-- 
    <logger name="com.nbdf.commons.interceptor.MybatisQueryInterceptor">
        <appender-ref ref="FILE" />
        <level value="TRACE" />
    </logger>

    <logger name="com.nbdf.commons.interceptor.MybatisUpdateInterceptor">
        <appender-ref ref="FILE" />
        <level value="TRACE" />
    </logger>
-->
    <logger name="jdbc.sqltiming">
        <appender-ref ref="FILE" />
        <level value="DEBUG" />
    </logger>
    <logger name="jdbc.sqlonly">
        <appender-ref ref="SQL_FILE" />
        <level value="TRACE" />
    </logger>

    <root level="ERROR">
        <appender-ref ref="ERR_FILE" />
        <appender-ref ref="console" />
    </root>
</configuration>